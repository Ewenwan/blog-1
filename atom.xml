<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦魇小栈</title>
  
  <subtitle>专注于分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.ihoey.com/"/>
  <updated>2017-11-24T11:20:41.754Z</updated>
  <id>https://blog.ihoey.com/</id>
  
  <author>
    <name>Ihoey</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>笔记：NPM版本号自增，自动化发布NPM包</title>
    <link href="https://blog.ihoey.com/posts/Node/2017-11-24-npm-version.html"/>
    <id>https://blog.ihoey.com/posts/Node/2017-11-24-npm-version.html</id>
    <published>2017-11-24T11:08:43.000Z</published>
    <updated>2017-11-24T11:20:41.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提升一个包的版本号"><a href="#提升一个包的版本号" class="headerlink" title="提升一个包的版本号"></a>提升一个包的版本号</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]</div></pre></td></tr></table></figure><p><code>Description</code> 在一个包的目录下执行此命令，会提升版本号，并把这个新的版本号写进<code>package.json</code>文件，如果存在<code>npm-shrinkwrap.json</code>，也会写进去。<br>参数 <code>newversion</code> 应该是一个有效的semver字符串, 或者是<code>pathch</code>, <code>minor</code>, <code>major</code>等,<code>semver.inc</code>中定义的任意一个有效的。<br><code>major</code>： 版本号中第一段数字自增1 <code>minor</code>: 版本号中第一段数字自增1 <code>patch</code>: 版本号中第三段数字自增1<br>如果<code>package.json</code>中的<code>scripts</code>包含<code>version</code>,<code>preversion</code>,<code>postversion</code>，他们将作为<code>npm version</code>的一部分被执行。</p><p>可以将此放入到npm script流中，自动化构建！</p><h2 id="npm-不常用的命令"><a href="#npm-不常用的命令" class="headerlink" title="npm 不常用的命令"></a>npm 不常用的命令</h2><p><code>npm view</code> 包名 <code>version</code> 相看某个包的最新版本号<br><code>npm ls</code> 列出当前安装的所有包<br><code>npm root</code> 查看当前包的安装路径<br><code>npm root -g</code> 查看全局包的安装路径<br><code>npm config ls</code> 查看 <code>npm</code> 当前配置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;提升一个包的版本号&quot;&gt;&lt;a href=&quot;#提升一个包的版本号&quot; class=&quot;headerlink&quot; title=&quot;提升一个包的版本号&quot;&gt;&lt;/a&gt;提升一个包的版本号&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="Node" scheme="https://blog.ihoey.com/categories/Node/"/>
    
    
      <category term="Node" scheme="https://blog.ihoey.com/tags/Node/"/>
    
      <category term="NodeJs" scheme="https://blog.ihoey.com/tags/NodeJs/"/>
    
      <category term="npm" scheme="https://blog.ihoey.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>不可不知的Mac OS X专用命令行工具(持续更新中)</title>
    <link href="https://blog.ihoey.com/posts/uncategorized/2017-11-21-Mac-OS-X-command-line-tool.html"/>
    <id>https://blog.ihoey.com/posts/uncategorized/2017-11-21-Mac-OS-X-command-line-tool.html</id>
    <published>2017-11-21T05:45:05.000Z</published>
    <updated>2017-11-24T11:23:57.320Z</updated>
    
    <content type="html"><![CDATA[<p><code>OS X</code> 的终端下通用很多 <code>Unix</code> 的工具和脚本。如果从 <code>Linux</code> 迁移到 <code>OS X</code> 会发现很多熟悉的命令和脚本工具，其实并没有任何区别。</p><p>但是 <code>OS X</code> 也提供了很多其他系统所没有的特别的命令行工具。我们推荐 <code>8</code> 个这类的工具，希望有助于提高在 <code>Mac</code> 的命令行环境下的效率。</p><h1 id="open"><a href="#open" class="headerlink" title="open"></a>open</h1><p><code>open</code> 命令用于打开文件、目录或执行程序。就等同于在命令行模式下，重复图形界面“双击”的动作。例如这个命令与在 <code>Finder</code> 中双击 <code>Safari</code> 是一样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`open /Applications/Safari.app/`</div></pre></td></tr></table></figure><p>如果 <code>open</code> 一个文件，则会使用关联的程序打开之。例如 <code>open screenshot.png</code> 会在 <code>Preview</code> 中查看图片。</p><p>可以使用 <code>-a</code> 选项要求自行选择打开的程序，或使用 <code>-e</code> 强制在 <code>TextEdit</code> 中编辑此文件。</p><p><code>open</code> 一个目录会在 <code>Finder</code> 窗口中打开此目录。一个很有用的技巧是 <code>open .</code> 打开当前目录。</p><p><code>Finder</code> 和终端的交互是双向的——把文件从 <code>Finder</code> 中拖入终端，就等同于把文件的完整路径粘贴到命令行中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;OS X&lt;/code&gt; 的终端下通用很多 &lt;code&gt;Unix&lt;/code&gt; 的工具和脚本。如果从 &lt;code&gt;Linux&lt;/code&gt; 迁移到 &lt;code&gt;OS X&lt;/code&gt; 会发现很多熟悉的命令和脚本工具，其实并没有任何区别。&lt;/p&gt;
&lt;p&gt;但是 &lt;co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>继多说、网易关停之后该何去何从(网易云跟帖宣布2017年8月1日停止服务)</title>
    <link href="https://blog.ihoey.com/posts/Linux/2017-07-06-comment_ru_he_xuan_ze.html"/>
    <id>https://blog.ihoey.com/posts/Linux/2017-07-06-comment_ru_he_xuan_ze.html</id>
    <published>2017-07-06T10:51:21.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://oisha19l0.qnssl.com/IHOEY_20170706_184907.png" alt="comment_ihoey"><br>继多说（多说关闭想必大家都已经知道了）关闭之后，很多人包括我，都转移到了网易云跟帖，现在网易云跟帖也正式发出公告宣布于2017年8月1日停止服务。</p><a id="more"></a><p>在多说关闭之后，使用网易云跟帖的站点非常多，昨日宣布停止服务，小编也感到很意外。官方在QQ群内通知并没有说明具体原因，或许还是评论服务的老话题——盈利！</p><p>并且QQ群管理称涉及网易自身评论，开源几乎不大！</p><p>这是提前在官方群得到的通知！<br><img src="https://oisha19l0.qnssl.com/IHOEY_20170706_171445.png" alt="comment_ihoey"></p><p>多说刚挂了两个月，跟帖也跟着去了，刚做的提醒小功能都还没怎么用，好伤心，不知道小伙伴下一步都选择什么呢？有好用的推荐一下啊！<br><img src="https://oisha19l0.qnssl.com/IHOEY_20170706_171444.png" alt="comment_ihoey"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://oisha19l0.qnssl.com/IHOEY_20170706_184907.png&quot; alt=&quot;comment_ihoey&quot;&gt;&lt;br&gt;继多说（多说关闭想必大家都已经知道了）关闭之后，很多人包括我，都转移到了网易云跟帖，现在网易云跟帖也正式发出公告宣布于2017年8月1日停止服务。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.ihoey.com/categories/Linux/"/>
    
    
      <category term="comment" scheme="https://blog.ihoey.com/tags/comment/"/>
    
  </entry>
  
  <entry>
    <title>重新介绍 JavaScript（JS全面系列教程）</title>
    <link href="https://blog.ihoey.com/posts/javascript/2017-07-03-A_re-introduction_to_JavaScript.html"/>
    <id>https://blog.ihoey.com/posts/javascript/2017-07-03-A_re-introduction_to_JavaScript.html</id>
    <published>2017-07-03T10:51:21.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>为什么会有这一篇“重新介绍”呢？因为 <code>JavaScript</code> 堪称世界上被人误解最深的编程语言。虽然常被嘲为“玩具语言”，但在它看似简洁的外衣下，还隐藏着强大的语言特性。 <code>JavaScript</code> 目前广泛应用于众多知名应用中，对于网页和移动开发者来说，深入理解 <code>JavaScript</code> 就尤有必要。</p><a id="more"></a><p>先从这门语言的历史谈起是有必要的。在<code>1995</code> 年 <code>Netscape</code> 一位名为 Brendan Eich 的工程师创造了 <code>JavaScript</code>，随后在 <code>1996</code> 年初，<code>JavaScript</code> 首先被应用于 <code>Netscape</code> 2 浏览器上。最初的 <code>JavaScript</code> 名为 <code>LiveScript</code>，后来因为 <code>Sun Microsystem</code> 的 <code>Java</code> 语言的兴起和广泛使用，<code>Netscape</code> 出于宣传和推广的考虑，将它的名字从最初的 LiveScript 更改为 <code>JavaScript</code>——尽管两者之间并没有什么共同点。这便是之后混淆产生的根源。</p><p>几个月后，<code>Microsoft</code> 随着 <code>IE 3</code> 推出了一个与之基本兼容的语言 <code>JScript</code>。又几个月后，<code>Netscape</code> 将 <code>JavaScript</code> 提交至 <code>Ecma International</code>（一个欧洲标准化组织）， <code>ECMAScript</code> 标准第一版便在 <code>1997</code> 年诞生了，随后在 <code>1999</code> 年以 <code>ECMAScript</code> 第三版的形式进行了更新，从那之后这个标准没有发生过大的改动。由于委员会在语言特性的讨论上发生分歧，<code>ECMAScript</code> 第四版尚未推出便被废除，但随后于 <code>2009</code> 年 <code>12</code> 月发布的 <code>ECMAScript</code> 第五版引入了第四版草案加入的许多特性。第六版标准已经于<code>2015</code>年六月发布。</p><p>注意： 为熟悉起见，从这里开始我们将用 “<code>JavaScript</code>” 替代 <code>ECMAScript</code> 。<br>与大多数编程语言不同，<code>JavaScript</code> 没有输入或输出的概念。它是一个在宿主环境（<code>host environment</code>）下运行的脚本语言，任何与外界沟通的机制都是由宿主环境提供的。浏览器是最常见的宿主环境，但在非常多的其他程序中也包含 <code>JavaScript</code> 解释器，如 <code>Adobe Acrobat</code>、<code>Photoshop</code>、<code>SVG</code> 图像、<code>Yahoo!</code> 的 <code>Widget</code> 引擎，以及 <code>Node.js</code> 之类的服务器端环境。<code>JavaScript</code> 的实际应用远不止这些，除此之外还有 <code>NoSQL</code> 数据库（如开源的 <code>Apache CouchDB</code>）、嵌入式计算机，以及包括 <code>GNOME</code> （注：<code>GNU/Linux</code> 上最流行的 <code>GUI</code> 之一）在内的桌面环境等等。</p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p><code>JavaScript</code> 是一种面向对象的动态语言，它包含类型、运算符、标准内置（ <code>built-in</code>）对象和方法。它的语法来源于 <code>Java</code> 和 <code>C</code>，所以这两种语言的许多语法特性同样适用于 <code>JavaScript</code>。需要注意的一个主要区别是 <code>JavaScript</code> 不支持类，类这一概念在 <code>JavaScript</code> 通过对象原型（<code>object prototype</code>）得到延续（有关 <code>ES6</code> 类的内容参考这里<code>Classes</code>）。另一个主要区别是 <code>JavaScript</code> 中的函数也是对象，<code>JavaScript</code> 允许函数在包含可执行代码的同时，能像其他对象一样被传递。</p><p>先从任何编程语言都不可缺少的组成部分——“类型”开始。<code>JavaScript</code> 程序可以修改值（<code>value</code>），这些值都有各自的类型。<code>JavaScript</code> 中的类型包括：</p><ul><li><code>Number</code>（数字）</li><li><code>String</code>（字符串）</li><li><code>Boolean</code>（布尔）</li><li><code>Function</code>（函数）</li><li><code>Object</code>（对象）</li><li><code>Symbol</code> (第六版新增)</li></ul><p>…哦，还有看上去有些…奇怪的 <code>undefined</code>（未定义）类型和 <code>null</code>（空）类型。此外还有<code>Array</code>（数组）类型，以及分别用于表示日期和正则表达式的 <code>Date</code>（日期）和 <code>RegExp</code>（正则表达式），这三种类型都是特殊的对象。严格意义上说，<code>Function</code>（函数）也是一种特殊的对象。所以准确来说，<code>JavaScript</code> 中的类型应该包括这些：</p><ul><li><code>Number</code>（数字）</li><li><code>String</code>（字符串）</li><li><code>Boolean</code>（布尔）</li><li><code>Symbol</code>（符号）（第六版新增）</li><li><code>Object</code>（对象）</li><li><code>Function</code>（函数）</li><li><code>Array</code>（数组）</li><li><code>Date</code>（日期）</li><li><code>RegExp</code>（正则表达式）</li><li><code>Null</code>（空）</li><li><code>Undefined</code>（未定义）</li><li><code>JavaScript</code> 还有一种内置<code>Error</code>（错误）类型，这个会在之后的介绍中提到；现在我们先讨论下上面这些类型。</li></ul><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>根据语言规范，<code>JavaScript</code> 采用“<code>IEEE 754</code> 标准定义的双精度<code>64</code>位格式”（”<code>double-precision 64-bit format IEEE 754 values</code>“）表示数字。据此我们能得到一个有趣的结论，和其他编程语言（如 <code>C</code> 和 <code>Java</code>）不同，<code>JavaScript</code> 不区分整数值和浮点数值，所有数字在 <code>JavaScript</code> 中均用浮点数值表示，所以在进行数字运算的时候要特别注意。看看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> = <span class="number">0.30000000000000004</span></div></pre></td></tr></table></figure><p>在具体实现时，整数值通常被视为<code>32</code>位整型变量，在个别实现（如某些浏览器）中也以<code>32</code>位整型变量的形式进行存储，直到它被用于执行某些<code>32</code>位整型不支持的操作，这是为了便于进行位操作。</p><p><code>JavaScript</code> 支持标准的算术运算符，包括加法、减法、取模（或取余）等等。还有一个之前没有提及的内置对象 <code>Math</code>（数学对象），用以处理更多的高级数学函数和常数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.sin(<span class="number">3.5</span>);</div><div class="line"><span class="keyword">var</span> d = <span class="built_in">Math</span>.PI * (r + r);</div></pre></td></tr></table></figure><p>你可以使用内置函数 <code>parseInt()</code> 将字符串转换为整型。该函数的第二个参数表示字符串所表示数字的基（进制）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">"123"</span>, <span class="number">10</span>); <span class="comment">// 123</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"010"</span>, <span class="number">10</span>); <span class="comment">//10</span></div></pre></td></tr></table></figure><p>如果调用时没有提供第二个参数（字符串所表示数字的基），<code>2013</code> 年以前的 <code>JavaScript</code> 实现会返回一个意外的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">"010"</span>);  <span class="comment">//  8</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"0x10"</span>); <span class="comment">// 16</span></div></pre></td></tr></table></figure><p>这是因为字符串以数字 <code>0</code> 开头，<code>parseInt()</code>函数会把这样的字符串视作八进制数字；同理，<code>0x</code>开头的字符串则视为十六进制数字。</p><p>如果想把一个二进制数字字符串转换成整数值，只要把第二个参数设置为 <code>2</code> 就可以了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">"11"</span>, <span class="number">2</span>); <span class="comment">// 3</span></div></pre></td></tr></table></figure><p><code>JavaScript</code> 还有一个类似的内置函数 <code>parseFloat()</code>，用以解析浮点数字符串，与 <code>parseInt()</code> 不同的地方是，<code>parseFloat()</code>只应用于解析十进制数字。</p><p>单元运算符 + 也可以把数字字符串转换成数值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ <span class="string">"42"</span>;   <span class="comment">// 42</span></div><div class="line">+ <span class="string">"010"</span>;  <span class="comment">// 10</span></div><div class="line">+ <span class="string">"0x10"</span>; <span class="comment">// 16</span></div></pre></td></tr></table></figure><p>如果给定的字符串不存在数值形式，函数会返回一个特殊的值 <code>NaN</code>（<code>Not a Number</code> 的缩写）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">"hello"</span>, <span class="number">10</span>); <span class="comment">// NaN</span></div></pre></td></tr></table></figure><p>要小心<code>NaN</code>：如果把 <code>NaN</code> 作为参数进行任何数学运算，结果也会是 <code>NaN</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">NaN</span> + <span class="number">5</span>; <span class="comment">//NaN</span></div></pre></td></tr></table></figure><p>可以使用内置函数 <code>isNaN()</code> 来判断一个变量是否为 <code>NaN</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure><p><code>JavaScript</code> 还有两个特殊值：<code>Infinity</code>（正无穷）和 <code>-Infinity</code>（负无穷）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> / <span class="number">0</span>; <span class="comment">//  Infinity</span></div><div class="line"><span class="number">-1</span> / <span class="number">0</span>; <span class="comment">// -Infinity</span></div></pre></td></tr></table></figure><p>可以使用内置函数 <code>isFinite()</code> 来判断一个变量是否是一个有穷数， 如果类型为 <code>Infinity</code>, <code>-Infinity</code> 或 <code>NaN</code>则返回<code>false</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">isFinite</span>(<span class="number">1</span>/<span class="number">0</span>); <span class="comment">// false</span></div><div class="line"><span class="built_in">isFinite</span>(<span class="literal">Infinity</span>); <span class="comment">// false</span></div><div class="line"><span class="built_in">isFinite</span>(<span class="literal">NaN</span>); <span class="comment">// false</span></div><div class="line"><span class="built_in">isFinite</span>(-<span class="literal">Infinity</span>); <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="built_in">isFinite</span>(<span class="number">0</span>); <span class="comment">// true</span></div><div class="line"><span class="built_in">isFinite</span>(<span class="number">2e64</span>); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="built_in">isFinite</span>(<span class="string">"0"</span>); <span class="comment">// true,如果是纯数值类型的检测，则返回false：Number.isFinite("0");</span></div></pre></td></tr></table></figure><p>备注： <code>parseInt()</code> 和 <code>parseFloat()</code> 函数会尝试逐个解析字符串中的字符，直到遇上一个无法被解析成数字的字符，然后返回该字符前所有数字字符组成的数字。使用运算符 “<code>+</code>“ 将字符串转换成数字，只要字符串中含有无法被解析成数字的字符，该字符串都将被转换成 <code>NaN</code>。请你用这两种方法分别解析“<code>10.2abc</code>”这一字符串，比较得到的结果，理解这两种方法的区别。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><code>JavaScript</code> 中的字符串是一串<code>Unicode</code> 字符序列。这对于那些需要和多语种网页打交道的开发者来说是个好消息。更准确地说，它们是一串<code>UTF-16</code>编码单元的序列，每一个编码单元由一个 <code>16</code> 位二进制数表示。每一个<code>Unicode</code>字符由一个或两个编码单元来表示。</p><p>如果想表示一个单独的字符，只需使用长度为 <code>1</code> 的字符串。</p><p>通过访问字符串的长度（编码单元的个数）属性可以得到它的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"hello"</span>.length; <span class="comment">// 5</span></div></pre></td></tr></table></figure><p>这是我们第一次碰到 <code>JavaScript</code> 对象。我们有没有提过你可以像 <code>objects</code>  一样使用字符串？是的，字符串也有 <code>methods</code>（方法）能让你操作字符串和获取字符串的信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"hello"</span>.charAt(<span class="number">0</span>); <span class="comment">// "h"</span></div><div class="line"><span class="string">"hello, world"</span>.replace(<span class="string">"hello"</span>, <span class="string">"goodbye"</span>); <span class="comment">// "goodbye, world"</span></div><div class="line"><span class="string">"hello"</span>.toUpperCase(); <span class="comment">// "HELLO"</span></div></pre></td></tr></table></figure><h2 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h2><p><code>JavaScript</code> 中 <code>null</code> 和 <code>undefined</code> 是不同的，前者表示一个空值（<code>non-value</code>），必须使用<code>null</code>关键字才能访问，后者是“<code>undefined</code>（未定义）”类型的对象，表示一个未初始化的值，也就是还没有被分配的值。我们之后再具体讨论变量，但有一点可以先简单说明一下，<code>JavaScript</code> 允许声明变量但不对其赋值，一个未被赋值的变量就是 <code>undefined</code> 类型。还有一点需要说明的是，<code>undefined</code> 实际上是一个不允许修改的常量。</p><p><code>JavaScript</code> 包含布尔类型，这个类型的变量有两个可能的值，分别是 <code>true</code> 和 <code>false</code>（两者都是关键字）。根据具体需要，<code>JavaScript</code> 按照如下规则将变量转换成布尔类型：</p><p><code>false</code>、<code>0</code>、空字符串(“”)、<code>NaN</code>、<code>null</code> 和 <code>undefined</code> 被转换为 <code>false</code><br>所有其他值被转换为 <code>true</code><br>也可以使用 <code>Boolean()</code> 函数进行显式转换：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Boolean</span>(<span class="string">""</span>); <span class="comment">// false</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="number">234</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure><p>不过一般没必要这么做，因为 <code>JavaScript</code> 会在需要一个布尔变量时隐式完成这个转换操作（比如在 <code>if</code> 条件语句中）。所以，有时我们可以把转换成布尔值后的变量分别称为 真值（<code>true values</code>）——即值为 <code>true</code>  和 假值（<code>false values</code>）——即值为 <code>false</code>；也可以分别称为“真的”（<code>truthy</code>）和“假的”（<code>falsy</code>）。</p><p><code>JavaScript</code> 支持包括 <code>&amp;&amp;</code>（逻辑与）、<code>||</code> （逻辑或）和 <code>!</code>（逻辑非）在内的逻辑运算符。下面会有所提到。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在 <code>JavaScript</code> 中声明一个新变量的方法是使用关键字 <code>var</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a;</div><div class="line"><span class="keyword">var</span> name = <span class="string">"simon"</span>;</div></pre></td></tr></table></figure><p>如果声明了一个变量却没有对其赋值，那么这个变量的类型就是 <code>undefined</code>。</p><p><code>JavaScript</code> 与其他语言的（如 <code>Java</code>）的重要区别是在 <code>JavaScript</code> 中语句块（<code>blocks</code>）是没有作用域的，只有函数有作用域。因此如果在一个复合语句中（如 <code>if</code> 控制结构中）使用 <code>var</code> 声明一个变量，那么它的作用域是整个函数（复合语句在函数中）。 但是从 <code>ECMAScript</code> <code>Edition 6</code> 开始将有所不同的， <code>let</code> 和 <code>const</code> 关键字允许你创建块作用域的变量。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><code>JavaScript</code>的算术操作符包括 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 和 <code>%</code> ——求余（与模运算不同）。赋值使用 <code>=</code> 运算符，此外还有一些复合运算符，如 <code>+=</code> 和 <code>-=</code>，它们等价于 <code>x = x op y</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x += <span class="number">5</span>; <span class="comment">// 等价于 x = x + 5;</span></div></pre></td></tr></table></figure><p>可以使用 <code>++</code> 和 <code>--</code> 分别实现变量的自增和自减。两者都可以作为前缀或后缀操作符使用。</p><ul><li>操作符还可以用来连接字符串：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"hello"</span> + <span class="string">" world"</span>; <span class="comment">// hello world</span></div></pre></td></tr></table></figure><p>如果你用一个字符串加上一个数字（或其他值），那么操作数都会被首先转换为字符串。如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"3"</span> + <span class="number">4</span> + <span class="number">5</span>; <span class="comment">// 345</span></div><div class="line"><span class="number">3</span> + <span class="number">4</span> + <span class="string">"5"</span>; <span class="comment">// 75</span></div></pre></td></tr></table></figure><p>这里不难看出一个实用的技巧——通过与空字符串相加，可以将某个变量快速转换成字符串类型。</p><p><code>JavaScript</code> 中的比较操作使用 <code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code> 和 <code>&gt;=</code>，这些运算符对于数字和字符串都通用。相等的比较稍微复杂一些。由两个“<code>=</code>（等号）”组成的相等运算符有类型自适应的功能，具体例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">123</span> == <span class="string">"123"</span> <span class="comment">// true</span></div><div class="line"><span class="number">1</span> == <span class="literal">true</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure><p>如果在比较前不需要自动类型转换，应该使用由三个“<code>=</code>（等号）”组成的相等运算符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> === <span class="literal">true</span>; <span class="comment">//false</span></div><div class="line"><span class="number">123</span> === <span class="string">"123"</span>; <span class="comment">// false</span></div></pre></td></tr></table></figure><p><code>JavaScript</code> 还支持 <code>!=</code> 和 <code>!==</code> 两种不等运算符，具体区别与两种相等运算符的区别类似。</p><p><code>JavaScript</code> 还提供了 位操作符。</p><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><p><code>JavaScript</code> 的控制结构与其他类 <code>C</code> 语言类似。可以使用 <code>if</code> 和 <code>else</code> 来定义条件语句，还可以连起来使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"kittens"</span>;</div><div class="line"><span class="keyword">if</span> (name == <span class="string">"puppies"</span>) &#123;</div><div class="line">  name += <span class="string">"!"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">"kittens"</span>) &#123;</div><div class="line">  name += <span class="string">"!!"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  name = <span class="string">"!"</span> + name;</div><div class="line">&#125;</div><div class="line">name == <span class="string">"kittens!!"</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure><p><code>JavaScript</code> 支持 <code>while</code> 循环和 <code>do-while</code>循环。前者适合常见的基本循环操作，如果需要循环体至少被执行一次则可以使用 <code>do-while</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="comment">// 一个无限循环！</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> input;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  input = get_input();</div><div class="line">&#125; <span class="keyword">while</span> (inputIsNotValid(input))</div></pre></td></tr></table></figure><p><code>JavaScript</code> 的 <code>for</code> 循环与 <code>C</code> 和 <code>Java</code> 中的相同，使用时可以在一行代码中提供控制信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="comment">// 将会执行五次</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>&amp;&amp;</code> 和 <code>||</code> 运算符使用短路逻辑（<code>short-circuit logic</code>），是否会执行第二个语句（操作数）取决于第一个操作数的结果。在需要访问某个对象的属性时，使用这个特性可以事先检测该对象是否为空：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = o &amp;&amp; o.getName();</div></pre></td></tr></table></figure><p>或运算可以用来设置默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = otherName || <span class="string">"default"</span>;</div></pre></td></tr></table></figure><p>类似地，<code>JavaScript</code> 也有一个用于条件表达式的三元操作符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> allowed = (age &gt; <span class="number">18</span>) ? <span class="string">"yes"</span> : <span class="string">"no"</span>;</div></pre></td></tr></table></figure><p>在需要多重分支时可以使用  基于一个数字或字符串的 <code>switch</code> 语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(action) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'draw'</span>:</div><div class="line">        drawIt();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'eat'</span>:</div><div class="line">        eatIt();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        doNothing();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果你不使用 <code>break</code> 语句，<code>JavaScript</code> 解释器将会执行之后 <code>case</code> 中的代码。除非是为了调试，一般你并不需要这个特性，所以大多数时候不要忘了加上 <code>break</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(a) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 继续向下</span></div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        eatIt();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        doNothing();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>default</code> 语句是可选的。<code>switch</code> 和 <code>case</code> 都可以使用需要运算才能得到结果的表达式；在 <code>switch</code> 的表达式和 <code>case</code> 的表达式是使用 <code>===</code> 严格相等运算符进行比较的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(<span class="number">1</span> + <span class="number">3</span>)&#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span> + <span class="number">2</span>:</div><div class="line">        yay();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        neverhappens();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p><code>JavaScript</code> 中的对象可以简单理解成“名称-值”对，不难联想 <code>JavaScript</code> 中的对象与下面这些概念类似：</p><ul><li><code>Python</code> 中的字典</li><li><code>Perl</code> 和 <code>Ruby</code> 中的散列（哈希）</li><li><code>C/C++</code> 中的散列表</li><li><code>Java</code> 中的 <code>HashMap</code></li><li><code>PHP</code> 中的关联数组<br>这样的数据结构设计合理，能应付各类复杂需求，所以被各类编程语言广泛采用。正因为 <code>JavaScript</code> 中的一切（除了核心类型，<code>core object</code>）都是对象，所以 <code>JavaScript</code> 程序必然与大量的散列表查找操作有着千丝万缕的联系，而散列表擅长的正是高速查找。</li></ul><p>“名称”部分是一个 <code>JavaScript</code> 字符串，“值”部分可以是任何 <code>JavaScript</code> 的数据类型——包括对象。这使用户可以根据具体需求，创建出相当复杂的数据结构。</p><p>有两种简单方法可以创建一个空对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div></pre></td></tr></table></figure><p>和：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div></pre></td></tr></table></figure><p>这两种方法在语义上是相同的。第二种更方便的方法叫作“对象字面量（<code>object literal</code>）”法。这种也是 <code>JSON</code> 格式的核心语法，一般我们优先选择第二种方法。</p><p>“对象字面量”也可以用来在对象实例中定义一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    name: <span class="string">"Carrot"</span>,</div><div class="line">    <span class="string">"for"</span>: <span class="string">"Max"</span>,</div><div class="line">    details: &#123;</div><div class="line">        color: <span class="string">"orange"</span>,</div><div class="line">        size: <span class="number">12</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对象的属性可以通过链式（<code>chain</code>）表示方法进行访问：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">obj.details.color; <span class="comment">// orange</span></div><div class="line">obj[<span class="string">"details"</span>][<span class="string">"size"</span>]; <span class="comment">// 12</span></div></pre></td></tr></table></figure><p>下面的例子创建了一个对象原型，<code>Person</code>，和这个原型的实例，<code>You</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义一个对象</span></div><div class="line"><span class="keyword">var</span> You = <span class="keyword">new</span> Person(<span class="string">"You"</span>, <span class="number">24</span>);</div><div class="line"><span class="comment">// 我们创建了一个新的 Person，名称是 "You"</span></div><div class="line"><span class="comment">// ("You" 是第一个参数, 24 是第二个参数..)</span></div></pre></td></tr></table></figure><p>完成创建后，对象属性可以通过如下两种方式进行赋值和访问：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">obj.name = <span class="string">"Simon"</span></div><div class="line"><span class="keyword">var</span> name = obj.name;</div></pre></td></tr></table></figure><p>和：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">obj[<span class="string">"name"</span>] = <span class="string">"Simon"</span>;</div><div class="line"><span class="keyword">var</span> name = obj[<span class="string">"name"</span>];</div></pre></td></tr></table></figure><p>这两种方法在语义上也是相同的。第二种方法的优点在于属性的名称被看作一个字符串，这就意味着它可以在运行时被计算，缺点在于这样的代码有可能无法在后期被解释器优化。它也可以被用来访问某些以预留关键字作为名称的属性的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">obj.for = <span class="string">"Simon"</span>; <span class="comment">// 语法错误，因为 for 是一个预留关键字</span></div><div class="line">obj[<span class="string">"for"</span>] = <span class="string">"Simon"</span>; <span class="comment">// 工作正常</span></div></pre></td></tr></table></figure><p>注意：从 <code>EcmaScript 5</code>开始，预留关键字可以作为对象的属性名（<code>reserved words may be used as object property names &quot;in the buff&quot;</code>）。 这意味着当定义对象字面量时不需要用双引号了。参见 <code>ES5 Spec</code>.<br>关于对象和原型的详情参见： <code>Object.prototype</code>.</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><code>JavaScript</code> 中的数组是一种特殊的对象。它的工作原理与普通对象类似（以数字为属性名，但只能通过<code>[]</code> 来访问），但数组还有一个特殊的属性——<code>length</code>（长度）属性。这个属性的值通常比数组最大索引大 <code>1</code>。</p><p>创建数组的传统方法是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="string">`Array`</span>();</div><div class="line">a[<span class="number">0</span>] = <span class="string">"dog"</span>;</div><div class="line">a[<span class="number">1</span>] = <span class="string">"cat"</span>;</div><div class="line">a[<span class="number">2</span>] = <span class="string">"hen"</span>;</div><div class="line">a.length; <span class="comment">// 3</span></div></pre></td></tr></table></figure><p>使用数组字面量（<code>array literal</code>）法更加方便：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"hen"</span>];</div><div class="line">a.length; <span class="comment">// 3</span></div></pre></td></tr></table></figure><p>注意，<code>Array.length</code> 并不总是等于数组中元素的个数，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"hen"</span>];</div><div class="line">a[<span class="number">100</span>] = <span class="string">"fox"</span>;</div><div class="line">a.length; <span class="comment">// 101</span></div></pre></td></tr></table></figure><p>记住：数组的长度是比数组最大索引值多一的数。</p><p>如果试图访问一个不存在的数组索引，会得到 <code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span>(a[<span class="number">90</span>]); <span class="comment">// `undefined`</span></div></pre></td></tr></table></figure><p>可以通过如下方式遍历一个数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">    <span class="comment">// Do something with a[i]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>遍历数组的另一种方法是使用 <code>for...in</code> 循环。注意，如果有人向 <code>Array.prototype</code> 添加了新的属性，使用这样的循环这些属性也同样会被遍历。所以并不推荐这种方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a) &#123;</div><div class="line">  <span class="comment">// Do something with a[i]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>ECMAScript 5</code> 增加了遍历数组的另一个方法 <code>forEach()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"hen"</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, array</span>) </span>&#123;</div><div class="line">  <span class="comment">// Do something with currentValue or array[index]</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>如果想在数组后追加元素，只需要：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a.push(item);</div></pre></td></tr></table></figure><p><code>Array</code>（数组）类自带了许多方法。查看 <code>array</code> 方法的完整文档。</p><table><thead><tr><th style="text-align:left">方法名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">a.toString()</td><td style="text-align:left">返回一个包含数组中所有元素的字符串，每个元素通过逗号分隔。</td></tr><tr><td style="text-align:left">a.toLocaleString()</td><td style="text-align:left">根据宿主环境的区域设置，返回一个包含数组中所有元素的字符串，每个元素通过逗号分隔。</td></tr><tr><td style="text-align:left">a.concat(item1[, item2[, …[, itemN]]])</td><td style="text-align:left">返回一个数组，这个数组包含原先 a 和 item1、item2、……、itemN 中的所有元素。</td></tr><tr><td style="text-align:left">a.join(sep)</td><td style="text-align:left">返回一个包含数组中所有元素的字符串，每个元素通过指定的 sep 分隔。</td></tr><tr><td style="text-align:left">a.pop()</td><td style="text-align:left">删除并返回数组中的最后一个元素。</td></tr><tr><td style="text-align:left">a.push(item1, …, itemN)</td><td style="text-align:left">将 item1、item2、……、itemN 追加至数组 a。</td></tr><tr><td style="text-align:left">a.reverse()</td><td style="text-align:left">数组逆序（会更改原数组 a）。</td></tr><tr><td style="text-align:left">a.shift()</td><td style="text-align:left">删除并返回数组中第一个元素。</td></tr><tr><td style="text-align:left">a.slice(start, end)</td><td style="text-align:left">返回子数组，以 a[start] 开头，以 a[end] 前一个元素结尾。</td></tr><tr><td style="text-align:left">a.sort([cmpfn])</td><td style="text-align:left">依据 cmpfn 返回的结果进行排序，如果未指定比较函数则按字符顺序比较（即使元素是数字）。</td></tr><tr><td style="text-align:left">a.splice(start, delcount[, item1[, …[, itemN]]])</td><td style="text-align:left">从 start 开始，删除delcount个元素，然后插入所有的</td></tr><tr><td style="text-align:left">a.unshift([item])</td><td style="text-align:left">将 item 插入数组头部，返回数组新长度（考虑 undefined）。</td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>学习 <code>JavaScript</code> 最重要的就是要理解对象和函数两个部分。最简单的函数就像下面这个这么简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> total = x + y;</div><div class="line">    <span class="keyword">return</span> total;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个例子包括你需要了解的关于基本函数的所有部分。一个 <code>JavaScript</code> 函数可以包含 <code>0</code> 个或多个已命名的变量。函数体中的表达式数量也没有限制。你可以声明函数自己的局部变量。<code>return</code>语句在返回一个值并结束函数。如果没有使用 <code>return</code> 语句，或者一个没有值的 <code>return</code> 语句，<code>JavaScript</code> 会返回 <code>undefined</code>。</p><p>已命名的参数更像是一个指示而没有其他作用。如果调用函数时没有提供足够的参数，缺少的参数会被 <code>undefined</code> 替代。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">add(); <span class="comment">// NaN</span></div><div class="line"><span class="comment">// 不能在 `undefined` 对象上进行加法操作</span></div></pre></td></tr></table></figure><p>你还可以传入多于函数本身需要参数个数的参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">add(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 5</span></div><div class="line"> <span class="comment">// 将前两个值相加，4被忽略了</span></div></pre></td></tr></table></figure><p>这看上去有点蠢。函数实际上是访问了函数体中一个名为 <code>arguments</code> 的内部对象，这个对象就如同一个类似于数组的对象一样，包括了所有被传入的参数。让我们重写一下上面的函数，使它可以接收任意个数的参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="built_in">arguments</span>.length; i &lt; j; i++) &#123;</div><div class="line">        sum += <span class="built_in">arguments</span>[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 14</span></div></pre></td></tr></table></figure><p>这跟直接写成 <code>2 + 3 + 4 + 5</code> 也没什么区别。接下来创建一个求平均数的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">avg</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="built_in">arguments</span>.length; i &lt; j; i++) &#123;</div><div class="line">        sum += <span class="built_in">arguments</span>[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum / <span class="built_in">arguments</span>.length;</div><div class="line">&#125;</div><div class="line">avg(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 3.5</span></div></pre></td></tr></table></figure><p>这个很有用，但是却带来了新的问题。<code>avg()</code> 函数处理一个由逗号连接的变量串，但如果想得到一个数组的平均值该怎么办呢？可以这么修改函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">avg</span>`<span class="title">Array</span>`(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = arr.length; i &lt; j; i++) &#123;</div><div class="line">        sum += arr[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum / arr.length;</div><div class="line">&#125;</div><div class="line">avg<span class="string">`Array`</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]); <span class="comment">// 3.5</span></div></pre></td></tr></table></figure><p>但如果能重用我们已经创建的那个函数不是更好吗？幸运的是 <code>JavaScript</code> 允许使用任意函数对象的<code>apply()</code>方法来调用该函数，并传递给它一个包含了参数的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">avg.apply(<span class="string">`null`</span>, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]); <span class="comment">// 3.5</span></div></pre></td></tr></table></figure><p>传给 <code>apply()</code> 的第二个参数是一个数组，它将被当作 <code>avg()</code> 的参数使用，至于第一个参数 <code>null</code>，我们将在后面讨论。这也正说明一个事实——函数也是对象。</p><p><code>JavaScript</code> 允许你创建匿名函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> avg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="built_in">arguments</span>.length; i &lt; j; i++) &#123;</div><div class="line">        sum += <span class="built_in">arguments</span>[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum / <span class="built_in">arguments</span>.length;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>这个函数在语义上与 <code>function avg()</code> 相同。你可以在代码中的任何地方定义这个函数，就像写普通的表达式一样。基于这个特性，有人发明出一些有趣的技巧。与 <code>C</code> 中的块级作用域类似，下面这个例子隐藏了局部变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> b = <span class="number">3</span>;</div><div class="line">    a += b;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">a; <span class="comment">// 4</span></div><div class="line">b; <span class="comment">// 2</span></div></pre></td></tr></table></figure><p><code>JavaScript</code> 允许以递归方式调用函数。递归在处理树形结构（比如浏览器 <code>DOM</code>）时非常有用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countChars</span>(<span class="params">elm</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (elm.nodeType == <span class="number">3</span>) &#123; <span class="comment">// 文本节点</span></div><div class="line">        <span class="keyword">return</span> elm.nodeValue.length;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, child; child = elm.childNodes[i]; i++) &#123;</div><div class="line">        count += countChars(child);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里需要说明一个潜在问题——既然匿名函数没有名字，那该怎么递归调用它呢？在这一点上，<code>JavaScript</code> 允许你命名这个函数表达式。你可以命名立即调用的函数表达式（<code>IIFES——Immediately Invoked Function Expressions</code>），如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> charsInBody = (<span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">elm</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (elm.nodeType == <span class="number">3</span>) &#123; <span class="comment">// 文本节点</span></div><div class="line">        <span class="keyword">return</span> elm.nodeValue.length;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, child; child = elm.childNodes[i]; i++) &#123;</div><div class="line">        count += counter(child);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;)(<span class="built_in">document</span>.body);</div></pre></td></tr></table></figure><p>如上所提供的函数表达式的名称的作用域仅仅是该函数自身。这允许引擎去做更多的优化，并且这种实现更可读、友好。该名称也显示在调试器和一些堆栈跟踪中，节省了调试时的时间。</p><p>需要注意的是 <code>JavaScript</code> 函数是它们本身的对象——就和 <code>JavaScript</code> 其他一切一样——你可以给它们添加属性或者更改它们的属性，这与前面的对象部分一样。</p><h2 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h2><p>备注：关于 <code>JavaScript</code> 中面向对象编程更详细的信息，请参考 <code>JavaScript</code> 面向对象简介。<br>在经典的面向对象语言中，对象是指数据和在这些数据上进行的操作的集合。与 <code>C++</code> 和 <code>Java</code> 不同，<code>JavaScript</code> 是一种基于原型的编程语言，并没有 <code>class</code> 语句，而是把函数用作类。那么让我们来定义一个人名对象，这个对象包括人的姓和名两个域（<code>field</code>）。名字的表示有两种方法：“名 姓（<code>First Last</code>）”或“姓, 名（<code>Last</code>, <code>First</code>）”。使用我们前面讨论过的函数和对象概念，可以像这样完成定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePerson</span>(<span class="params">first, last</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        first: first,</div><div class="line">        last: last</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">personFullName</span>(<span class="params">person</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> person.first + <span class="string">' '</span> + person.last;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">personFullNameReversed</span>(<span class="params">person</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> person.last + <span class="string">', '</span> + person.first</div><div class="line">&#125;</div><div class="line">s = makePerson(<span class="string">"Simon"</span>, <span class="string">"Willison"</span>);</div><div class="line">personFullName(s); <span class="comment">// Simon Willison</span></div><div class="line">personFullNameReversed(s); <span class="comment">// Willison, Simon</span></div></pre></td></tr></table></figure><p>上面的写法虽然可以满足要求，但是看起来很麻烦，因为需要在全局命名空间中写很多函数。既然函数本身就是对象，如果需要使一个函数隶属于一个对象，那么不难得到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePerson</span>(<span class="params">first, last</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        first: first,</div><div class="line">        last: last,</div><div class="line">        fullName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.first + <span class="string">' '</span> + <span class="keyword">this</span>.last;</div><div class="line">        &#125;,</div><div class="line">        fullNameReversed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.last + <span class="string">', '</span> + <span class="keyword">this</span>.first;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">s = makePerson(<span class="string">"Simon"</span>, <span class="string">"Willison"</span>);</div><div class="line">s.fullName(); <span class="comment">// Simon Willison</span></div><div class="line">s.fullNameReversed(); <span class="comment">// Willison, Simon</span></div></pre></td></tr></table></figure><p>上面的代码里有一些我们之前没有见过的东西：关键字 <code>this</code>。当使用在函数中时，<code>this</code> 指代当前的对象，也就是调用了函数的对象。如果在一个对象上使用点或者方括号来访问属性或方法，这个对象就成了 <code>this</code>。如果并没有使用“点”运算符调用某个对象，那么 <code>this</code> 将指向全局对象（<code>global object</code>）。这是一个经常出错的地方。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s = makePerson(<span class="string">"Simon"</span>, <span class="string">"Willison"</span>);</div><div class="line"><span class="keyword">var</span> fullName = s.fullName;</div><div class="line">fullName(); <span class="comment">// `undefined` `undefined`</span></div></pre></td></tr></table></figure><p>当我们调用 <code>fullName()</code> 时，<code>this</code> 实际上是指向全局对象的，并没有名为 <code>first</code> 或 <code>last</code> 的全局变量，所以它们两个的返回值都会是 <code>undefined</code>。</p><p>下面使用关键字 <code>this</code> 改进已有的 <code>makePerson</code>函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.first = first;</div><div class="line">    <span class="keyword">this</span>.last = last;</div><div class="line">    <span class="keyword">this</span>.fullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.first + <span class="string">' '</span> + <span class="keyword">this</span>.last;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.fullNameReversed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.last + <span class="string">', '</span> + <span class="keyword">this</span>.first;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Person(<span class="string">"Simon"</span>, <span class="string">"Willison"</span>);\</div></pre></td></tr></table></figure><p>我们引入了另外一个关键字：<code>new</code>，它和 <code>this</code> 密切相关。它的作用是创建一个崭新的空对象，然后使用指向那个对象的 <code>this</code> 调用特定的函数。注意，含有 <code>this</code> 的特定函数不会返回任何值，只会修改 <code>this</code> 对象本身。<code>new</code> 关键字将生成的 <code>this</code> 对象返回给调用方，而被 <code>new</code> 调用的函数成为构造函数。习惯的做法是将这些函数的首字母大写，这样用 <code>new</code> 调用他们的时候就容易识别了。</p><p>不过这个改进的函数还是和上一个例子一样，单独调用<code>fullName()</code> 时会产生相同的问题。</p><p>我们的 <code>Person</code> 对象现在已经相当完善了，但还有一些不太好的地方。每次我们创建一个 <code>Person</code> 对象的时候，我们都在其中创建了两个新的函数对象——如果这个代码可以共享不是更好吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">personFullName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.first + <span class="string">' '</span> + <span class="keyword">this</span>.last;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">personFullNameReversed</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.last + <span class="string">', '</span> + <span class="keyword">this</span>.first;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.first = first;</div><div class="line">    <span class="keyword">this</span>.last = last;</div><div class="line">    <span class="keyword">this</span>.fullName = personFullName;</div><div class="line">    <span class="keyword">this</span>.fullNameReversed = personFullNameReversed;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种写法的好处是，我们只需要创建一次方法函数，在构造函数中引用它们。那是否还有更好的方法呢？答案是肯定的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.first = first;</div><div class="line">    <span class="keyword">this</span>.last = last;</div><div class="line">&#125;</div><div class="line">Person.prototype.fullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.first + <span class="string">' '</span> + <span class="keyword">this</span>.last;</div><div class="line">&#125;</div><div class="line">Person.prototype.fullNameReversed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.last + <span class="string">', '</span> + <span class="keyword">this</span>.first;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>Person.prototype</code>是一个可以被<code>Person</code>的所有实例共享的对象。它是一个名叫原型链（<code>prototype chain</code>）的查询链的一部分：当你试图访问一个 <code>Person</code>没有定义的属性时，解释器会首先检查这个<code>Person.prototype</code>来判断是否存在这样一个属性。所以，任何分配给 <code>Person.prototype</code> 的东西对通过 <code>this</code> 对象构造的实例都是可用的。</p><p>这个特性功能十分强大，<code>JavaScript</code> 允许你在程序中的任何时候修改原型（<code>prototype</code>）中的一些东西，也就是说你可以在运行时(<code>runtime</code>)给已存在的对象添加额外的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">s = <span class="keyword">new</span> Person(<span class="string">"Simon"</span>, <span class="string">"Willison"</span>);</div><div class="line">s.firstNameCaps();  <span class="comment">// TypeError on line 1: s.firstNameCaps is not a function</span></div><div class="line"></div><div class="line">Person.prototype.firstNameCaps = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.first.toUpperCase()</div><div class="line">&#125;</div><div class="line">s.firstNameCaps(); <span class="comment">// SIMON</span></div></pre></td></tr></table></figure><p>有趣的是，你还可以给 <code>JavaScript</code> 的内置函数原型（<code>prototype</code>）添加东西。让我们给 <code>String</code> 添加一个方法用来返回逆序的字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">"Simon"</span>;</div><div class="line">s.reversed(); <span class="comment">// TypeError on line 1: s.reversed is not a function</span></div><div class="line"></div><div class="line"><span class="built_in">String</span>.prototype.reversed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> r = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">this</span>.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        r += <span class="keyword">this</span>[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line">s.reversed(); <span class="comment">// nomiS</span></div></pre></td></tr></table></figure><p>定义新方法也可以在字符串字面量上用（<code>string literal</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"This can now be reversed"</span>.reversed(); <span class="comment">// desrever eb won nac sihT</span></div></pre></td></tr></table></figure><p>正如我前面提到的，原型组成链的一部分。那条链的根节点是 <code>Object.prototype</code>，它包括 <code>toString()</code>方法——将对象转换成字符串时调用的方法。这对于调试我们的 <code>Person</code> 对象很有用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Person(<span class="string">"Simon"</span>, <span class="string">"Willison"</span>);</div><div class="line">s; <span class="comment">// [object Object]</span></div><div class="line"></div><div class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;Person: '</span> + <span class="keyword">this</span>.fullName() + <span class="string">'&gt;'</span>;</div><div class="line">&#125;</div><div class="line">s.toString(); <span class="comment">// &lt;Person: Simon Willison&gt;</span></div></pre></td></tr></table></figure><p>你是否还记得之前我们说的 <code>avg.apply()</code> 中的第一个参数 <code>null</code>？现在我们可以回头看看这个东西了。<code>apply()</code> 的第一个参数应该是一个被当作 <code>this</code> 来看待的对象。下面是一个 <code>new</code> 方法的简单实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trivialNew</span>(<span class="params">constructor, ...args</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = &#123;&#125;; <span class="comment">// 创建一个对象</span></div><div class="line">    <span class="keyword">constructor</span>.apply(o, args);</div><div class="line">    return o;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这并不是 <code>new</code> 的完整实现，因为它没有创建原型（<code>prototype</code>）链。想举例说明 <code>new</code> 的实现有些困难，因为你不会经常用到这个，但是适当了解一下还是很有用的。在这一小段代码里，<code>...args</code>（包括省略号）叫作剩余参数（<code>rest arguments</code>）。如名所示，这个东西包含了剩下的参数。</p><p>因此调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bill = trivialNew(Person, <span class="string">"William"</span>, <span class="string">"Orange"</span>);</div></pre></td></tr></table></figure><p>可认为和调用如下语句是等效的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bill = <span class="keyword">new</span> Person(<span class="string">"William"</span>, <span class="string">"Orange"</span>);</div></pre></td></tr></table></figure><p><code>apply()</code> 有一个姐妹函数，名叫 <code>call</code>，它也可以允许你设置 <code>this</code>，但它带有一个扩展的参数列表而不是一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lastNameCaps</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.last.toUpperCase();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Person(<span class="string">"Simon"</span>, <span class="string">"Willison"</span>);</div><div class="line">lastNameCaps.call(s);</div><div class="line"><span class="comment">// 和以下方式等价</span></div><div class="line">s.lastNameCaps = lastNameCaps;</div><div class="line">s.lastNameCaps();</div></pre></td></tr></table></figure><h2 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h2><p><code>JavaScript</code> 允许在一个函数内部定义函数，这一点我们在之前的 <code>makePerson()</code> 例子中也见过。关于 <code>JavaScript</code> 中的嵌套函数，一个很重要的细节是它们可以访问父函数作用域中的变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">betterExampleNeeded</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">oneMoreThanA</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> a + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> oneMoreThanA();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果某个函数依赖于其他的一两个函数，而这一两个函数对你其余的代码没有用处，你可以将它们嵌套在会被调用的那个函数内部，这样做可以减少全局作用域下的函数的数量，这有利于编写易于维护的代码。</p><p>这也是一个减少使用全局变量的好方法。当编写复杂代码时，程序员往往试图使用全局变量，将值共享给多个函数，但这样做会使代码很难维护。内部函数可以共享父函数的变量，所以你可以使用这个特性把一些函数捆绑在一起，这样可以有效地防止“污染”你的全局命名空间——你可以称它为“局部全局（<code>local global</code>）”。虽然这种方法应该谨慎使用，但它确实很有用，应该掌握。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>下面我们将看到的是 <code>JavaScript</code> 中必须提到的功能最强大的抽象概念之一：闭包。但它可能也会带来一些潜在的困惑。那它究竟是做什么的呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAdder</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> x = makeAdder(<span class="number">5</span>);</div><div class="line"><span class="keyword">var</span> y = makeAdder(<span class="number">20</span>);</div><div class="line">x(<span class="number">6</span>); <span class="comment">// ?</span></div><div class="line">y(<span class="number">7</span>); <span class="comment">// ?</span></div></pre></td></tr></table></figure><p><code>makeAdder</code> 这个名字本身应该能说明函数是用来做什么的：它创建了一个新的 <code>adder</code> 函数，这个函数自身带有一个参数，它被调用的时候这个参数会被加在外层函数传进来的参数上。</p><p>这里发生的事情和前面介绍过的内嵌函数十分相似：一个函数被定义在了另外一个函数的内部，内部函数可以访问外部函数的变量。唯一的不同是，外部函数被返回了，那么常识告诉我们局部变量“应该”不再存在。但是它们却仍然存在——否则 <code>adder</code> 函数将不能工作。也就是说，这里存在 <code>makeAdder</code> 的局部变量的两个不同的“副本”——一个是 <code>a</code> 等于<code>5</code>，另一个是 <code>a</code> 等于<code>20</code>。那些函数的运行结果就如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x(<span class="number">6</span>); <span class="comment">// 返回 11</span></div><div class="line">y(<span class="number">7</span>); <span class="comment">// 返回 27</span></div></pre></td></tr></table></figure><p>下面来说说到底发生了什么。每当 <code>JavaScript</code> 执行一个函数时，都会创建一个作用域对象（<code>scope object</code>），用来保存在这个函数中创建的局部变量。它和被传入函数的变量一起被初始化。这与那些保存的所有全局变量和函数的全局对象（<code>global object</code>）类似，但仍有一些很重要的区别，第一，每次函数被执行的时候，就会创建一个新的，特定的作用域对象；第二，与全局对象（在浏览器里面是当做 window 对象来访问的）不同的是，你不能从 <code>JavaScript</code> 代码中直接访问作用域对象，也没有可以遍历当前的作用域对象里面属性的方法。</p><p>所以当调用 <code>makeAdder</code>时，解释器创建了一个作用域对象，它带有一个属性：<code>a</code>，这个属性被当作参数传入 <code>makeAdder</code> 函数。然后 <code>makeAdder</code> 返回一个新创建的函数。通常 <code>JavaScript</code> 的垃圾回收器会在这时回收 <code>makeAdder</code> 创建的作用域对象，但是返回的函数却保留一个指向那个作用域对象的引用。结果是这个作用域对象不会被垃圾回收器回收，直到指向 <code>makeAdder</code> 返回的那个函数对象的引用计数为零。</p><p>作用域对象组成了一个名为作用域链（<code>scope chain</code>）的链。它类似于原形（<code>prototype</code>）链一样，被 <code>JavaScript</code> 的对象系统使用。</p><p>一个闭包就是一个函数和被创建的函数中的作用域对象的组合。</p><p>闭包允许你保存状态——所以它们通常可以代替对象来使用。这里有一些关于闭包的详细介绍。</p><h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><p>使用闭包的一个坏处是，在 <code>IE</code> 浏览器中它会很容易导致内存泄露。<code>JavaScript</code> 是一种具有垃圾回收机制的语言——对象在被创建的时候分配内存，然后当指向这个对象的引用计数为零时，浏览器会回收内存。宿主环境提供的对象都是按照这种方法被处理的。</p><p>浏览器主机需要处理大量的对象来描绘一个正在被展现的 <code>HTML</code> 页面——<code>DOM</code> 对象。浏览器负责管理它们的内存分配和回收。</p><p><code>IE</code> 浏览器有自己的一套垃圾回收机制，这套机制与 <code>JavaScript</code> 提供的垃圾回收机制进行交互时，可能会发生内存泄露。</p><p>在 <code>IE</code> 中，每当在一个 <code>JavaScript</code> 对象和一个本地对象之间形成循环引用时，就会发生内存泄露。如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">leakMemory</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'el'</span>);</div><div class="line">    <span class="keyword">var</span> o = &#123; <span class="string">'el'</span>: el &#125;;</div><div class="line">    el.o = o;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码的循环引用会导致内存泄露：<code>IE</code> 不会释放被 <code>el</code> 和 <code>o</code> 使用的内存，直到浏览器被彻底关闭并重启后。</p><p>这个例子往往无法引起人们的重视：一般只会在长时间运行的应用程序中，或者因为巨大的数据量和循环中导致内存泄露发生时，内存泄露才会引起注意。</p><p>不过一般也很少发生如此明显的内存泄露现象——通常泄露的数据结构有多层的引用(<code>references</code>)，往往掩盖了循环引用的情况。</p><p>闭包很容易发生无意识的内存泄露。如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHandler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'el'</span>);</div><div class="line">    el.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        el.style.backgroundColor = <span class="string">'red'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码创建了一个元素，当它被点击的时候变红，但同时它也会发生内存泄露。为什么？因为对 <code>el</code> 的引用不小心被放在一个匿名内部函数中。这就在 <code>JavaScript</code> 对象（这个内部函数）和本地对象之间（<code>el</code>）创建了一个循环引用。</p><p>这个问题有很多种解决方法，最简单的一种是不要使用 <code>el</code> 变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'el'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.style.backgroundColor = <span class="string">'red'</span>;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>有趣的是，有一种窍门解决因闭包而引入的循环引用，是添加另外一个闭包：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHandler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> clickHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.style.backgroundColor = <span class="string">'red'</span>;</div><div class="line">    &#125;;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'el'</span>);</div><div class="line">        el.onclick = clickHandler;</div><div class="line">    &#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>内部函数被直接执行，并在 <code>clickHandler</code> 创建的闭包中隐藏了它的内容。</p><p>另外一种避免闭包的好方法是在 <code>window.onunload</code> 事件发生期间破坏循环引用。很多事件库都能完成这项工作。注意这样做将使 <code>Firefox</code> 中的 <code>bfcache</code> 无法工作。所以除非有其他必要的原因，最好不要在 <code>Firefox</code> 中注册一个 <code>onunload</code> 的监听器。</p><p>原文来自：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="external">重新介绍 JavaScript（JS 教程）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;为什么会有这一篇“重新介绍”呢？因为 &lt;code&gt;JavaScript&lt;/code&gt; 堪称世界上被人误解最深的编程语言。虽然常被嘲为“玩具语言”，但在它看似简洁的外衣下，还隐藏着强大的语言特性。 &lt;code&gt;JavaScript&lt;/code&gt; 目前广泛应用于众多知名应用中，对于网页和移动开发者来说，深入理解 &lt;code&gt;JavaScript&lt;/code&gt; 就尤有必要。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://blog.ihoey.com/tags/javascript/"/>
    
      <category term="Function" scheme="https://blog.ihoey.com/tags/Function/"/>
    
  </entry>
  
  <entry>
    <title>博客评论网易云跟帖评论提醒功能</title>
    <link href="https://blog.ihoey.com/posts/Linux/2017-06-22-blog-comment-gentie-remind.html"/>
    <id>https://blog.ihoey.com/posts/Linux/2017-06-22-blog-comment-gentie-remind.html</id>
    <published>2017-06-22T11:00:21.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://oisha19l0.qnssl.com/comment_ihoey.png" alt="comment_ihoey"><br>多说官方宣布17年6月1号停止维护，一个优秀的评论系统从此倒下了，令人唏嘘不已，还是要感谢多说团队多年的付出。眼下留给博主们的选择也就畅言和网易云跟帖了。经过综合考虑选择了网易跟帖，由于网易云跟帖没有提醒功能，所以今天就做了一个邮件提醒的功能。</p><a id="more"></a><ul><li><p>网易云跟帖的安装这里就不多说了，照着网上的教程走一遍或者按官方的文档基本上就可以了，不过提醒一下，网易云跟帖不能在本地测试，必须部署完成才会显示！</p></li><li><p>接下来才是本篇文章的重点。也是云跟帖不足的一个地方。之前多说收到评论会在博客的右上角提示，云跟帖就没有这个功能，而且也不会收到邮件，这样就不能即时的处理评论。好在提供了收到评论的回调功能，所以我们自己来实现发送邮件的功能。</p></li></ul><h2 id="数据回推"><a href="#数据回推" class="headerlink" title="数据回推"></a>数据回推</h2><p>在获取代码里面有个优化设置功能，需要我们自己设置接口来接受评论推送。以下邮件评论提示由php来实现。php模拟邮箱登录发送邮件采用如下库：<a href="http://download.csdn.net/download/zhong960725/9755214" target="_blank" rel="external">http://download.csdn.net/download/zhong960725/9755214</a><br>，亲测能正常使用，需要配置smtp服务区，端口，帐号和密码等。 网易通过结果返回的数据如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    "title" : "xxx",//文章标题</div><div class="line">    "url" : "http://localhost/1.htm",//文章url</div><div class="line">    "sourceId" : "xxx",//文章唯一id</div><div class="line">    "ctime" : 11111,//文章创建时间</div><div class="line">    "comments" : [&#123;</div><div class="line">        "cid" : "xxx",//跟贴id</div><div class="line">        "content" : "xxxx",//内容</div><div class="line">        "ctime" : 11111,//创建时间</div><div class="line">        "pid" : "xxxx",//父贴id</div><div class="line">        "ip" : "127.0.0.1",//发贴ip</div><div class="line">        "source" : "web",//来源 app,web,wap</div><div class="line">        "anonymous" : false,//是否匿名跟贴 false：非匿名 true：匿名</div><div class="line">        "attachment" : &#123;</div><div class="line">          "type" : 0,//0没有附件 1为图片 2为语音 3为视频</div><div class="line">          "desc" : "xxx",//描述</div><div class="line">          "info" : "http://localhost/1.jpg"//附件地址</div><div class="line">        &#125;,</div><div class="line">        "user" : &#123;</div><div class="line">          "userId" : "xxx",//第三方用户id</div><div class="line">          "nickname" : "xxx",//昵称</div><div class="line">          "avatar" : "http://localhost/2.png"//头像地址</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><ul><li>搭建<code>web</code>服务器,博客前面有提到，可以<a href="https://blog.ihoey.com/posts/Linux/2017-05-26-liunx-shell.html">Linux常用命令笔记</a></li><li>搭建<code>PHP</code>环境,由于我的服务器是<code>Ubuntu 16.04</code>的,所以貌似不能安装<code>php5</code>了,所以这里是<code>php7</code>。<ul><li>安装<code>PHP</code> : <code>sudo apt-get install -y php7.0 php7.0-fpm php7.0-cli php7.0-common php7.0-mbstring php7.0-gd php7.0-intl php7.0-xml php7.0-mysql php7.0-mcrypt php7.0-zip</code>.</li></ul></li><li><p>配置<code>nginx</code>,</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 80;</div><div class="line">        server_name xxxx.xxx.xxx;</div><div class="line"></div><div class="line">        root   /var/www/comment;</div><div class="line">        index  index.php index.html index.htm;</div><div class="line"></div><div class="line">        location ~ \.php$ &#123;</div><div class="line">                try_files $uri =404;</div><div class="line">                fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">                fastcgi_pass unix:/run/php/php7.0-fpm.sock;</div><div class="line">                fastcgi_index index.php;</div><div class="line">                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">                include fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后我这里将下载的<code>php</code>库文件放到<code>/var/www/comment</code>目录下。</p></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Content-type: text/html; charset=utf-8"</span>);</div><div class="line">date_default_timezone_set(<span class="string">"Asia/Shanghai"</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Ihoey</span></div><div class="line"><span class="comment"> * User: Ihoey</span></div><div class="line"><span class="comment"> * Date: 17/6/22</span></div><div class="line"><span class="comment"> * Time: 15:00</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line">$receiver = $_REQUEST;</div><div class="line"><span class="keyword">if</span>(count($receiver) &gt; <span class="number">0</span>) &#123;</div><div class="line">    $content = implode(<span class="string">','</span>, $receiver);</div><div class="line">    $json = json_decode($content);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($json) &amp;&amp; count($json) &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">require_once</span>(<span class="string">"./functions.php"</span>);</div><div class="line">        $title = $json[<span class="number">0</span>]-&gt;title;</div><div class="line">        $url = $json[<span class="number">0</span>]-&gt;url;</div><div class="line">        $ctime = $json[<span class="number">0</span>]-&gt;ctime;</div><div class="line">        $date = date(<span class="string">'Y-m-d H:i:s'</span>, $ctime/<span class="number">1000</span>);</div><div class="line">        $name = $json[<span class="number">0</span>]-&gt;comments[<span class="number">0</span>]-&gt;user-&gt;nickname;</div><div class="line">        $userId = $json[<span class="number">0</span>]-&gt;comments[<span class="number">0</span>]-&gt;user-&gt;userId;</div><div class="line">        $comment = $json[<span class="number">0</span>]-&gt;comments[<span class="number">0</span>]-&gt;content;</div><div class="line">        $flag = sendMail(<span class="string">'123456.qq.com'</span>,<span class="string">"您的博客收到一条来自&#123;$name&#125;(&#123;$userId&#125;)的新评论"</span>,</div><div class="line">            <span class="string">"文章标题:&lt;br/&gt;&lt;a target='_blank' href='&#123;$url&#125;'&gt;&#123;$title&#125;&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;评论内容:&lt;br/&gt;&#123;$name&#125;(&#123;$userId&#125;): &#123;$comment&#125;&lt;br/&gt;&lt;br/&gt;评论时间:&lt;br/&gt;&#123;$date&#125;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&#123;$content&#125;"</span>);</div><div class="line">        file_put_contents(<span class="string">'./comment.txt'</span>, $flag ? <span class="string">"success!"</span> : <span class="string">"failure!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * comment.php</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure><h2 id="设置回推"><a href="#设置回推" class="headerlink" title="设置回推"></a>设置回推</h2><p>优化设置里面的回推结果设置如下就好<code>http://yourDomain/comment.php</code>;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://oisha19l0.qnssl.com/comment_ihoey.png&quot; alt=&quot;comment_ihoey&quot;&gt;&lt;br&gt;多说官方宣布17年6月1号停止维护，一个优秀的评论系统从此倒下了，令人唏嘘不已，还是要感谢多说团队多年的付出。眼下留给博主们的选择也就畅言和网易云跟帖了。经过综合考虑选择了网易跟帖，由于网易云跟帖没有提醒功能，所以今天就做了一个邮件提醒的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.ihoey.com/categories/Linux/"/>
    
    
      <category term="comment" scheme="https://blog.ihoey.com/tags/comment/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令笔记</title>
    <link href="https://blog.ihoey.com/posts/Linux/2017-05-26-liunx-shell.html"/>
    <id>https://blog.ihoey.com/posts/Linux/2017-05-26-liunx-shell.html</id>
    <published>2017-05-26T13:49:04.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录使用到的 <code>Linux</code> 命令!</p><a id="more"></a><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ul><li>安装: <code>sudo apt-get install git</code> , <code>git</code> 配置请查看<a href=""></a>。</li></ul><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><ul><li>安装: <code>sudo apt-get install nginx</code></li><li>启动: <code>sudo /etc/init.d/nginx start</code></li><li>停止: <code>sudo /etc/init.d/nginx stop</code></li><li>重启: <code>sudo /etc/init.d/nginx restart</code></li><li>检查配置文件: <code>sudo service nginx configtest</code></li><li>重载配置文件: <code>sudo service nginx reload</code></li><li>查询nginx进程: <code>ps -ef | grep nginx</code></li></ul><h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><p><code>sudo vim /etc/nginx/sites-available/default</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80 default_server;</div><div class="line">    listen [::]:80 default_server ipv6only=on;</div><div class="line"></div><div class="line">    <span class="comment"># 如果要支持HTTPS，修改这里</span></div><div class="line">    <span class="comment"># 可以使用 https://letsencrypt.org 的免费SSL证书</span></div><div class="line">    <span class="comment">#listen 443 ssl;</span></div><div class="line">    <span class="comment">#ssl_certificate     www.example.com.crt;</span></div><div class="line">    <span class="comment">#ssl_certificate_key www.example.com.key;</span></div><div class="line">    <span class="comment">#ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</span></div><div class="line">    <span class="comment">#ssl_ciphers         HIGH:!aNULL:!MD5;</span></div><div class="line"></div><div class="line">    <span class="comment"># 重定向所有HTTP到HTTPS</span></div><div class="line">    <span class="comment"># rewrite ^(.*)$ https://$host$1 permanent;</span></div><div class="line"></div><div class="line">    <span class="comment"># 网站根目录，根据需要修改</span></div><div class="line">    root /usr/share/nginx/html;</div><div class="line">    <span class="comment"># 增加index.php</span></div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    <span class="comment"># 假设域名是 ssl.mcxiaoke.com</span></div><div class="line">    server_name ssl.mcxiaoke.com; <span class="comment">#绑定域名</span></div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page 404 /404.html;</div><div class="line">    error_page 500 502 503 504 /50x.html;</div><div class="line">    location = /50x.html &#123;</div><div class="line">        root /usr/share/nginx/html;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">#支持php-fpm的配置</span></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        try_files <span class="variable">$uri</span> =404;</div><div class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">        fastcgi_pass unix:/var/run/php5-fpm.sock;</div><div class="line">        fastcgi_index index.php;</div><div class="line">        fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">        include fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h2><ul><li>安装: <code>sudo apt-get install mysql-server</code></li></ul><h2 id="安装-php-fpm"><a href="#安装-php-fpm" class="headerlink" title="安装 php-fpm"></a>安装 php-fpm</h2><ul><li>安装: <code>sudo apt-get install php5-fpm</code></li><li>重启: <code>sudo service php5-fpm restart</code></li><li>安装PHP常用扩展: <code>sudo apt-get install php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl php5-xcache</code></li></ul><h2 id="常用linux命令说明"><a href="#常用linux命令说明" class="headerlink" title="常用linux命令说明"></a>常用linux命令说明</h2><ul><li>查看端口占用: <code>lsof -i:80</code></li><li>杀死进程: <code>kill -9 3274</code></li><li><code>tar</code><ul><li>z- 用<code>gzip</code>对存档压缩或解压</li><li>x-从存档展开文件</li><li>v-详细显示处理的文件</li><li>f-指定存档或设备</li></ul></li><li><p><code>chmod</code><br>  +</p></li><li><p>更新源: <code>sudo apt-get update</code></p></li><li>更新已安装的包<code>sudo apt-get upgrade</code></li></ul><h2 id="账号和密码文件"><a href="#账号和密码文件" class="headerlink" title="账号和密码文件"></a>账号和密码文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls -al /etc/passwd /etc/shadow</div><div class="line">-rw-r–r– 1 root root 1611 2011-12-16 05:30 /etc/passwd <span class="comment"># 保存的是账号</span></div><div class="line">-rw-r—– 1 root shadow 947 2011-12-16 05:30 /etc/shadow <span class="comment"># 账号的密码等信息</span></div></pre></td></tr></table></figure><h3 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class="line">bin:x:2:2:bin:/bin:/bin/sh</div><div class="line">sys:x:3:3:sys:/dev:/bin/sh</div></pre></td></tr></table></figure><ol><li>账号名称</li><li>原先用来保存密码的，现在密码都放在/etc/shadow中，所以这里显示x</li><li>UID，也就是使用者ID。默认的系统管理员的UID为0，我们添加用户的时候最好使用1000以上的UID，1-1000范围的UID最好保留给系统用。</li><li>GID，也就是群组ID</li><li>关于账号的一些说明信息（暂时可以忽略）</li><li>账号的家目录，家目录就是你登陆系统后默认的那个目录</li><li>账号使用的shell</li></ol><h3 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root:!:15324:0:99999:7:::</div><div class="line">daemon:*:15259:0:99999:7:::</div><div class="line">bin:*:15259:0:99999:7:::</div><div class="line">letuknowit:<span class="variable">$1</span><span class="variable">$cPf</span>/cIvr<span class="variable">$sCws95uSip2ljTK052DDB</span>.:15400:5:60:7:2:15490:</div></pre></td></tr></table></figure><ol><li>账户名称（密码需要与账户对应的嘛）</li><li>加密后的密码（总不能学CSDN放明文密码，是吧），如果这一栏的第一个字符为!或者*的话，说明这是一个不能登录的账户，从上面可以看出，ubuntu默认的就不启用root账户。</li><li>最近改动密码的日期（不是日期吗，咋是一堆数字，别急，这个是从1970年1月1日算起的总的天数）。那怎么才能知道今天距1970年1月1日有多少天呢？很简单，你改下密码，然后看下这个栏目中的数字是多少就可以了！</li><li>密码不可被变更的天数：设置了这个值，则表示从变更密码的日期算起，多少天内无法再次修改密码，如果是0的话，则没有限制</li><li>密码需要重新变更的天数：密码经常更换才能保证安全，为了提醒某些经常不更换密码的用户，可以设置一个天数，强制让用户更换密码，也就是说该用户的密码会在多少天后过期，如果为99999则没有限制</li><li>密码过期预警天数：如果在5中设置了密码需要重新变更的天数，则会在密码过期的前多少天进行提醒，提示用户其密码将在多少天后过期</li><li>密码过期的宽恕时间：如果在5中设置的日期过后，用户仍然没有修改密码，则该用户还可以继续使用的天数</li><li>账号失效日期，过了这个日期账号就不能用了</li><li>保留的</li></ol><p>以上面最后用户letuknowit为例（15400对应的日期为2012年3月1日），其保护如下信息：</p><ol><li>用户letuknowit最近一次修改密码的日期是2012年3月1日，</li><li>在2012年3月6日之前不能再改动密码了，</li><li>在2012-3-1到2012-4-29期间letuknowit需要更改密码，</li><li>在2012-4-29之前的7天，letuknowit登陆系统的时候，系统会提示letuknowit其密码即将过期，</li><li>如果letuknowit一直到2012-4-29都没有修改密码，则其仍然可以继续使用该账户2天，2天后该账户将不可用</li><li>无论如何，到了2012年5月29日，该账号都将失效</li></ol><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><ul><li>查看主机名: <code>hostname</code> 或<code>uname –n</code>，均可以查看到当前主机的主机名。</li><li>临时修改主机名: <code>hostname 新主机名</code></li><li>永久修改主机名: <code>/etc/hostname</code>文件中修改</li><li><code>host</code> 文件: <code>/etc/hosts</code> 存放的是域名与ip的对应关系, 添加一个新主机名到<code>127.0.0.1</code>.</li></ul><p>待续中…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录使用到的 &lt;code&gt;Linux&lt;/code&gt; 命令!&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.ihoey.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.ihoey.com/tags/Linux/"/>
    
      <category term="shell" scheme="https://blog.ihoey.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>NPM 学习笔记整理</title>
    <link href="https://blog.ihoey.com/posts/Node/2017-05-10-npm.html"/>
    <id>https://blog.ihoey.com/posts/Node/2017-05-10-npm.html</id>
    <published>2017-05-09T19:25:24.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-NPM"><a href="#什么是-NPM" class="headerlink" title="什么是 NPM"></a>什么是 NPM</h1><p><code>npm</code> 之于 <code>Node</code> ，就像 <code>pip</code> 之于 <code>Python</code> , <code>gem</code> 之于 <code>Ruby</code> , <code>composer</code> 之于 <code>PHP</code> 。</p><p><code>npm</code> 是 <code>Node</code> 官方提供的包管理工具，他已经成了 <code>Node</code> 包的标准发布平台，用于 <code>Node</code> 包的发布、传播、依赖控制。<br><code>npm</code> 提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。</p><a id="more"></a><h1 id="为什么要使用-NPM"><a href="#为什么要使用-NPM" class="headerlink" title="为什么要使用 NPM"></a>为什么要使用 NPM</h1><p><code>npm</code> 是随同 <code>Node</code> 一起安装的包管理工具，能解决 <code>Node</code> 代码部署上的很多问题，常见的场景有以下几种：</p><ul><li>允许用户从 <code>npm</code> 服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从 <code>npm</code> 服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到 <code>npm</code> 服务器供别人使用。</li></ul><p><code>npm</code> 的背后，是基于 <code>CouchDB</code> 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。</p><h1 id="如何使用-NPM"><a href="#如何使用-NPM" class="headerlink" title="如何使用 NPM"></a>如何使用 NPM</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm</code> 不需要单独安装。在安装 <code>Node</code> 的时候，会连带一起安装 <code>npm</code> 。但是，<code>Node</code> 附带的 <code>npm</code> 可能不是最新版本，最后用下面的命令，更新到最新版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install npm@latest -g</div></pre></td></tr></table></figure><p>如果是 Window 系统使用以下命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install npm -g</div></pre></td></tr></table></figure><p>也就是使用 <code>npm</code> 安装自己。之所以可以这样，是因为 <code>npm</code> 本身与 <code>Node</code> 的其他模块没有区别。</p><p>然后，运行下面的命令，查看各种信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看 npm 命令列表</span></div><div class="line">$ npm <span class="built_in">help</span></div><div class="line"></div><div class="line"><span class="comment"># 查看各个命令的简单用法</span></div><div class="line">$ npm -l</div><div class="line"></div><div class="line"><span class="comment"># 查看 npm 的版本</span></div><div class="line">$ npm -v</div><div class="line"></div><div class="line"><span class="comment"># 查看 npm 的配置</span></div><div class="line">$ npm config list -l</div></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h3><p><code>npm init</code> 用来初始化生成一个新的 <code>package.json</code> 文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。<br>如果使用了 <code>-f</code>（代表<code>force</code>）、<code>-y</code>（代表<code>yes</code>），则跳过提问阶段，直接生成一个新的 <code>package.json</code> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm init -y</div></pre></td></tr></table></figure><h3 id="npm-set"><a href="#npm-set" class="headerlink" title="npm set"></a>npm set</h3><p><code>npm set</code> 用来设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="built_in">set</span> init-author-name <span class="string">'Your name'</span></div><div class="line">$ npm <span class="built_in">set</span> init-author-email <span class="string">'Your email'</span></div><div class="line">$ npm <span class="built_in">set</span> init-author-url <span class="string">'http://yourdomain.com'</span></div><div class="line">$ npm <span class="built_in">set</span> init-license <span class="string">'MIT'</span></div></pre></td></tr></table></figure><p>上面命令等于为 <code>npm init</code> 设置了默认值，以后执行 <code>npm init</code> 的时候，<code>package.json</code>的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的 <code>~/.npmrc</code>文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行 <code>npm config</code>。</p><h3 id="npm-info"><a href="#npm-info" class="headerlink" title="npm info"></a>npm info</h3><p><code>npm info</code> 命令可以查看每个模块的具体信息。比如，查看 <code>underscore</code> 模块的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm info underscore</div></pre></td></tr></table></figure><p>上面命令返回一个 <code>JavaScript</code> 对象，包含了 <code>underscore</code> 模块的详细信息。这个对象的每个成员，都可以直接从 <code>info</code> 命令查询。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm info underscore description</div><div class="line"></div><div class="line">$ npm info underscore homepage</div><div class="line"></div><div class="line">$ npm info underscore version</div></pre></td></tr></table></figure><h3 id="npm-search"><a href="#npm-search" class="headerlink" title="npm search"></a>npm search</h3><p><code>npm search</code> 命令用于搜索 <code>npm</code> 仓库，它后面可以跟字符串，也可以跟正则表达式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm search &lt;搜索词&gt;</div></pre></td></tr></table></figure><h3 id="npm-list"><a href="#npm-list" class="headerlink" title="npm list"></a>npm list</h3><p><code>npm list</code> 命令以树形结构列出当前项目安装的所有模块，以及它们依赖的模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ npm list</div><div class="line"></div><div class="line"><span class="comment"># 加上 global 参数，会列出全局安装的模块</span></div><div class="line">$ npm list -global</div><div class="line"></div><div class="line"><span class="comment"># npm list 命令也可以列出单个模块</span></div><div class="line">$ npm list underscore</div></pre></td></tr></table></figure><h3 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h3><p>使用 <code>npm</code> 安装包的命令格式为：<code>npm [install/i] [package_name]</code></p><h4 id="本地模式和全局模式"><a href="#本地模式和全局模式" class="headerlink" title="本地模式和全局模式"></a>本地模式和全局模式</h4><p><code>npm</code> 在默认情况下会从 <a href="http://npmjs.org" target="_blank" rel="external">NPM</a> 搜索或下载包，将包安装到当前目录的 <code>node_modules</code> 子目录下。</p><p>如果你熟悉 <code>Ruby</code> 的 <code>gem</code> 或者 <code>Python</code> 的 <code>pip</code> ，你会发现 <code>npm</code> 与它们的行为不同， <code>gem</code> 或 <code>pip</code> 总是以全局模式安装，使包可以供所有的程序使用，而 <code>npm</code> 默认会把包安装到当前目录下。这反映了 <code>npm</code> 不同的设计哲学。如果把包安装到全局，可以提供程序的重复利用程度，避免同样的内容的多分副本，但坏处是难以处理不同的版本依赖。如果把包安装到当前目录，或者说本地，则不会有不同程序依赖不同版本的包的冲突问题，同时还减轻了包作者的 <code>API</code> 兼容性压力，但缺陷则是同一个包可能会被安装许多次。</p><p>我们在使用 <code>supervisor</code> 的时候使用了 <code>npm install -g supervisor</code> 命令，就是以全局模式安装 <code>supervisor</code> 。</p><p>这里注意一点的就是， <code>supervisor</code> 必须安装到全局，如果你不安装到全局，错误命令会提示你安装到全局。如果不想安装到默认的全局，也可以自己修改全局路径到当前路径 <code>npm config set prefix &quot;路径&quot;</code> 安装完以后就可以用 <code>supervisor</code> 来启动服务了。<br><code>supervisor</code> 可以帮助你实现这个功能，它会监视你对代码的驱动，并自动重启 <code>Node</code> 。</p><p>一般来说，全局安装只适用于工具模块，比如 <code>eslint</code> 和 <code>gulp</code> 。关于使用全局模式，多数时候并不是因为许多程序都有可能用到了它，为了减少多重副本而使用全局模式，而是因为 <strong>本地模式不会注册 <code>PATH</code> 环境变量</strong>。<br>“本地安装”指的是将一个模块下载到当前项目的 <code>node_modules</code> 子目录，然后只有在项目目录之中，才能调用这个模块。</p><p>本地模式和全局模式的特点如下：</p><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可通过 require 使用</th><th style="text-align:center">注册 PATH</th></tr></thead><tbody><tr><td style="text-align:center">本地模式</td><td style="text-align:center">是</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">全局模式</td><td style="text-align:center">否</td><td style="text-align:center">是</td></tr></tbody></table><p><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 本地安装</span></div><div class="line">$ npm install &lt;package name&gt;</div><div class="line"></div><div class="line"><span class="comment"># 全局安装</span></div><div class="line">$ sudo npm install -global &lt;package name&gt;</div><div class="line">$ sudo npm install -g &lt;package name&gt;</div></pre></td></tr></table></figure><p><code>npm install</code> 也支持直接输入 <code>Github</code> 代码库地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install git://github.com/package/path.git</div><div class="line">$ npm install git://github.com/package/path.git<span class="comment">#0.1.0</span></div></pre></td></tr></table></figure><p>安装之前，<code>npm install</code> 会先检查，<code>node_modules</code> 目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p><p>如果你希望，一个模块不管是否安装过， <code>npm</code> 都要强制重新安装，可以使用 <code>-f</code> 或 <code>--force</code> 参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;packageName&gt; --force</div></pre></td></tr></table></figure><h4 id="安装不同版本"><a href="#安装不同版本" class="headerlink" title="安装不同版本"></a>安装不同版本</h4><p><code>install</code> 命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上 <code>@</code> 和版本号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install sax@latest</div><div class="line">$ npm install sax@0.1.1</div><div class="line">$ npm install sax@<span class="string">"&gt;=0.1.0 &lt;0.2.0"</span></div></pre></td></tr></table></figure><p><code>install</code> 命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在 <code>packages.json</code> 文件的哪一项中。</p><blockquote><p>–save：模块名将被添加到 dependencies，可以简化为参数-S。<br>–save-dev：模块名将被添加到 devDependencies，可以简化为参数-D。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install sax --save</div><div class="line">$ npm install node-tap --save-dev</div><div class="line"><span class="comment"># 或者</span></div><div class="line">$ npm install sax -S</div><div class="line">$ npm install node-tap -D</div></pre></td></tr></table></figure><h5 id="dependencies-依赖"><a href="#dependencies-依赖" class="headerlink" title="dependencies 依赖"></a>dependencies 依赖</h5><p>这个可以说是我们 <code>npm</code> 核心一项内容，依赖管理，这个对象里面的内容就是我们这个项目所依赖的 <code>js</code> 模块包。下面这段代码表示我们依赖了 <code>markdown-it</code> 这个包，版本是 <code>^8.1.0</code> ，代表最小依赖版本是 <code>8.1.0</code> ，如果这个包有更新，那么当我们使用 <code>npm install</code> 命令的时候， <code>npm</code> 会帮我们下载最新的包。当别人引用我们这个包的时候，包内的依赖包也会被下载下来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"markdown-it"</span>: <span class="string">"^8.1.0"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="devDependencies-开发依赖"><a href="#devDependencies-开发依赖" class="headerlink" title="devDependencies 开发依赖"></a>devDependencies 开发依赖</h5><p>在我们开发的时候会用到的一些包，只是在开发环境中需要用到，但是在别人引用我们包的时候，不会用到这些内容，放在 <code>devDependencies</code> 的包，在别人引用的时候不会被 <code>npm</code> 下载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"autoprefixer"</span>: <span class="string">"^6.4.0"</span>,</div><div class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.0.0"</span>,</div><div class="line">    <span class="string">"babel-preset-stage-2"</span>: <span class="string">"^6.0.0"</span>,</div><div class="line">    <span class="string">"babel-register"</span>: <span class="string">"^6.0.0"</span>,</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.13.2"</span>,</div><div class="line">    <span class="string">"webpack-dev-middleware"</span>: <span class="string">"^1.8.3"</span>,</div><div class="line">    <span class="string">"webpack-hot-middleware"</span>: <span class="string">"^2.12.2"</span>,</div><div class="line">    <span class="string">"webpack-merge"</span>: <span class="string">"^0.14.1"</span>,</div><div class="line">    <span class="string">"highlightjs"</span>: <span class="string">"^9.8.0"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当你有了一个完整的 <code>package.json</code>文件的时候，就可以让人一眼看出来，这个模块的基本信息，和这个模块所需要依赖的包。我们可以通过 <code>npm install</code> 就可以很方便的下载好这个模块所需要的包。</p><p><code>npm install</code> 默认会安装 <code>dependencies</code> 字段和 <code>devDependencies</code> 字段中的所有模块，如果使用 <code>--production</code> 参数，可以只安装 <code>dependencies</code> 字段的模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install --production</div><div class="line"><span class="comment"># 或者</span></div><div class="line">$ NODE_ENV=production npm install</div></pre></td></tr></table></figure><p>一旦安装了某个模块，就可以在代码中用 <code>require</code> 命令加载这个模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> backbone = <span class="built_in">require</span>(<span class="string">'backbone'</span>)</div><div class="line"><span class="built_in">console</span>.log(backbone.VERSION)</div></pre></td></tr></table></figure><h3 id="npm-run"><a href="#npm-run" class="headerlink" title="npm run"></a>npm run</h3><p><code>npm</code> 不仅可以用于模块管理，还可以用于执行脚本。<code>package.json</code> 文件有一个 <code>scripts</code> 字段，可以用于指定脚本命令，供 <code>npm</code> 直接调用。<br><code>package.json</code> 文件内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"myproject"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"jshint"</span>: <span class="string">"latest"</span>,</div><div class="line">    <span class="string">"browserify"</span>: <span class="string">"latest"</span>,</div><div class="line">    <span class="string">"mocha"</span>: <span class="string">"latest"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"lint"</span>: <span class="string">"jshint **.js"</span>,</div><div class="line">    <span class="string">"test"</span>: <span class="string">"mocha test/"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="scripts-脚本"><a href="#scripts-脚本" class="headerlink" title="scripts 脚本"></a>scripts 脚本</h4><p>顾名思义，就是一些脚本代码，可以通过 <code>npm run script-key</code> 来调用，例如在这个 <code>package.json</code> 的文件夹下使用 <code>npm run dev</code> 就相当于运行了 <code>node build/dev-server.js</code> 这一段代码。使用 <code>scripts</code> 的目的就是为了把一些要执行的代码合并到一起，使用 npm run 来快速的运行，方便省事。<br><code>npm run</code> 是 <code>npm run-script</code> 的缩写，一般都使用前者，但是后者可以更好的反应这个命令的本质。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 脚本</span></div><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"node build/dev-server.js"</span>,</div><div class="line">    <span class="string">"build"</span>: <span class="string">"node build/build.js"</span>,</div><div class="line">    <span class="string">"docs"</span>: <span class="string">"node build/docs.js"</span>,</div><div class="line">    <span class="string">"build-docs"</span>: <span class="string">"npm run docs &amp; git checkout gh-pages &amp; xcopy /sy dist\\* . &amp; git add . &amp; git commit -m 'auto-pages' &amp; git push &amp; git checkout master"</span>,</div><div class="line">    <span class="string">"build-publish"</span>: <span class="string">"rmdir /S /Q lib &amp; npm run build &amp;git add . &amp; git commit -m auto-build &amp; npm version patch &amp; npm publish &amp; git push"</span>,</div><div class="line">    <span class="string">"lint"</span>: <span class="string">"eslint --ext .js,.vue src"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>npm run</code> 如果不加任何参数，直接运行，会列出 <code>package.json</code> 里面所有可以执行的脚本命令。<br><code>npm</code> 内置了两个命令简写， <code>npm test</code> 等同于执行 <code>npm run test</code> ，<code>npm start</code> 等同于执行 <code>npm run start</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"build"</span>: <span class="string">"npm run build-js &amp;&amp; npm run build-css"</span></div></pre></td></tr></table></figure><p>上面的写法是先运行 <code>npm run build-js</code> ，然后再运行 <code>npm run build-css</code> ，两个命令中间用 <code>&amp;&amp;</code> 连接。如果希望两个命令同时平行执行，它们中间可以用 <code>&amp;</code> 连接。</p><p>写在 <code>scripts</code> 属性中的命令，也可以在 <code>node_modules/.bin</code> 目录中直接写成 <code>bash</code> 脚本。下面是一个 <code>bash</code> 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">cd</span> site/main</div><div class="line">browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js</div></pre></td></tr></table></figure><p>假定上面的脚本文件名为 <code>build.sh</code> ，并且权限为可执行，就可以在 <code>scripts</code> 属性中引用该文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"build-js"</span>: <span class="string">"bin/build.sh"</span></div></pre></td></tr></table></figure><h3 id="pre-和-post-脚本"><a href="#pre-和-post-脚本" class="headerlink" title="pre- 和 post- 脚本"></a>pre- 和 post- 脚本</h3><p><code>npm run</code> 为每条命令提供了 <code>pre-</code> 和 <code>post-</code> 两个钩子（ <code>hook</code> ）。以 <code>npm run lint</code> 为例，执行这条命令之前， <code>npm</code> 会先查看有没有定义 <code>prelint</code> 和 <code>postlint</code> 两个钩子，如果有的话，就会先执行 <code>npm run prelint</code> ，然后执行 <code>npm run lint</code> ，最后执行 <code>npm run postlint</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"myproject"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"eslint"</span>: <span class="string">"latest"</span></div><div class="line">    <span class="string">"karma"</span>: <span class="string">"latest"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"lint"</span>: <span class="string">"eslint --cache --ext .js --ext .jsx src"</span>,</div><div class="line">    <span class="string">"test"</span>: <span class="string">"karma start --log-leve=error karma.config.js --single-run=true"</span>,</div><div class="line">    <span class="string">"pretest"</span>: <span class="string">"npm run lint"</span>,</div><div class="line">    <span class="string">"posttest"</span>: <span class="string">"echo 'Finished running tests'"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面代码是一个 <code>package.json</code> 文件的例子。如果执行 <code>npm test</code>，会按下面的顺序执行相应的命令。</p><ol><li><code>pretest</code></li><li><code>test</code></li><li><code>posttest</code></li></ol><p>如果执行过程出错，就不会执行排在后面的脚本，即如果 <code>prelint</code> 脚本执行出错，就不会接着执行 <code>lint</code> 和 <code>postlint</code> 脚本。</p><h3 id="npm-bin"><a href="#npm-bin" class="headerlink" title="npm bin"></a>npm bin</h3><p><code>npm bin</code> 命令显示相对于当前目录的，<code>Node</code> 模块的可执行脚本所在的目录（即 <code>.bin</code> 目录）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 项目根目录下执行</span></div><div class="line">$ npm bin</div><div class="line">./node_modules/.bin</div></pre></td></tr></table></figure><h1 id="创建全局链接"><a href="#创建全局链接" class="headerlink" title="创建全局链接"></a>创建全局链接</h1><p><code>npm</code> 提供了一个有趣的命令 <code>npm link</code>，它的功能是在本地包和全局包之间创建符号链接。我们说过使用全局模式安装的包不能直接通过 <code>require</code> 使用。但通过 <code>npm link</code> 命令可以打破这一限制。举个例子，我们已经通过 <code>npm install -g express</code> 安装了 <code>express</code> ，这时在工程的目录下运行命令：<code>npm link express ./node_modules/express -&gt; /user/local/lib/node_modules/express</code><br>我们可以在 <code>node_modules</code> 子目录中发现一个指向安装到全局的包的符号链接。通过这种方法，我们就可以把全局包当做本地包来使用了。<br>除了将全局的包链接到本地以外，使用 <code>npm link</code> 命令还可以将本地的包链接到全局。使用方法是在包目录（<code>package.json</code> 所在目录）中运行 <code>npm link</code> 命令。如果我们要开发一个包，利用这种方法可以非常方便地在不同的工程间进行测试。</p><h1 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h1><p>包是在模块基础上更深一步的抽象，<code>Node</code> 的包类似于 <code>C/C++</code> 的函数库或者 <code>Java</code> 、<code>.Net</code> 的类库。它将某个独立的功能封装起来，用于发布、更新、依赖管理和版本控制。<code>Node</code> 根据 <code>CommonJS</code> 规范实现了包机制，开发了 <code>npm</code> 来解决包的发布和获取需求。<br><code>Node</code> 的包是一个目录，其中包含了一个 <code>JSON</code> 格式的包说明文件 <code>package.json</code>。严格符合 <code>CommonJS</code> 规范的包应该具备以下特征：</p><ul><li><code>package.json</code> 必须在包的顶层目录下；</li><li>二进制文件应该在 <code>bin</code> 目录下；</li><li><code>JavaScript</code> 代码应该在 <code>lib</code> 目录下；</li><li>文档应该在 <code>doc</code> 目录下；</li><li>单元测试应该在 <code>test</code> 目录下。</li></ul><p><code>Node</code> 对包的要求并没有这么严格，只要顶层目录下有 <code>package.json</code>，并符合一些规范即可。当然为了提高兼容性，我们还是建议你在制作包的时候，严格遵守 <code>CommonJS</code> 规范。</p><p>我们也可以把文件夹封装为一个模块，即所谓的包。包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于提供了一些固定接口的函数库。通过定制 <code>package.json</code>，我们可以创建更复杂，更完善，更符合规范的包用于发布。</p><p><code>Node</code> 在调用某个包时，会首先检查包中 <code>packgage.json</code> 文件的 <code>main</code> 字段，将其作为包的接口模块，如果 <code>package.json</code> 或 <code>main</code> 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。</p><p><code>package.json</code> 是 <code>CommonJS</code> 规定的用来描述包的文件，完全符合规范的 <code>package.json</code> 文件应该含有以下字段：<br><span id="inline-yellow">name</span>: 包的名字，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格。<br><span id="inline-blue">description</span>: 包的简要说明。<br><span id="inline-green">version</span>: 符合语义化版本识别规范的版本字符串。<br><span id="inline-red">keywords</span>: 关键字数组，通常用于搜索。<br><span id="inline-purple">maintainers</span>: 维护者数组，每个元素要包含 <code>name</code> 、 <code>email</code>(可选)、 <code>web</code>(可选)字段。<br><span id="inline-yellow">contributors</span>: 贡献者数组，格式与 <code>maintainers</code> 相同。包的作者应该是贡献者数组的第一个元素。<br><span id="inline-blue">bugs</span>: 提交 <code>bug</code> 的地址，可以是网址或者电子邮件地址。<br><span id="inline-green">licenses</span>: 许可证数组，每个元素要包含 <code>type</code> （许可证的名称）和 url（链接到许可证文本的地址）字段。<br><span id="inline-red">repositories</span>: 仓库托管地址数组，每个元素要包含 <code>type</code> （仓库的类型，如 git）、URL（仓库的地址）和 path（相对于仓库的路径，可选）字段。<br><span id="inline-purple">dependencies</span>: 包的依赖，一个关联数组，由包名称和版本号组成。</p><h1 id="包的发布"><a href="#包的发布" class="headerlink" title="包的发布"></a>包的发布</h1><p>通过使用 <code>npm init</code> 可以根据交互式回答产生一个符合标准的 <code>package.json</code>。创建一个 <code>index.js</code> 作为包的接口,一个简单的包就制作完成了。<br>在发布前,我们还需要获得一个账号用于今后维护自己的包,使用 <code>npm adduser</code> 根据提示完成账号的创建<br>完成后可以使用 <code>npm whoami</code> 检测是否已经取得了账号。<br>接下来,在 <code>package.json</code> 所在目录下运行 <code>npm publish</code>，稍等片刻就可以完成发布了，打开浏览器，访问 <a href="http://search.npmjs.org/" target="_blank" rel="external">NPM搜索</a> 就可以找到自己刚刚发布的包了。现在我们可以在世界的任意一台计算机上使用 <code>npm install neveryumodule</code> 命令来安装它。<br>如果你的包将来有更新,只需要在 <code>package.json</code> 文件中修改 <code>version</code> 字段,然后重新使用 <code>npm publish</code>命令就行了。<br>如果你对已发布的包不满意，可以使用 <code>npm unpublish</code> 命令来取消发布。</p><p id="div-border-top-yellow"><em>需要说明的是： <code>json</code> 文件不能有注释</em><br></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://javascript.ruanyifeng.com/nodejs/npm.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/nodejs/npm.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是-NPM&quot;&gt;&lt;a href=&quot;#什么是-NPM&quot; class=&quot;headerlink&quot; title=&quot;什么是 NPM&quot;&gt;&lt;/a&gt;什么是 NPM&lt;/h1&gt;&lt;p&gt;&lt;code&gt;npm&lt;/code&gt; 之于 &lt;code&gt;Node&lt;/code&gt; ，就像 &lt;code&gt;pip&lt;/code&gt; 之于 &lt;code&gt;Python&lt;/code&gt; , &lt;code&gt;gem&lt;/code&gt; 之于 &lt;code&gt;Ruby&lt;/code&gt; , &lt;code&gt;composer&lt;/code&gt; 之于 &lt;code&gt;PHP&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm&lt;/code&gt; 是 &lt;code&gt;Node&lt;/code&gt; 官方提供的包管理工具，他已经成了 &lt;code&gt;Node&lt;/code&gt; 包的标准发布平台，用于 &lt;code&gt;Node&lt;/code&gt; 包的发布、传播、依赖控制。&lt;br&gt;&lt;code&gt;npm&lt;/code&gt; 提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="https://blog.ihoey.com/categories/Node/"/>
    
    
      <category term="Node" scheme="https://blog.ihoey.com/tags/Node/"/>
    
      <category term="npm" scheme="https://blog.ihoey.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>重新认识伪类和伪元素</title>
    <link href="https://blog.ihoey.com/posts/CSS3/2017-04-28-pseudo-elements-and-pseudo-classes.html"/>
    <id>https://blog.ihoey.com/posts/CSS3/2017-04-28-pseudo-elements-and-pseudo-classes.html</id>
    <published>2017-04-28T08:35:10.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>熟悉前端的人都会听过<code>css</code>的伪类与伪元素，然而大多数的人都会将这两者混淆(包括我)。那今天就让我们来看看伪类和伪元素的区别吧!</p><a id="more"></a><h2 id="伪类与伪元素"><a href="#伪类与伪元素" class="headerlink" title="伪类与伪元素"></a>伪类与伪元素</h2><p>先说一说为什么<code>css</code>要引入伪元素和伪类，以下是<code>css2.1 Selectors</code>章节中对伪类与伪元素的描述：</p><p><code>CSS introduces the concepts of pseudo-elements and pseudo-classes  to permit formatting based on information that lies outside the document tree.</code></p><ul><li>直译过来就是：<code>css</code>引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。下面分别对伪类和伪元素进行解释：<ul><li>伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通过<code>:hover</code>来描述这个元素的状态。虽然它和普通的<code>css</code>类相似，可以为已有的元素添加样式，但是它只有处于<code>dom</code>树无法描述的状态下才能为元素添加样式，所以将其称为伪类。</li><li>伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过<code>:before</code>来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</li></ul></li></ul><h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><ul><li>伪类前面是一个冒号，<code>E:first-child</code> 伪类，会对现有的元素进行筛选<ul><li><code>:link</code></li><li><code>:visited</code></li><li><code>:hover</code></li><li><code>:active</code></li><li><code>:focus</code></li><li><code>:not()</code></li><li><code>:first-child</code></li><li><code>:last-child</code></li><li><code>:nth-child</code></li><li><code>:nth-last-child</code> 从后面计数</li><li><code>:only-child</code> 只满足一个子元素</li><li><code>:target</code> 当URL带有锚名称，指向文档内某个具体的元素时，<code>:target</code>匹配该元素。</li><li><code>:checked</code> 被选中的input元素</li><li><code>:empty</code> 匹配没有子元素的元素</li><li><code>:valid</code> 匹配条件验证正确的表单元素。</li></ul></li></ul><h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><ul><li>伪元素前面是两个冒号，<code>E::first-line</code> 伪元素。会创造出不存在的新元素，由于 <code>css</code> 对单冒号的伪元素也支持，所以这样很容易让新学者混淆。但实际上现在 <code>css3</code> 已经明确规定了伪类单冒号，伪元素双冒号的规则。<ul><li><code>::before/:before</code> 在被选元素前插入内容</li><li><code>::after/:after</code> 在被元素后插入内容，其用法和特性与<code>:before</code>相似。</li><li><code>::first-letter/:first-letter</code> 匹配元素中文本的首字母。被修饰的首字母不在文档树中</li><li><code>::first-line/:first-line</code> 匹配元素中第一行的文本。这个伪元素只能用在块元素中，不能用在内联元素中。</li><li><code>::selection</code> 匹配用户被用户选中或者处于高亮状态的部分。在火狐浏览器使用时需要添加<code>-moz</code>前缀。该伪元素只支持双冒号的形式。</li><li><code>::placeholder</code> 匹配占位符的文本，只有元素设置了<code>placeholder</code>属性时，该伪元素才能生效。</li></ul></li><li>该伪元素不是<code>CSS</code>的标准，它的实现可能在将来会有所改变，所以要决定使用时必须谨慎。<br>在一些浏览器中（<code>IE10</code>和<code>Firefox18</code>及其以下版本）会使用单冒号的形式。</li><li>对于伪元素 <code>:before</code> 和 <code>:after</code> 而言，属性 <code>content</code> 是必须设置的，我们知道属性的值可以为字符串，也可以有其它形式，比如指向一张图片的 <code>URL:</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">content: url(&apos;img/icon.png&apos;)</div></pre></td></tr></table></figure><ul><li>配合伪类使用<ul><li>伪元素 <code>:before</code> 还可以配合伪类使用，这里举经常与 <code>:before</code> 配合使用的伪类 <code>:hover</code> 为例：</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.before:hover:before&#123;content:&apos;you before&apos;; color:red;&#125;</div><div class="line">&lt;div class=&quot;before&quot;&gt; me&lt;/div&gt;</div></pre></td></tr></table></figure><ul><li>配合取值函数 <code>attr()</code> 使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a::before&#123;content: attr(title)&#125;</div><div class="line">&lt;a href=&quot;https://blog.ihoey.com&quot; title=&quot;梦魇小栈&quot;&gt;&lt;/a&gt;</div><div class="line"></div><div class="line">效果</div><div class="line">&lt;a href=&quot;https://blog.ihoey.com&quot; title=&quot;梦魇小栈&quot;&gt;梦魇小栈&lt;/a&gt;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>伪元素和伪类之所以这么容易混淆，是因为他们的效果类似而且写法相仿，但实际上 <code>css3</code> 为了区分两者，已经明确规定了伪类用一个冒号来表示，而伪元素则用两个冒号来表示。</li><li>伪类的效果可以通过添加一个实际的类来达到，而伪元素的效果则需要通过添加一个实际的元素才能达到，这也是为什么他们一个称为伪类，一个称为伪元素的原因。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;熟悉前端的人都会听过&lt;code&gt;css&lt;/code&gt;的伪类与伪元素，然而大多数的人都会将这两者混淆(包括我)。那今天就让我们来看看伪类和伪元素的区别吧!&lt;/p&gt;
    
    </summary>
    
      <category term="CSS3" scheme="https://blog.ihoey.com/categories/CSS3/"/>
    
    
      <category term="伪类" scheme="https://blog.ihoey.com/tags/%E4%BC%AA%E7%B1%BB/"/>
    
      <category term="伪元素" scheme="https://blog.ihoey.com/tags/%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令学习及整理</title>
    <link href="https://blog.ihoey.com/posts/Git/2017-04-23-git.html"/>
    <id>https://blog.ihoey.com/posts/Git/2017-04-23-git.html</id>
    <published>2017-04-23T02:23:21.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近用Git比较多，所以大概整理下 <strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装软件就不多说了，这个肯定都会了</p><ul><li>下载地址：<a class="active" href="https://git-scm.com/downloads" rel="external" target="_blank">Downloads</a></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"ihoey"</span>           <span class="comment"># 设置git用户名</span></div><div class="line">git config --global user.email <span class="string">"mail@ihoey.com"</span> <span class="comment"># 设置git邮箱</span></div><div class="line">git config --global color.ui <span class="literal">true</span>               <span class="comment"># 为true是终端着色</span></div><div class="line">git config --global alias.co checkout           <span class="comment"># 配置checkout的别名</span></div><div class="line">git config --global alias.ci commit             <span class="comment"># 配置commit的别名</span></div><div class="line">git config --global alias.st status             <span class="comment"># 配置status的别名</span></div><div class="line">git config --global alias.br branch             <span class="comment"># 配置branch的别名</span></div><div class="line">git config --global core.editor <span class="string">"mate -w"</span>       <span class="comment"># 设置Editor使用textmate</span></div><div class="line">git config -l                                   <span class="comment"># 列举所有配置</span></div><div class="line"><span class="comment">#用户的git配置文件~/.gitconfig</span></div></pre></td></tr></table></figure><h2 id="SSH-秘钥"><a href="#SSH-秘钥" class="headerlink" title="SSH 秘钥"></a>SSH 秘钥</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"mail@ihoey.com"</span></div><div class="line"><span class="comment"># 连续3个回车。如果不需要密码的话。</span></div><div class="line"><span class="comment"># 最后得到了两个文件：id_rsa和id_rsa.pub，在~/.ssh/文件夹下面</span></div><div class="line"><span class="comment"># id_rsa为你的私钥，不可以告诉别人</span></div><div class="line"><span class="comment"># id_rsa.pub为你的公钥，一般会放在你的服务器做ssh登录，或者放在github上面</span></div></pre></td></tr></table></figure><h2 id="GitHub-测试"><a href="#GitHub-测试" class="headerlink" title="GitHub 测试"></a>GitHub 测试</h2><p><em>ssh -T git@github.com</em> 将公钥放在<code>github</code>测试是否验证通过命令，选择 <code>yes</code> 如果看到 <code>Hi</code> 后面是你的用户名，就说明成功了。</p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li>创建<code>git</code>仓库 <code>git init</code></li><li>添加文件到暂存区 <code>git add fileName</code> / <code>git add .</code></li><li>提交文件到仓库 <code>git commit -m &quot;版本提交信息&quot;</code></li><li>查看文件提交状态 <code>git status</code></li><li>查看文件修改的信息 <code>git diff readme.txt</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt;          <span class="comment"># 显示command的help</span></div><div class="line">git show                    <span class="comment"># 显示某次提交的内容</span></div><div class="line">git show <span class="variable">$id</span></div><div class="line"></div><div class="line">git checkout  -- &lt;file&gt;     <span class="comment"># 抛弃工作区修改</span></div><div class="line">git checkout  .             <span class="comment"># 抛弃工作区修改</span></div><div class="line"></div><div class="line">git add &lt;file&gt;              <span class="comment"># 将工作文件修改提交到本地暂存区</span></div><div class="line">git add .                   <span class="comment"># 将所有修改过的工作文件提交暂存区</span></div><div class="line"></div><div class="line">git rm &lt;file&gt;               <span class="comment"># 从版本库中删除文件</span></div><div class="line">git rm &lt;file&gt; --cached      <span class="comment"># 从版本库中删除文件，但不删除文件</span></div><div class="line"></div><div class="line">git reset &lt;file&gt;            <span class="comment"># 从暂存区恢复到工作文件</span></div><div class="line">git reset -- .              <span class="comment"># 从暂存区恢复到工作文件</span></div><div class="line">git reset --hard            <span class="comment"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span></div><div class="line"></div><div class="line">git commit -m <span class="string">"some comments"</span></div><div class="line"></div><div class="line">git revert &lt;<span class="variable">$id</span>&gt;            <span class="comment"># 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</span></div><div class="line">git revert HEAD             <span class="comment"># 恢复最后一次提交的状态</span></div></pre></td></tr></table></figure><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git diff &lt;file&gt;                 <span class="comment"># 比较当前文件和暂存区文件差异</span></div><div class="line">git diff</div><div class="line">git diff &lt;<span class="variable">$id1</span>&gt; &lt;<span class="variable">$id2</span>&gt;          <span class="comment"># 比较两次提交之间的差异</span></div><div class="line">git diff &lt;branch1&gt;..&lt;branch2&gt;   <span class="comment"># 在两个分支之间比较</span></div><div class="line">git diff --staged               <span class="comment"># 比较暂存区和版本库差异</span></div><div class="line">git diff --cached               <span class="comment"># 比较暂存区和版本库差异</span></div><div class="line">git diff --<span class="built_in">stat</span>                 <span class="comment"># 仅仅比较统计信息</span></div></pre></td></tr></table></figure><h2 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span></div><div class="line">git <span class="built_in">log</span> &lt;file&gt;      <span class="comment"># 查看该文件每次提交记录</span></div><div class="line">git <span class="built_in">log</span> -p &lt;file&gt;   <span class="comment"># 查看每次详细修改内容的diff</span></div><div class="line">git <span class="built_in">log</span> -p -2       <span class="comment"># 查看最近两次详细修改内容的diff</span></div><div class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>      <span class="comment"># 查看提交统计信息</span></div></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">git branch -r                           <span class="comment"># 查看远程分支</span></div><div class="line">git branch &lt;new_branch&gt;                 <span class="comment"># 创建新的分支</span></div><div class="line">git branch -v                           <span class="comment"># 查看各个分支最后提交信息</span></div><div class="line">git branch --merged                     <span class="comment"># 查看已经被合并到当前分支的分支</span></div><div class="line">git branch --no-merged                  <span class="comment"># 查看尚未被合并到当前分支的分支</span></div><div class="line"></div><div class="line">git checkout &lt;branch&gt;                   <span class="comment"># 切换到某个分支</span></div><div class="line">git checkout -b &lt;new_branch&gt;            <span class="comment"># 创建新的分支，并且切换过去</span></div><div class="line">git checkout -b &lt;new_branch&gt; &lt;branch&gt;   <span class="comment"># 基于branch创建新的new_branch</span></div><div class="line">git checkout <span class="variable">$id</span>       <span class="comment"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span></div><div class="line">git checkout <span class="variable">$id</span> -b &lt;new_branch&gt;        <span class="comment"># 把某次历史提交记录checkout出来，创建成一个分支</span></div><div class="line">git branch -d &lt;branch&gt;                  <span class="comment"># 删除某个分支</span></div><div class="line">git branch -D &lt;branch&gt; <span class="comment"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span></div></pre></td></tr></table></figure><h2 id="分支合并和rebase"><a href="#分支合并和rebase" class="headerlink" title="分支合并和rebase"></a>分支合并和rebase</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git merge &lt;branch&gt;               <span class="comment"># 将branch分支合并到当前分支</span></div><div class="line">git merge --no-ff &lt;branch&gt;       <span class="comment"># 不要Fast-Foward合并，这样可以生成merge提交</span></div><div class="line">git rebase master &lt;branch&gt;       <span class="comment"># 将master rebase到branch，相当于：</span></div><div class="line">git checkout &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git checkout master &amp;&amp; git merge &lt;branch&gt;</div></pre></td></tr></table></figure><ul><li>在我们操作过程中。<code>merge</code>操作遇到冲突的时候，当前<code>merge</code>不能继续进行下去。手动修改冲突内容后，<code>add</code> 修改，<code>commit</code> 就可以了。</li><li>而<code>rebase</code> 操作的话，会中断<code>rebase</code>,同时会提示去解决冲突。解决冲突后,将修改<code>add</code>后执行<code>git rebase –continue</code>继续操作，或者<code>git rebase –skip</code>忽略冲突。</li></ul><h2 id="Git暂存管理"><a href="#Git暂存管理" class="headerlink" title="Git暂存管理"></a>Git暂存管理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git stash                        <span class="comment"># 暂存</span></div><div class="line">git stash list                   <span class="comment"># 列所有stash</span></div><div class="line">git stash apply                  <span class="comment"># 恢复暂存的内容</span></div><div class="line">git stash drop                   <span class="comment"># 删除暂存区</span></div></pre></td></tr></table></figure><h2 id="远程分支管理"><a href="#远程分支管理" class="headerlink" title="远程分支管理"></a>远程分支管理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">git pull                         <span class="comment"># 抓取远程仓库所有分支更新并合并到本地</span></div><div class="line">git pull --no-ff                 <span class="comment"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span></div><div class="line">git fetch origin                 <span class="comment"># 抓取远程仓库更新</span></div><div class="line">git merge origin/master          <span class="comment"># 将远程主分支合并到本地当前分支</span></div><div class="line">git checkout --track origin/branch     <span class="comment"># 跟踪某个远程分支创建相应的本地分支</span></div><div class="line">git checkout -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  <span class="comment"># 基于远程分支创建本地分支，功能同上</span></div><div class="line">git push                         <span class="comment"># push所有分支</span></div><div class="line">git push origin master           <span class="comment"># 将本地主分支推到远程主分支</span></div><div class="line">git push -u origin master        <span class="comment"># 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span></div><div class="line">git push origin &lt;local_branch&gt;   <span class="comment"># 创建远程分支， origin是远程仓库名</span></div><div class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  <span class="comment"># 创建远程分支</span></div><div class="line">git push origin :&lt;remote_branch&gt; <span class="comment">#先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span></div></pre></td></tr></table></figure><h2 id="Git远程仓库管理"><a href="#Git远程仓库管理" class="headerlink" title="Git远程仓库管理"></a>Git远程仓库管理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git remote -v                    <span class="comment"># 查看远程服务器地址和仓库名称</span></div><div class="line">git remote show origin           <span class="comment"># 查看远程服务器仓库状态</span></div><div class="line">git remote add origin git@github.com:ihoey/blog.git     <span class="comment"># 添加远程仓库地址</span></div><div class="line">git remote <span class="built_in">set</span>-url origin git@github.com:ihoey/blog.git <span class="comment"># 设置远程仓库地址(用于修改远程仓库地址)</span></div><div class="line">git remote rm &lt;repository&gt;       <span class="comment"># 删除远程仓库</span></div></pre></td></tr></table></figure><h2 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> --bare ihoey.com blog.git     <span class="comment"># 用带版本的项目创建纯版本仓库</span></div><div class="line">scp -r my_blog.git git@ihoey.com:~      <span class="comment"># 将纯仓库上传到服务器上</span></div><div class="line">mkdir blog.git &amp;&amp; <span class="built_in">cd</span> blog.git &amp;&amp; git --bare init <span class="comment"># 在服务器创建纯仓库</span></div><div class="line"></div><div class="line">git push -u origin master         <span class="comment"># 客户端首次提交</span></div><div class="line">git push -u origin develop        <span class="comment"># 首次将本地develop分支提交到远程develop分支，并且track</span></div><div class="line"></div><div class="line">git remote <span class="built_in">set</span>-head origin master <span class="comment"># 设置远程仓库的HEAD指向master分支</span></div></pre></td></tr></table></figure><h2 id="设置跟踪远程库和本地库"><a href="#设置跟踪远程库和本地库" class="headerlink" title="设置跟踪远程库和本地库"></a>设置跟踪远程库和本地库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch --<span class="built_in">set</span>-upstream master origin/master      <span class="comment">#master</span></div><div class="line">git branch --<span class="built_in">set</span>-upstream develop origin/develop    <span class="comment">#develop</span></div></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir XX    <span class="comment">#(创建一个空目录 XX指目录名)</span></div><div class="line"><span class="built_in">pwd</span>         <span class="comment">#显示当前目录的路径。</span></div><div class="line">cat XX      <span class="comment">#查看XX文件内容</span></div><div class="line">rm  XX      <span class="comment">#删除文件</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用Git比较多，所以大概整理下 &lt;strong&gt;Git是目前世界上最先进的分布式版本控制系统。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://blog.ihoey.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://blog.ihoey.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 使用 Cron 实现计划任务</title>
    <link href="https://blog.ihoey.com/posts/Cron/2017-04-22-Cron.html"/>
    <id>https://blog.ihoey.com/posts/Cron/2017-04-22-Cron.html</id>
    <published>2017-04-21T16:21:21.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 自带定时执行任务的工具叫做“计划任务”，Linux 下我们使用 Cron 实现这一功能。</p><a id="more"></a><h2 id="安装-cron-服务"><a href="#安装-cron-服务" class="headerlink" title="安装 cron 服务"></a>安装 cron 服务</h2><ul><li>通常 ubuntu 下自带 cron，如果没有也可以通过以下命令进行安装：<code>apt-get install cron</code></li><li>若已经安装，输入以下命令判断 cron 服务是否启动：<code>pgrep cron</code></li><li>如果有 pid （一串数字）输出则说明 cron 服务已经启动，没有任何输出说明需要手动启动 cron 服务。</li></ul><h2 id="启动-cron-服务"><a href="#启动-cron-服务" class="headerlink" title="启动 cron 服务"></a>启动 cron 服务</h2><ul><li>启动服务 <code>service cron start</code></li></ul><h2 id="编辑计划文件"><a href="#编辑计划文件" class="headerlink" title="编辑计划文件"></a>编辑计划文件</h2><p><code>crontab -e</code></p><p>来打开你的用户所属的crontab文件。第一次用这个命令，会让你选择文本编辑器，我选的是vim。选定的编辑器也可以使用</p><p>你也可以每次自己更改 <code>select-editor</code></p><h2 id="重启-cron-服务"><a href="#重启-cron-服务" class="headerlink" title="重启 cron 服务"></a>重启 cron 服务</h2><p>每次保存了crontab之后，我们还需要重启cron来应用这个计划任务。使用命令：<code>sudo service cron restart</code></p><h2 id="管理任务计划文件"><a href="#管理任务计划文件" class="headerlink" title="管理任务计划文件"></a>管理任务计划文件</h2><p>cron 的所有任务计划都记录在 crontab 任务计划文件中，通过 crontab 命令对该任务文件进行管理。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ crontab -u root -e     <span class="comment">#编辑用户 root 的计划任务文件</span></div><div class="line"></div><div class="line">$ crontab -e            <span class="comment">#编辑当前用户的计划任务文件</span></div><div class="line"></div><div class="line">$ crontab -u root -l     <span class="comment">#显示用户 root 的计划任务文件</span></div><div class="line"></div><div class="line">$ crontab -l            <span class="comment">#显示当前用户的计划任务文件</span></div><div class="line"></div><div class="line">$ crontab -r            <span class="comment">#删除当前用户的计划任务文件</span></div></pre></td></tr></table></figure><h2 id="cron-语法格式"><a href="#cron-语法格式" class="headerlink" title="cron 语法格式"></a>cron 语法格式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">m h dom mon dow   <span class="built_in">command</span></div><div class="line">0-59 0-23 1-31 1-12 0-7  <span class="built_in">command</span></div></pre></td></tr></table></figure><ul><li>m: 表示分钟</li><li>h: 表示小时</li><li>dom: 表示日期</li><li>mon: 表示月份</li><li>dow: 表示星期</li><li>command: 预执行的命令</li></ul><p>另外需要使用一些特殊符号实现灵活的配置：</p><ul><li><code>* 代表所有值</code></li><li><code>/ 代表“每”</code></li><li><code>- 代表范围</code></li><li><code>, 分割数字</code></li></ul><h2 id="任务示例"><a href="#任务示例" class="headerlink" title="任务示例"></a>任务示例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 指定具体执行时间</span></div><div class="line">2   *  *  *  * ls    <span class="comment">#每个小时的第2分钟执行一次 ls 命令</span></div><div class="line">30  7  *  *  * ls    <span class="comment">#每天7：30执行一次 ls 命令</span></div><div class="line">30 20  *  *  2 ls    <span class="comment">#每周二，20：30执行一次 ls 命令（0和7表示星期天）</span></div><div class="line"></div><div class="line"><span class="comment">## 指定间隔时间</span></div><div class="line">*/2 *  *  *  * ls    <span class="comment">#每隔2分钟执行一次 ls 命令</span></div><div class="line"></div><div class="line"><span class="comment">## 指定时间段</span></div><div class="line">30  7 3-6 *  * ls    <span class="comment">#每个月的3，4，5，6号的7：30分各执行一次 ls 命令</span></div><div class="line"></div><div class="line"><span class="comment">## 指定多个时间</span></div><div class="line">30  7 3,6 *  * ls    <span class="comment">#每月的3号和6号的7：30分各执行一次 ls 命令</span></div></pre></td></tr></table></figure><p>另外，使用 run-parts 可以运行指定目录下所有的脚本（注意脚本必须加上 “#!/bin/bash”，否则 run-parts 会调用失败）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">30 7 * * * run-parts /home   <span class="comment">#每天7：30运行 /home 目录下的所有脚本</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows 自带定时执行任务的工具叫做“计划任务”，Linux 下我们使用 Cron 实现这一功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Cron" scheme="https://blog.ihoey.com/categories/Cron/"/>
    
    
      <category term="Ubuntu" scheme="https://blog.ihoey.com/tags/Ubuntu/"/>
    
      <category term="Cron" scheme="https://blog.ihoey.com/tags/Cron/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="https://blog.ihoey.com/posts/MongoDB/2017-03-27-mongodb-ues.html"/>
    <id>https://blog.ihoey.com/posts/MongoDB/2017-03-27-mongodb-ues.html</id>
    <published>2017-03-27T07:07:03.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章介绍学习MongoDB的一些常用命令,希望能帮助大家.</p><a id="more"></a><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ul><li><code>Help</code>查看命令提示<ul><li><code>db.help()</code>;</li><li><code>db.yourColl.help()</code>;</li><li><code>db.youColl.find().help()</code>;</li></ul></li><li>切换/创建数据库<ul><li><code>use yourDB</code>;  当创建一个集合(<code>table</code>)的时候会自动创建当前数据库</li></ul></li><li>查询所有数据库<ul><li><code>show dbs</code>;</li></ul></li><li>删除当前使用数据库<ul><li><code>db.dropDatabase()</code>;</li></ul></li><li>从指定主机上克隆数据库<ul><li>从指定主机上克隆数据库</li></ul></li><li>从指定的机器上复制指定数据库数据到某个数据库<ul><li><code>db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;)</code>;将本机的<code>mydb</code>的数据复制到<code>temp</code>数据库中</li></ul></li><li>修复当前数据库<ul><li><code>db.repairDatabase()</code>;</li></ul></li><li>查看当前使用的数据库<ul><li><code>db.getName()</code>;</li></ul></li><li>显示当前db状态<ul><li><code>db.stats()</code>;</li></ul></li><li>当前db版本<ul><li><code>db.version()</code>;</li></ul></li><li>查看当前db的链接机器地址<ul><li><code>db.getMongo()</code>;</li></ul></li></ul><h2 id="Collection聚集集合操作"><a href="#Collection聚集集合操作" class="headerlink" title="Collection聚集集合操作"></a>Collection聚集集合操作</h2><ul><li>创建一个聚集集合（<code>table</code>）<ul><li><code>db.createCollection(“collName”, {size: 20, capped: 5, max: 100})</code>;</li></ul></li><li>得到指定名称的聚集集合（<code>table</code>）<ul><li><code>db.getCollection(&quot;account&quot;)</code>;</li></ul></li><li>得到当前db的所有聚集集合<ul><li><code>db.getCollectionNames()</code>;</li></ul></li><li>显示当前db所有聚集索引的状态<ul><li><code>db.printCollectionStats()</code>;</li></ul></li></ul><h2 id="用户相关操作"><a href="#用户相关操作" class="headerlink" title="用户相关操作"></a>用户相关操作</h2><ul><li>添加一个用户<ul><li><code>db.addUser(&quot;name&quot;)</code>;</li><li><code>db.addUser(&quot;userName&quot;, &quot;pwd123&quot;, true)</code>; 添加用户、设置密码、是否只读</li></ul></li><li>数据库认证、安全模式<ul><li><code>db.auth(&quot;userName&quot;, &quot;123123&quot;)</code>;</li></ul></li><li>显示当前所有用户<ul><li><code>show users</code>;</li></ul></li><li>删除用户<ul><li><code>db.removeUser(&quot;userName&quot;)</code>;</li></ul></li></ul><h2 id="聚集集合查询"><a href="#聚集集合查询" class="headerlink" title="聚集集合查询"></a>聚集集合查询</h2><ul><li>查询所有记录<ul><li><code>db.userInfo.find()</code>; 相当于：<code>select* from userInfo</code>;默认每页显示20条记录，当显示不下的情况下,可以用it迭代命令查询下一页数据。注意：键入it命令不能带“;”但是你可以设置每页显示数据的大小,用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。</li></ul></li><li>查询去掉后的当前聚集集合中的某列的重复数据<ul><li><code>db.userInfo.distinct(&quot;name&quot;)</code>;会过滤掉name中的相同数据,相当于：<code>select distict name from userInfo</code>;</li></ul></li><li>查询<code>age = 22</code>的记录<ul><li><code>db.userInfo.find({&quot;age&quot;: 22})</code>; 相当于：<code>select * from userInfo where age = 22</code>;</li></ul></li><li>查询<code>age &gt; 22</code>的记录<ul><li><code>db.userInfo.find({age: {$gt: 22}})</code>;</li></ul></li><li>查询<code>age &lt; 22</code>的记录<ul><li><code>db.userInfo.find({age: {$lt: 22}})</code>;</li></ul></li><li>查询<code>age &gt;= 25</code>的记录<ul><li><code>db.userInfo.find({age: {$gte: 25}})</code>;</li></ul></li><li>查询<code>age &gt;= 23</code> 并且 <code>age &lt;= 26</code><ul><li><code>db.userInfo.find({age: {$gte: 23, $lte: 26}})</code>;</li></ul></li><li>查询<code>name</code>中包含 <code>mongo</code>的数据<ul><li><code>db.userInfo.find({name: /mongo/})</code>;</li></ul></li><li>查询<code>name</code>中以<code>mongo</code>开头的<ul><li><code>db.userInfo.find({name: /^mongo/})</code>;</li></ul></li><li>查询指定列<code>name</code>、<code>age</code>数据<ul><li><code>db.userInfo.find({}, {name: 1, age: 1})</code>;当然<code>name</code>也可以用<code>true</code>或<code>false</code>,当用<code>ture</code>的情况下河<code>name:1</code>效果一样，如果用<code>false</code>就是排除<code>name</code>，显示<code>name</code>以外的列信息。</li></ul></li><li>查询指定列<code>name</code>、<code>age</code>数据, <code>age &gt; 25</code>.<ul><li><code>db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1})</code>;</li></ul></li><li>按照年龄排序<ul><li>升序：<code>db.userInfo.find().sort({age: 1})</code>;</li><li>降序：<code>db.userInfo.find().sort({age: -1})</code>;</li></ul></li><li>查询<code>name = zhangsan, age = 22</code>的数据<ul><li><code>db.userInfo.find({name: &#39;zhangsan&#39;, age: 22})</code>;</li></ul></li><li>查询前5条数据<ul><li><code>db.userInfo.find().limit(5)</code>;</li></ul></li><li>查询10条以后的数据<ul><li><code>db.userInfo.find().skip(10)</code>;</li></ul></li><li>查询在5-10之间的数据<ul><li><code>db.userInfo.find().limit(10).skip(5)</code>;可用于分页，limit是pageSize，skip是第几页*pageSize</li></ul></li><li>or与 查询<ul><li><code>db.userInfo.find({$or: [{age: 22}, {age: 25}]})</code>;</li></ul></li><li>查询第一条数据<ul><li><code>db.userInfo.findOne()</code>;</li><li><code>db.userInfo.find().limit(1)</code>;</li></ul></li><li>查询某个结果集的记录条数<ul><li><code>db.userInfo.find({age: {$gte: 25}}).count()</code>;如果要返回限制之后的记录数量，要使用count(true)或者count(非0)</li><li><code>db.users.find().skip(10).limit(5).count(true)</code>;</li></ul></li><li>按照某列进行排序<ul><li><code>db.userInfo.find({sex: {$exists: true}}).count()</code>;</li></ul></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li>创建索引<ul><li><code>db.userInfo.ensureIndex({name: 1})</code>;</li><li><code>db.userInfo.ensureIndex({name: 1, ts: -1})</code>;</li></ul></li><li>查询当前聚集集合所有索引<ul><li><code>db.userInfo.getIndexes()</code>;</li></ul></li><li>查看总索引记录大小<ul><li><code>db.userInfo.totalIndexSize()</code>;</li></ul></li><li>读取当前集合的所有index信息<ul><li><code>db.users.reIndex()</code>;</li></ul></li><li>删除指定索引<ul><li><code>db.users.dropIndex(&quot;name_1&quot;)</code>;</li></ul></li><li>删除所有索引<ul><li><code>db.users.dropIndexes()</code>;</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章介绍学习MongoDB的一些常用命令,希望能帮助大家.&lt;/p&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://blog.ihoey.com/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://blog.ihoey.com/tags/MongoDB/"/>
    
      <category term="NoSQL" scheme="https://blog.ihoey.com/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB安装笔记</title>
    <link href="https://blog.ihoey.com/posts/MongoDB/2017-03-23-mongodb.html"/>
    <id>https://blog.ihoey.com/posts/MongoDB/2017-03-23-mongodb.html</id>
    <published>2017-03-23T08:25:11.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mongodb概述"><a href="#mongodb概述" class="headerlink" title="mongodb概述"></a>mongodb概述</h2><ul><li><code>MongoDB</code> 是一个跨平台的，面向文档的数据库，提供高性能，高可用性和可扩展性方便. <code>MongoDB</code> 将数据存储为一个文档，数据结构由键值 <code>(key=&gt;value)</code> 对组成。<code>MongoDB</code> 文档类似于 <code>JSON</code> 对象。字段值可以包含其他文档，数组及文档数组。</li></ul><a id="more"></a><h2 id="mongodb安装"><a href="#mongodb安装" class="headerlink" title="mongodb安装"></a>mongodb安装</h2><pre><code>mongodb下载地址 `https://www.mongodb.com/download-center#community` ,在此选择对应的系统版本进行安装</code></pre><ul><li><p><code>Windows</code> 系统的安装, 直接下一步即可</p><ul><li>对不知道系统版本和位数的同学这里提供两个命令可查看当前<code>Windows</code>系统的版本和位数.<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wmic os get caption</div><div class="line">wmic os get osarchitecture</div></pre></td></tr></table></figure></li></ul></li><li><p><code>Linux</code> 系统的安装:</p><ul><li>导入包管理系统使用的公钥 <code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6</code></li><li>为MongoDB创建一个列表文件:<ul><li><code>Ubuntu 12.04</code> 版本: <code>echo &quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></li><li><code>Ubuntu 14.04</code> 版本: <code>echo &quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></li><li><code>Ubuntu 16.04</code> 版本: <code>echo &quot;deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></li></ul></li><li>重新加载本地包数据库 <code>sudo apt-get update</code></li><li>安装<code>MongoDB</code>包 <code>sudo apt-get install -y mongodb-org</code></li></ul></li><li><p><code>OS X</code> 系统的安装</p><ul><li>下载 <code>curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.2.tgz</code></li><li>解压 <code>tar -zxvf mongodb-osx-x86_64-3.4.2.tgz</code></li><li>指定存放文件夹 <code>mkdir -p mongodb &amp;&amp; cp -R -n mongodb-osx-x86_64-3.4.2 / mongodb</code></li><li>设置变量添加到<code>shell</code>的 <code>rc</code>文件中（例如<code>~/.bashrc</code>）： <code>export  PATH = &lt;mongodb-install-directory&gt; / bin：$ PATH</code></li></ul></li></ul><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li>创建数据目录(我这里是在<code>D</code>盘下) <code>mkdir -p /Server-related/DB</code></li><li>设置数据文件路径(在<code>mongodb</code>安装目录下运行) <code>mongod --dbpath=D:\Server-related\DB</code></li></ul><h2 id="连接mongodb"><a href="#连接mongodb" class="headerlink" title="连接mongodb"></a>连接mongodb</h2><ul><li>打开<code>mongodb</code>安装目录下的 <code>mongo.exe</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mongodb概述&quot;&gt;&lt;a href=&quot;#mongodb概述&quot; class=&quot;headerlink&quot; title=&quot;mongodb概述&quot;&gt;&lt;/a&gt;mongodb概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MongoDB&lt;/code&gt; 是一个跨平台的，面向文档的数据库，提供高性能，高可用性和可扩展性方便. &lt;code&gt;MongoDB&lt;/code&gt; 将数据存储为一个文档，数据结构由键值 &lt;code&gt;(key=&amp;gt;value)&lt;/code&gt; 对组成。&lt;code&gt;MongoDB&lt;/code&gt; 文档类似于 &lt;code&gt;JSON&lt;/code&gt; 对象。字段值可以包含其他文档，数组及文档数组。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://blog.ihoey.com/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://blog.ihoey.com/tags/MongoDB/"/>
    
      <category term="NoSQL" scheme="https://blog.ihoey.com/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>科学上网之shadowsocks 服务端安装</title>
    <link href="https://blog.ihoey.com/posts/shadowsocks/2017-03-16-shadowsocks-install.html"/>
    <id>https://blog.ihoey.com/posts/shadowsocks/2017-03-16-shadowsocks-install.html</id>
    <published>2017-03-16T10:38:46.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>轻松搭建<code>shadowsocks</code>,及相关配置说明</p><a id="more"></a><h2 id="安装shadowsocks依赖-我的服务器系统是ubuntu"><a href="#安装shadowsocks依赖-我的服务器系统是ubuntu" class="headerlink" title="安装shadowsocks依赖(我的服务器系统是ubuntu)"></a>安装shadowsocks依赖(我的服务器系统是ubuntu)</h2><ul><li><code>sudo -s</code> // 获取超级管理员权限</li><li><code>apt-get update</code> // 更新apt-get</li><li><code>apt-get install python-pip</code> // 安装python包管理工具pip</li><li><code>pip install shadowsocks</code> // 安装shadowsocks</li></ul><h2 id="配置shadowsocks"><a href="#配置shadowsocks" class="headerlink" title="配置shadowsocks"></a>配置shadowsocks</h2><ul><li><code>vi /etc/shadowsocks.json</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//单一端口</div><div class="line">&#123;</div><div class="line">    "server":"0.0.0.0",//服务器 ip地址 (IPv4/IPv6)</div><div class="line">    "server_port":1121,//服务器监听的端口,注意不要设为使用中的端口</div><div class="line">    "local_address":"127.0.0.1",//默认即可</div><div class="line">    "local_port":1080,</div><div class="line">    "password":"password",//密码</div><div class="line">    "timeout":300,//超时时间（秒）</div><div class="line">    "method":"aes-256-cfb",//加密方式</div><div class="line">    "fast_open":false</div><div class="line">&#125;</div><div class="line"></div><div class="line">//多端口</div><div class="line">  &#123;</div><div class="line">   "server":"my_server_ip",  //填入你的IP地址</div><div class="line">   "local_address": "127.0.0.1",</div><div class="line">   "local_port":1080,</div><div class="line">    "port_password": &#123;</div><div class="line">        "8381": "foobar1",    //端口号，密码</div><div class="line">        "8382": "foobar2",</div><div class="line">        "8383": "foobar3",</div><div class="line">        "8384": "foobar4"</div><div class="line">   &#125;,</div><div class="line">   "timeout":300,</div><div class="line">   "method":"aes-256-cfb",</div><div class="line">   "fast_open": false</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="优化shadowsocks服务"><a href="#优化shadowsocks服务" class="headerlink" title="优化shadowsocks服务"></a>优化shadowsocks服务</h2><ul><li>在终端输入 <code>vi /etc/sysctl.d/local.conf</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"># max open files</div><div class="line">fs.file-max = 1024000</div><div class="line"># max read buffer</div><div class="line">net.core.rmem_max = 67108864</div><div class="line"># max write buffer</div><div class="line">net.core.wmem_max = 67108864</div><div class="line"># default read buffer</div><div class="line">net.core.rmem_default = 65536</div><div class="line"># default write buffer</div><div class="line">net.core.wmem_default = 65536</div><div class="line"># max processor input queue</div><div class="line">net.core.netdev_max_backlog = 4096</div><div class="line"># max backlog</div><div class="line">net.core.somaxconn = 4096</div><div class="line"></div><div class="line"># resist SYN flood attacks</div><div class="line">net.ipv4.tcp_syncookies = 1</div><div class="line"># reuse timewait sockets when safe</div><div class="line">net.ipv4.tcp_tw_reuse = 1</div><div class="line"># turn off fast timewait sockets recycling</div><div class="line">net.ipv4.tcp_tw_recycle = 0</div><div class="line"># short FIN timeout</div><div class="line">net.ipv4.tcp_fin_timeout = 30</div><div class="line"># short keepalive time</div><div class="line">net.ipv4.tcp_keepalive_time = 1200</div><div class="line"># outbound port range</div><div class="line">net.ipv4.ip_local_port_range = 10000 65000</div><div class="line"># max SYN backlog</div><div class="line">net.ipv4.tcp_max_syn_backlog = 4096</div><div class="line"># max timewait sockets held by system simultaneously</div><div class="line">net.ipv4.tcp_max_tw_buckets = 5000</div><div class="line"># TCP receive buffer</div><div class="line">net.ipv4.tcp_rmem = 4096 87380 67108864</div><div class="line"># TCP write buffer</div><div class="line">net.ipv4.tcp_wmem = 4096 65536 67108864</div><div class="line"># turn on path MTU discovery</div><div class="line">net.ipv4.tcp_mtu_probing = 1</div><div class="line"></div><div class="line"># for high-latency network</div><div class="line">net.ipv4.tcp_congestion_control = hybla</div><div class="line"># forward ivp4</div><div class="line">net.ipv4.ip_forward = 1</div></pre></td></tr></table></figure><ul><li>配置生效：<code>sysctl --system</code></li></ul><h2 id="开启shadowsocks服务"><a href="#开启shadowsocks服务" class="headerlink" title="开启shadowsocks服务"></a>开启shadowsocks服务</h2><ul><li><code>ssserver -c /etc/shadowsocks.json -d start</code></li></ul><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><ul><li><code>ssserver -c /etc/shadowsocks.json -d stop</code></li></ul><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><ul><li>重启(修改配置要重启才生效)：<code>ssserver -c /etc/shadowsocks.json -d restart</code></li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><ul><li><code>/var/log/shadowsocks.log</code></li></ul><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ul><li><p><code>ssserver -h</code></p><p>  如果出现故障，试试把<code>/etc/shadowsocks.json</code>里改为<code>&quot;server&quot;=&quot;0.0.0.0&quot;.</code> 小心不要掉<code>,</code></p></li></ul><h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><ul><li>在终端输入 <code>vi /etc/rc.local</code></li><li>把 <code>sudo ssserver -c /etc/shadowsocks.json -d start</code>加进去</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;轻松搭建&lt;code&gt;shadowsocks&lt;/code&gt;,及相关配置说明&lt;/p&gt;
    
    </summary>
    
      <category term="shadowsocks" scheme="https://blog.ihoey.com/categories/shadowsocks/"/>
    
    
      <category term="科学上网" scheme="https://blog.ihoey.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="shadowsocks" scheme="https://blog.ihoey.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>adb设备信息查询修改刷机等命令</title>
    <link href="https://blog.ihoey.com/posts/Android/2016-12-22-adb-Android-Debug-Bridge-2.html"/>
    <id>https://blog.ihoey.com/posts/Android/2016-12-22-adb-Android-Debug-Bridge-2.html</id>
    <published>2016-12-22T10:51:53.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>ADB很强大，记住一些ADB命令有助于提高工作效率。<br>通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等</p><a id="more"></a><h2 id="查看设备信息"><a href="#查看设备信息" class="headerlink" title="查看设备信息"></a>查看设备信息</h2><ul><li><code>adb logcat</code> – 查看日志</li><li><code>adb shell dumpsys battery</code> – 电池状况<br>其中 scale 代表最大电量，level 代表当前电量。上面的输出表示还剩下 44% 的电量</li><li><code>adb reboot</code> – 重启</li><li><code>adb get-serialno</code> – 获取序列号</li><li><code>adb shell  cat /sys/class/net/wlan0/address</code> – MAC 地址</li><li><code>adb shell getprop ro.product.model</code> – 型号</li><li><code>adb shell getprop ro.build.version.release</code> – 查看 Android 系统版本</li><li><code>adb shell wm size</code> – 查看屏幕分辨率</li><li><code>adb shell wm density</code> – 查看屏幕密度</li><li><code>adb shell dumpsys window displays</code> – 显示屏参数</li><li><code>adb shell settings get secure android_id</code> – android_id</li><li><code>adb shell ifconfig | grep Mask</code> – IP 地址(powershell无效)</li><li><code>adb shell cat /proc/cpuinfo</code> – CPU 信息</li><li><code>adb shell cat /proc/meminfo</code> – 内存信息(输出内容: <code>MemTotal</code> 总内存，<code>MemFree</code> 空闲内存)</li><li><code>adb shell cat /system/build.prop</code> – 更多硬件与系统属性</li></ul><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">ro.build.version.sdk</td><td style="text-align:center">SDK 版本</td></tr><tr><td style="text-align:center">ro.build.version.release</td><td style="text-align:center">Android 系统版本</td></tr><tr><td style="text-align:center">ro.build.version.security_patch</td><td style="text-align:center">Android 安全补丁程序级别</td></tr><tr><td style="text-align:center">ro.product.model</td><td style="text-align:center">型号</td></tr><tr><td style="text-align:center">ro.product.brand</td><td style="text-align:center">品牌</td></tr><tr><td style="text-align:center">ro.product.name</td><td style="text-align:center">设备名</td></tr><tr><td style="text-align:center">ro.product.board</td><td style="text-align:center">处理器型号</td></tr><tr><td style="text-align:center">ro.product.cpu.abilist</td><td style="text-align:center">CPU 支持的 abi 列表</td></tr><tr><td style="text-align:center">persist.sys.isUsbOtgEnabled</td><td style="text-align:center">是否支持 OTG</td></tr><tr><td style="text-align:center">dalvik.vm.heapsize</td><td style="text-align:center">每个应用程序的内存上限</td></tr><tr><td style="text-align:center">ro.sf.lcd_density</td><td style="text-align:center">屏幕密度</td></tr></tbody></table><h2 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h2><p><strong>注：</strong>修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 <code>adb reboot</code> 重启设备，或手动重启。</p><p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p><h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm size 480x1024</div></pre></td></tr></table></figure><p>表示将分辨率修改为 480px * 1024px。</p><p>恢复原分辨率命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm size reset</div></pre></td></tr></table></figure><h3 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm density 160</div></pre></td></tr></table></figure><p>表示将屏幕密度修改为 160dpi。</p><p>恢复原屏幕密度命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm density reset</div></pre></td></tr></table></figure><h3 id="显示区域"><a href="#显示区域" class="headerlink" title="显示区域"></a>显示区域</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm overscan 0,0,0,200</div></pre></td></tr></table></figure><p>四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 200px 留白。</p><p>恢复原显示区域命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm overscan reset</div></pre></td></tr></table></figure><h3 id="关闭-USB-调试模式"><a href="#关闭-USB-调试模式" class="headerlink" title="关闭 USB 调试模式"></a>关闭 USB 调试模式</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global adb_enabled 0</div></pre></td></tr></table></figure><p>恢复：</p><p>用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。</p><p>去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。</p><h3 id="状态栏和导航栏的显示隐藏"><a href="#状态栏和导航栏的显示隐藏" class="headerlink" title="状态栏和导航栏的显示隐藏"></a>状态栏和导航栏的显示隐藏</h3><p>本节所说的相关设置对应 Cyanogenmod 里的「扩展桌面」。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global policy_control &lt;key-values&gt;</div></pre></td></tr></table></figure><p><code>&lt;key-values&gt;</code> 可由如下几种键及其对应的值组成，格式为 <code>&lt;key1&gt;=&lt;value1&gt;:&lt;key2&gt;=&lt;value2&gt;</code>。</p><table><thead><tr><th style="text-align:center">key</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">immersive.full</td><td style="text-align:center">同时隐藏</td></tr><tr><td style="text-align:center">immersive.status</td><td style="text-align:center">隐藏状态栏</td></tr><tr><td style="text-align:center">immersive.navigation</td><td style="text-align:center">隐藏导航栏</td></tr><tr><td style="text-align:center">immersive.preconfirms</td><td style="text-align:center">?</td></tr></tbody></table><p>这些键对应的值可则如下值用逗号组合：</p><table><thead><tr><th style="text-align:center">value</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>apps</code></td><td style="text-align:center">所有应用</td></tr><tr><td style="text-align:center"><code>*</code></td><td style="text-align:center">所有界面</td></tr><tr><td style="text-align:center"><code>packagename</code></td><td style="text-align:center">指定应用</td></tr><tr><td style="text-align:center"><code>-packagename</code></td><td style="text-align:center">排除指定应用</td></tr></tbody></table><p>例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global policy_control immersive.full=*</div></pre></td></tr></table></figure><p>表示设置在所有界面下都同时隐藏状态栏和导航栏。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3</div></pre></td></tr></table></figure><p>表示设置在包名为 <code>com.package1</code> 和 <code>com.package2</code> 的应用里隐藏状态栏，在除了包名为 <code>com.package3</code> 的所有应用里隐藏导航栏。</p><h2 id="实用功能"><a href="#实用功能" class="headerlink" title="实用功能"></a>实用功能</h2><h3 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p /sdcard/sc.png</div></pre></td></tr></table></figure><p>然后将 png 文件导出到电脑：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/sc.png</div></pre></td></tr></table></figure><p>可以使用 <code>adb shell screencap -h</code> 查看 <code>screencap</code> 命令的帮助信息，下面是两个有意义的参数及含义：</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-p</td><td style="text-align:center">指定保存文件为 png 格式</td></tr><tr><td style="text-align:center">-d display-id</td><td style="text-align:center">指定截图的显示屏编号（有多显示屏的情况下）</td></tr></tbody></table><p>实测如果指定文件名以 <code>.png</code> 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。</p><p>直接一行命令截图并保存到电脑的方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p | sed <span class="string">"s/\r$//"</span> &gt; sc.png</div></pre></td></tr></table></figure><p>这个方法需要用到 sed 命令，在 Linux 和 Mac 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 <a href="http://gnuwin32.sourceforge.net/packages/sed.htm" target="_blank" rel="external">sed for Windows</a> 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。</p><h3 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h3><p>录制屏幕以 mp4 格式保存到 /sdcard：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screenrecord /sdcard/filename.mp4</div></pre></td></tr></table></figure><p>需要停止时按 <kbd>Ctrl-C</kbd>，默认录制时间和最长录制时间都是 180 秒。</p><p>如果需要导出到电脑：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/filename.mp4</div></pre></td></tr></table></figure><p>可以使用 <code>adb shell screenrecord --help</code> 查看 <code>screenrecord</code> 命令的帮助信息，下面是常见参数及含义：</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">–size WIDTHxHEIGHT</td><td style="text-align:center">视频的尺寸，比如 <code>1280x720</code>，默认是屏幕分辨率。</td></tr><tr><td style="text-align:center">–bit-rate RATE</td><td style="text-align:center">视频的比特率，默认是 4Mbps。</td></tr><tr><td style="text-align:center">–time-limit TIME</td><td style="text-align:center">录制时长，单位秒。</td></tr><tr><td style="text-align:center">–verbose</td><td style="text-align:center">输出更多信息。</td></tr></tbody></table><h3 id="重新挂载-system-分区为可写"><a href="#重新挂载-system-分区为可写" class="headerlink" title="重新挂载 system 分区为可写"></a>重新挂载 system 分区为可写</h3><p><strong>注：需要 root 权限。</strong></p><p>/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。</p><p>步骤：</p><ol><li><p>进入 shell 并切换到 root 用户权限。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div></pre></td></tr></table></figure></li><li><p>查看当前分区挂载情况。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount</div></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">rootfs / rootfs ro,relatime 0 0</div><div class="line">tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0</div><div class="line">devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0</div><div class="line">proc /proc proc rw,relatime 0 0</div><div class="line">sysfs /sys sysfs rw,seclabel,relatime 0 0</div><div class="line">selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0</div><div class="line">debugfs /sys/kernel/debug debugfs rw,relatime 0 0</div><div class="line">none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0</div><div class="line">none /acct cgroup rw,relatime,cpuacct 0 0</div><div class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class="line">tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class="line">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class="line">none /dev/memcg cgroup rw,relatime,memory 0 0</div><div class="line">none /dev/cpuctl cgroup rw,relatime,cpu 0 0</div><div class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class="line">none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0</div><div class="line">/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div><div class="line">/dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div></pre></td></tr></table></figure><p>找到其中我们关注的带 /system 的那一行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div></pre></td></tr></table></figure></li><li><p>重新挂载。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system</div></pre></td></tr></table></figure><p>这里的 <code>/dev/block/platform/msm_sdcc.1/by-name/system</code> 就是我们从上一步的输出里得到的文件路径。</p></li></ol><p>如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。</p><h3 id="查看连接过的-WiFi-密码"><a href="#查看连接过的-WiFi-密码" class="headerlink" title="查看连接过的 WiFi 密码"></a>查看连接过的 WiFi 密码</h3><p><strong>注：需要 root 权限。</strong></p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div><div class="line">cat /data/misc/wifi/*.conf</div></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">network=&#123;</div><div class="line">    ssid=<span class="string">"TP-LINK_9DFC"</span></div><div class="line">    scan_ssid=1</div><div class="line">    psk=<span class="string">"123456789"</span></div><div class="line">    key_mgmt=WPA-PSK</div><div class="line">    group=CCMP TKIP</div><div class="line">    auth_alg=OPEN</div><div class="line">    sim_num=1</div><div class="line">    priority=13893</div><div class="line">&#125;</div><div class="line"></div><div class="line">network=&#123;</div><div class="line">    ssid=<span class="string">"TP-LINK_F11E"</span></div><div class="line">    psk=<span class="string">"987654321"</span></div><div class="line">    key_mgmt=WPA-PSK</div><div class="line">    sim_num=1</div><div class="line">    priority=17293</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>ssid</code> 即为我们在 WLAN 设置里看到的名称，<code>psk</code> 为密码，<code>key_mgmt</code> 为安全加密方式。</p><h3 id="设置系统日期和时间"><a href="#设置系统日期和时间" class="headerlink" title="设置系统日期和时间"></a>设置系统日期和时间</h3><p><strong>注：需要 root 权限。</strong></p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div><div class="line">date -s 20160823.131500</div></pre></td></tr></table></figure><p>表示将系统日期和时间更改为 2016 年 08 月 23 日 13 点 15 分 00 秒。</p><h3 id="重启手机"><a href="#重启手机" class="headerlink" title="重启手机"></a>重启手机</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot</div></pre></td></tr></table></figure><h3 id="检测设备是否已-root"><a href="#检测设备是否已-root" class="headerlink" title="检测设备是否已 root"></a>检测设备是否已 root</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div></pre></td></tr></table></figure><p>此时命令行提示符是 <code>$</code> 则表示没有 root 权限，是 <code>#</code> 则表示已 root。</p><h3 id="使用-Monkey-进行压力测试"><a href="#使用-Monkey-进行压力测试" class="headerlink" title="使用 Monkey 进行压力测试"></a>使用 Monkey 进行压力测试</h3><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p><p>简单用法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell monkey -p &lt;packagename&gt; -v 500</div></pre></td></tr></table></figure><p>表示向 <code>&lt;packagename&gt;</code> 指定的应用程序发送 500 个伪随机事件。</p><p>Monkey 的详细用法参考 <a href="https://developer.android.com/studio/test/monkey.html" target="_blank" rel="external">官方文档</a>。</p><h3 id="开启-关闭-WiFi"><a href="#开启-关闭-WiFi" class="headerlink" title="开启/关闭 WiFi"></a>开启/关闭 WiFi</h3><p><strong>注：需要 root 权限。</strong></p><p>有时需要控制设备的 WiFi 状态，可以用以下指令完成。</p><p>开启 WiFi：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb root</div><div class="line">adb shell svc wifi <span class="built_in">enable</span></div></pre></td></tr></table></figure><p>关闭 WiFi：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb root</div><div class="line">adb shell svc wifi <span class="built_in">disable</span></div></pre></td></tr></table></figure><p>若执行成功，输出为空；若未取得 root 权限执行此命令，将执行失败，输出 <code>Killed</code>。</p><h2 id="刷机相关命令"><a href="#刷机相关命令" class="headerlink" title="刷机相关命令"></a>刷机相关命令</h2><h3 id="重启到-Recovery-模式"><a href="#重启到-Recovery-模式" class="headerlink" title="重启到 Recovery 模式"></a>重启到 Recovery 模式</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot recovery</div></pre></td></tr></table></figure><h3 id="从-Recovery-重启到-Android"><a href="#从-Recovery-重启到-Android" class="headerlink" title="从 Recovery 重启到 Android"></a>从 Recovery 重启到 Android</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot</div></pre></td></tr></table></figure><h3 id="重启到-Fastboot-模式"><a href="#重启到-Fastboot-模式" class="headerlink" title="重启到 Fastboot 模式"></a>重启到 Fastboot 模式</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot bootloader</div></pre></td></tr></table></figure><h3 id="通过-sideload-更新系统"><a href="#通过-sideload-更新系统" class="headerlink" title="通过 sideload 更新系统"></a>通过 sideload 更新系统</h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p><p>以 Recovery 模式下更新为例：</p><ol><li><p>重启到 Recovery 模式。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot recovery</div></pre></td></tr></table></figure></li><li><p>在设备的 Recovery 界面上操作进入 <code>Apply update</code>-<code>Apply from ADB</code>。</p><p>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 <code>Apply update from ADB</code>。</p></li><li><p>通过 adb 上传和更新系统。</p><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb sideload &lt;path-to-update.zip&gt;</div></pre></td></tr></table></figure></li></ol><h2 id="更多-adb-shell-命令"><a href="#更多-adb-shell-命令" class="headerlink" title="更多 adb shell 命令"></a>更多 adb shell 命令</h2><p>Android 系统是基于 Linux 内核的，所以 Linux 里的很多命令在 Android 里也有相同或类似的实现，在 <code>adb shell</code> 里可以调用。本文档前面的部分内容已经用到了 <code>adb shell</code> 命令。</p><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell ps</div></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">USER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME</div><div class="line">root      1     0     8904   788   ffffffff 00000000 S /init</div><div class="line">root      2     0     0      0     ffffffff 00000000 S kthreadd</div><div class="line">...</div><div class="line">u0_a71    7779  5926  1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classic</div><div class="line">u0_a58    7963  5926  1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure</div><div class="line">...</div><div class="line">shell     8750  217   10640  740   00000000 b6f28340 R ps</div></pre></td></tr></table></figure><p>各列含义：</p><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">USER</td><td style="text-align:center">所属用户</td></tr><tr><td style="text-align:center">PID</td><td style="text-align:center">进程 ID</td></tr><tr><td style="text-align:center">PPID</td><td style="text-align:center">父进程 ID</td></tr><tr><td style="text-align:center">NAME</td><td style="text-align:center">进程名</td></tr></tbody></table><h3 id="查看实时资源占用情况"><a href="#查看实时资源占用情况" class="headerlink" title="查看实时资源占用情况"></a>查看实时资源占用情况</h3><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell top</div></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">User 0%, System 6%, IOW 0%, IRQ 0%</div><div class="line">User 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307</div><div class="line"></div><div class="line">  PID PR CPU% S  <span class="comment">#THR     VSS     RSS PCY UID      Name</span></div><div class="line"> 8763  0   3% R     1  10640K   1064K  <span class="built_in">fg</span> shell    top</div><div class="line">  131  0   3% S     1      0K      0K  <span class="built_in">fg</span> root     dhd_dpc</div><div class="line"> 6144  0   0% S   115 1682004K 115916K  <span class="built_in">fg</span> system   system_server</div><div class="line">  132  0   0% S     1      0K      0K  <span class="built_in">fg</span> root     dhd_rxf</div><div class="line"> 1731  0   0% S     6  20288K    788K  <span class="built_in">fg</span> root     /system/bin/mpdecision</div><div class="line">  217  0   0% S     6  18008K    356K  <span class="built_in">fg</span> shell    /sbin/adbd</div><div class="line"> ...</div><div class="line"> 7779  2   0% S    19 1538748K  48896K  <span class="built_in">bg</span> u0_a71   com.sohu.inputmethod.sogou:classic</div><div class="line"> 7963  0   0% S    18 1561916K  59568K  <span class="built_in">fg</span> u0_a58   org.mazhuang.boottimemeasure</div><div class="line"> ...</div></pre></td></tr></table></figure><p>各列含义：</p><table><thead><tr><th style="text-align:center">列名</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">PID</td><td style="text-align:center">进程 ID</td></tr><tr><td style="text-align:center">PR</td><td style="text-align:center">优先级</td></tr><tr><td style="text-align:center">CPU%</td><td style="text-align:center">当前瞬间占用 CPU 百分比</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</td></tr><tr><td style="text-align:center">#THR</td><td style="text-align:center">线程数</td></tr><tr><td style="text-align:center">VSS</td><td style="text-align:center">Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）</td></tr><tr><td style="text-align:center">RSS</td><td style="text-align:center">Resident Set Size 实际使用物理内存（包含共享库占用的内存）</td></tr><tr><td style="text-align:center">PCY</td><td style="text-align:center">调度策略优先级，SP_BACKGROUND/SPFOREGROUND</td></tr><tr><td style="text-align:center">UID</td><td style="text-align:center">进程所有者的用户 ID</td></tr><tr><td style="text-align:center">NAME</td><td style="text-align:center">进程名</td></tr></tbody></table><p><code>top</code> 命令还支持一些命令行参数，详细用法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Usage: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]</div><div class="line">    -m num  最多显示多少个进程</div><div class="line">    -n num  刷新多少次后退出</div><div class="line">    -d num  刷新时间间隔（单位秒，默认值 5）</div><div class="line">    -s col  按某列排序（可用 col 值：cpu, vss, rss, thr）</div><div class="line">    -t      显示线程信息</div><div class="line">    -h      显示帮助文档</div></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">cat</td><td style="text-align:center">显示文件内容</td></tr><tr><td style="text-align:center">cd</td><td style="text-align:center">切换目录</td></tr><tr><td style="text-align:center">chmod</td><td style="text-align:center">改变文件的存取模式/访问权限</td></tr><tr><td style="text-align:center">df</td><td style="text-align:center">查看磁盘空间使用情况</td></tr><tr><td style="text-align:center">grep</td><td style="text-align:center">过滤输出</td></tr><tr><td style="text-align:center">kill</td><td style="text-align:center">杀死指定 PID 的进程</td></tr><tr><td style="text-align:center">ls</td><td style="text-align:center">列举目录内容</td></tr><tr><td style="text-align:center">mount</td><td style="text-align:center">挂载目录的查看和管理</td></tr><tr><td style="text-align:center">mv</td><td style="text-align:center">移动或重命名文件</td></tr><tr><td style="text-align:center">ps</td><td style="text-align:center">查看正在运行的进程</td></tr><tr><td style="text-align:center">rm</td><td style="text-align:center">删除文件</td></tr><tr><td style="text-align:center">top</td><td style="text-align:center">查看进程的资源占用情况</td></tr></tbody></table><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="启动-adb-server-失败"><a href="#启动-adb-server-失败" class="headerlink" title="启动 adb server 失败"></a>启动 adb server 失败</h3><p><strong>出错提示</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error: protocol fault (couldn\<span class="string">'t read status): No error</span></div></pre></td></tr></table></figure><p><strong>可能原因</strong></p><p>adb server 进程想使用的 5037 端口被占用。</p><p><strong>解决方案</strong></p><p>找到占用 5037 端口的进程，然后终止它。以 Windows 下为例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">netstat -ano | findstr LISTENING</div><div class="line"></div><div class="line">...</div><div class="line">TCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       1548</div><div class="line">...</div></pre></td></tr></table></figure><p>这里 1548 即为进程 ID，用命令结束该进程：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">taskkill /PID 1548</div></pre></td></tr></table></figure><p>然后再启动 adb 就没问题了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ADB很强大，记住一些ADB命令有助于提高工作效率。&lt;br&gt;通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://blog.ihoey.com/categories/Android/"/>
    
    
      <category term="adb" scheme="https://blog.ihoey.com/tags/adb/"/>
    
      <category term="Android" scheme="https://blog.ihoey.com/tags/Android/"/>
    
      <category term="adb命令" scheme="https://blog.ihoey.com/tags/adb%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>adb(Android Debug Bridge，Android调试桥)常用命令</title>
    <link href="https://blog.ihoey.com/posts/Android/2016-12-18-adb-Android-Debug-Bridge.html"/>
    <id>https://blog.ihoey.com/posts/Android/2016-12-18-adb-Android-Debug-Bridge.html</id>
    <published>2016-12-18T08:18:21.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>说到 <code>ADB</code> 大家应该都不陌生，即 <code>Android Debug Bridge，Android</code> 调试桥，身为 <code>Android</code> 开发的我们，熟练使用 <code>ADB</code> 命令将会大大提升我们的开发效率， <code>ADB</code> 的命令有很多，今天就来整理下我在开发常用到的一些 ADB 命令。</p><a id="more"></a><p>ADB 的安装这里就不多说了，输入以下命令有如下提示就证明你环境ok，否则自行网上搜索解决下。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ul><li><code>adb version</code> – 查看版本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ adb version</div><div class="line"></div><div class="line">Android Debug Bridge version 1.0.36</div><div class="line">Revision 8f855a3d9b35-android</div></pre></td></tr></table></figure><ul><li><code>adb [-d|-e|-s &lt;serialNumber&gt;] &lt;command&gt;</code> – adb 命令的基本语法<br>如果有多个设备/模拟器连接，则需要为命令指定目标设备。</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-d</td><td style="text-align:center">指定当前唯一通过 USB 连接的 Android 设备为命令目标</td></tr><tr><td style="text-align:center">-e</td><td style="text-align:center">指定当前唯一运行的模拟器为命令目标</td></tr><tr><td style="text-align:center">-s <serialnumber></serialnumber></td><td style="text-align:center">指定相应 serialNumber 号的设备/模拟器为命令目标</td></tr></tbody></table><p>在多个设备/模拟器连接的情况下较常用的是 -s <serialnumber> 参数，serialNumber 可以通过 adb devices 命令获取。如：</serialnumber></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ adb devices</div><div class="line"></div><div class="line">List of devices attached</div><div class="line">cf264b8f    device</div><div class="line">emulator-5554   device</div><div class="line"></div><div class="line"><span class="comment">#输出里的cf264b8f 和 emulator-5554 即为 serialNumber。比如这时想指定 cf264b8f 这个设备来运行 adb 命令获取屏幕分辨率：</span></div><div class="line"></div><div class="line">adb -s cf264b8f shell wm size</div></pre></td></tr></table></figure><p>遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。</p><ul><li><code>adb start-server/adb kill-server</code>– 启动/停止 Server</li></ul><p>一般来说，这两个命令基本不会用到，因为只要设备连接正确，会自动启动 <code>adb server</code> 的，不过大家也需要知道这俩命令。</p><ul><li><code>adb -P &lt;port&gt; start-server</code> – 指定 adb server 的网络端口</li></ul><h2 id="设备连接"><a href="#设备连接" class="headerlink" title="设备连接"></a>设备连接</h2><ul><li><code>adb devices</code> – 查看连接设备</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">adb devices</div><div class="line"></div><div class="line"><span class="comment">#通过USB:</span></div><div class="line">List of devices attached</div><div class="line">02ae0c1021089daf       device</div><div class="line"></div><div class="line"><span class="comment">#通过IP:(会有一个端口号,一般都是5555)</span></div><div class="line">List of devices attached</div><div class="line">192.168.123.104:5555    device</div></pre></td></tr></table></figure><ul><li><code>adb connect &lt;device-ip-address&gt;</code> – 通过 IP 地址连接设备</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">adb connect 192.168.123.104</div><div class="line"><span class="comment">#会提示:</span></div><div class="line">connected to 192.168.123.104:5555</div></pre></td></tr></table></figure><ul><li><code>adb disconnect &lt;device-ip-address&gt;</code> – 断开无线连接</li></ul><h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><ul><li><code>adb install [-l\-r\-s\-d] &lt;path_to_apk&gt;</code> – 安装应用</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-l</td><td style="text-align:center">将应用安装到保护目录 /mnt/asec</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:center">允许覆盖安装允许覆盖安装</td></tr><tr><td style="text-align:center">-s</td><td style="text-align:center">将应用安装到 sdcard</td></tr><tr><td style="text-align:center">-d</td><td style="text-align:center">允许降级覆盖安装</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">    adb install</div><div class="line">    adb install /Users/storm/temp/demo.apk</div><div class="line">    adb install -r demo.apk</div><div class="line">    adb install -s demo.apk</div><div class="line"></div><div class="line"><span class="comment">#安装成功</span></div><div class="line">[100%] /data/<span class="built_in">local</span>/tmp/1.apk</div><div class="line">    pkg: /data/<span class="built_in">local</span>/tmp/1.apk</div><div class="line">Success</div><div class="line"></div><div class="line"><span class="comment">#安装失败</span></div><div class="line">[100%] /data/<span class="built_in">local</span>/tmp/map-20160831.apk</div><div class="line">        pkg: /data/<span class="built_in">local</span>/tmp/map-20160831.apk</div><div class="line">Failure [INSTALL_FAILED_ALREADY_EXISTS]</div><div class="line"></div><div class="line"><span class="comment">#adb install 内部原理简介</span></div><div class="line"></div><div class="line"><span class="comment">#adb install 实际是分三步完成：</span></div><div class="line"></div><div class="line"><span class="comment">#push apk 文件到 /data/local/tmp。</span></div><div class="line"></div><div class="line"><span class="comment">#调用 pm install 安装。</span></div><div class="line"></div><div class="line"><span class="comment">#删除 /data/local/tmp 下的对应 apk 文件。</span></div><div class="line"></div><div class="line"><span class="comment">#所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。</span></div></pre></td></tr></table></figure><ul><li><code>adb uninstall [-k] &lt;packagename&gt;</code> – 卸载应用</li></ul><p><packagename> 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录。</packagename></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eg：</div><div class="line">adb uninstall com.qihoo360.mobilesafe</div><div class="line"><span class="comment">#表示卸载 360 手机卫士。</span></div></pre></td></tr></table></figure><ul><li><code>adb shell pm clear &lt;packagename&gt;</code> – 清除应用数据与缓存</li></ul><p><packagename> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。</packagename></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">adb shell pm clear com.qihoo360.mobilesafe</div><div class="line"><span class="comment">#表示清除 360 手机卫士的数据和缓存。</span></div></pre></td></tr></table></figure><ul><li><code>adb shell pm list packages [-f/-d/-e/-s/-3/-i/-u] [FILTER]</code> – 查看应用列表</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">显示列表</th></tr></thead><tbody><tr><td style="text-align:center">无</td><td style="text-align:center">所有应用</td></tr><tr><td style="text-align:center">-f</td><td style="text-align:center">显示应用关联的 apk 文件</td></tr><tr><td style="text-align:center">-d</td><td style="text-align:center">只显示 disabled 的应用</td></tr><tr><td style="text-align:center">-e</td><td style="text-align:center">只显示 enabled 的应用</td></tr><tr><td style="text-align:center">-s</td><td style="text-align:center">只显示系统应用</td></tr><tr><td style="text-align:center">-3</td><td style="text-align:center">只显示第三方应用</td></tr><tr><td style="text-align:center">[FILTER&gt;]</td><td style="text-align:center">包名包含 <filter> 字符串</filter></td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">    <span class="comment">#系统应用</span></div><div class="line">    adb shell pm list packages -s</div><div class="line"></div><div class="line">    <span class="comment">#第三方应用</span></div><div class="line">    adb shell pm list packages -3</div><div class="line"></div><div class="line">    <span class="comment">#包名包含某字符串的应用</span></div><div class="line">    adb shell pm list packages mazhuang</div><div class="line"></div><div class="line">    <span class="comment">#当然也可以使用 grep 来过滤：</span></div><div class="line">    adb shell pm list packages | grep mazhuang</div></pre></td></tr></table></figure><ul><li><code>adb shell am force-stop &lt;packagename&gt;</code> – 强制停止应用</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">adb shell am force-stop com.qihoo360.mobilesafe</div><div class="line"><span class="comment">#表示停止 360 安全卫士的一切进程与服务。</span></div></pre></td></tr></table></figure><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><ul><li><code>adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</code> – 复制设备里的文件到电脑<br>其中 <code>电脑上的目录</code> 参数可以省略，默认复制到当前目录。</li><li><code>adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</code> – 复制电脑里的文件到设备</li></ul><h2 id="模拟按键-输入"><a href="#模拟按键-输入" class="headerlink" title="模拟按键/输入"></a>模拟按键/输入</h2><ul><li><code>adb shell input keyevent &lt;keycode&gt;</code> – 模拟按键/输入</li></ul><table><thead><tr><th style="text-align:center">keycode</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">3</td><td style="text-align:center">HOME键</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">返回键</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">打开拨号应用</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">挂断电话</td></tr><tr><td style="text-align:center">24</td><td style="text-align:center">增加音量</td></tr><tr><td style="text-align:center">25</td><td style="text-align:center">降低音量</td></tr><tr><td style="text-align:center">26</td><td style="text-align:center">电源键</td></tr><tr><td style="text-align:center">27</td><td style="text-align:center">拍照（需要在相机应用里）</td></tr><tr><td style="text-align:center">64</td><td style="text-align:center">打开浏览器</td></tr><tr><td style="text-align:center">82</td><td style="text-align:center">菜单键</td></tr><tr><td style="text-align:center">85</td><td style="text-align:center">播放/暂停</td></tr><tr><td style="text-align:center">86</td><td style="text-align:center">停止播放</td></tr><tr><td style="text-align:center">87</td><td style="text-align:center">播放下一首</td></tr><tr><td style="text-align:center">88</td><td style="text-align:center">播放上一首</td></tr><tr><td style="text-align:center">122</td><td style="text-align:center">移动光标到行首或列表顶部</td></tr><tr><td style="text-align:center">123</td><td style="text-align:center">移动光标到行末或列表底部</td></tr><tr><td style="text-align:center">126</td><td style="text-align:center">恢复播放</td></tr><tr><td style="text-align:center">127</td><td style="text-align:center">暂停播放</td></tr><tr><td style="text-align:center">164</td><td style="text-align:center">静音</td></tr><tr><td style="text-align:center">176</td><td style="text-align:center">打开系统设置</td></tr><tr><td style="text-align:center">187</td><td style="text-align:center">切换应用</td></tr><tr><td style="text-align:center">207</td><td style="text-align:center">打开联系人</td></tr><tr><td style="text-align:center">208</td><td style="text-align:center">打开日历</td></tr><tr><td style="text-align:center">209</td><td style="text-align:center">打开音乐</td></tr><tr><td style="text-align:center">210</td><td style="text-align:center">打开计算器</td></tr><tr><td style="text-align:center">220</td><td style="text-align:center">降低屏幕亮度</td></tr><tr><td style="text-align:center">221</td><td style="text-align:center">提高屏幕亮度</td></tr><tr><td style="text-align:center">223</td><td style="text-align:center">系统休眠</td></tr><tr><td style="text-align:center">224</td><td style="text-align:center">点亮屏幕</td></tr><tr><td style="text-align:center">231</td><td style="text-align:center">打开语音助手</td></tr><tr><td style="text-align:center">276</td><td style="text-align:center">如果没有 wakelock 则让系统休眠</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line"><span class="comment">#电源键</span></div><div class="line">adb shell input keyevent 26</div><div class="line"></div><div class="line"><span class="comment">#菜单键</span></div><div class="line">adb shell input keyevent 82</div><div class="line"></div><div class="line"><span class="comment">#HOME 键</span></div><div class="line">adb shell input keyevent 3</div><div class="line"></div><div class="line"><span class="comment">#返回键</span></div><div class="line">adb shell input keyevent 4</div><div class="line"></div><div class="line"><span class="comment">#音量加/减/静音</span></div><div class="line">adb shell input keyevent 24/25/164</div><div class="line"></div><div class="line"><span class="comment">#滑动解锁(参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标)</span></div><div class="line">adb shell input swipe 300 1000 300 500</div><div class="line"></div><div class="line"><span class="comment">#在焦点处于某文本框时，可以通过 input 命令来输入文本</span></div><div class="line">adb shell input text hello</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到 &lt;code&gt;ADB&lt;/code&gt; 大家应该都不陌生，即 &lt;code&gt;Android Debug Bridge，Android&lt;/code&gt; 调试桥，身为 &lt;code&gt;Android&lt;/code&gt; 开发的我们，熟练使用 &lt;code&gt;ADB&lt;/code&gt; 命令将会大大提升我们的开发效率， &lt;code&gt;ADB&lt;/code&gt; 的命令有很多，今天就来整理下我在开发常用到的一些 ADB 命令。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://blog.ihoey.com/categories/Android/"/>
    
    
      <category term="adb" scheme="https://blog.ihoey.com/tags/adb/"/>
    
      <category term="Android" scheme="https://blog.ihoey.com/tags/Android/"/>
    
      <category term="adb命令" scheme="https://blog.ihoey.com/tags/adb%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Node第二部分-模块及工具</title>
    <link href="https://blog.ihoey.com/posts/Node/2016-12-12-Node-part2.html"/>
    <id>https://blog.ihoey.com/posts/Node/2016-12-12-Node-part2.html</id>
    <published>2016-12-12T01:12:32.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了让 <code>NodeJs</code> 的文件可以相互调用，<code>NodeJs</code> 提供了一个简单的模块系统。<br>模块是 <code>NodeJs</code> 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 <code>NodeJs</code> 文件就是一个模块，这个文件可能是 <code>JavaScript</code> 代码、<code>JSON</code> 或者编译过的 <code>C/C++</code> 扩展。</p><a id="more"></a><h2 id="NodeJs的模块"><a href="#NodeJs的模块" class="headerlink" title="NodeJs的模块"></a>NodeJs的模块</h2><ul><li>核心模块(只要安装了node就会有的模块,已经被打包到了node.exe文件)</li><li>自定义模块(我们自己写的js模块)</li><li>第三方的模块(包)</li></ul><h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><ul><li>http</li><li>url</li><li>fs</li><li>……等</li></ul><h3 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h3><p>在我们的代码中请求它并把返回值赋给一个本地变量</p><h3 id="url-模块"><a href="#url-模块" class="headerlink" title="url 模块"></a>url 模块</h3><ul><li>用来操作url的</li><li>url.parse(request.url,true)</li></ul><h2 id="fs文件操作模块"><a href="#fs文件操作模块" class="headerlink" title="fs文件操作模块"></a>fs文件操作模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="comment">// 读取文件:</span></div><div class="line"><span class="comment">// 参数1：文件路径</span></div><div class="line"><span class="comment">// 参数2： 文件编码</span></div><div class="line"><span class="comment">// 返回值： 文件内容</span></div><div class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'./index.html'</span>,<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 写入文件</span></div><div class="line"><span class="comment">// 第一个参数：是要写入的文件目录,</span></div><div class="line"><span class="comment">// 第二个参数:是要写入的内容!</span></div><div class="line"><span class="comment">// 这个方法执行时会【覆盖】之前的文件内容!</span></div><div class="line">fs.writeFileSync(<span class="string">'./tmp.txt'</span>,<span class="string">'我是中国人，我爱自己的祖国!'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 追加文件</span></div><div class="line">fs.appendFileSync(<span class="string">'./xx.js'</span>,<span class="string">'我是小明，我在哪里?\r\n'</span>)</div><div class="line"></div><div class="line"> <span class="comment">// 创建目录</span></div><div class="line">    <span class="comment">// 判断目录是否存在，如果不存在，则创建</span></div><div class="line">    <span class="keyword">var</span> result = fs.existsSync(<span class="string">'data'</span>) <span class="comment">// 判断当前目录是否存在data目录</span></div><div class="line">    <span class="keyword">if</span>(!result)&#123;</div><div class="line">    <span class="built_in">console</span>.log(result)</div><div class="line">    <span class="comment">// 创建目录</span></div><div class="line">    fs.mkdirSync(<span class="string">'data'</span>)<span class="comment">// 在当前目录创建data目录</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="dirname和firename"><a href="#dirname和firename" class="headerlink" title="dirname和firename"></a><strong>dirname和</strong>firename</h2><p>1, <strong>dirname 可在任意文件中直接使用,值表示当前文件所在路径字符串<br>2, </strong>firname 也可以在任意文件中使用,值表示当前文件的包含文件名的完整路径!</p><h2 id="按顺序执行就是同步"><a href="#按顺序执行就是同步" class="headerlink" title="按顺序执行就是同步"></a>按顺序执行就是同步</h2><h2 id="form表单，提交get请求，会把请求参数添加到url中"><a href="#form表单，提交get请求，会把请求参数添加到url中" class="headerlink" title="form表单，提交get请求，会把请求参数添加到url中"></a>form表单，提交get请求，会把请求参数添加到url中</h2><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向!"></a>重定向!</h2><ul><li>在响应头里加上 Location:’新地址’,并设置状态为302</li><li><code>res.setHeader(&#39;key&#39;,&#39;value&#39;)</code>// 设置响应头</li><li><code>res.writeHead(状态码)</code>// 设置状态码!</li><li>浏览器接收到数据后会重新向新地址跳转!</li></ul><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><ul><li>node package manager</li><li>node的包管理工具，管理的是第三方包</li><li><a href="https://www.npmjs.com/" target="_blank" rel="external">官网</a></li><li>也能管理前端的包</li></ul><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><ul><li>初始化: <code>npm init</code></li><li><code>npm install &lt;包名&gt;</code></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="离线文档阅读器"><a href="#离线文档阅读器" class="headerlink" title="离线文档阅读器"></a>离线文档阅读器</h2><ul><li><a href="https://zealdocs.org/" target="_blank" rel="external">windows版本</a></li><li><a href="dash">mac版本</a></li></ul><h2 id="es6-es2015-每天一点点"><a href="#es6-es2015-每天一点点" class="headerlink" title="es6/es2015 每天一点点"></a>es6/es2015 每天一点点</h2><ul><li>const<br>//  const申明的数据，在栈中不可变，但是如果是对象，则对应的属性值可以变,也就是堆中的值可变,栈中的地址不可以变！</li><li>let<br>// let申明的变量，作用由大括号决定!</li></ul><h3 id="提交效率"><a href="#提交效率" class="headerlink" title="提交效率"></a>提交效率</h3><ul><li>组合键: <code>win+E</code>, 打开资源管理器</li><li>组合键: <code>wind+D</code>, 快速切换到桌面</li><li>组合键: <code>ctrl+shift+esc</code> 快速打开任务管理器</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了让 &lt;code&gt;NodeJs&lt;/code&gt; 的文件可以相互调用，&lt;code&gt;NodeJs&lt;/code&gt; 提供了一个简单的模块系统。&lt;br&gt;模块是 &lt;code&gt;NodeJs&lt;/code&gt; 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 &lt;code&gt;NodeJs&lt;/code&gt; 文件就是一个模块，这个文件可能是 &lt;code&gt;JavaScript&lt;/code&gt; 代码、&lt;code&gt;JSON&lt;/code&gt; 或者编译过的 &lt;code&gt;C/C++&lt;/code&gt; 扩展。&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="https://blog.ihoey.com/categories/Node/"/>
    
    
      <category term="Node" scheme="https://blog.ihoey.com/tags/Node/"/>
    
      <category term="NodeJs" scheme="https://blog.ihoey.com/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>Node第一部分-初体验</title>
    <link href="https://blog.ihoey.com/posts/Node/2016-12-10-Node-part1.html"/>
    <id>https://blog.ihoey.com/posts/Node/2016-12-10-Node-part1.html</id>
    <published>2016-12-10T02:31:09.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NodeJs是什么？"><a href="#NodeJs是什么？" class="headerlink" title="NodeJs是什么？"></a>NodeJs是什么？</h2><blockquote><p>简单的说 <code>NodeJs</code> 就是运行在服务端的 <code>JavaScript</code> 。<code>NodeJs</code> 是一个基于 <code>Chrome JavaScript</code> 运行时建立的一个平台。<code>NodeJs</code> 是一个事件驱动 <code>I/O</code> 服务端 <code>JavaScript</code> 环境，基于 <code>Google</code> 的 <code>V8</code> 引擎，<code>V8</code> 引擎执行 <code>Javascript</code> 的速度非常快，性能非常好。</p></blockquote><ul><li>官网 <code>https://nodejs.org</code></li></ul><a id="more"></a><ul><li><code>NodeJs</code> 自带运行时环境可在 <code>Javascript</code> 脚本的基础上可以解释和执行(这类似于 <code>JVM</code> 的 <code>Java</code> 字节码)。这个运行时允许在浏览器以外的任何机器上执行 <code>JavaScript</code> 代码。由于这种运行时在 <code>NodeJs</code> 上，所以 <code>JavaScript</code> 现在可以在服务器上并执行。</li><li><code>NodeJs</code> 还提供了各种丰富的 <code>JavaScript</code> 模块库，它极大简化了使用 <code>NodeJs</code> 来扩展 <code>Web</code> 应用程序的研究与开发。</li><li><code>NodeJs</code> = 运行环境 + <code>JavaScript</code> 库</li></ul><h3 id="浏览器和NodeJs中的Js"><a href="#浏览器和NodeJs中的Js" class="headerlink" title="浏览器和NodeJs中的Js"></a>浏览器和NodeJs中的Js</h3><ul><li>浏览器的 <code>Js</code><ul><li>可以通过 <code>Js</code> 操作 <code>Html</code></li><li>有 <code>DOM</code> (和操作 <code>Html</code> 有关)，有 <code>BOM</code> (和浏览器有关)，有 <code>ECMA</code> (就是 <code>js</code> 语法规范)</li></ul></li><li><code>Node</code> 中的 <code>Js</code><ul><li>没有 <code>DOM</code>, 没有 <code>BOM</code>, 有 <code>ECMA</code></li><li><code>windows</code> (也就是说没有 <code>windows</code> 对象)</li></ul></li></ul><h2 id="Node安装"><a href="#Node安装" class="headerlink" title="Node安装"></a>Node安装</h2><p>在 <code>windows</code> 上安装 <code>NodeJs</code> (本教程中使用)。使用 <code>MSI</code> 文件，并按照提示安装 <code>NodeJs</code> ，默认情况下，安装程序将 <code>NodeJs</code> 发行到 <code>C:\Program Files\nodejs</code>. 但这里我们可以根据需要修改安装路径到指定的文件夹，比如：<code>D:\Program Files\nodejs</code> ，并将 <code>D:\Program Files\nodejs</code> 目录添加到 <code>Window</code> 系统的 <code>PATH</code> 环境变量中（或者安装的时候选中添加环境变量，下面会有提到）。</p><ul><li>第一步：双击下载的 <code>node-v7.2.1-x64.msi</code> 文件，出现提示安装界面</li><li>第二步：选择安装目录，比如安装在目录 <code>D:\Program Files\nodejs</code> 中</li><li>第三步：选择安装的模块和功能，这里全部安装，并添加到系统环境变量，最后一个选项</li><li>最后一步：安装完成！</li><li>验证安装：在 <code>CMD</code> 或者 <code>powershell</code> 中输入 <code>node -v</code> 注意中间有空格，显示版本号就说明安装成功了！</li></ul><h2 id="Node版本介绍"><a href="#Node版本介绍" class="headerlink" title="Node版本介绍"></a>Node版本介绍</h2><ul><li><code>0.10.x</code> , <code>Node</code> 就开源了<ul><li>开源（开放源代码）的话, 别人就可以贡献（提意见，修改等）源码! </li><li>因为作者比较精益求精，所以后来第三方社区: 觉得Node更新太慢! <ul><li>于是第三方社区在原来Node的基础上继续开发并加入了很多新的东西</li></ul></li><li>后来因为反响太大，作者便直接合并: 从 <code>0.10.x</code> 直接升到 <code>4.x</code></li><li>版本历史 <code>4.x</code> <code>5.x</code> <code>6.x</code> <code>7.x</code></li></ul></li></ul><h2 id="创建-NodeJs-应用"><a href="#创建-NodeJs-应用" class="headerlink" title="创建 NodeJs 应用"></a>创建 NodeJs 应用</h2><h3 id="步骤一、引入-required-模块"><a href="#步骤一、引入-required-模块" class="headerlink" title="步骤一、引入 required 模块"></a>步骤一、引入 required 模块</h3><p>我们使用 <code>require</code> 指令来载入 <code>http</code> 模块，并将实例化的 <code>HTTP</code> 赋值给变量 http，实例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div></pre></td></tr></table></figure><h3 id="步骤一、创建服务器"><a href="#步骤一、创建服务器" class="headerlink" title="步骤一、创建服务器"></a>步骤一、创建服务器</h3><ul><li>我们电脑上只要安装了node,不需要其他的软件配置，就能够开启一个http服务</li></ul><p>接下来我们使用 <code>http.createServer()</code> 方法创建服务器，并使用 <code>listen</code> 方法绑定 <code>8888</code> 端口。 函数通过 <code>request</code>, <code>response</code> 参数来接收和响应数据。<br>实例如下，在你项目的根目录下创建一个叫 <code>server.js</code> 的文件，并写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">  <span class="comment">// 发送 http 头部</span></div><div class="line">  <span class="comment">// http 状态码：200 ：OK</span></div><div class="line">  <span class="comment">// 内容类型： text/piain</span></div><div class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Contenr-Type'</span>: <span class="string">'text/piain'</span>&#125;)</div><div class="line">  <span class="comment">//发送响应数据 ‘hello world’</span></div><div class="line">  response.end(<span class="string">'hello-world'</span>);</div><div class="line">  <span class="comment">//监听8888端口</span></div><div class="line">  &#125;).listen(<span class="number">8888</span>)</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>)</div></pre></td></tr></table></figure><p>以上代码我们完成了一个可以工作的 HTTP 服务器。<br>使用 node 命令执行以上的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node server.js</div><div class="line">Server running at http:<span class="comment">//127.0.0.1:8888/</span></div></pre></td></tr></table></figure><p>接下来，打开浏览器访问 <code>http://127.0.0.1:8888/</code> ，你会看到一个写着 “Hello World”的网页。</p><blockquote><p>服务器</p></blockquote><ul><li>服务器就是一台电脑, 只是性能一般比我们普通电脑高!</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><em>file协议，默认，是不能够发ajax请求的！</em></p><ul><li>服务器就是一台电脑(这个电脑是有独立 <code>ip</code> )</li><li>我们的笔记本也是电脑(也可以把最终的项目代码放到笔记本上! ,但是没有公司愿意这么干)</li><li>操作系统都可能是一样的</li><li>服务器能运行的软件，我们电脑也能运行</li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>我们在 <code>cmd</code> 窗口中敲一个命令, 本质上是执行了一个程序(软件)</li><li>默认按下回车时, 会到当前命令行所对应的目录寻找文件, 如果找到就立即执行</li><li>如果找不到就会到环境变量中的 <code>PATH</code> 中指定的目录中寻找!</li></ul><p>例:我们把 <code>node</code> 的默认安装目录: <code>D:\Program Files\nodejs</code>, 配置 <code>PATH</code> 上，那么<br>我们在 <code>cmd</code> 中敲命令时，如果当前目录找不到，就会到 <code>D:\Program Files\nodejs</code><br>目录寻找相应的文件执行!</p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><ul><li>系统底层还是命令</li><li>windows系统刚开始的时候还没有界面</li><li>在 <code>cmd</code> 中敲命令,或默认到当前命令行对应的目录中找文件执行</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NodeJs是什么？&quot;&gt;&lt;a href=&quot;#NodeJs是什么？&quot; class=&quot;headerlink&quot; title=&quot;NodeJs是什么？&quot;&gt;&lt;/a&gt;NodeJs是什么？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;简单的说 &lt;code&gt;NodeJs&lt;/code&gt; 就是运行在服务端的 &lt;code&gt;JavaScript&lt;/code&gt; 。&lt;code&gt;NodeJs&lt;/code&gt; 是一个基于 &lt;code&gt;Chrome JavaScript&lt;/code&gt; 运行时建立的一个平台。&lt;code&gt;NodeJs&lt;/code&gt; 是一个事件驱动 &lt;code&gt;I/O&lt;/code&gt; 服务端 &lt;code&gt;JavaScript&lt;/code&gt; 环境，基于 &lt;code&gt;Google&lt;/code&gt; 的 &lt;code&gt;V8&lt;/code&gt; 引擎，&lt;code&gt;V8&lt;/code&gt; 引擎执行 &lt;code&gt;Javascript&lt;/code&gt; 的速度非常快，性能非常好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;官网 &lt;code&gt;https://nodejs.org&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Node" scheme="https://blog.ihoey.com/categories/Node/"/>
    
    
      <category term="Node" scheme="https://blog.ihoey.com/tags/Node/"/>
    
      <category term="NodeJs" scheme="https://blog.ihoey.com/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>工具使用篇之Markdown</title>
    <link href="https://blog.ihoey.com/posts/Markdown/2016-11-27-use-tools-part1-markdown.html"/>
    <id>https://blog.ihoey.com/posts/Markdown/2016-11-27-use-tools-part1-markdown.html</id>
    <published>2016-11-27T02:35:12.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-介绍"><a href="#Markdown-介绍" class="headerlink" title="Markdown 介绍"></a>Markdown 介绍</h2><ul><li><em>Markdown</em> 是一个 <strong>轻量级  高效率</strong> 的标记语言</li><li>轻量级标记语言，<code>2004</code> 年被 <code>John Gruber</code> 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 <code>HTML</code> 文档格式， 很多网站目前都使用了 <code>Markdown</code> 或者其变种，例如 <code>Github</code> 、简书等大型社区。</li></ul><a id="more"></a><h2 id="Markdown-使用场景"><a href="#Markdown-使用场景" class="headerlink" title="Markdown 使用场景"></a>Markdown 使用场景</h2><ul><li>学习笔记</li><li>演讲稿</li><li>写书（侧重于技术相关的 内容非常适合）</li><li>个人笔记</li><li>文章博客</li><li>教学讲义</li><li>说明文档</li><li>电子邮件</li></ul><h2 id="Markdown-实时预览编辑器"><a href="#Markdown-实时预览编辑器" class="headerlink" title="Markdown 实时预览编辑器"></a>Markdown 实时预览编辑器</h2><ul><li>dillinger</li><li>马克飞象</li><li>简书</li><li>MarkdownPad</li><li>Sublime Text<ul><li>配合 Markdown Preview 插件</li></ul></li><li>Webstorm<ul><li>配合插件</li></ul></li><li>gitbook</li></ul><p>实时预览工具只是为了达到所见即所得的效果而已， 适合初学者学习 <code>Markdown</code> ， 我们真正在进行写作的时候，其实是不需要实时预览的， 因为 Markdown 标记语言本身已经足够清晰了。</p><h2 id="Markdown-安装和配置编写预览环境-sublime"><a href="#Markdown-安装和配置编写预览环境-sublime" class="headerlink" title="Markdown 安装和配置编写预览环境(sublime)"></a>Markdown 安装和配置编写预览环境(sublime)</h2><ul><li>按下键 <code>Ctrl+Shift+p</code> 调出命令面板，找到 <code>Package Control: install Pakage</code> 这一项。搜索 <code>markdown preview</code> ，点击安装。</li><li><code>Markdown Preview</code> 较常用的功能是 <code>preview in browser</code> 和 <code>Export HTML in Sublime Text</code> ，前者可以在浏览器看到预览效果，后者可将 <code>markdown</code> 保存为 <code>html</code> 文件。</li><li><code>preview in browser</code> 据称是实时的，但是实践上还是需要在 <code>st</code> 保存，然后浏览器刷新才能看到新的效果，好在 <code>markdown</code> 写得多的话也不需要每敲一行看一次效果。</li></ul><h3 id="Webstorm"><a href="#Webstorm" class="headerlink" title="Webstorm"></a>Webstorm</h3><ul><li>打开<code>webstorm</code> ，<code>File--&gt;Setting--&gt;输入plugin--&gt;Install JetBrains plugin...--&gt;输入markdown--&gt;</code>点击右边的 <code>Install</code> ,安装完，重启 <code>webstorm</code>。</li></ul><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><ul><li><code>Visual Studio Code</code> 自带 <code>markdown</code> 预览,所以不需要安装插件,不过可以安装语法高亮主题</li></ul><h3 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h3><ul><li>MarkdownEditing 主题、自动补齐等功能</li><li>MarkdownPreview 在浏览器预览</li><li>MarkdownTOC 自动生成导航</li><li>Table Editor 自动表格编辑</li><li><a href="https://packagecontrol.io/" target="_blank" rel="external">packagecontrol</a> Sublime 的插件生态系统网站</li></ul><p>只要有写作的地方，都可以使用 <code>Markdown</code> 来书写。</p><h2 id="Markdown-标题书写"><a href="#Markdown-标题书写" class="headerlink" title="Markdown 标题书写"></a>Markdown 标题书写</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 一级标题</span></div><div class="line"><span class="section">## 二级标题</span></div><div class="line"><span class="section">### 三级标题</span></div><div class="line">...</div><div class="line"><span class="section">###### 六级标签</span></div><div class="line">一共六级标题</div></pre></td></tr></table></figure><h2 id="Markdown-列表书写语法"><a href="#Markdown-列表书写语法" class="headerlink" title="Markdown 列表书写语法"></a>Markdown 列表书写语法</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>一级列表建议使用 <code>-</code><ul><li>二级列表建议使用 <code>+</code><ul><li>三级列表建议使用 <code>*</code></li></ul></li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>一级标题</div><div class="line"><span class="code">    + 二级标题</span></div><div class="line"><span class="code">        * 三级列表</span></div></pre></td></tr></table></figure><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li>有序列表直接使用序列加一个点开头, 然后加一个</li><li>有序列表嵌套无序列表<ul><li>有序列表中嵌套无需列表<ul><li>有序列表中嵌套无需列表</li></ul></li></ul></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">2. </span>有序列表嵌套无序列表</div><div class="line"><span class="code">    - 有序列表嵌套无序列表</span></div><div class="line"><span class="code">        + 有序列表嵌套无序列表</span></div></pre></td></tr></table></figure><ol><li>有序列表嵌套有序列表<ol><li>有序列表嵌套有序列表<ol><li>有序列表嵌套有序列表</li></ol></li></ol></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">3. </span>有序列表嵌套有序列表</div><div class="line"><span class="code">    1. 有序列表嵌套有序列表</span></div><div class="line"><span class="code">        1. 有序列表嵌套有序列表</span></div></pre></td></tr></table></figure><h4 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h4><p>无论是有序列表还是无序列表,如果就写一级列表不嵌套就可以紧凑写到一起即可,如果嵌套多级列表最好在列表项之间只用空行隔开</p><h2 id="Markdown-图片链接书写语法"><a href="#Markdown-图片链接书写语法" class="headerlink" title="Markdown 图片链接书写语法"></a>Markdown 图片链接书写语法</h2><h3 id="Markdown-图片书写语法"><a href="#Markdown-图片书写语法" class="headerlink" title="Markdown 图片书写语法"></a>Markdown 图片书写语法</h3><ul><li><code>![图片](http://blog.ihoey.com/img/img.jpg)</code></li></ul><h3 id="Markdown-链接书写语法"><a href="#Markdown-链接书写语法" class="headerlink" title="Markdown 链接书写语法"></a>Markdown 链接书写语法</h3><ul><li><code>[链接](http://blog.ihoey.com)</code></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><code>&gt; 例如这样</code></li></ul><blockquote><p>例如这样</p></blockquote><h2 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h2><ul><li><code>Markdown</code> 的粗体和斜体也非常简单，用两个 <code>*</code> 包含一段文本就是粗体的语法，用一个 <code>*</code> 包含一段文本就是斜体的语法</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**这里是粗体**</span></div><div class="line"><span class="emphasis">*这里是斜体*</span></div></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| 表头           | 表头            | 表头   |</div><div class="line">| :------------- | :-------------: | -----: |</div><div class="line">| 左对齐         | 居中对齐        | 右对齐 |</div><div class="line">| 左对齐         | 居中对齐        | 右对齐 |</div><div class="line">| 左对齐         | 居中对齐        | 右对齐 |</div></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">表头</th><th style="text-align:center">表头</th><th style="text-align:right">表头</th></tr></thead><tbody><tr><td style="text-align:left">左对齐</td><td style="text-align:center">居中对齐</td><td style="text-align:right">右对齐</td></tr><tr><td style="text-align:left">左对齐</td><td style="text-align:center">居中对齐</td><td style="text-align:right">右对齐</td></tr><tr><td style="text-align:left">左对齐</td><td style="text-align:center">居中对齐</td><td style="text-align:right">右对齐</td></tr></tbody></table><h2 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h2><p>由三个 ` 反引号包裹, 行内代码在代码前后加一个 ` 反引号</p><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">## 0. 目录&#123;#index&#125;</span></div><div class="line">跳转到[<span class="string">目录</span>](<span class="link">#index</span>)</div></pre></td></tr></table></figure><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span><span class="bullet">* *</span></div><div class="line"><span class="emphasis">***</span></div><div class="line"><span class="strong">*****</span></div><div class="line"><span class="bullet">- </span>- -</div><div class="line">---------------------------------------</div></pre></td></tr></table></figure><p>显示效果都一样：</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Markdown-介绍&quot;&gt;&lt;a href=&quot;#Markdown-介绍&quot; class=&quot;headerlink&quot; title=&quot;Markdown 介绍&quot;&gt;&lt;/a&gt;Markdown 介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Markdown&lt;/em&gt; 是一个 &lt;strong&gt;轻量级  高效率&lt;/strong&gt; 的标记语言&lt;/li&gt;
&lt;li&gt;轻量级标记语言，&lt;code&gt;2004&lt;/code&gt; 年被 &lt;code&gt;John Gruber&lt;/code&gt; 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 &lt;code&gt;HTML&lt;/code&gt; 文档格式， 很多网站目前都使用了 &lt;code&gt;Markdown&lt;/code&gt; 或者其变种，例如 &lt;code&gt;Github&lt;/code&gt; 、简书等大型社区。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Markdown" scheme="https://blog.ihoey.com/categories/Markdown/"/>
    
    
      <category term="Markdown语法规范" scheme="https://blog.ihoey.com/tags/Markdown%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/"/>
    
      <category term="tools" scheme="https://blog.ihoey.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part7之 Ajax 模块功能及实现</title>
    <link href="https://blog.ihoey.com/posts/javascript/2016-11-25-javascript-jquery-part7.html"/>
    <id>https://blog.ihoey.com/posts/javascript/2016-11-25-javascript-jquery-part7.html</id>
    <published>2016-11-25T13:31:12.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!</p><a id="more"></a><h2 id="Ajax-请求流程"><a href="#Ajax-请求流程" class="headerlink" title="Ajax 请求流程"></a>Ajax 请求流程</h2><ol><li>创建一个请求对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRequest</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest() : </div><div class="line"><span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xhr = createRequest();</div><div class="line"><span class="built_in">console</span>.log(xhr);</div></pre></td></tr></table></figure><ol><li>格式化数据<ul><li>将格式化后的数据,参数与值都要重新编码</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatData</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ret = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> data)&#123;</div><div class="line">        ret.push(<span class="built_in">window</span>.encodeURIComponent(k) + <span class="string">'='</span> + <span class="built_in">window</span>.encodeURIComponent(data[k]));</div><div class="line">    &#125;</div><div class="line"><span class="comment">// 如果不想从服务器缓存中读取数据</span></div><div class="line">ret.push((<span class="string">'_='</span> + <span class="built_in">Math</span>.random()).replace(<span class="string">'.'</span>, <span class="string">''</span>));</div><div class="line">    <span class="keyword">return</span> ret.join(<span class="string">'&amp;'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> data = &#123;<span class="attr">name</span>: <span class="string">'梦魇小栈'</span>,<span class="attr">age</span>: <span class="number">2</span>,<span class="attr">url</span>:<span class="string">'http://blog.ihoey.com'</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(formatData(data));<span class="comment">//name=%E6%A2%A6%E9%AD%87%E5%B0%8F%E6%A0%88&amp;age=2&amp;url=http%3A%2F%2Fblog.ihoey.com</span></div></pre></td></tr></table></figure><ol><li>与服务器建立连接</li><li>监听请求状态</li><li>发送请求</li><li>封装</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="comment">// 默认配置信息</span></div><div class="line">ajaxSetting = &#123;</div><div class="line">url: <span class="string">''</span>,</div><div class="line">type: <span class="string">'GET'</span>,</div><div class="line">dataType: <span class="string">'text'</span>,</div><div class="line">contentType: <span class="string">'application/x-www-form-urlencoded'</span>,</div><div class="line">data: <span class="literal">null</span>,</div><div class="line"><span class="keyword">async</span>: <span class="literal">true</span>,</div><div class="line">success: <span class="literal">null</span>,</div><div class="line">fail: <span class="literal">null</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRequest</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest() : </div><div class="line"><span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatData</span>(<span class="params">data</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> ret = [];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> data)&#123;</div><div class="line">ret.push(<span class="built_in">window</span>.encodeURIComponent(k) + <span class="string">'='</span> + <span class="built_in">window</span>.encodeURIComponent(data[k]));</div><div class="line">&#125;</div><div class="line"><span class="comment">// 如果不想从服务器缓存中读取数据</span></div><div class="line">ret.push((<span class="string">'_='</span> + <span class="built_in">Math</span>.random()).replace(<span class="string">'.'</span>, <span class="string">''</span>));</div><div class="line"><span class="keyword">return</span> ret.join(<span class="string">'&amp;'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">config</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> context = &#123;&#125;, </div><div class="line">xhr, </div><div class="line">postData = <span class="string">''</span>;</div><div class="line"><span class="comment">// 过滤无效参数</span></div><div class="line"><span class="keyword">if</span>(!config || !config.url) &#123;</div><div class="line"><span class="built_in">console</span>.warn(<span class="string">"参数异常"</span>);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// debugger;</span></div><div class="line"><span class="comment">// 获取默认配置信息</span></div><div class="line">itcast.extend(ajaxSetting, context);</div><div class="line"><span class="comment">// 用户的配置覆盖默认配置</span></div><div class="line">itcast.extend(config, context);</div><div class="line"><span class="comment">// 1: 创建请求对象</span></div><div class="line">xhr = createRequest();</div><div class="line"><span class="comment">// 2：格式化数据</span></div><div class="line"><span class="keyword">if</span>(context.data)&#123;</div><div class="line">postData = formatData(context.data);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 3：与服务器建立连接</span></div><div class="line"><span class="keyword">if</span>(context.type.toUpperCase() === <span class="string">'GET'</span>)&#123;</div><div class="line">xhr.open(<span class="string">'GET'</span>, context.url + <span class="string">'?'</span> + postData, context.async);</div><div class="line">postData = <span class="literal">null</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// 模拟表单提交，设置请求头信息</span></div><div class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, context.contentType);</div><div class="line">xhr.open(<span class="string">'POST'</span>, context.url, context.async);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 4：监听请求状态</span></div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</div><div class="line"><span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status === <span class="number">304</span>)&#123;</div><div class="line"><span class="comment">// 获取到请求回来的数据</span></div><div class="line"><span class="keyword">var</span> text = xhr.responseText;</div><div class="line"><span class="comment">// 如果指定的数据格式为 json，那就将其转换为json对象</span></div><div class="line">text = context.dataType.toLowerCase() === <span class="string">'json'</span> ?</div><div class="line"><span class="built_in">JSON</span>.parse(text) : text;</div><div class="line"></div><div class="line">context.success &amp;&amp; context.success(text);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">context.fail &amp;&amp; context.fail(&#123;<span class="string">"errorCode"</span>: xhr.status, <span class="string">"message"</span>: <span class="string">"请求超时."</span>&#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 5: 发送请求</span></div><div class="line">xhr.send(postData);</div><div class="line"><span class="comment">// context.success &amp;&amp; context.success(JSON.parse(xhr.responseText));</span></div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div><div class="line"><span class="regexp">&lt;script&gt;</span></div><div class="line"><span class="regexp">ajax(&#123;</span></div><div class="line"><span class="regexp">url: 'data.json',</span></div><div class="line"><span class="regexp">dataType: 'json',</span></div><div class="line"><span class="regexp">async: false,</span></div><div class="line"><span class="regexp">success: function(data) &#123;</span></div><div class="line"><span class="regexp">document.getElementById('content').innerHTML= '&lt;p&gt;' + data.username + '&lt;/</span>p&gt;<span class="string">' +</span></div><div class="line"><span class="string">'</span>&lt;p&gt;<span class="string">' + data.age + '</span>&lt;<span class="regexp">/p&gt;';</span></div><div class="line"><span class="regexp">&#125;,</span></div><div class="line"><span class="regexp">fail: function(er) &#123;</span></div><div class="line"><span class="regexp">console.log(er.errorCode);</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div><div class="line"><span class="regexp">&lt;/</span>script&gt;</div></pre></td></tr></table></figure><h2 id="Jsonp-请求"><a href="#Jsonp-请求" class="headerlink" title="Jsonp 请求"></a>Jsonp 请求</h2><ol><li>跨域 只能发送 <code>GET</code> 请求 . 一种不安全的请求方式</li><li>原理:由于 <code>dom</code> 元素的 <code>src</code> 属性,具有跨域功能. 在实现跨域请求时,为了方便就使用 <code>script</code> 标签来做.</li><li>流程<ul><li>创建请求对象,就是创建一个 <code>script</code> 标签</li><li>将上述创建的 <code>script</code> 标签添加到页面的 <code>head</code> 标签下</li><li>格式化数据</li><li>创建全局回调函数</li><li>设置超时时间,如果超过此时间,也没有得到数据,表示请求失败.否则,请求成功</li><li>发送请求: 指定 <code>script</code> 标签的 <code>src</code> 属性值</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="https://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="https://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="https://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part6之动画模块功能及实现</title>
    <link href="https://blog.ihoey.com/posts/javascript/2016-11-24-javascript-jquery-part6.html"/>
    <id>https://blog.ihoey.com/posts/javascript/2016-11-24-javascript-jquery-part6.html</id>
    <published>2016-11-24T01:38:13.000Z</published>
    <updated>2017-09-14T08:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!</p><a id="more"></a><h2 id="动画原理"><a href="#动画原理" class="headerlink" title="动画原理"></a>动画原理</h2><ul><li>根据人眼具有 <code>0.1</code> 秒的视觉残留,只有在一秒切换至少 <code>24</code> 个画面就会产生动画</li></ul><h2 id="动画的基本结构"><a href="#动画的基本结构" class="headerlink" title="动画的基本结构"></a>动画的基本结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">//动画</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">window</span>.setInterval(render, time);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="小动画案例"><a href="#小动画案例" class="headerlink" title="小动画案例"></a>小动画案例</h2><ul><li>奔跑的小矩形</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>奔跑吧矩形<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"itcast.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">div &#123;</span></div><div class="line"><span class="undefined">width: 100px;</span></div><div class="line"><span class="undefined">height: 100px;</span></div><div class="line"><span class="undefined">border: 5px solid yellowgreen;</span></div><div class="line"><span class="undefined">position: relative;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, step, target</span>) </span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> left,<span class="comment">//起始位置</span></span></div><div class="line"><span class="javascript">timer;<span class="comment">//定时器id</span></span></div><div class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;<span class="comment">//用来计算动画当前位移，并制定动画元素的位置</span></span></div><div class="line"><span class="undefined">left = elem.offsetLeft;</span></div><div class="line"><span class="javascript"><span class="keyword">if</span>( left + step &gt;= target )&#123;</span></div><div class="line"><span class="javascript">elem.style.left = target + <span class="string">'px'</span>;</span></div><div class="line"><span class="javascript"><span class="built_in">window</span>.clearInterval(timer);</span></div><div class="line"><span class="javascript">&#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="javascript">elem.style.left = left + step + <span class="string">'px'</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="javascript"><span class="comment">// 启动定时器 开始动画</span></span></div><div class="line"><span class="javascript">timer = <span class="built_in">window</span>.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</span></div><div class="line"><span class="undefined">&#125;;</span></div><div class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">animate(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>), <span class="number">3</span>, <span class="number">1000</span>);</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span>开始动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="匀速直线动画"><a href="#匀速直线动画" class="headerlink" title="匀速直线动画"></a>匀速直线动画</h2><ol><li>固定时间</li><li>固定距离</li><li>如何判断动画结束的时机?<ul><li>使用时间来判断是否结束动画</li><li>如果动画时间到达指定时间,那么就结束动画,并让动画元素到达终点</li></ul></li><li>实现思路<ul><li>定义动画函数, <code>animate</code> 函数. 当调用 <code>animate</code> 函数时, 即动画开始的时间</li><li>定义 <code>render</code> 函数. 用来给动画元素设置属性值<ul><li>计算当前动画元素所在的位置, 然后累计到其对应属性值上.</li><li>首先计算动画的时间间隔</li><li>如果时间间隔大于或等于指定的总时间, 那么就停止动画并设置动画元素到达终点</li><li>否则, 根据速度, 动画时间间隔计算出位移. 再将其于起始位置累加后赋值给 <code>elem</code> </li></ul></li><li>定义定时器, 开始动画. </li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">speed, <span class="comment">// 速度</span></div><div class="line">location, <span class="comment">// 起始位置</span></div><div class="line">distance, <span class="comment">// 动画总距离</span></div><div class="line">startTime,<span class="comment">// 动画开始时间</span></div><div class="line">currentTime,<span class="comment">// 动画当前时间</span></div><div class="line">time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">location = elem.offsetLeft;</div><div class="line">distance = target - location;</div><div class="line">speed = distance / duration;</div><div class="line">startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;  <span class="comment">// 转换毫秒值</span></div><div class="line"><span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">time = currentTime - startTime;</div><div class="line"><span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line"><span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line"><span class="keyword">if</span>(time &gt;= duration)&#123;</div><div class="line"><span class="comment">// console.log(time);</span></div><div class="line"><span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">elem.style.left = target + <span class="string">'px'</span>;</div><div class="line"><span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line"><span class="built_in">window</span>.clearInterval(timer);</div><div class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class="line"><span class="comment">// 指定动画元素的位置</span></div><div class="line"><span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">elem.style.left = speed * time + location + <span class="string">'px'</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 启动定时器 开始动画</span></div><div class="line">timer = <span class="built_in">window</span>.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">&#125;;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">animate(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>), <span class="number">1000</span>, <span class="number">2000</span>);</div><div class="line">&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="匀减速直线动画"><a href="#匀减速直线动画" class="headerlink" title="匀减速直线动画"></a>匀减速直线动画</h2><ol><li>物理公式<ul><li>a：    加速度</li><li>t：    时间间隔</li><li>v0：    初始速度</li><li>vt：    末速度</li><li>S：    位移</li><li>正方向：    S = v0 <em> t + a + t </em> t / 2;</li></ul></li><li>S ==&gt; target - location <br> t ==&gt; duration <br> v0 = 0</li><li>正方向 <br> a = 2 <em> ( S - v0 </em> t) / ( t <em> t) <br> ==&gt; = 2 </em> S / ( t <em> t) <br> ==&gt; = 2 </em> ( target - location ) / ( duration <em> duration ) <br> vt = 2 </em> ( target - location ) / duration </li><li>time 时间间隔内的 匀减速位移 <br> tween = v0 <em> t - a </em> t <em> t / 2 <br> ==&gt; tween = 2 </em> ( target - location ) <em> time / duration <br> - (target - location ) </em> time <em> time / ( duration </em> duration )</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">tween, <span class="comment">// 单位时间间隔的位移</span></div><div class="line">location, <span class="comment">// 起始位置</span></div><div class="line">distance, <span class="comment">// 动画总距离</span></div><div class="line">startTime, <span class="comment">// 动画开始时间</span></div><div class="line">currentTime, <span class="comment">// 动画当前时间</span></div><div class="line">time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">location = elem.offsetLeft;</div><div class="line">distance = target - location;</div><div class="line">startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>; <span class="comment">// 转换毫秒值</span></div><div class="line"><span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">time = currentTime - startTime;</div><div class="line"><span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line"><span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line"><span class="keyword">if</span> (time &gt;= duration) &#123;</div><div class="line"><span class="comment">// console.log(time);</span></div><div class="line"><span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">tween = distance;</div><div class="line"><span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line"><span class="built_in">window</span>.clearInterval(timer);</div><div class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class="line"><span class="comment">// 指定动画元素的位置</span></div><div class="line"><span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">tween = <span class="number">2</span> * distance * time / duration - distance * time * time / (duration * duration);</div><div class="line">&#125;</div><div class="line"></div><div class="line">elem.style.left = tween + location + <span class="string">'px'</span>;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 启动定时器 开始动画</span></div><div class="line">timer = <span class="built_in">window</span>.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">&#125;;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">animate(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>), <span class="number">1000</span>, <span class="number">1500</span>);</div><div class="line">&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="使用对象封装缓动函数"><a href="#使用对象封装缓动函数" class="headerlink" title="使用对象封装缓动函数"></a>使用对象封装缓动函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">x: null,</span></div><div class="line"><span class="comment">t: 时间间隔</span></div><div class="line"><span class="comment">b: 起始位置</span></div><div class="line"><span class="comment">c: 终止位置</span></div><div class="line"><span class="comment">d: 总时间</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> easing = &#123;</div><div class="line">linear: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> (c - b) * t / d;</div><div class="line">&#125;,</div><div class="line">minusspeed: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">2</span> * (c - b) * t / d - (c - b) * t * t / (d * d);</div><div class="line">&#125;,</div><div class="line">easeInQuad: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> c * (t /= d) * t + b;</div><div class="line">&#125;,</div><div class="line">easeOutQuad: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> -c * (t /= d) * (t - <span class="number">2</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInOutQuad: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t + b;</div><div class="line"><span class="keyword">return</span> -c / <span class="number">2</span> * ((--t) * (t - <span class="number">2</span>) - <span class="number">1</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInCubic: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> c * (t /= d) * t * t + b;</div><div class="line">&#125;,</div><div class="line">easeOutCubic: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t + <span class="number">1</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInOutCubic: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t + b;</div><div class="line"><span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t + <span class="number">2</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInQuart: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> c * (t /= d) * t * t * t + b;</div><div class="line">&#125;,</div><div class="line">easeOutQuart: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> -c * ((t = t / d - <span class="number">1</span>) * t * t * t - <span class="number">1</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInOutQuart: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t * t + b;</div><div class="line"><span class="keyword">return</span> -c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t * t - <span class="number">2</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInQuint: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> c * (t /= d) * t * t * t * t + b;</div><div class="line">&#125;,</div><div class="line">easeOutQuint: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t * t * t + <span class="number">1</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInOutQuint: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t * t * t + b;</div><div class="line"><span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t * t * t + <span class="number">2</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInSine: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> -c * <span class="built_in">Math</span>.cos(t / d * (<span class="built_in">Math</span>.PI / <span class="number">2</span>)) + c + b;</div><div class="line">&#125;,</div><div class="line">easeOutSine: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> c * <span class="built_in">Math</span>.sin(t / d * (<span class="built_in">Math</span>.PI / <span class="number">2</span>)) + b;</div><div class="line">&#125;,</div><div class="line">easeInOutSine: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> -c / <span class="number">2</span> * (<span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI * t / d) - <span class="number">1</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInExpo: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> (t == <span class="number">0</span>) ? b : c * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t / d - <span class="number">1</span>)) + b;</div><div class="line">&#125;,</div><div class="line">easeOutExpo: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> (t == d) ? b + c : c * (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * t / d) + <span class="number">1</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInOutExpo: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line"><span class="keyword">if</span> (t == d) <span class="keyword">return</span> b + c;</div><div class="line"><span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t - <span class="number">1</span>)) + b;</div><div class="line"><span class="keyword">return</span> c / <span class="number">2</span> * (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * --t) + <span class="number">2</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInCirc: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> -c * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t /= d) * t) - <span class="number">1</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeOutCirc: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> c * <span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t = t / d - <span class="number">1</span>) * t) + b;</div><div class="line">&#125;,</div><div class="line">easeInOutCirc: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> -c / <span class="number">2</span> * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - t * t) - <span class="number">1</span>) + b;</div><div class="line"><span class="keyword">return</span> c / <span class="number">2</span> * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t -= <span class="number">2</span>) * t) + <span class="number">1</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInElastic: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line"><span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> a = c;</div><div class="line"><span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line"><span class="keyword">if</span> ((t /= d) == <span class="number">1</span>) <span class="keyword">return</span> b + c;</div><div class="line"><span class="keyword">if</span> (!p) p = d * <span class="number">.3</span>;</div><div class="line"><span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">a = c;</div><div class="line"><span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line"><span class="keyword">return</span> -(a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p)) + b;</div><div class="line">&#125;,</div><div class="line">easeOutElastic: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line"><span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> a = c;</div><div class="line"><span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line"><span class="keyword">if</span> ((t /= d) == <span class="number">1</span>) <span class="keyword">return</span> b + c;</div><div class="line"><span class="keyword">if</span> (!p) p = d * <span class="number">.3</span>;</div><div class="line"><span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">a = c;</div><div class="line"><span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line"><span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * t) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) + c + b;</div><div class="line">&#125;,</div><div class="line">easeInOutElastic: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line"><span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> a = c;</div><div class="line"><span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line"><span class="keyword">if</span> ((t /= d / <span class="number">2</span>) == <span class="number">2</span>) <span class="keyword">return</span> b + c;</div><div class="line"><span class="keyword">if</span> (!p) p = d * (<span class="number">.3</span> * <span class="number">1.5</span>);</div><div class="line"><span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">a = c;</div><div class="line"><span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line"><span class="keyword">if</span> (t &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-.5</span> * (a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p)) + b;</div><div class="line"><span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) * <span class="number">.5</span> + c + b;</div><div class="line">&#125;,</div><div class="line">easeInBack: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line"><span class="keyword">return</span> c * (t /= d) * t * ((s + <span class="number">1</span>) * t - s) + b;</div><div class="line">&#125;,</div><div class="line">easeOutBack: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line"><span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * ((s + <span class="number">1</span>) * t + s) + <span class="number">1</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeInOutBack: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line"><span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * (t * t * (((s *= (<span class="number">1.525</span>)) + <span class="number">1</span>) * t - s)) + b;</div><div class="line"><span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * (((s *= (<span class="number">1.525</span>)) + <span class="number">1</span>) * t + s) + <span class="number">2</span>) + b;</div><div class="line">&#125;,</div><div class="line">easeOutBounce: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> ((t /= d) &lt; (<span class="number">1</span> / <span class="number">2.75</span>)) &#123;</div><div class="line"><span class="keyword">return</span> c * (<span class="number">7.5625</span> * t * t) + b;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2</span> / <span class="number">2.75</span>)) &#123;</div><div class="line"><span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">1.5</span> / <span class="number">2.75</span>)) * t + <span class="number">.75</span>) + b;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2.5</span> / <span class="number">2.75</span>)) &#123;</div><div class="line"><span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">2.25</span> / <span class="number">2.75</span>)) * t + <span class="number">.9375</span>) + b;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">2.625</span> / <span class="number">2.75</span>)) * t + <span class="number">.984375</span>) + b;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="抽取缓动函数"><a href="#抽取缓动函数" class="headerlink" title="抽取缓动函数"></a>抽取缓动函数</h2><p>将缓动函数的可变变量抽取出来,以便于封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration, easingName</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">tween, <span class="comment">// 单位时间间隔的位移</span></div><div class="line">location, <span class="comment">// 起始位置</span></div><div class="line">distance, <span class="comment">// 动画总距离</span></div><div class="line">startTime,<span class="comment">// 动画开始时间</span></div><div class="line">currentTime,<span class="comment">// 动画当前时间</span></div><div class="line">time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">location = elem.offsetLeft;</div><div class="line">distance = target - location;</div><div class="line">startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;  <span class="comment">// 转换毫秒值</span></div><div class="line"><span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">time = currentTime - startTime;</div><div class="line"><span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line"><span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line"><span class="keyword">if</span>(time &gt;= duration)&#123;</div><div class="line"><span class="comment">// console.log(time);</span></div><div class="line"><span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">tween = distance;</div><div class="line"><span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line"><span class="built_in">window</span>.clearInterval(timer);</div><div class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class="line"><span class="comment">// 指定动画元素的位置</span></div><div class="line"><span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">tween = easing[easingName](<span class="literal">null</span>, time, location, target, duration);</div><div class="line">&#125;</div><div class="line"></div><div class="line">elem.style.left = tween + location + <span class="string">'px'</span>;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 启动定时器 开始动画</span></div><div class="line">timer = <span class="built_in">window</span>.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">&#125;;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">animate(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>), <span class="number">1000</span>, <span class="number">1500</span>, <span class="string">'easeInOutElastic'</span>);</div><div class="line">&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="多属性动画的实现"><a href="#多属性动画的实现" class="headerlink" title="多属性动画的实现"></a>多属性动画的实现</h2><p>到此我们就可以继续进行框架的封装了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取所有动画属性的起始值</span></div><div class="line"><span class="keyword">var</span> kv = &#123;</div><div class="line"><span class="string">'left'</span>: <span class="string">'offsetLeft'</span>,</div><div class="line"><span class="string">'top'</span>: <span class="string">'offsetTop'</span>,</div><div class="line"><span class="string">'width'</span>: <span class="string">'offsetWidth'</span>,</div><div class="line"><span class="string">'height'</span>: <span class="string">'offsetHeight'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocation</span>(<span class="params">elem, target</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> target) &#123;</div><div class="line">obj[k] = elem[kv[k]];</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDistance</span>(<span class="params">location, target</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> target) &#123;</div><div class="line">obj[k] = <span class="built_in">parseFloat</span>(target[k]) - location[k];</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTween</span>(<span class="params">time, location, target, duration, easingName</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> target) &#123;</div><div class="line">obj[k] = easing[easingName](<span class="literal">null</span>, time, location[k], target[k], duration);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyles</span>(<span class="params">elem, location, tween</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> k;</div><div class="line"><span class="keyword">for</span> (k <span class="keyword">in</span> location) &#123;</div><div class="line">elem.style[k] = location[k] + tween[k] + <span class="string">'px'</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration, easingName</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">tween, <span class="comment">// 单位时间间隔的位移&#123;left: 800, top:400&#125;</span></div><div class="line">location, <span class="comment">// 起始位置&#123;left: 8,top: 8&#125;</span></div><div class="line">distance, <span class="comment">// 动画总距离&#123;left: 992, top: 792&#125;</span></div><div class="line">startTime, <span class="comment">// 动画开始时间</span></div><div class="line">currentTime, <span class="comment">// 动画当前时间</span></div><div class="line">time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">location = getLocation(elem, target);</div><div class="line">distance = getDistance(location, target);</div><div class="line">startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>; <span class="comment">// 转换毫秒值</span></div><div class="line"><span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">time = currentTime - startTime;</div><div class="line"><span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line"><span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line"><span class="keyword">if</span> (time &gt;= duration) &#123;</div><div class="line"><span class="comment">// console.log(time);</span></div><div class="line"><span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">tween = distance;</div><div class="line"><span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line">global.clearInterval(timer);</div><div class="line"><span class="comment">// 3 删除动画元素的timerId属性</span></div><div class="line"><span class="keyword">delete</span> elem.timerId;</div><div class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class="line"><span class="comment">// 指定动画元素的位置</span></div><div class="line"><span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">tween = getTween(time, location, target, duration, easingName);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 设置动画属性值</span></div><div class="line">setStyles(elem, location, tween);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 启动定时器 开始动画</span></div><div class="line">timer = global.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line"><span class="comment">// 把定时器id存储在动画元素上（以自定义属性）</span></div><div class="line">elem.timerId = timer;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="实现animate和stop方法"><a href="#实现animate和stop方法" class="headerlink" title="实现animate和stop方法"></a>实现animate和stop方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">itcast.fn.extend(&#123;</div><div class="line">animate: <span class="function"><span class="keyword">function</span>(<span class="params">target, duration, easingName</span>) </span>&#123;</div><div class="line">easingName = easingName || <span class="string">'linear'</span>;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>(!(<span class="string">'timerId'</span> <span class="keyword">in</span> <span class="keyword">this</span>))&#123;</div><div class="line">animate(<span class="keyword">this</span>, target, duration, easingName);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;,</div><div class="line">stop: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="string">'timerId'</span> <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</div><div class="line">global.clearInterval(<span class="keyword">this</span>.timerId);</div><div class="line"><span class="keyword">delete</span> <span class="keyword">this</span>.timerId;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>动画模块的实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"itcast.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">div &#123;</span></div><div class="line"><span class="undefined">width: 100px;</span></div><div class="line"><span class="undefined">height: 100px;</span></div><div class="line"><span class="undefined">border: 5px solid yellowgreen;</span></div><div class="line"><span class="undefined">position: relative;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">$(<span class="string">'#dv'</span>).animate(&#123;<span class="attr">left</span> : <span class="number">1000</span>&#125;, <span class="number">1500</span>);</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="javascript">$(<span class="string">'#stop'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">$(<span class="string">'#dv'</span>).stop();</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span>开始动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"stop"</span>&gt;</span>停止动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="https://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="https://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="https://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
</feed>
