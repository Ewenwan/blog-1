{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/400.html","path":"400.html","modified":1,"renderable":1},{"_id":"themes/next/source/baidu_verify_HR5eYsvhwq.html","path":"baidu_verify_HR5eYsvhwq.html","modified":1,"renderable":1},{"_id":"themes/next/source/README.MD","path":"README.MD","modified":1,"renderable":1},{"_id":"themes/next/source/css/eevee.css","path":"css/eevee.css","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/cursor.css","path":"css/cursor.css","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cursor.ico","path":"images/cursor.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/ds-1.gif","path":"images/ds-1.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/Thumbs.db","path":"images/Thumbs.db","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/img1.png","path":"images/img1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/img2.png","path":"images/img2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/plbj.png","path":"images/plbj.png","modified":1,"renderable":1},{"_id":"themes/next/source/qcode/weixin-qrcode.png","path":"qcode/weixin-qrcode.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/qcode/alipay_qcode.png","path":"qcode/alipay_qcode.png","modified":1,"renderable":1},{"_id":"themes/next/source/qcode/wechat_qcode.png","path":"qcode/wechat_qcode.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/ds-2.png","path":"images/ds-2.png","modified":1,"renderable":1},{"_id":"themes/next/source/img/sp161118_190319.png","path":"img/sp161118_190319.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/embed.js","path":"js/src/embed.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/set.js","path":"js/src/set.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/header_background.jpg","path":"images/header_background.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1481002345599},{"_id":"source/robots.txt","hash":"133ccfac302f661b9c61e279c19c2fc2e343a6cc","modified":1482838842566},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1481002345599},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1481002345599},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1481002345615},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1481002345615},{"_id":"themes/next/README.en.md","hash":"8fb7ceba7e34593de97d73a8234584452d9de3a5","modified":1481019646715},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1481002345584},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1481002345631},{"_id":"themes/next/_config.yml","hash":"9bc423a52c8232b29af07fa150691bbdb8a35551","modified":1496641139405},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1481019688280},{"_id":"themes/next/README.md","hash":"a0848e66caac79f24df40a2a8981858c3b65e72d","modified":1481019626042},{"_id":"source/favicon.ico","hash":"61ed14c161a5df9092565996e38cdd438f128783","modified":1479648569380},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1481002346071},{"_id":"source/_posts/Node-part2.md","hash":"ab927e9d96f406827411ab85692a984ce99615a2","modified":1481978095139},{"_id":"source/_posts/Node-part1.md","hash":"313ea96ad1d0d10016ff82e59fdd51ee3c57da49","modified":1482629489762},{"_id":"source/_posts/canvas-part1.md","hash":"79f0a5655f28c51b6b6998b32f2bf048c8ab7643","modified":1479951213631},{"_id":"source/_posts/adb-Android-Debug-Bridge.md","hash":"252ec32a9dd065682721e742f075d62868820531","modified":1484132527735},{"_id":"source/_posts/adb-Android-Debug-Bridge-2.md","hash":"d8b3a06121eb681409543c4ec64f206205ad7246","modified":1484132541655},{"_id":"source/_posts/canvas-part2.md","hash":"384b27a77509903dc479df5b5e2ddf877c806892","modified":1479951273712},{"_id":"source/_posts/javascript-constructor.md","hash":"f4b55e3c697b3462be9680d30da69cd26967a9bc","modified":1479950758217},{"_id":"source/_posts/javascript-Function.md","hash":"0a59b054941e621ef7a24130bea30edebf875499","modified":1479950917656},{"_id":"source/_posts/hello-world.md","hash":"b3bb0867f9dd8365049ad2559a192d86b6a96705","modified":1479950190994},{"_id":"source/_posts/javascript-inherit.md","hash":"5f92254df069652980996a6ff0dcdc3db7a33b72","modified":1479950850082},{"_id":"source/_posts/git.md","hash":"3b7e0ea390d434ab6eade1f899ab40beb7bbecae","modified":1492831220797},{"_id":"source/_posts/javascript-jquery-part1.md","hash":"d48115cbefbcbb8d4ca2f4b3b8c3537cb7564918","modified":1482752302477},{"_id":"source/_posts/canvas-summary.md","hash":"64ccba23acb9678998ea941ed6eeae82ef9f5f7d","modified":1479951309908},{"_id":"source/_posts/Cron.md","hash":"5cfb8b8e59b71c4668faa1b0687dd2e95e6a150d","modified":1492792457892},{"_id":"source/_posts/javascript-jquery-part2.md","hash":"ec09b544a399d60ddc3df569a7c8ea107b501b1b","modified":1479951378943},{"_id":"source/_posts/javascript-jquery-part3.md","hash":"94de405402ceb22fe6ec3712f4c62e74b385d5da","modified":1479951397176},{"_id":"source/_posts/javascript-jquery-part4.md","hash":"cd19546c7bfd8d445d1f44a676e8b3fef940fd8e","modified":1479951449096},{"_id":"source/_posts/javascript-jquery-part5.md","hash":"27c05a89c142453222993ae09706a8a41e36178f","modified":1479951457701},{"_id":"source/_posts/javascript-jquery-part6.md","hash":"6d2d515ba7ef29dba12e3b9d9dd931cbef6259ec","modified":1479993233120},{"_id":"source/_posts/javascript-jquery-part7.md","hash":"6c14bd63cf5fb4bea46597d2ee763e55f6b6640e","modified":1480213863000},{"_id":"source/_posts/javascript-part1.md","hash":"34e46ec4b20cac6de81ff386300970f13ce7702f","modified":1479950491000},{"_id":"source/_posts/javascript-part2.md","hash":"442bd39b3dc6c9d5c35ec534ac0a859797d5f874","modified":1479950717338},{"_id":"source/_posts/javascript-part4.md","hash":"41bacb60063954146c606ea89875828864d0412f","modified":1479951005120},{"_id":"source/_posts/javascript-part3.md","hash":"b7904d5d1852859cb76c061122175512abc236b6","modified":1479950976406},{"_id":"source/_posts/javascript-part5.md","hash":"45bba563ca0c1e81d900255397c3ee1342baed77","modified":1479951021970},{"_id":"source/_posts/javascript-prototype-chain.md","hash":"74e3c28b6a0ce159e65b0b58ec3312756ae5cc5a","modified":1479950887277},{"_id":"source/_posts/javascript-part6.md","hash":"bbe1899a3f1384acb27fd1774a1e4f032e55ca69","modified":1479951091067},{"_id":"source/_posts/javascript-prototype.md","hash":"73103828fc32ec288db88ce99bb9635684435647","modified":1479950799852},{"_id":"source/_posts/liunx-shell.md","hash":"1bf32c07a5d348294f91d951d9c3a917d8937ee1","modified":1496585015737},{"_id":"source/_posts/mongodb-ues.md","hash":"1f3de4322195d4e14c84c362f0801b71bfa2f5c2","modified":1492783781558},{"_id":"source/_posts/use-tools-part1-markdown.md","hash":"390c0f5833c11e7414ad73e6c964382ef616b0ca","modified":1484137688814},{"_id":"source/_posts/npm.md","hash":"e00187f9c2ff2423efdfaaa68ec27f47d8645699","modified":1496632604814},{"_id":"source/_posts/mongodb.md","hash":"0f57cfaf8167bc4a55d0157600903cd7c6ed5e10","modified":1491796256420},{"_id":"source/_posts/javascript-summary.md","hash":"732fcc68b63e07c4ac5ac9344cade64ec5003e63","modified":1479951148396},{"_id":"source/_posts/pseudo-elements-and-pseudo-classes.md","hash":"0a5f6a0ee21447b1b73c0b5fd2d24aa58c48d5b8","modified":1493390560894},{"_id":"source/categories/index.md","hash":"c550b628154423bc8705185c3d2f517cb6d8302f","modified":1480582925604},{"_id":"source/tags/index.md","hash":"4b5e474c530d9099b4970cf881a7988d735573e8","modified":1478790256289},{"_id":"source/links/index.md","hash":"0cf639a01ed0213a9e24f877e4bea079d9b26398","modified":1496660422278},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1481002345599},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1481002345599},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1481002345646},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1481002345646},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1481002345646},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1481002345646},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1481002345662},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1481002345678},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1481002345662},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1481002345662},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1481002345662},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1481002345678},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1481002345678},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1481002345693},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0e9311805aefa37b2c411a378a51643f10d0efac","modified":1481013497250},{"_id":"themes/next/layout/_layout.swig","hash":"d0c184cfdeaf86020259754999621c4f4fac145a","modified":1481018227800},{"_id":"themes/next/layout/archive.swig","hash":"1532dde26dd547a93531f4c3b9d2da0606183c0b","modified":1481018867022},{"_id":"themes/next/layout/category.swig","hash":"6c55fcc07acb91d788db70497aedaacad594f349","modified":1481018809320},{"_id":"themes/next/layout/index.swig","hash":"1328ab8ddfb08a3f8e2ba204d25ef9c1ceccb50d","modified":1481018722051},{"_id":"themes/next/layout/schedule.swig","hash":"3ed13dc33a791248f5ce63c6ab64137da6d3067b","modified":1481018413562},{"_id":"themes/next/layout/page.swig","hash":"3547409a5b4ef0dfd2fc3f4b90aad635d5b0ff1e","modified":1481018634562},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1481002346071},{"_id":"themes/next/layout/post.swig","hash":"320ec16a178814387c521ca1117cd8607172e96d","modified":1481018523843},{"_id":"themes/next/layout/tag.swig","hash":"5e46abeacde124a08818fc1c34b15d9de293f05c","modified":1481018318967},{"_id":"source/_posts/shadowsocks-install.md","hash":"9fe517a25c82e2a53004498c1c612f8853e53f21","modified":1495601440862},{"_id":"source/guestbook/index.md","hash":"d9d3eb267b45561a5e8957a165fa74e5526322ac","modified":1496645967790},{"_id":"source/about/index.md","hash":"0c66453e8ddda13439f0e7bda1745d3798d12ee4","modified":1496660655665},{"_id":"themes/next/source/404.html","hash":"eb3289709dc50a6385b0e4230a6502f3e1cfb16f","modified":1482839849945},{"_id":"themes/next/source/400.html","hash":"a86c658850f855b1b16fbd2c2e06c15eb1e8437f","modified":1482839797179},{"_id":"themes/next/source/baidu_verify_HR5eYsvhwq.html","hash":"18f2c1a4a646c26871a5e9fc8fd424117035fcc3","modified":1479487192246},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1481002347205},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1481002347220},{"_id":"themes/next/source/README.MD","hash":"68f1d9aba2382345bbec21a2d2cdd15789b148b2","modified":1496979830045},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1481002347220},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481002346430},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1481002345693},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1481002345693},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"859a97213e92969442eaf07bd89eb7aa3d09f0d5","modified":1497874435991},{"_id":"themes/next/layout/_macro/post.swig","hash":"052bc0e0d8710cea5c3f339bd39644454158dc34","modified":1481977785292},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1481002345724},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1481002345709},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1481002345724},{"_id":"themes/next/layout/_partials/comments.swig","hash":"6cc82b23df43485542404da35e4f7f3c9f9fb81e","modified":1498025330380},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1481002345740},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a5a6f4a8e72fbd9ca74837dafb1ed98457330aa0","modified":1495874757815},{"_id":"themes/next/layout/_partials/header.swig","hash":"0d63144dec75f92c3f0c43d36d69b7e1f66c8688","modified":1496904777047},{"_id":"themes/next/layout/_partials/footer.swig","hash":"fe2f869f403e63f3f41baf453170ae84fe733a9e","modified":1481017988957},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1481002345771},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1481002345756},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1481002345771},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1481002345837},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1481002345837},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1481002346071},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1481002346087},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1481002346118},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1481002346118},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1481002345837},{"_id":"themes/next/layout/_partials/head.swig","hash":"ab9ea1690f90795af24befe8ba899493eec3cde5","modified":1482752630255},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1481002346040},{"_id":"themes/next/source/css/eevee.css","hash":"ecdd350c4159b474ab948d58cab861477ad96bcf","modified":1495875086222},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1481002346430},{"_id":"themes/next/source/css/cursor.css","hash":"044cfdc58c30477b2d134d81378abd2a24d1b06f","modified":1496587492031},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1481002346430},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1481002346430},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1481002346446},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1481002346446},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1481002346446},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1481002346446},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1481002346446},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1481002346470},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1481002346466},{"_id":"themes/next/source/images/cursor.ico","hash":"cd8349fb9cef6c217fc364cf35eae6819cebf5d6","modified":1478845626332},{"_id":"themes/next/source/images/ds-1.gif","hash":"e0bc6023185e4c841f624f2347f8439d06f627fd","modified":1478770531362},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1481002346472},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1481002346471},{"_id":"themes/next/source/images/Thumbs.db","hash":"878f9833358933aa1f79c0627cbb7180d3853b89","modified":1470202100000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1481002346478},{"_id":"themes/next/source/images/img1.png","hash":"8091e664621d6d4fc2f41818af5ea5ade896173b","modified":1467101542000},{"_id":"themes/next/source/images/img2.png","hash":"69eb3bd6a5e6d45ee336b328753b3465c4abc48a","modified":1478770542679},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1481002346479},{"_id":"themes/next/source/images/plbj.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1479485780865},{"_id":"themes/next/source/qcode/weixin-qrcode.png","hash":"1914ee1c99643a35aac4d9ad700ac157bd1bbe65","modified":1478759378132},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1481002346475},{"_id":"themes/next/source/qcode/alipay_qcode.png","hash":"f3f74023ae68e5c42089cffedcc219bc5a927bcf","modified":1472816960320},{"_id":"themes/next/source/qcode/wechat_qcode.png","hash":"c9f59c9bab781f36de9d6f0d712663ed71c396b0","modified":1478759413896},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481002345852},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481002345852},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481002346337},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481002346337},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481002346337},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481002346415},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481002346430},{"_id":"themes/next/source/images/ds-2.png","hash":"bc9e1efb29ee3d8da0d84fd59009f74218e604ce","modified":1478770526833},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1481002345693},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1481002345693},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"7bf8191b545f27a6086174d30ba323672062ee5a","modified":1482752818649},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1481002345787},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1481002345771},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1481002345771},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1481002345787},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1481002345756},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1481002345821},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1481002345852},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1481002345852},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1481002345852},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1481002345821},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"9c8f4b2a29741d96adf0b8fef52ae7f4396f27f5","modified":1481002345930},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1481002345821},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1481002346009},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1481002345993},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1481002345977},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1481002346024},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1481002346024},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1481002346337},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"8e08a557b1823818de24ace9df96a8fa6a504a1d","modified":1496588151454},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1481002346337},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1481002346415},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"d7826b48a20162835450495db534d353ac52e476","modified":1481002346415},{"_id":"themes/next/source/img/sp161118_190319.png","hash":"5dbcdf3b18a5934d6808ef5dc3f6404f41786d52","modified":1479467004963},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1481002346480},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1481002346496},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1481002346496},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1481002346527},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1481002346543},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1481002346558},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1481002346574},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1481002346798},{"_id":"themes/next/source/js/src/embed.js","hash":"2b54e66acd0bb0756486b939da6be43475c039ae","modified":1472816960349},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1481002346892},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1481002346892},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1481002346939},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1481002346798},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4c4298a7011841d9ee2aec5bd192df5730b08517","modified":1481002346430},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1481002346908},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1481002346955},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1481002346589},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1481002346955},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1481002346955},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1481002347033},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1481002346511},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1481002347095},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1481002347080},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1481002347095},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1481002347080},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1481002347111},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1481002346955},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1481002347111},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1481002347142},{"_id":"themes/next/source/js/src/set.js","hash":"39b5de796e45991ebaaf74042b7ce6ce37e13c57","modified":1496906023684},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1481002347173},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1481002347142},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1481002347189},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1481002347205},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1481002346892},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1481002347080},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1481002345884},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1481002345884},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1481002345868},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1481002345884},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1481002345899},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1481002345899},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1481002345915},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"acec5b7f8546172f8eb03ef2283d9aa4f637ba9b","modified":1481977297670},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1481002346305},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"387d29021ae80da755417dd217c605948c09fa69","modified":1484315153573},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1481002346305},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1481002346321},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1481002346134},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1481002345962},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1481002346321},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1481002346321},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1481002346134},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1481002346134},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1481002346134},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1481002346196},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1481002346259},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1481002346352},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1481002346337},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1481002346352},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1481002346321},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1481002346352},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1481002346368},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1481002346384},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1481002346384},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1481002346368},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1481002346384},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1481002346384},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1481002346368},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1481002346384},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1481002346399},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1481002346399},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1481002346399},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1481002346399},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1481002346399},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c2390263a298a2b78c5f941e6827c13f02e1ee85","modified":1481002346543},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1481002346415},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1481002346798},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481002346798},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481002346798},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1481002346798},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1481002346798},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1481002346861},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1481002346876},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1481002346845},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1481002346970},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1481002346415},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1481002346970},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1481002346970},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1481002346798},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1481002347126},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1481002347142},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1481002346908},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1481002346939},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1481002346986},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1481002347033},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1481002347001},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1481002347033},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1481002347158},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1481002346149},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1481002346149},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1481002346149},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1481002346149},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1481002346149},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1481002346134},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1481002346165},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1481002346165},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1481002346165},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1481002346180},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1481002346180},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1481002346165},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1481002346180},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1481002346196},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1481002346180},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1481002346212},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e28c805011f65b54060f03be90ec5a23714c4985","modified":1481002346212},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1481002346196},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1481002346212},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1481002346212},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1481002346212},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1481002346227},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1481002346227},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1481002346227},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1481002346227},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1481002346243},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1481002346243},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1481002346227},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1481002346243},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1481002346259},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1481002346243},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1481002346259},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1481002346243},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1481002346259},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1481002346259},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1481002346274},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1481002346274},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1481002346274},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1481002346274},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1481002346274},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1481002346290},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1481002346290},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"5bc0c839dec02a8e590d2829729c7f82fbfd26cb","modified":1482928983416},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1481002346290},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1481002346290},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4f1e9d96940aa3e42d58fb63a26d4fa260323b0d","modified":1481002346305},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1481002346368},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1481002346384},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1481002346368},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1481002346814},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1481002346798},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1481002346845},{"_id":"themes/next/source/images/avatar.png","hash":"0b274517b133ee04e9a98dcd85d752e649496579","modified":1457761425637},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1481002347033},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1481002346830},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1481002346305},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1481002346830},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1481002346814},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1481002346783},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1481002347017},{"_id":"themes/next/source/images/header_background.jpg","hash":"5d5232dad22f57ff2739170fcca077e7d73424ce","modified":1481981230925},{"_id":"public/baidu_urls.txt","hash":"02cd17a1eb35a66b31cdb0d0cb21bf01c2b01b78","modified":1498025389613},{"_id":"public/baidusitemap.xml","hash":"b993c690e51394aad4c55d7e03a9d19231e1da0a","modified":1498025389662},{"_id":"public/atom.xml","hash":"47626664e7d52667362bfdd22d345504bff58ac2","modified":1498025389663},{"_id":"public/sitemap.xml","hash":"8fb794cfd51baa2988c054083d1151c2be9bed87","modified":1498025389663},{"_id":"public/categories/index.html","hash":"3a8b513ab15d4d324fe2ebe57fdaa833626b54cf","modified":1498025391402},{"_id":"public/links/index.html","hash":"389348cf8497fbac3f843916986f86d5fc1a3523","modified":1498025391418},{"_id":"public/guestbook/index.html","hash":"47e530cb93e1375a94c4f8d88c7598ede18e9935","modified":1498025391418},{"_id":"public/about/index.html","hash":"aec08ac95ad0065d69094b265eb6714ce1bcfc93","modified":1498025391418},{"_id":"public/tags/index.html","hash":"21ae22de051e8e2f7378b4e0f157d78aa4fddd5e","modified":1498025391418},{"_id":"public/posts/Linux/2017-05-26-liunx-shell.html","hash":"e09d3a6ecbdc4b0e0176c5a8e9f6c9c76d1dca31","modified":1498025391418},{"_id":"public/posts/Node/2017-05-10-npm.html","hash":"d1650eefcd3859d041e86307f248a56a2dd63e3a","modified":1498025391418},{"_id":"public/posts/CSS3/2017-04-28-pseudo-elements-and-pseudo-classes.html","hash":"104379bb4d15899cf9689dcf876ca38d18d3e1bf","modified":1498025391418},{"_id":"public/posts/Git/2017-04-23-git.html","hash":"8ef56b2def45d80d0597a1b85a04fe49aa1c4973","modified":1498025391418},{"_id":"public/posts/Cron/2017-04-22-Cron.html","hash":"b90214b850fd62badf1d6c9de697f5eebef6f72b","modified":1498025391418},{"_id":"public/posts/MongoDB/2017-03-27-mongodb-ues.html","hash":"7877d1cecc6798a9679db168f7c19fbbd2fe1a28","modified":1498025391418},{"_id":"public/posts/MongoDB/2017-03-23-mongodb.html","hash":"a2b5eb6801adaa30662dcc29b7063d46f9b381c7","modified":1498025391419},{"_id":"public/posts/shadowsocks/2017-03-16-shadowsocks-install.html","hash":"30d2cd6b6ad7cfeefc31f321672b4c61705db284","modified":1498025391419},{"_id":"public/posts/Android/2016-12-22-adb-Android-Debug-Bridge-2.html","hash":"0e8195295de48dabc5f273bc0cca420df7e88875","modified":1498025391419},{"_id":"public/posts/Android/2016-12-18-adb-Android-Debug-Bridge.html","hash":"fdce5f5753f7eac4e723e4b28d314cfc53c35b4f","modified":1498025391419},{"_id":"public/posts/Node/2016-12-12-Node-part2.html","hash":"cef1ee29ed01d7c4cbe6d74aef46f69da6e38234","modified":1498025391419},{"_id":"public/posts/Node/2016-12-10-Node-part1.html","hash":"292a8457f19fc638732237cab9b3e34aa45fefb9","modified":1498025391419},{"_id":"public/posts/Markdown/2016-11-27-use-tools-part1-markdown.html","hash":"d77289241fdb6840694cfbe36ffb21d73bdc78aa","modified":1498025391419},{"_id":"public/posts/javascript/2016-11-25-javascript-jquery-part7.html","hash":"8b8c44e113f098fdfe317a822098ce542e33d30c","modified":1498025391419},{"_id":"public/posts/javascript/2016-11-24-javascript-jquery-part6.html","hash":"a4bb872b2e5adf4b737121bc16d4afe8a692fa7d","modified":1498025391419},{"_id":"public/posts/javascript/2016-11-23-javascript-jquery-part5.html","hash":"c54966d68bb86282f21db8c5b6ac30e9fc6e5214","modified":1498025391419},{"_id":"public/posts/javascript/2016-11-21-javascript-jquery-part4.html","hash":"c6612ebbf51ec5bb83e8441c536c18c8adc66181","modified":1498025391419},{"_id":"public/posts/javascript/2016-11-20-javascript-jquery-part3.html","hash":"0a89bde647215504e9429461226dd3145fcbde42","modified":1498025391419},{"_id":"public/posts/javascript/2016-11-19-javascript-jquery-part2.html","hash":"9855d4bd9ad1f9bd47cd22bbd037cf82ab161e15","modified":1498025391419},{"_id":"public/posts/javascript/2016-11-18-javascript-jquery-part1.html","hash":"4c14318805b33c84f52fc2804e4e4612d313870a","modified":1498025391419},{"_id":"public/posts/Canvas/2016-11-15-canvas-summary.html","hash":"ed8c59e08c467afa3bbcbcd41319ed236151a424","modified":1498025391419},{"_id":"public/posts/Canvas/2016-11-13-canvas-part1.html","hash":"35bc7e92c3d5868a540cb646c64a42c792d3509c","modified":1498025391419},{"_id":"public/posts/Canvas/2016-11-14-canvas-part2.html","hash":"33ad0a60f8a799fd05e497f67022423a1741b321","modified":1498025391419},{"_id":"public/posts/javascript/2016-11-12-javascript-summary.html","hash":"2191090de6aab337ed952707bab8a0d8ac3f0b8b","modified":1498025391419},{"_id":"public/posts/javascript/2016-11-09-javascript-part4.html","hash":"8d430b90f33855839a3bd93307f3d201e5b7cf9c","modified":1498025391419},{"_id":"public/posts/javascript/2016-11-10-javascript-part5.html","hash":"7ed796cfbf3a9e426e37a5a3a016cd03cb3d1961","modified":1498025391420},{"_id":"public/posts/javascript/2016-11-11-javascript-part6.html","hash":"9107e4d18367780f24ffdcf8b8aa29b40c1886a7","modified":1498025391420},{"_id":"public/posts/javascript/2016-11-08-javascript-part3.html","hash":"4287b1833270c04edb1da4054d683a0d26103ff5","modified":1498025391420},{"_id":"public/posts/javascript/2016-07-09-javascript-prototype-chain.html","hash":"9a62e2b453ea99ce6921b916d987bce603bfe289","modified":1498025391420},{"_id":"public/posts/javascript/2016-07-22-javascript-Function.html","hash":"83f148c1bda6e2592c94af9ebb23835a89959f07","modified":1498025391420},{"_id":"public/posts/javascript/2016-06-15-javascript-inherit.html","hash":"a6fe5e266fd4cdfd8a749718605dcac287438e2d","modified":1498025391420},{"_id":"public/posts/javascript/2016-06-04-javascript-prototype.html","hash":"076bb025f2c5ab5906b4b442fcdf100308ca55fa","modified":1498025391420},{"_id":"public/posts/javascript/2016-05-20-javascript-constructor.html","hash":"71e22e4c741e80912e6f5fb49503db92339c1ad1","modified":1498025391420},{"_id":"public/posts/javascript/2016-05-08-javascript-part1.html","hash":"2c22ec8788e9f17229b8ef452c638ce050bf75db","modified":1498025391420},{"_id":"public/posts/javascript/2016-05-18-javascript-part2.html","hash":"6a951438542363820feabf288cd16ab93e5f0d61","modified":1498025391420},{"_id":"public/posts/Hexo/2015-08-28-hello-world.html","hash":"55fa12a105b8e4479feb49875289a674cef98cd5","modified":1498025391420},{"_id":"public/categories/Node/index.html","hash":"17a41cc1f7bd004dfcff97e2145c2c3db7b272ef","modified":1498025391420},{"_id":"public/categories/Canvas/index.html","hash":"f4a49ffeb609c50f7e05656e86471de514fb471c","modified":1498025391420},{"_id":"public/categories/Android/index.html","hash":"d1a4dd9aca4ade6420344fc7b2169395b285aa04","modified":1498025391420},{"_id":"public/categories/javascript/index.html","hash":"78df4e8e207d3a3134fa9d45ade3679fa1752bcc","modified":1498025391420},{"_id":"public/categories/javascript/page/2/index.html","hash":"68bcb9e73114f306c888ccf1d27038fa18426449","modified":1498025391420},{"_id":"public/categories/javascript/page/3/index.html","hash":"2c06be603f10945ee9fa4de0c5c8ccd6fced439b","modified":1498025391420},{"_id":"public/categories/javascript/page/4/index.html","hash":"1497d4858ff2e62a2933ecdf04965ab26ea05661","modified":1498025391420},{"_id":"public/categories/Hexo/index.html","hash":"3cd1d5e0912d8a865ee39bf0890e4e7fca3b26a0","modified":1498025391421},{"_id":"public/categories/Git/index.html","hash":"5687acce4f75fe4354995400c591fda0a43a81b1","modified":1498025391421},{"_id":"public/categories/Cron/index.html","hash":"0d5771771f7c48e8a6b0b945453d5aef83d7f36e","modified":1498025391421},{"_id":"public/categories/Linux/index.html","hash":"07b858eb6dcaa3a5b720ea55d7818f0ce99389ae","modified":1498025391421},{"_id":"public/categories/MongoDB/index.html","hash":"8f6e3e62a31efc27392b82873aea123007ebe64e","modified":1498025391421},{"_id":"public/categories/Markdown/index.html","hash":"62ab67f73208f82d6d9ad3d11f376db68e4ee201","modified":1498025391421},{"_id":"public/categories/CSS3/index.html","hash":"a6ed201aae13919a4e2c2f02c42c635d69fe1301","modified":1498025391421},{"_id":"public/categories/shadowsocks/index.html","hash":"7c7c05ff675e79e564f4427b9eba3b1c26860849","modified":1498025391421},{"_id":"public/tags/Node/index.html","hash":"bb09f39622a38ef323034b053e0b0a5e9df3816d","modified":1498025391421},{"_id":"public/tags/NodeJs/index.html","hash":"8378d86642c7002850b729db71a152c450e5de8f","modified":1498025391421},{"_id":"public/tags/Canvas/index.html","hash":"591598f213d7c2fe971e2c74462b30a0f3ab253d","modified":1498025391421},{"_id":"public/tags/HTML5/index.html","hash":"2e27c06c18ab2d899fffa0251ae403dee525d371","modified":1498025391421},{"_id":"public/tags/画布/index.html","hash":"e1af71ae2182bab6fd762fdb577e7642060a2e30","modified":1498025391422},{"_id":"public/tags/adb/index.html","hash":"5a45363d04de5aa0879d421d4fb5caafca6db1b3","modified":1498025391422},{"_id":"public/tags/Android/index.html","hash":"02e9d45401ddadcaab78c118fc76f432a1cd6b8b","modified":1498025391422},{"_id":"public/tags/adb命令/index.html","hash":"70d0de14cfa2846c66198b0be9d2f7f4c080e6ce","modified":1498025391422},{"_id":"public/tags/javascript/index.html","hash":"4d815b728504f09e5b4212d866df41f419826b9f","modified":1498025391422},{"_id":"public/tags/js构造函数/index.html","hash":"f1817abdab2d68055577eb6d2e0cb9cdb7c8843c","modified":1498025391422},{"_id":"public/tags/Function/index.html","hash":"452be0781e82fa9e42ef98fd2bf8178450dc7a82","modified":1498025391422},{"_id":"public/tags/继承/index.html","hash":"7521cd6606ff0525e9c4d19c8836606260ab7e24","modified":1498025391423},{"_id":"public/tags/js面向对象/index.html","hash":"d1743dbaf9a8f2f8484595434b2c0a758e8d400b","modified":1498025391423},{"_id":"public/tags/继承的实现方式/index.html","hash":"714a2303b5b5c8e0081b114314f9dbef9744c2e7","modified":1498025391423},{"_id":"public/tags/hexo/index.html","hash":"d7ab33282726c8db9bc4d94166b278f6bfe6440a","modified":1498025391423},{"_id":"public/tags/梦魇小栈/index.html","hash":"dfde2b5a3a599fa176197c8219d8ac1c28e2594d","modified":1498025391431},{"_id":"public/tags/梦魇/index.html","hash":"0cfd1578f81c10c69b40b11450fac88b52f8db5a","modified":1498025391431},{"_id":"public/tags/houyi1121/index.html","hash":"cbe10668a7989b06281e86956fb18cb1f73a4844","modified":1498025391432},{"_id":"public/tags/Git/index.html","hash":"916740344f74a33f4669961d9dea3f62a24019ec","modified":1498025391432},{"_id":"public/tags/原生Js/index.html","hash":"2230dc8f2596c0bbf8edf75f11a6c65096227bf8","modified":1498025391432},{"_id":"public/tags/JQuery/index.html","hash":"18d214c503f10606dbbf272adb62d251105dc608","modified":1498025391432},{"_id":"public/tags/Js框架/index.html","hash":"3f64fd431d9040285efce4b2e46e7ef64c37ad05","modified":1498025391432},{"_id":"public/tags/Ubuntu/index.html","hash":"18faa04c8a962cea3422929b0741c99fd74b54e7","modified":1498025391432},{"_id":"public/tags/Cron/index.html","hash":"851814a267855fcefade2d8b802e3b29bb530b06","modified":1498025391432},{"_id":"public/tags/原型链/index.html","hash":"0f5cc7e65770b9f51b3b716eaf098f2c28c4ddf3","modified":1498025391432},{"_id":"public/tags/原型/index.html","hash":"a09216b9b164fc15d4908a5237b4ee3c75b45496","modified":1498025391432},{"_id":"public/tags/原型的基本概念/index.html","hash":"b083509a29843ed39a78690b77d6173b0d39e94d","modified":1498025391432},{"_id":"public/tags/Linux/index.html","hash":"8452c38dfa2f2d4e3fa397cfee67cf2ff514a07f","modified":1498025391432},{"_id":"public/tags/shell/index.html","hash":"24d510881f13e973b894aedc0a874e7f24c883e6","modified":1498025391432},{"_id":"public/tags/NoSQL/index.html","hash":"123b90519126cb2cd24d02190892d4dc654e0cae","modified":1498025391432},{"_id":"public/tags/Markdown语法规范/index.html","hash":"5763ce79cb710cac09f17efd13f7481918cfd53c","modified":1498025391432},{"_id":"public/tags/MongoDB/index.html","hash":"4d710296322bebf8f8bf615771db67beaa701a5a","modified":1498025391432},{"_id":"public/tags/tools/index.html","hash":"3eb36c6b86e6544e90f6b379ea2e288a63cfe7c5","modified":1498025391432},{"_id":"public/tags/npm/index.html","hash":"5e78ada0cbf4ec2a6d481b485e76e68fa3e6f4a4","modified":1498025391432},{"_id":"public/tags/伪类/index.html","hash":"77a4f0fe82266ca08695f66cbefda91d7a65ce39","modified":1498025391432},{"_id":"public/tags/科学上网/index.html","hash":"96742bd51befc76f5aea9a2043d740f93e718c61","modified":1498025391433},{"_id":"public/tags/伪元素/index.html","hash":"23b716adb90869c07b788de30db7cc8c6757ee2a","modified":1498025391433},{"_id":"public/tags/shadowsocks/index.html","hash":"40705e977d3b00333600536814e924cea91c3088","modified":1498025391433},{"_id":"public/archives/index.html","hash":"e841cfdbd0dc0264d7672e96b13b54aeb3081b44","modified":1498025391433},{"_id":"public/archives/page/2/index.html","hash":"8cce955fe9c9f2d75a9a5f0729f8150383d64bf2","modified":1498025391433},{"_id":"public/archives/2015/index.html","hash":"62edc2d7768c28f5229443f1d1ab487c8acae5f5","modified":1498025391433},{"_id":"public/archives/2015/08/index.html","hash":"75cc8ddff273fada37d0a6806867c4e46997c65a","modified":1498025391433},{"_id":"public/archives/2016/index.html","hash":"b767d719aaf4c63aef25693071e75690446b6e98","modified":1498025391433},{"_id":"public/archives/2016/page/2/index.html","hash":"34fb6ed3e05485ede1b325b446587c8ab1616fe0","modified":1498025391433},{"_id":"public/archives/2016/06/index.html","hash":"044d55a8a6703f145ff286c18fd014f6dca558a5","modified":1498025391433},{"_id":"public/archives/2016/05/index.html","hash":"9a566cbcce42c4b8be32bb7c2d62c7a5c9e5707e","modified":1498025391433},{"_id":"public/archives/2016/07/index.html","hash":"9e8994487199b98676c2ea8e73bc32544233f252","modified":1498025391433},{"_id":"public/archives/2016/11/index.html","hash":"47fac116314a69664636b9fa0155165571fef9b6","modified":1498025391433},{"_id":"public/archives/2016/12/index.html","hash":"f21db79312ac56ea3df72ba77aeda4b09c970aeb","modified":1498025391433},{"_id":"public/archives/2017/index.html","hash":"2953de6ff9a5b8769a6c0e5b0257d41024000bba","modified":1498025391433},{"_id":"public/archives/2017/03/index.html","hash":"7cedb96e9df9f6fca1276e57627ea0d46c63e2a3","modified":1498025391433},{"_id":"public/archives/2017/04/index.html","hash":"921e7f0f522457a364a89609a2bd5af1edce2d4e","modified":1498025391433},{"_id":"public/archives/2017/05/index.html","hash":"f3923a0aaeccd3fddc3902490a36099030e9a73c","modified":1498025391433},{"_id":"public/index.html","hash":"d11cbd3adab352cbcfbb1ecd18dc27b8a34c0ed0","modified":1498025391433},{"_id":"public/page/3/index.html","hash":"007865ac297da5a5a1ce8589400a5649e938c538","modified":1498025391434},{"_id":"public/page/2/index.html","hash":"b4d9735e5dd823b2ddb8ded3fac5eca150b5817c","modified":1498025391434},{"_id":"public/page/4/index.html","hash":"fcce121ee3625fbf8f2b624e7ca3260e86784bf4","modified":1498025391434},{"_id":"public/page/5/index.html","hash":"3c0c281c588558fcb790ec9323ec27da3ab178f9","modified":1498025391434},{"_id":"public/page/6/index.html","hash":"6a9a3c275df28005af9fa9ad422883588b678041","modified":1498025391434},{"_id":"public/page/7/index.html","hash":"1c61f84ec23e430c442e515dac4c800502a86845","modified":1498025391434},{"_id":"public/page/8/index.html","hash":"bd2f2006d449c10905343497442f0d8eef74c759","modified":1498025391434},{"_id":"public/robots.txt","hash":"133ccfac302f661b9c61e279c19c2fc2e343a6cc","modified":1498025391434},{"_id":"public/README.MD","hash":"68f1d9aba2382345bbec21a2d2cdd15789b148b2","modified":1498025391434},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1498025391434},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1498025391434},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1498025391434},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1498025391434},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1498025391434},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1498025391434},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1498025391434},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1498025391435},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1498025391435},{"_id":"public/images/cursor.ico","hash":"cd8349fb9cef6c217fc364cf35eae6819cebf5d6","modified":1498025391435},{"_id":"public/images/Thumbs.db","hash":"878f9833358933aa1f79c0627cbb7180d3853b89","modified":1498025391436},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498025391436},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1498025391436},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498025391436},{"_id":"public/images/img1.png","hash":"8091e664621d6d4fc2f41818af5ea5ade896173b","modified":1498025391436},{"_id":"public/images/ds-1.gif","hash":"e0bc6023185e4c841f624f2347f8439d06f627fd","modified":1498025391436},{"_id":"public/images/img2.png","hash":"69eb3bd6a5e6d45ee336b328753b3465c4abc48a","modified":1498025391437},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1498025391437},{"_id":"public/images/plbj.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1498025391437},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1498025391437},{"_id":"public/qcode/weixin-qrcode.png","hash":"1914ee1c99643a35aac4d9ad700ac157bd1bbe65","modified":1498025391437},{"_id":"public/qcode/alipay_qcode.png","hash":"f3f74023ae68e5c42089cffedcc219bc5a927bcf","modified":1498025391437},{"_id":"public/qcode/wechat_qcode.png","hash":"c9f59c9bab781f36de9d6f0d712663ed71c396b0","modified":1498025391437},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1498025391437},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1498025391437},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1498025391437},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1498025391437},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1498025391437},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1498025391437},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1498025391437},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1498025391437},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1498025391437},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1498025391438},{"_id":"public/favicon.ico","hash":"61ed14c161a5df9092565996e38cdd438f128783","modified":1498025393617},{"_id":"public/images/ds-2.png","hash":"bc9e1efb29ee3d8da0d84fd59009f74218e604ce","modified":1498025393627},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1498025393646},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1498025393647},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1498025393647},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1498025393647},{"_id":"public/baidu_verify_HR5eYsvhwq.html","hash":"18f2c1a4a646c26871a5e9fc8fd424117035fcc3","modified":1498025393652},{"_id":"public/400.html","hash":"a86c658850f855b1b16fbd2c2e06c15eb1e8437f","modified":1498025393652},{"_id":"public/404.html","hash":"eb3289709dc50a6385b0e4230a6502f3e1cfb16f","modified":1498025393652},{"_id":"public/css/cursor.css","hash":"044cfdc58c30477b2d134d81378abd2a24d1b06f","modified":1498025393652},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1498025393652},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1498025393652},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1498025393652},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1498025393652},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1498025393652},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1498025393653},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1498025393653},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1498025393653},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1498025393653},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1498025393653},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1498025393653},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1498025393653},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1498025393653},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1498025393653},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1498025393653},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1498025393653},{"_id":"public/js/src/set.js","hash":"39b5de796e45991ebaaf74042b7ce6ce37e13c57","modified":1498025393653},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1498025393653},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1498025393653},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1498025393653},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1498025393653},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1498025393653},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1498025393653},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1498025393653},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1498025393653},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1498025393653},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1498025393653},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1498025393653},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1498025393653},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1498025393653},{"_id":"public/css/main.css","hash":"9c099e775ba37d8c65ee6ef0b147f30a392c59ee","modified":1498025393653},{"_id":"public/css/eevee.css","hash":"ecdd350c4159b474ab948d58cab861477ad96bcf","modified":1498025393653},{"_id":"public/js/src/embed.js","hash":"2b54e66acd0bb0756486b939da6be43475c039ae","modified":1498025393653},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1498025393653},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1498025393653},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1498025393653},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1498025393654},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1498025393654},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1498025393654},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1498025393654},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1498025393654},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1498025393654},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1498025393654},{"_id":"public/img/sp161118_190319.png","hash":"5dbcdf3b18a5934d6808ef5dc3f6404f41786d52","modified":1498025393654},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1498025393654},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1498025393671},{"_id":"public/images/avatar.png","hash":"0b274517b133ee04e9a98dcd85d752e649496579","modified":1498025393693},{"_id":"public/images/header_background.jpg","hash":"5d5232dad22f57ff2739170fcca077e7d73424ce","modified":1498025393749}],"Category":[{"name":"Node","_id":"cj46lmvlo0002uwg7n7p6uigh"},{"name":"Canvas","_id":"cj46lmvm8000auwg79iajzomo"},{"name":"Android","_id":"cj46lmvm9000fuwg71u9ivanf"},{"name":"javascript","_id":"cj46lmvnx001cuwg7dj572wni"},{"name":"Hexo","_id":"cj46lmvoe001vuwg7lefx0fje"},{"name":"Git","_id":"cj46lmvoi0024uwg7et5y6pkj"},{"name":"Cron","_id":"cj46lmvop002cuwg7lk5ol9m5"},{"name":"Linux","_id":"cj46lmvpc003cuwg7s9l4fmf3"},{"name":"MongoDB","_id":"cj46lmvpg003muwg7uzf0353x"},{"name":"Markdown","_id":"cj46lmvpl003uuwg7b5loq6pp"},{"name":"CSS3","_id":"cj46lmvpp0046uwg77h62le25"},{"name":"shadowsocks","_id":"cj46lmvur006fuwg7a0gf08th"}],"Data":[],"Page":[{"title":"categories","date":"2016-11-09T01:56:23.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-09 09:56:23\ntype: \"categories\"\n---\n","updated":"2016-12-01T09:02:05.604Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj46lmvnk0016uwg7np7j7bec","content":"","excerpt":"","more":""},{"title":"友情链接","date":"2016-11-10T12:36:20.000Z","_content":"\n<blockquote class=\"blockquote-center\">过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……但是，人生最后悔的事情就是：我本可以</blockquote>\n\n\n## Blog friends\n\n- [杰杰无敌](https://blog.liujiefront.com \"杰杰无敌\")  -  每天进步一点点,杰杰无敌,liujiefront,liujie,刘杰的个人blog\n- [梦魇|专注于分享](http://www.dode.top/ \"梦魇|专注于分享™\")  -  一个帮助过我的好朋友，技术很不错\n- [一叶知秋](http://www.webmars.xyz/)  -  森林里出现了两条路，而我选择了人迹罕至的一条，从此决定了一切际遇的不同！\n- [等待!!!](http://www.ccyyao.top/)  -  爱运动、爱交友、爱旅行、喜欢接触新鲜事物、迎接新的挑战，更爱游离于错综复杂的编码与逻辑中!\n- [心雨](http://www.mcling.xyz)  -  天再高又怎样, 踮起脚尖就更接近阳光!\n- [neoFelhz](https://blog.neofelhz.ga)  -  拾穗者的故事\n- [mythsman](https://blog.mythsman.com)  -  哈哈,目测大佬一枚\n\n***\n\n以上链接排名不分先后。\n如果你发现你的链接消失了，那么可能是网站无法访问，恢复后联系我即可~\n（也可能是超过半年未更新或者有不适当内容...这样的话自己看着办）\n在您申请友情链接之前请先添加本站链接,谢谢\n\n***\n\n### 友情链接添加须知\n\n- 本站友链目的不是为了SEO,只是为了交朋友;\n- 必须为合法的、内容健康向上的网站;\n- 只接受文字链接，并写好网站介绍;\n- 友情连接是双方站点寻求共同发展、互助互利的方式;\n\n***\n\n### 本站链接信息\n\n- 名称：梦魇小栈\n- 地址：http://blog.ihoey.com/\n- 描述：心，若没有栖息的地方，到哪里都是流浪......\n\n***\n\n<iframe src=\"https://sponsor.ihoey.com/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n***\n","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2016-11-10 20:36:20\n---\n\n<blockquote class=\"blockquote-center\">过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……但是，人生最后悔的事情就是：我本可以</blockquote>\n\n\n## Blog friends\n\n- [杰杰无敌](https://blog.liujiefront.com \"杰杰无敌\")  -  每天进步一点点,杰杰无敌,liujiefront,liujie,刘杰的个人blog\n- [梦魇|专注于分享](http://www.dode.top/ \"梦魇|专注于分享™\")  -  一个帮助过我的好朋友，技术很不错\n- [一叶知秋](http://www.webmars.xyz/)  -  森林里出现了两条路，而我选择了人迹罕至的一条，从此决定了一切际遇的不同！\n- [等待!!!](http://www.ccyyao.top/)  -  爱运动、爱交友、爱旅行、喜欢接触新鲜事物、迎接新的挑战，更爱游离于错综复杂的编码与逻辑中!\n- [心雨](http://www.mcling.xyz)  -  天再高又怎样, 踮起脚尖就更接近阳光!\n- [neoFelhz](https://blog.neofelhz.ga)  -  拾穗者的故事\n- [mythsman](https://blog.mythsman.com)  -  哈哈,目测大佬一枚\n\n***\n\n以上链接排名不分先后。\n如果你发现你的链接消失了，那么可能是网站无法访问，恢复后联系我即可~\n（也可能是超过半年未更新或者有不适当内容...这样的话自己看着办）\n在您申请友情链接之前请先添加本站链接,谢谢\n\n***\n\n### 友情链接添加须知\n\n- 本站友链目的不是为了SEO,只是为了交朋友;\n- 必须为合法的、内容健康向上的网站;\n- 只接受文字链接，并写好网站介绍;\n- 友情连接是双方站点寻求共同发展、互助互利的方式;\n\n***\n\n### 本站链接信息\n\n- 名称：梦魇小栈\n- 地址：http://blog.ihoey.com/\n- 描述：心，若没有栖息的地方，到哪里都是流浪......\n\n***\n\n<iframe src=\"https://sponsor.ihoey.com/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n***\n","updated":"2017-06-05T11:00:22.278Z","path":"links/index.html","comments":1,"layout":"page","_id":"cj46lmvnq0018uwg7rxvsxlti","content":"<blockquote class=\"blockquote-center\">过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……但是，人生最后悔的事情就是：我本可以</blockquote>\n\n\n<h2 id=\"Blog-friends\"><a href=\"#Blog-friends\" class=\"headerlink\" title=\"Blog friends\"></a>Blog friends</h2><ul>\n<li><a href=\"https://blog.liujiefront.com\" title=\"杰杰无敌\" target=\"_blank\" rel=\"external\">杰杰无敌</a>  -  每天进步一点点,杰杰无敌,liujiefront,liujie,刘杰的个人blog</li>\n<li><a href=\"http://www.dode.top/\" title=\"梦魇|专注于分享™\" target=\"_blank\" rel=\"external\">梦魇|专注于分享</a>  -  一个帮助过我的好朋友，技术很不错</li>\n<li><a href=\"http://www.webmars.xyz/\" target=\"_blank\" rel=\"external\">一叶知秋</a>  -  森林里出现了两条路，而我选择了人迹罕至的一条，从此决定了一切际遇的不同！</li>\n<li><a href=\"http://www.ccyyao.top/\" target=\"_blank\" rel=\"external\">等待!!!</a>  -  爱运动、爱交友、爱旅行、喜欢接触新鲜事物、迎接新的挑战，更爱游离于错综复杂的编码与逻辑中!</li>\n<li><a href=\"http://www.mcling.xyz\" target=\"_blank\" rel=\"external\">心雨</a>  -  天再高又怎样, 踮起脚尖就更接近阳光!</li>\n<li><a href=\"https://blog.neofelhz.ga\" target=\"_blank\" rel=\"external\">neoFelhz</a>  -  拾穗者的故事</li>\n<li><a href=\"https://blog.mythsman.com\" target=\"_blank\" rel=\"external\">mythsman</a>  -  哈哈,目测大佬一枚</li>\n</ul>\n<hr>\n<p>以上链接排名不分先后。<br>如果你发现你的链接消失了，那么可能是网站无法访问，恢复后联系我即可~<br>（也可能是超过半年未更新或者有不适当内容…这样的话自己看着办）<br>在您申请友情链接之前请先添加本站链接,谢谢</p>\n<hr>\n<h3 id=\"友情链接添加须知\"><a href=\"#友情链接添加须知\" class=\"headerlink\" title=\"友情链接添加须知\"></a>友情链接添加须知</h3><ul>\n<li>本站友链目的不是为了SEO,只是为了交朋友;</li>\n<li>必须为合法的、内容健康向上的网站;</li>\n<li>只接受文字链接，并写好网站介绍;</li>\n<li>友情连接是双方站点寻求共同发展、互助互利的方式;</li>\n</ul>\n<hr>\n<h3 id=\"本站链接信息\"><a href=\"#本站链接信息\" class=\"headerlink\" title=\"本站链接信息\"></a>本站链接信息</h3><ul>\n<li>名称：梦魇小栈</li>\n<li>地址：<a href=\"http://blog.ihoey.com/\">http://blog.ihoey.com/</a></li>\n<li>描述：心，若没有栖息的地方，到哪里都是流浪……</li>\n</ul>\n<hr>\n<iframe src=\"https://sponsor.ihoey.com/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\n<hr>\n","excerpt":"","more":"<blockquote class=\"blockquote-center\">过一个平凡无趣的人生实在太容易了，你可以不读书，不冒险，不运动，不写作，不外出，不折腾……但是，人生最后悔的事情就是：我本可以</blockquote>\n\n\n<h2 id=\"Blog-friends\"><a href=\"#Blog-friends\" class=\"headerlink\" title=\"Blog friends\"></a>Blog friends</h2><ul>\n<li><a href=\"https://blog.liujiefront.com\" title=\"杰杰无敌\">杰杰无敌</a>  -  每天进步一点点,杰杰无敌,liujiefront,liujie,刘杰的个人blog</li>\n<li><a href=\"http://www.dode.top/\" title=\"梦魇|专注于分享™\">梦魇|专注于分享</a>  -  一个帮助过我的好朋友，技术很不错</li>\n<li><a href=\"http://www.webmars.xyz/\">一叶知秋</a>  -  森林里出现了两条路，而我选择了人迹罕至的一条，从此决定了一切际遇的不同！</li>\n<li><a href=\"http://www.ccyyao.top/\">等待!!!</a>  -  爱运动、爱交友、爱旅行、喜欢接触新鲜事物、迎接新的挑战，更爱游离于错综复杂的编码与逻辑中!</li>\n<li><a href=\"http://www.mcling.xyz\">心雨</a>  -  天再高又怎样, 踮起脚尖就更接近阳光!</li>\n<li><a href=\"https://blog.neofelhz.ga\">neoFelhz</a>  -  拾穗者的故事</li>\n<li><a href=\"https://blog.mythsman.com\">mythsman</a>  -  哈哈,目测大佬一枚</li>\n</ul>\n<hr>\n<p>以上链接排名不分先后。<br>如果你发现你的链接消失了，那么可能是网站无法访问，恢复后联系我即可~<br>（也可能是超过半年未更新或者有不适当内容…这样的话自己看着办）<br>在您申请友情链接之前请先添加本站链接,谢谢</p>\n<hr>\n<h3 id=\"友情链接添加须知\"><a href=\"#友情链接添加须知\" class=\"headerlink\" title=\"友情链接添加须知\"></a>友情链接添加须知</h3><ul>\n<li>本站友链目的不是为了SEO,只是为了交朋友;</li>\n<li>必须为合法的、内容健康向上的网站;</li>\n<li>只接受文字链接，并写好网站介绍;</li>\n<li>友情连接是双方站点寻求共同发展、互助互利的方式;</li>\n</ul>\n<hr>\n<h3 id=\"本站链接信息\"><a href=\"#本站链接信息\" class=\"headerlink\" title=\"本站链接信息\"></a>本站链接信息</h3><ul>\n<li>名称：梦魇小栈</li>\n<li>地址：<a href=\"http://blog.ihoey.com/\">http://blog.ihoey.com/</a></li>\n<li>描述：心，若没有栖息的地方，到哪里都是流浪……</li>\n</ul>\n<hr>\n<iframe src=\"https://sponsor.ihoey.com/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n<hr>\n"},{"title":"标签","date":"2016-11-09T01:55:47.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-11-09 09:55:47\ntype: \"tags\"\n---\n","updated":"2016-11-10T15:04:16.289Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj46lmvnw001buwg7p9qrgms3","content":"","excerpt":"","more":""},{"title":"留言板","date":"2016-11-10T12:35:52.000Z","comments":1,"_content":"\n<blockquote class=\"blockquote-center\">I eat alone. I sleep alone. I cry alone. So….cool.</blockquote>\n\n<center> 你想说些什么呢？就在这里回复吧~ 欢迎灌水，来者不拒！<br>如果你觉得我的博客对你有价值，并且有帮助到你，欢迎向我捐赠，就当是请我喝杯饮料~ <br><b>另外,你确定就看看不留个爪爪么!</b></center>\n\n<div style=\"margin: 20px auto; width: 100%; text-align: center\">\n    <a href=\"/qcode/alipay_qcode.png\" class=\"fancybox\" rel=\"group\"><img src=\"/qcode/alipay_qcode.png\" alt=\"支付宝打赏\" style=\"width: 200px; max-width: 100%;\"></a>\n    <div>支付宝打赏</div>\n</div>\n\n***\n\n<iframe src=\"https://sponsor.ihoey.com/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n\n***\n\n<!-- > <p style=\"text-indent: .5em; margin-bottom: 10px;\">最新访客</p>\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n\n*** -->\n","source":"guestbook/index.md","raw":"---\ntitle: 留言板\ndate: 2016-11-10 20:35:52\ncomments: true\n---\n\n<blockquote class=\"blockquote-center\">I eat alone. I sleep alone. I cry alone. So….cool.</blockquote>\n\n<center> 你想说些什么呢？就在这里回复吧~ 欢迎灌水，来者不拒！<br>如果你觉得我的博客对你有价值，并且有帮助到你，欢迎向我捐赠，就当是请我喝杯饮料~ <br><b>另外,你确定就看看不留个爪爪么!</b></center>\n\n<div style=\"margin: 20px auto; width: 100%; text-align: center\">\n    <a href=\"/qcode/alipay_qcode.png\" class=\"fancybox\" rel=\"group\"><img src=\"/qcode/alipay_qcode.png\" alt=\"支付宝打赏\" style=\"width: 200px; max-width: 100%;\"></a>\n    <div>支付宝打赏</div>\n</div>\n\n***\n\n<iframe src=\"https://sponsor.ihoey.com/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n\n***\n\n<!-- > <p style=\"text-indent: .5em; margin-bottom: 10px;\">最新访客</p>\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n\n*** -->\n","updated":"2017-06-05T06:59:27.790Z","path":"guestbook/index.html","layout":"page","_id":"cj46lmvup006duwg7qc5l3i6c","content":"<blockquote class=\"blockquote-center\">I eat alone. I sleep alone. I cry alone. So….cool.</blockquote>\n\n<center> 你想说些什么呢？就在这里回复吧~ 欢迎灌水，来者不拒！<br>如果你觉得我的博客对你有价值，并且有帮助到你，欢迎向我捐赠，就当是请我喝杯饮料~ <br><b>另外,你确定就看看不留个爪爪么!</b></center>\n\n<div style=\"margin: 20px auto; width: 100%; text-align: center\"><br>    <a href=\"/qcode/alipay_qcode.png\" class=\"fancybox\" rel=\"group\"><img src=\"/qcode/alipay_qcode.png\" alt=\"支付宝打赏\" style=\"width: 200px; max-width: 100%;\"></a><br>    <div>支付宝打赏</div><br></div>\n\n<hr>\n<iframe src=\"https://sponsor.ihoey.com/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\n\n<hr>\n<!-- > <p style=\"text-indent: .5em; margin-bottom: 10px;\">最新访客</p>\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n\n*** -->\n","excerpt":"","more":"<blockquote class=\"blockquote-center\">I eat alone. I sleep alone. I cry alone. So….cool.</blockquote>\n\n<center> 你想说些什么呢？就在这里回复吧~ 欢迎灌水，来者不拒！<br>如果你觉得我的博客对你有价值，并且有帮助到你，欢迎向我捐赠，就当是请我喝杯饮料~ <br><b>另外,你确定就看看不留个爪爪么!</b></center>\n\n<div style=\"margin: 20px auto; width: 100%; text-align: center\"><br>    <a href=\"/qcode/alipay_qcode.png\" class=\"fancybox\" rel=\"group\"><img src=\"/qcode/alipay_qcode.png\" alt=\"支付宝打赏\" style=\"width: 200px; max-width: 100%;\"></a><br>    <div>支付宝打赏</div><br></div>\n\n<hr>\n<iframe src=\"https://sponsor.ihoey.com/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n\n<hr>\n<!-- > <p style=\"text-indent: .5em; margin-bottom: 10px;\">最新访客</p>\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n\n*** -->\n"},{"title":"关于我","date":"2016-11-09T01:58:04.000Z","_content":"\n<blockquote class=\"blockquote-center\">愿多年以后，我可以酌一杯清酒，烂醉如泥，梦中回到我们的曾经。</blockquote>\n\n<center>首先梦魇小栈欢迎您的到来!</center>\n\n> <p style=\"text-indent: .5em; margin-bottom: 10px;\">关于我</p>\n\n90后,技术宅?恩或许是,现居于北京,然后喜爱折腾,好奇新事物\n欢迎各位小伙伴与我互换友链，详情请戳 上面的 <a href=\"/links\"><b>链接</b></a> 页面 。\n关于这个站呢,就是记录下平时记不太住的还有一些自己感兴趣喜欢的一些东西\n顺便也分享给大家吧!\n就酱紫,联系方式在下面\n\n***\n\n<center> <h2>联系方式</h2> </center>\n\n- Email：<a href=\"https://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=mail@ihoey.com\">mail@ihoey.com</a>\n- Q  Q：<a href=\"http://wpa.qq.com/msgrd?v=3&uin=1058221214&site=qq&menu=yes\">1058221214</a>\n- 微博：<a href=\"http://weibo.com/hy951121\">ihoeys</a>\n\n***\n\n[2016-10-25] 站点从SinaAppEngine(SAE)迁移到Coding/GitHub, 国内用户默认解析至Coding, 海外则解析至GitHub, 互为备份, 改善了访问速度与稳定性\n\n***\n\n<center> <h2>打赏记录</h2> </center><br>\n\n| 打赏人        | 打赏留言                       | 打赏时间   |\n| :--:          | :--:                           | :--:       |\n| 159**0212     | 小站不错，支持一下啦！         | 2015-11-02 |\n| 138**4533     | 我来啦，占前排！               | 2015-11-02 |\n| 188**5838     | 网站不错哦！                   | 2015-12-14 |\n| 175**1534     | 新年快乐!！                    | 2016-2-11  |\n| 131**7309     | 很漂亮的网站,我的零钱都给你啦! | 2016-3-15  |\n| 1121**@qq.com | 谢谢帮助,祝你888!              | 2016-6-20  |\n| lw**@163.com  | 那我就给你来个666吧!           | 2016-6-21  |\n\n<br>\n\n啦啦啦，感谢你们啦，我会做的更好的呢\n2016-6-25:感谢你们的赞助了.虽然人不多,但我还是很感动的.\n2017-6-5:今天早上发现多说突然就废了,然后就紧急的换成了网易云跟帖,评论系统样式不是很好看,主要的是以前多说的数据导入过来有好多都不显示,唉……伤心！\n\n***\n\n<iframe src=\"https://sponsor.ihoey.com/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n***\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-11-09 09:58:04\n---\n\n<blockquote class=\"blockquote-center\">愿多年以后，我可以酌一杯清酒，烂醉如泥，梦中回到我们的曾经。</blockquote>\n\n<center>首先梦魇小栈欢迎您的到来!</center>\n\n> <p style=\"text-indent: .5em; margin-bottom: 10px;\">关于我</p>\n\n90后,技术宅?恩或许是,现居于北京,然后喜爱折腾,好奇新事物\n欢迎各位小伙伴与我互换友链，详情请戳 上面的 <a href=\"/links\"><b>链接</b></a> 页面 。\n关于这个站呢,就是记录下平时记不太住的还有一些自己感兴趣喜欢的一些东西\n顺便也分享给大家吧!\n就酱紫,联系方式在下面\n\n***\n\n<center> <h2>联系方式</h2> </center>\n\n- Email：<a href=\"https://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=mail@ihoey.com\">mail@ihoey.com</a>\n- Q  Q：<a href=\"http://wpa.qq.com/msgrd?v=3&uin=1058221214&site=qq&menu=yes\">1058221214</a>\n- 微博：<a href=\"http://weibo.com/hy951121\">ihoeys</a>\n\n***\n\n[2016-10-25] 站点从SinaAppEngine(SAE)迁移到Coding/GitHub, 国内用户默认解析至Coding, 海外则解析至GitHub, 互为备份, 改善了访问速度与稳定性\n\n***\n\n<center> <h2>打赏记录</h2> </center><br>\n\n| 打赏人        | 打赏留言                       | 打赏时间   |\n| :--:          | :--:                           | :--:       |\n| 159**0212     | 小站不错，支持一下啦！         | 2015-11-02 |\n| 138**4533     | 我来啦，占前排！               | 2015-11-02 |\n| 188**5838     | 网站不错哦！                   | 2015-12-14 |\n| 175**1534     | 新年快乐!！                    | 2016-2-11  |\n| 131**7309     | 很漂亮的网站,我的零钱都给你啦! | 2016-3-15  |\n| 1121**@qq.com | 谢谢帮助,祝你888!              | 2016-6-20  |\n| lw**@163.com  | 那我就给你来个666吧!           | 2016-6-21  |\n\n<br>\n\n啦啦啦，感谢你们啦，我会做的更好的呢\n2016-6-25:感谢你们的赞助了.虽然人不多,但我还是很感动的.\n2017-6-5:今天早上发现多说突然就废了,然后就紧急的换成了网易云跟帖,评论系统样式不是很好看,主要的是以前多说的数据导入过来有好多都不显示,唉……伤心！\n\n***\n\n<iframe src=\"https://sponsor.ihoey.com/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n***\n","updated":"2017-06-05T11:04:15.665Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj46lmvuq006euwg748ag8k01","content":"<blockquote class=\"blockquote-center\">愿多年以后，我可以酌一杯清酒，烂醉如泥，梦中回到我们的曾经。</blockquote>\n\n<center>首先梦魇小栈欢迎您的到来!</center>\n\n<blockquote>\n<p style=\"text-indent: .5em; margin-bottom: 10px;\">关于我</p>\n\n</blockquote>\n<p>90后,技术宅?恩或许是,现居于北京,然后喜爱折腾,好奇新事物<br>欢迎各位小伙伴与我互换友链，详情请戳 上面的 <a href=\"/links\"><b>链接</b></a> 页面 。<br>关于这个站呢,就是记录下平时记不太住的还有一些自己感兴趣喜欢的一些东西<br>顺便也分享给大家吧!<br>就酱紫,联系方式在下面</p>\n<hr>\n<center> <h2>联系方式</h2> </center>\n\n<ul>\n<li>Email：<a href=\"https://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=mail@ihoey.com\" target=\"_blank\" rel=\"external\">mail@ihoey.com</a></li>\n<li>Q  Q：<a href=\"http://wpa.qq.com/msgrd?v=3&uin=1058221214&site=qq&menu=yes\" target=\"_blank\" rel=\"external\">1058221214</a></li>\n<li>微博：<a href=\"http://weibo.com/hy951121\" target=\"_blank\" rel=\"external\">ihoeys</a></li>\n</ul>\n<hr>\n<p>[2016-10-25] 站点从SinaAppEngine(SAE)迁移到Coding/GitHub, 国内用户默认解析至Coding, 海外则解析至GitHub, 互为备份, 改善了访问速度与稳定性</p>\n<hr>\n<p><center> <h2>打赏记录</h2> </center><br></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">打赏人</th>\n<th style=\"text-align:center\">打赏留言</th>\n<th style=\"text-align:center\">打赏时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">159**0212</td>\n<td style=\"text-align:center\">小站不错，支持一下啦！</td>\n<td style=\"text-align:center\">2015-11-02</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">138**4533</td>\n<td style=\"text-align:center\">我来啦，占前排！</td>\n<td style=\"text-align:center\">2015-11-02</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">188**5838</td>\n<td style=\"text-align:center\">网站不错哦！</td>\n<td style=\"text-align:center\">2015-12-14</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">175**1534</td>\n<td style=\"text-align:center\">新年快乐!！</td>\n<td style=\"text-align:center\">2016-2-11</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">131**7309</td>\n<td style=\"text-align:center\">很漂亮的网站,我的零钱都给你啦!</td>\n<td style=\"text-align:center\">2016-3-15</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1121**@qq.com</td>\n<td style=\"text-align:center\">谢谢帮助,祝你888!</td>\n<td style=\"text-align:center\">2016-6-20</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lw**@163.com</td>\n<td style=\"text-align:center\">那我就给你来个666吧!</td>\n<td style=\"text-align:center\">2016-6-21</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p>啦啦啦，感谢你们啦，我会做的更好的呢<br>2016-6-25:感谢你们的赞助了.虽然人不多,但我还是很感动的.<br>2017-6-5:今天早上发现多说突然就废了,然后就紧急的换成了网易云跟帖,评论系统样式不是很好看,主要的是以前多说的数据导入过来有好多都不显示,唉……伤心！</p>\n<hr>\n<iframe src=\"https://sponsor.ihoey.com/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\n<hr>\n","excerpt":"","more":"<blockquote class=\"blockquote-center\">愿多年以后，我可以酌一杯清酒，烂醉如泥，梦中回到我们的曾经。</blockquote>\n\n<center>首先梦魇小栈欢迎您的到来!</center>\n\n<blockquote>\n<p style=\"text-indent: .5em; margin-bottom: 10px;\">关于我</p>\n\n</blockquote>\n<p>90后,技术宅?恩或许是,现居于北京,然后喜爱折腾,好奇新事物<br>欢迎各位小伙伴与我互换友链，详情请戳 上面的 <a href=\"/links\"><b>链接</b></a> 页面 。<br>关于这个站呢,就是记录下平时记不太住的还有一些自己感兴趣喜欢的一些东西<br>顺便也分享给大家吧!<br>就酱紫,联系方式在下面</p>\n<hr>\n<center> <h2>联系方式</h2> </center>\n\n<ul>\n<li>Email：<a href=\"https://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=mail@ihoey.com\">mail@ihoey.com</a></li>\n<li>Q  Q：<a href=\"http://wpa.qq.com/msgrd?v=3&uin=1058221214&site=qq&menu=yes\">1058221214</a></li>\n<li>微博：<a href=\"http://weibo.com/hy951121\">ihoeys</a></li>\n</ul>\n<hr>\n<p>[2016-10-25] 站点从SinaAppEngine(SAE)迁移到Coding/GitHub, 国内用户默认解析至Coding, 海外则解析至GitHub, 互为备份, 改善了访问速度与稳定性</p>\n<hr>\n<p><center> <h2>打赏记录</h2> </center><br></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">打赏人</th>\n<th style=\"text-align:center\">打赏留言</th>\n<th style=\"text-align:center\">打赏时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">159**0212</td>\n<td style=\"text-align:center\">小站不错，支持一下啦！</td>\n<td style=\"text-align:center\">2015-11-02</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">138**4533</td>\n<td style=\"text-align:center\">我来啦，占前排！</td>\n<td style=\"text-align:center\">2015-11-02</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">188**5838</td>\n<td style=\"text-align:center\">网站不错哦！</td>\n<td style=\"text-align:center\">2015-12-14</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">175**1534</td>\n<td style=\"text-align:center\">新年快乐!！</td>\n<td style=\"text-align:center\">2016-2-11</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">131**7309</td>\n<td style=\"text-align:center\">很漂亮的网站,我的零钱都给你啦!</td>\n<td style=\"text-align:center\">2016-3-15</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1121**@qq.com</td>\n<td style=\"text-align:center\">谢谢帮助,祝你888!</td>\n<td style=\"text-align:center\">2016-6-20</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lw**@163.com</td>\n<td style=\"text-align:center\">那我就给你来个666吧!</td>\n<td style=\"text-align:center\">2016-6-21</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p>啦啦啦，感谢你们啦，我会做的更好的呢<br>2016-6-25:感谢你们的赞助了.虽然人不多,但我还是很感动的.<br>2017-6-5:今天早上发现多说突然就废了,然后就紧急的换成了网易云跟帖,评论系统样式不是很好看,主要的是以前多说的数据导入过来有好多都不显示,唉……伤心！</p>\n<hr>\n<iframe src=\"https://sponsor.ihoey.com/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n<hr>\n"}],"Post":[{"title":"Node第二部分-模块及工具","date":"2016-12-12T01:12:32.000Z","_content":"为了让 `NodeJs` 的文件可以相互调用，`NodeJs` 提供了一个简单的模块系统。\n模块是 `NodeJs` 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 `NodeJs` 文件就是一个模块，这个文件可能是 `JavaScript` 代码、`JSON` 或者编译过的 `C/C++` 扩展。\n\n<!--more-->\n\n## NodeJs的模块\n\n- 核心模块(只要安装了node就会有的模块,已经被打包到了node.exe文件)\n- 自定义模块(我们自己写的js模块)\n- 第三方的模块(包)\n\n## 核心模块\n\n- http\n- url\n- fs\n- ……等\n\n### http 模块\n\n在我们的代码中请求它并把返回值赋给一个本地变量\n\n### url 模块\n\n- 用来操作url的\n- url.parse(request.url,true)\n\n## fs文件操作模块\n\n```javascript\nvar fs = require('fs')\n// 读取文件:\n// 参数1：文件路径\n// 参数2： 文件编码\n// 返回值： 文件内容\nvar data = fs.readFileSync('./index.html','utf8')\n\n// 写入文件\n// 第一个参数：是要写入的文件目录,\n// 第二个参数:是要写入的内容!\n// 这个方法执行时会【覆盖】之前的文件内容!\nfs.writeFileSync('./tmp.txt','我是中国人，我爱自己的祖国!')\n\n// 追加文件\nfs.appendFileSync('./xx.js','我是小明，我在哪里?\\r\\n')\n\n // 创建目录\n    // 判断目录是否存在，如果不存在，则创建\n    var result = fs.existsSync('data') // 判断当前目录是否存在data目录\n    if(!result){\n    console.log(result)\n    // 创建目录\n    fs.mkdirSync('data')// 在当前目录创建data目录\n    }\n```\n\n## __dirname和__firename\n1, __dirname 可在任意文件中直接使用,值表示当前文件所在路径字符串\n2, __firname 也可以在任意文件中使用,值表示当前文件的包含文件名的完整路径!\n\n## 按顺序执行就是同步\n## form表单，提交get请求，会把请求参数添加到url中\n\n## 重定向!\n- 在响应头里加上 Location:'新地址',并设置状态为302\n- `res.setHeader('key','value')`// 设置响应头\n- `res.writeHead(状态码)`// 设置状态码!\n- 浏览器接收到数据后会重新向新地址跳转!\n\n## npm\n- node package manager\n- node的包管理工具，管理的是第三方包\n- [官网](https://www.npmjs.com/)\n- 也能管理前端的包\n\n### 安装包\n- 初始化: `npm init`\n- `npm install <包名>`\n\n## 扩展\n## 离线文档阅读器\n- [windows版本](https://zealdocs.org/)\n- [mac版本](dash)\n\n## es6/es2015 每天一点点\n- const\n//  const申明的数据，在栈中不可变，但是如果是对象，则对应的属性值可以变,也就是堆中的值可变,栈中的地址不可以变！\n- let\n// let申明的变量，作用由大括号决定!\n\n### 提交效率\n- 组合键: `win+E`, 打开资源管理器\n- 组合键: `wind+D`, 快速切换到桌面\n- 组合键: `ctrl+shift+esc` 快速打开任务管理器\n","source":"_posts/Node-part2.md","raw":"---\ntitle: Node第二部分-模块及工具\ndate: 2016-12-12 09:12:32\ntags: \n    - Node\n    - NodeJs \ncategories: Node\n---\n为了让 `NodeJs` 的文件可以相互调用，`NodeJs` 提供了一个简单的模块系统。\n模块是 `NodeJs` 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 `NodeJs` 文件就是一个模块，这个文件可能是 `JavaScript` 代码、`JSON` 或者编译过的 `C/C++` 扩展。\n\n<!--more-->\n\n## NodeJs的模块\n\n- 核心模块(只要安装了node就会有的模块,已经被打包到了node.exe文件)\n- 自定义模块(我们自己写的js模块)\n- 第三方的模块(包)\n\n## 核心模块\n\n- http\n- url\n- fs\n- ……等\n\n### http 模块\n\n在我们的代码中请求它并把返回值赋给一个本地变量\n\n### url 模块\n\n- 用来操作url的\n- url.parse(request.url,true)\n\n## fs文件操作模块\n\n```javascript\nvar fs = require('fs')\n// 读取文件:\n// 参数1：文件路径\n// 参数2： 文件编码\n// 返回值： 文件内容\nvar data = fs.readFileSync('./index.html','utf8')\n\n// 写入文件\n// 第一个参数：是要写入的文件目录,\n// 第二个参数:是要写入的内容!\n// 这个方法执行时会【覆盖】之前的文件内容!\nfs.writeFileSync('./tmp.txt','我是中国人，我爱自己的祖国!')\n\n// 追加文件\nfs.appendFileSync('./xx.js','我是小明，我在哪里?\\r\\n')\n\n // 创建目录\n    // 判断目录是否存在，如果不存在，则创建\n    var result = fs.existsSync('data') // 判断当前目录是否存在data目录\n    if(!result){\n    console.log(result)\n    // 创建目录\n    fs.mkdirSync('data')// 在当前目录创建data目录\n    }\n```\n\n## __dirname和__firename\n1, __dirname 可在任意文件中直接使用,值表示当前文件所在路径字符串\n2, __firname 也可以在任意文件中使用,值表示当前文件的包含文件名的完整路径!\n\n## 按顺序执行就是同步\n## form表单，提交get请求，会把请求参数添加到url中\n\n## 重定向!\n- 在响应头里加上 Location:'新地址',并设置状态为302\n- `res.setHeader('key','value')`// 设置响应头\n- `res.writeHead(状态码)`// 设置状态码!\n- 浏览器接收到数据后会重新向新地址跳转!\n\n## npm\n- node package manager\n- node的包管理工具，管理的是第三方包\n- [官网](https://www.npmjs.com/)\n- 也能管理前端的包\n\n### 安装包\n- 初始化: `npm init`\n- `npm install <包名>`\n\n## 扩展\n## 离线文档阅读器\n- [windows版本](https://zealdocs.org/)\n- [mac版本](dash)\n\n## es6/es2015 每天一点点\n- const\n//  const申明的数据，在栈中不可变，但是如果是对象，则对应的属性值可以变,也就是堆中的值可变,栈中的地址不可以变！\n- let\n// let申明的变量，作用由大括号决定!\n\n### 提交效率\n- 组合键: `win+E`, 打开资源管理器\n- 组合键: `wind+D`, 快速切换到桌面\n- 组合键: `ctrl+shift+esc` 快速打开任务管理器\n","slug":"Node-part2","published":1,"updated":"2016-12-17T12:34:55.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvl60000uwg7xknm2pn5","content":"<p>为了让 <code>NodeJs</code> 的文件可以相互调用，<code>NodeJs</code> 提供了一个简单的模块系统。<br>模块是 <code>NodeJs</code> 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 <code>NodeJs</code> 文件就是一个模块，这个文件可能是 <code>JavaScript</code> 代码、<code>JSON</code> 或者编译过的 <code>C/C++</code> 扩展。</p>\n<a id=\"more\"></a>\n<h2 id=\"NodeJs的模块\"><a href=\"#NodeJs的模块\" class=\"headerlink\" title=\"NodeJs的模块\"></a>NodeJs的模块</h2><ul>\n<li>核心模块(只要安装了node就会有的模块,已经被打包到了node.exe文件)</li>\n<li>自定义模块(我们自己写的js模块)</li>\n<li>第三方的模块(包)</li>\n</ul>\n<h2 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h2><ul>\n<li>http</li>\n<li>url</li>\n<li>fs</li>\n<li>……等</li>\n</ul>\n<h3 id=\"http-模块\"><a href=\"#http-模块\" class=\"headerlink\" title=\"http 模块\"></a>http 模块</h3><p>在我们的代码中请求它并把返回值赋给一个本地变量</p>\n<h3 id=\"url-模块\"><a href=\"#url-模块\" class=\"headerlink\" title=\"url 模块\"></a>url 模块</h3><ul>\n<li>用来操作url的</li>\n<li>url.parse(request.url,true)</li>\n</ul>\n<h2 id=\"fs文件操作模块\"><a href=\"#fs文件操作模块\" class=\"headerlink\" title=\"fs文件操作模块\"></a>fs文件操作模块</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"><span class=\"comment\">// 读取文件:</span></div><div class=\"line\"><span class=\"comment\">// 参数1：文件路径</span></div><div class=\"line\"><span class=\"comment\">// 参数2： 文件编码</span></div><div class=\"line\"><span class=\"comment\">// 返回值： 文件内容</span></div><div class=\"line\"><span class=\"keyword\">var</span> data = fs.readFileSync(<span class=\"string\">'./index.html'</span>,<span class=\"string\">'utf8'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 写入文件</span></div><div class=\"line\"><span class=\"comment\">// 第一个参数：是要写入的文件目录,</span></div><div class=\"line\"><span class=\"comment\">// 第二个参数:是要写入的内容!</span></div><div class=\"line\"><span class=\"comment\">// 这个方法执行时会【覆盖】之前的文件内容!</span></div><div class=\"line\">fs.writeFileSync(<span class=\"string\">'./tmp.txt'</span>,<span class=\"string\">'我是中国人，我爱自己的祖国!'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 追加文件</span></div><div class=\"line\">fs.appendFileSync(<span class=\"string\">'./xx.js'</span>,<span class=\"string\">'我是小明，我在哪里?\\r\\n'</span>)</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 创建目录</span></div><div class=\"line\">    <span class=\"comment\">// 判断目录是否存在，如果不存在，则创建</span></div><div class=\"line\">    <span class=\"keyword\">var</span> result = fs.existsSync(<span class=\"string\">'data'</span>) <span class=\"comment\">// 判断当前目录是否存在data目录</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!result)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result)</div><div class=\"line\">    <span class=\"comment\">// 创建目录</span></div><div class=\"line\">    fs.mkdirSync(<span class=\"string\">'data'</span>)<span class=\"comment\">// 在当前目录创建data目录</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"dirname和firename\"><a href=\"#dirname和firename\" class=\"headerlink\" title=\"dirname和firename\"></a><strong>dirname和</strong>firename</h2><p>1, <strong>dirname 可在任意文件中直接使用,值表示当前文件所在路径字符串<br>2, </strong>firname 也可以在任意文件中使用,值表示当前文件的包含文件名的完整路径!</p>\n<h2 id=\"按顺序执行就是同步\"><a href=\"#按顺序执行就是同步\" class=\"headerlink\" title=\"按顺序执行就是同步\"></a>按顺序执行就是同步</h2><h2 id=\"form表单，提交get请求，会把请求参数添加到url中\"><a href=\"#form表单，提交get请求，会把请求参数添加到url中\" class=\"headerlink\" title=\"form表单，提交get请求，会把请求参数添加到url中\"></a>form表单，提交get请求，会把请求参数添加到url中</h2><h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向!\"></a>重定向!</h2><ul>\n<li>在响应头里加上 Location:’新地址’,并设置状态为302</li>\n<li><code>res.setHeader(&#39;key&#39;,&#39;value&#39;)</code>// 设置响应头</li>\n<li><code>res.writeHead(状态码)</code>// 设置状态码!</li>\n<li>浏览器接收到数据后会重新向新地址跳转!</li>\n</ul>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><ul>\n<li>node package manager</li>\n<li>node的包管理工具，管理的是第三方包</li>\n<li><a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>也能管理前端的包</li>\n</ul>\n<h3 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h3><ul>\n<li>初始化: <code>npm init</code></li>\n<li><code>npm install &lt;包名&gt;</code></li>\n</ul>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><h2 id=\"离线文档阅读器\"><a href=\"#离线文档阅读器\" class=\"headerlink\" title=\"离线文档阅读器\"></a>离线文档阅读器</h2><ul>\n<li><a href=\"https://zealdocs.org/\" target=\"_blank\" rel=\"external\">windows版本</a></li>\n<li><a href=\"dash\">mac版本</a></li>\n</ul>\n<h2 id=\"es6-es2015-每天一点点\"><a href=\"#es6-es2015-每天一点点\" class=\"headerlink\" title=\"es6/es2015 每天一点点\"></a>es6/es2015 每天一点点</h2><ul>\n<li>const<br>//  const申明的数据，在栈中不可变，但是如果是对象，则对应的属性值可以变,也就是堆中的值可变,栈中的地址不可以变！</li>\n<li>let<br>// let申明的变量，作用由大括号决定!</li>\n</ul>\n<h3 id=\"提交效率\"><a href=\"#提交效率\" class=\"headerlink\" title=\"提交效率\"></a>提交效率</h3><ul>\n<li>组合键: <code>win+E</code>, 打开资源管理器</li>\n<li>组合键: <code>wind+D</code>, 快速切换到桌面</li>\n<li>组合键: <code>ctrl+shift+esc</code> 快速打开任务管理器</li>\n</ul>\n","excerpt":"<p>为了让 <code>NodeJs</code> 的文件可以相互调用，<code>NodeJs</code> 提供了一个简单的模块系统。<br>模块是 <code>NodeJs</code> 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 <code>NodeJs</code> 文件就是一个模块，这个文件可能是 <code>JavaScript</code> 代码、<code>JSON</code> 或者编译过的 <code>C/C++</code> 扩展。</p>","more":"<h2 id=\"NodeJs的模块\"><a href=\"#NodeJs的模块\" class=\"headerlink\" title=\"NodeJs的模块\"></a>NodeJs的模块</h2><ul>\n<li>核心模块(只要安装了node就会有的模块,已经被打包到了node.exe文件)</li>\n<li>自定义模块(我们自己写的js模块)</li>\n<li>第三方的模块(包)</li>\n</ul>\n<h2 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h2><ul>\n<li>http</li>\n<li>url</li>\n<li>fs</li>\n<li>……等</li>\n</ul>\n<h3 id=\"http-模块\"><a href=\"#http-模块\" class=\"headerlink\" title=\"http 模块\"></a>http 模块</h3><p>在我们的代码中请求它并把返回值赋给一个本地变量</p>\n<h3 id=\"url-模块\"><a href=\"#url-模块\" class=\"headerlink\" title=\"url 模块\"></a>url 模块</h3><ul>\n<li>用来操作url的</li>\n<li>url.parse(request.url,true)</li>\n</ul>\n<h2 id=\"fs文件操作模块\"><a href=\"#fs文件操作模块\" class=\"headerlink\" title=\"fs文件操作模块\"></a>fs文件操作模块</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"><span class=\"comment\">// 读取文件:</span></div><div class=\"line\"><span class=\"comment\">// 参数1：文件路径</span></div><div class=\"line\"><span class=\"comment\">// 参数2： 文件编码</span></div><div class=\"line\"><span class=\"comment\">// 返回值： 文件内容</span></div><div class=\"line\"><span class=\"keyword\">var</span> data = fs.readFileSync(<span class=\"string\">'./index.html'</span>,<span class=\"string\">'utf8'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 写入文件</span></div><div class=\"line\"><span class=\"comment\">// 第一个参数：是要写入的文件目录,</span></div><div class=\"line\"><span class=\"comment\">// 第二个参数:是要写入的内容!</span></div><div class=\"line\"><span class=\"comment\">// 这个方法执行时会【覆盖】之前的文件内容!</span></div><div class=\"line\">fs.writeFileSync(<span class=\"string\">'./tmp.txt'</span>,<span class=\"string\">'我是中国人，我爱自己的祖国!'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 追加文件</span></div><div class=\"line\">fs.appendFileSync(<span class=\"string\">'./xx.js'</span>,<span class=\"string\">'我是小明，我在哪里?\\r\\n'</span>)</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 创建目录</span></div><div class=\"line\">    <span class=\"comment\">// 判断目录是否存在，如果不存在，则创建</span></div><div class=\"line\">    <span class=\"keyword\">var</span> result = fs.existsSync(<span class=\"string\">'data'</span>) <span class=\"comment\">// 判断当前目录是否存在data目录</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!result)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result)</div><div class=\"line\">    <span class=\"comment\">// 创建目录</span></div><div class=\"line\">    fs.mkdirSync(<span class=\"string\">'data'</span>)<span class=\"comment\">// 在当前目录创建data目录</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"dirname和firename\"><a href=\"#dirname和firename\" class=\"headerlink\" title=\"dirname和firename\"></a><strong>dirname和</strong>firename</h2><p>1, <strong>dirname 可在任意文件中直接使用,值表示当前文件所在路径字符串<br>2, </strong>firname 也可以在任意文件中使用,值表示当前文件的包含文件名的完整路径!</p>\n<h2 id=\"按顺序执行就是同步\"><a href=\"#按顺序执行就是同步\" class=\"headerlink\" title=\"按顺序执行就是同步\"></a>按顺序执行就是同步</h2><h2 id=\"form表单，提交get请求，会把请求参数添加到url中\"><a href=\"#form表单，提交get请求，会把请求参数添加到url中\" class=\"headerlink\" title=\"form表单，提交get请求，会把请求参数添加到url中\"></a>form表单，提交get请求，会把请求参数添加到url中</h2><h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向!\"></a>重定向!</h2><ul>\n<li>在响应头里加上 Location:’新地址’,并设置状态为302</li>\n<li><code>res.setHeader(&#39;key&#39;,&#39;value&#39;)</code>// 设置响应头</li>\n<li><code>res.writeHead(状态码)</code>// 设置状态码!</li>\n<li>浏览器接收到数据后会重新向新地址跳转!</li>\n</ul>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><ul>\n<li>node package manager</li>\n<li>node的包管理工具，管理的是第三方包</li>\n<li><a href=\"https://www.npmjs.com/\">官网</a></li>\n<li>也能管理前端的包</li>\n</ul>\n<h3 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h3><ul>\n<li>初始化: <code>npm init</code></li>\n<li><code>npm install &lt;包名&gt;</code></li>\n</ul>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><h2 id=\"离线文档阅读器\"><a href=\"#离线文档阅读器\" class=\"headerlink\" title=\"离线文档阅读器\"></a>离线文档阅读器</h2><ul>\n<li><a href=\"https://zealdocs.org/\">windows版本</a></li>\n<li><a href=\"dash\">mac版本</a></li>\n</ul>\n<h2 id=\"es6-es2015-每天一点点\"><a href=\"#es6-es2015-每天一点点\" class=\"headerlink\" title=\"es6/es2015 每天一点点\"></a>es6/es2015 每天一点点</h2><ul>\n<li>const<br>//  const申明的数据，在栈中不可变，但是如果是对象，则对应的属性值可以变,也就是堆中的值可变,栈中的地址不可以变！</li>\n<li>let<br>// let申明的变量，作用由大括号决定!</li>\n</ul>\n<h3 id=\"提交效率\"><a href=\"#提交效率\" class=\"headerlink\" title=\"提交效率\"></a>提交效率</h3><ul>\n<li>组合键: <code>win+E</code>, 打开资源管理器</li>\n<li>组合键: <code>wind+D</code>, 快速切换到桌面</li>\n<li>组合键: <code>ctrl+shift+esc</code> 快速打开任务管理器</li>\n</ul>"},{"title":"Node第一部分-初体验","date":"2016-12-10T02:31:09.000Z","_content":"\n## NodeJs是什么？\n\n> 简单的说 `NodeJs` 就是运行在服务端的 `JavaScript` 。`NodeJs` 是一个基于 `Chrome JavaScript` 运行时建立的一个平台。`NodeJs` 是一个事件驱动 `I/O` 服务端 `JavaScript` 环境，基于 `Google` 的 `V8` 引擎，`V8` 引擎执行 `Javascript` 的速度非常快，性能非常好。\n\n- 官网 `https://nodejs.org`\n\n<!--more-->\n\n- `NodeJs` 自带运行时环境可在 `Javascript` 脚本的基础上可以解释和执行(这类似于 `JVM` 的 `Java` 字节码)。这个运行时允许在浏览器以外的任何机器上执行 `JavaScript` 代码。由于这种运行时在 `NodeJs` 上，所以 `JavaScript` 现在可以在服务器上并执行。\n- `NodeJs` 还提供了各种丰富的 `JavaScript` 模块库，它极大简化了使用 `NodeJs` 来扩展 `Web` 应用程序的研究与开发。\n- `NodeJs` = 运行环境 + `JavaScript` 库\n\n### 浏览器和NodeJs中的Js\n\n- 浏览器的 `Js`\n  * 可以通过 `Js` 操作 `Html`\n  * 有 `DOM` (和操作 `Html` 有关)，有 `BOM` (和浏览器有关)，有 `ECMA` (就是 `js` 语法规范)\n- `Node` 中的 `Js`\n  * 没有 `DOM`, 没有 `BOM`, 有 `ECMA`\n  * `windows` (也就是说没有 `windows` 对象)\n\n## Node安装\n\n在 `windows` 上安装 `NodeJs` (本教程中使用)。使用 `MSI` 文件，并按照提示安装 `NodeJs` ，默认情况下，安装程序将 `NodeJs` 发行到 `C:\\Program Files\\nodejs`. 但这里我们可以根据需要修改安装路径到指定的文件夹，比如：`D:\\Program Files\\nodejs` ，并将 `D:\\Program Files\\nodejs` 目录添加到 `Window` 系统的 `PATH` 环境变量中（或者安装的时候选中添加环境变量，下面会有提到）。\n\n- 第一步：双击下载的 `node-v7.2.1-x64.msi` 文件，出现提示安装界面\n- 第二步：选择安装目录，比如安装在目录 `D:\\Program Files\\nodejs` 中\n- 第三步：选择安装的模块和功能，这里全部安装，并添加到系统环境变量，最后一个选项\n- 最后一步：安装完成！\n- 验证安装：在 `CMD` 或者 `powershell` 中输入 `node -v` 注意中间有空格，显示版本号就说明安装成功了！\n\n## Node版本介绍\n\n- `0.10.x` , `Node` 就开源了\n  + 开源（开放源代码）的话, 别人就可以贡献（提意见，修改等）源码! \n  + 因为作者比较精益求精，所以后来第三方社区: 觉得Node更新太慢! \n    * 于是第三方社区在原来Node的基础上继续开发并加入了很多新的东西\n  + 后来因为反响太大，作者便直接合并: 从 `0.10.x` 直接升到 `4.x`\n  + 版本历史 `4.x` `5.x` `6.x` `7.x`\n\n## 创建 NodeJs 应用\n\n### 步骤一、引入 required 模块\n\n我们使用 `require` 指令来载入 `http` 模块，并将实例化的 `HTTP` 赋值给变量 http，实例如下:\n\n```js\nvar http = require(\"http\");\n```\n### 步骤一、创建服务器\n- 我们电脑上只要安装了node,不需要其他的软件配置，就能够开启一个http服务\n\n接下来我们使用 `http.createServer()` 方法创建服务器，并使用 `listen` 方法绑定 `8888` 端口。 函数通过 `request`, `response` 参数来接收和响应数据。\n实例如下，在你项目的根目录下创建一个叫 `server.js` 的文件，并写入以下代码：\n\n```js\nvar http = require('http');\n\nhttp.createServer(function (request, response) {\n  // 发送 http 头部\n  // http 状态码：200 ：OK\n  // 内容类型： text/piain\n  response.writeHead(200,{'Contenr-Type': 'text/piain'})\n  //发送响应数据 ‘hello world’\n  response.end('hello-world');\n  //监听8888端口\n  }).listen(8888)\n\n  console.log('Server running at http://127.0.0.1:8888/')\n```\n\n以上代码我们完成了一个可以工作的 HTTP 服务器。\n使用 node 命令执行以上的代码：\n\n```js\nnode server.js\nServer running at http://127.0.0.1:8888/\n```\n\n接下来，打开浏览器访问 `http://127.0.0.1:8888/` ，你会看到一个写着 \"Hello World\"的网页。\n\n> 服务器\n\n- 服务器就是一台电脑, 只是性能一般比我们普通电脑高!\n\n### 注意\n\n*file协议，默认，是不能够发ajax请求的！*\n\n- 服务器就是一台电脑(这个电脑是有独立 `ip` )\n- 我们的笔记本也是电脑(也可以把最终的项目代码放到笔记本上! ,但是没有公司愿意这么干)\n- 操作系统都可能是一样的\n- 服务器能运行的软件，我们电脑也能运行\n\n## 环境变量\n\n- 我们在 `cmd` 窗口中敲一个命令, 本质上是执行了一个程序(软件)\n- 默认按下回车时, 会到当前命令行所对应的目录寻找文件, 如果找到就立即执行\n- 如果找不到就会到环境变量中的 `PATH` 中指定的目录中寻找!\n\n例:我们把 `node` 的默认安装目录: `D:\\Program Files\\nodejs`, 配置 `PATH` 上，那么\n我们在 `cmd` 中敲命令时，如果当前目录找不到，就会到 `D:\\Program Files\\nodejs` \n目录寻找相应的文件执行!\n\n## 命令行\n\n- 系统底层还是命令\n- windows系统刚开始的时候还没有界面\n- 在 `cmd` 中敲命令,或默认到当前命令行对应的目录中找文件执行\n","source":"_posts/Node-part1.md","raw":"---\ntitle: Node第一部分-初体验\ndate: 2016-12-10 10:31:09\ntags: \n    - Node\n    - NodeJs \ncategories: Node\n---\n\n## NodeJs是什么？\n\n> 简单的说 `NodeJs` 就是运行在服务端的 `JavaScript` 。`NodeJs` 是一个基于 `Chrome JavaScript` 运行时建立的一个平台。`NodeJs` 是一个事件驱动 `I/O` 服务端 `JavaScript` 环境，基于 `Google` 的 `V8` 引擎，`V8` 引擎执行 `Javascript` 的速度非常快，性能非常好。\n\n- 官网 `https://nodejs.org`\n\n<!--more-->\n\n- `NodeJs` 自带运行时环境可在 `Javascript` 脚本的基础上可以解释和执行(这类似于 `JVM` 的 `Java` 字节码)。这个运行时允许在浏览器以外的任何机器上执行 `JavaScript` 代码。由于这种运行时在 `NodeJs` 上，所以 `JavaScript` 现在可以在服务器上并执行。\n- `NodeJs` 还提供了各种丰富的 `JavaScript` 模块库，它极大简化了使用 `NodeJs` 来扩展 `Web` 应用程序的研究与开发。\n- `NodeJs` = 运行环境 + `JavaScript` 库\n\n### 浏览器和NodeJs中的Js\n\n- 浏览器的 `Js`\n  * 可以通过 `Js` 操作 `Html`\n  * 有 `DOM` (和操作 `Html` 有关)，有 `BOM` (和浏览器有关)，有 `ECMA` (就是 `js` 语法规范)\n- `Node` 中的 `Js`\n  * 没有 `DOM`, 没有 `BOM`, 有 `ECMA`\n  * `windows` (也就是说没有 `windows` 对象)\n\n## Node安装\n\n在 `windows` 上安装 `NodeJs` (本教程中使用)。使用 `MSI` 文件，并按照提示安装 `NodeJs` ，默认情况下，安装程序将 `NodeJs` 发行到 `C:\\Program Files\\nodejs`. 但这里我们可以根据需要修改安装路径到指定的文件夹，比如：`D:\\Program Files\\nodejs` ，并将 `D:\\Program Files\\nodejs` 目录添加到 `Window` 系统的 `PATH` 环境变量中（或者安装的时候选中添加环境变量，下面会有提到）。\n\n- 第一步：双击下载的 `node-v7.2.1-x64.msi` 文件，出现提示安装界面\n- 第二步：选择安装目录，比如安装在目录 `D:\\Program Files\\nodejs` 中\n- 第三步：选择安装的模块和功能，这里全部安装，并添加到系统环境变量，最后一个选项\n- 最后一步：安装完成！\n- 验证安装：在 `CMD` 或者 `powershell` 中输入 `node -v` 注意中间有空格，显示版本号就说明安装成功了！\n\n## Node版本介绍\n\n- `0.10.x` , `Node` 就开源了\n  + 开源（开放源代码）的话, 别人就可以贡献（提意见，修改等）源码! \n  + 因为作者比较精益求精，所以后来第三方社区: 觉得Node更新太慢! \n    * 于是第三方社区在原来Node的基础上继续开发并加入了很多新的东西\n  + 后来因为反响太大，作者便直接合并: 从 `0.10.x` 直接升到 `4.x`\n  + 版本历史 `4.x` `5.x` `6.x` `7.x`\n\n## 创建 NodeJs 应用\n\n### 步骤一、引入 required 模块\n\n我们使用 `require` 指令来载入 `http` 模块，并将实例化的 `HTTP` 赋值给变量 http，实例如下:\n\n```js\nvar http = require(\"http\");\n```\n### 步骤一、创建服务器\n- 我们电脑上只要安装了node,不需要其他的软件配置，就能够开启一个http服务\n\n接下来我们使用 `http.createServer()` 方法创建服务器，并使用 `listen` 方法绑定 `8888` 端口。 函数通过 `request`, `response` 参数来接收和响应数据。\n实例如下，在你项目的根目录下创建一个叫 `server.js` 的文件，并写入以下代码：\n\n```js\nvar http = require('http');\n\nhttp.createServer(function (request, response) {\n  // 发送 http 头部\n  // http 状态码：200 ：OK\n  // 内容类型： text/piain\n  response.writeHead(200,{'Contenr-Type': 'text/piain'})\n  //发送响应数据 ‘hello world’\n  response.end('hello-world');\n  //监听8888端口\n  }).listen(8888)\n\n  console.log('Server running at http://127.0.0.1:8888/')\n```\n\n以上代码我们完成了一个可以工作的 HTTP 服务器。\n使用 node 命令执行以上的代码：\n\n```js\nnode server.js\nServer running at http://127.0.0.1:8888/\n```\n\n接下来，打开浏览器访问 `http://127.0.0.1:8888/` ，你会看到一个写着 \"Hello World\"的网页。\n\n> 服务器\n\n- 服务器就是一台电脑, 只是性能一般比我们普通电脑高!\n\n### 注意\n\n*file协议，默认，是不能够发ajax请求的！*\n\n- 服务器就是一台电脑(这个电脑是有独立 `ip` )\n- 我们的笔记本也是电脑(也可以把最终的项目代码放到笔记本上! ,但是没有公司愿意这么干)\n- 操作系统都可能是一样的\n- 服务器能运行的软件，我们电脑也能运行\n\n## 环境变量\n\n- 我们在 `cmd` 窗口中敲一个命令, 本质上是执行了一个程序(软件)\n- 默认按下回车时, 会到当前命令行所对应的目录寻找文件, 如果找到就立即执行\n- 如果找不到就会到环境变量中的 `PATH` 中指定的目录中寻找!\n\n例:我们把 `node` 的默认安装目录: `D:\\Program Files\\nodejs`, 配置 `PATH` 上，那么\n我们在 `cmd` 中敲命令时，如果当前目录找不到，就会到 `D:\\Program Files\\nodejs` \n目录寻找相应的文件执行!\n\n## 命令行\n\n- 系统底层还是命令\n- windows系统刚开始的时候还没有界面\n- 在 `cmd` 中敲命令,或默认到当前命令行对应的目录中找文件执行\n","slug":"Node-part1","published":1,"updated":"2016-12-25T01:31:29.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvlg0001uwg7ocz88rd6","content":"<h2 id=\"NodeJs是什么？\"><a href=\"#NodeJs是什么？\" class=\"headerlink\" title=\"NodeJs是什么？\"></a>NodeJs是什么？</h2><blockquote>\n<p>简单的说 <code>NodeJs</code> 就是运行在服务端的 <code>JavaScript</code> 。<code>NodeJs</code> 是一个基于 <code>Chrome JavaScript</code> 运行时建立的一个平台。<code>NodeJs</code> 是一个事件驱动 <code>I/O</code> 服务端 <code>JavaScript</code> 环境，基于 <code>Google</code> 的 <code>V8</code> 引擎，<code>V8</code> 引擎执行 <code>Javascript</code> 的速度非常快，性能非常好。</p>\n</blockquote>\n<ul>\n<li>官网 <code>https://nodejs.org</code></li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><code>NodeJs</code> 自带运行时环境可在 <code>Javascript</code> 脚本的基础上可以解释和执行(这类似于 <code>JVM</code> 的 <code>Java</code> 字节码)。这个运行时允许在浏览器以外的任何机器上执行 <code>JavaScript</code> 代码。由于这种运行时在 <code>NodeJs</code> 上，所以 <code>JavaScript</code> 现在可以在服务器上并执行。</li>\n<li><code>NodeJs</code> 还提供了各种丰富的 <code>JavaScript</code> 模块库，它极大简化了使用 <code>NodeJs</code> 来扩展 <code>Web</code> 应用程序的研究与开发。</li>\n<li><code>NodeJs</code> = 运行环境 + <code>JavaScript</code> 库</li>\n</ul>\n<h3 id=\"浏览器和NodeJs中的Js\"><a href=\"#浏览器和NodeJs中的Js\" class=\"headerlink\" title=\"浏览器和NodeJs中的Js\"></a>浏览器和NodeJs中的Js</h3><ul>\n<li>浏览器的 <code>Js</code><ul>\n<li>可以通过 <code>Js</code> 操作 <code>Html</code></li>\n<li>有 <code>DOM</code> (和操作 <code>Html</code> 有关)，有 <code>BOM</code> (和浏览器有关)，有 <code>ECMA</code> (就是 <code>js</code> 语法规范)</li>\n</ul>\n</li>\n<li><code>Node</code> 中的 <code>Js</code><ul>\n<li>没有 <code>DOM</code>, 没有 <code>BOM</code>, 有 <code>ECMA</code></li>\n<li><code>windows</code> (也就是说没有 <code>windows</code> 对象)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Node安装\"><a href=\"#Node安装\" class=\"headerlink\" title=\"Node安装\"></a>Node安装</h2><p>在 <code>windows</code> 上安装 <code>NodeJs</code> (本教程中使用)。使用 <code>MSI</code> 文件，并按照提示安装 <code>NodeJs</code> ，默认情况下，安装程序将 <code>NodeJs</code> 发行到 <code>C:\\Program Files\\nodejs</code>. 但这里我们可以根据需要修改安装路径到指定的文件夹，比如：<code>D:\\Program Files\\nodejs</code> ，并将 <code>D:\\Program Files\\nodejs</code> 目录添加到 <code>Window</code> 系统的 <code>PATH</code> 环境变量中（或者安装的时候选中添加环境变量，下面会有提到）。</p>\n<ul>\n<li>第一步：双击下载的 <code>node-v7.2.1-x64.msi</code> 文件，出现提示安装界面</li>\n<li>第二步：选择安装目录，比如安装在目录 <code>D:\\Program Files\\nodejs</code> 中</li>\n<li>第三步：选择安装的模块和功能，这里全部安装，并添加到系统环境变量，最后一个选项</li>\n<li>最后一步：安装完成！</li>\n<li>验证安装：在 <code>CMD</code> 或者 <code>powershell</code> 中输入 <code>node -v</code> 注意中间有空格，显示版本号就说明安装成功了！</li>\n</ul>\n<h2 id=\"Node版本介绍\"><a href=\"#Node版本介绍\" class=\"headerlink\" title=\"Node版本介绍\"></a>Node版本介绍</h2><ul>\n<li><code>0.10.x</code> , <code>Node</code> 就开源了<ul>\n<li>开源（开放源代码）的话, 别人就可以贡献（提意见，修改等）源码! </li>\n<li>因为作者比较精益求精，所以后来第三方社区: 觉得Node更新太慢! <ul>\n<li>于是第三方社区在原来Node的基础上继续开发并加入了很多新的东西</li>\n</ul>\n</li>\n<li>后来因为反响太大，作者便直接合并: 从 <code>0.10.x</code> 直接升到 <code>4.x</code></li>\n<li>版本历史 <code>4.x</code> <code>5.x</code> <code>6.x</code> <code>7.x</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建-NodeJs-应用\"><a href=\"#创建-NodeJs-应用\" class=\"headerlink\" title=\"创建 NodeJs 应用\"></a>创建 NodeJs 应用</h2><h3 id=\"步骤一、引入-required-模块\"><a href=\"#步骤一、引入-required-模块\" class=\"headerlink\" title=\"步骤一、引入 required 模块\"></a>步骤一、引入 required 模块</h3><p>我们使用 <code>require</code> 指令来载入 <code>http</code> 模块，并将实例化的 <code>HTTP</code> 赋值给变量 http，实例如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"步骤一、创建服务器\"><a href=\"#步骤一、创建服务器\" class=\"headerlink\" title=\"步骤一、创建服务器\"></a>步骤一、创建服务器</h3><ul>\n<li>我们电脑上只要安装了node,不需要其他的软件配置，就能够开启一个http服务</li>\n</ul>\n<p>接下来我们使用 <code>http.createServer()</code> 方法创建服务器，并使用 <code>listen</code> 方法绑定 <code>8888</code> 端口。 函数通过 <code>request</code>, <code>response</code> 参数来接收和响应数据。<br>实例如下，在你项目的根目录下创建一个叫 <code>server.js</code> 的文件，并写入以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 发送 http 头部</span></div><div class=\"line\">  <span class=\"comment\">// http 状态码：200 ：OK</span></div><div class=\"line\">  <span class=\"comment\">// 内容类型： text/piain</span></div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>,&#123;<span class=\"string\">'Contenr-Type'</span>: <span class=\"string\">'text/piain'</span>&#125;)</div><div class=\"line\">  <span class=\"comment\">//发送响应数据 ‘hello world’</span></div><div class=\"line\">  response.end(<span class=\"string\">'hello-world'</span>);</div><div class=\"line\">  <span class=\"comment\">//监听8888端口</span></div><div class=\"line\">  &#125;).listen(<span class=\"number\">8888</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at http://127.0.0.1:8888/'</span>)</div></pre></td></tr></table></figure>\n<p>以上代码我们完成了一个可以工作的 HTTP 服务器。<br>使用 node 命令执行以上的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js</div><div class=\"line\">Server running at http:<span class=\"comment\">//127.0.0.1:8888/</span></div></pre></td></tr></table></figure>\n<p>接下来，打开浏览器访问 <code>http://127.0.0.1:8888/</code> ，你会看到一个写着 “Hello World”的网页。</p>\n<blockquote>\n<p>服务器</p>\n</blockquote>\n<ul>\n<li>服务器就是一台电脑, 只是性能一般比我们普通电脑高!</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p><em>file协议，默认，是不能够发ajax请求的！</em></p>\n<ul>\n<li>服务器就是一台电脑(这个电脑是有独立 <code>ip</code> )</li>\n<li>我们的笔记本也是电脑(也可以把最终的项目代码放到笔记本上! ,但是没有公司愿意这么干)</li>\n<li>操作系统都可能是一样的</li>\n<li>服务器能运行的软件，我们电脑也能运行</li>\n</ul>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>我们在 <code>cmd</code> 窗口中敲一个命令, 本质上是执行了一个程序(软件)</li>\n<li>默认按下回车时, 会到当前命令行所对应的目录寻找文件, 如果找到就立即执行</li>\n<li>如果找不到就会到环境变量中的 <code>PATH</code> 中指定的目录中寻找!</li>\n</ul>\n<p>例:我们把 <code>node</code> 的默认安装目录: <code>D:\\Program Files\\nodejs</code>, 配置 <code>PATH</code> 上，那么<br>我们在 <code>cmd</code> 中敲命令时，如果当前目录找不到，就会到 <code>D:\\Program Files\\nodejs</code><br>目录寻找相应的文件执行!</p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><ul>\n<li>系统底层还是命令</li>\n<li>windows系统刚开始的时候还没有界面</li>\n<li>在 <code>cmd</code> 中敲命令,或默认到当前命令行对应的目录中找文件执行</li>\n</ul>\n","excerpt":"<h2 id=\"NodeJs是什么？\"><a href=\"#NodeJs是什么？\" class=\"headerlink\" title=\"NodeJs是什么？\"></a>NodeJs是什么？</h2><blockquote>\n<p>简单的说 <code>NodeJs</code> 就是运行在服务端的 <code>JavaScript</code> 。<code>NodeJs</code> 是一个基于 <code>Chrome JavaScript</code> 运行时建立的一个平台。<code>NodeJs</code> 是一个事件驱动 <code>I/O</code> 服务端 <code>JavaScript</code> 环境，基于 <code>Google</code> 的 <code>V8</code> 引擎，<code>V8</code> 引擎执行 <code>Javascript</code> 的速度非常快，性能非常好。</p>\n</blockquote>\n<ul>\n<li>官网 <code>https://nodejs.org</code></li>\n</ul>","more":"<ul>\n<li><code>NodeJs</code> 自带运行时环境可在 <code>Javascript</code> 脚本的基础上可以解释和执行(这类似于 <code>JVM</code> 的 <code>Java</code> 字节码)。这个运行时允许在浏览器以外的任何机器上执行 <code>JavaScript</code> 代码。由于这种运行时在 <code>NodeJs</code> 上，所以 <code>JavaScript</code> 现在可以在服务器上并执行。</li>\n<li><code>NodeJs</code> 还提供了各种丰富的 <code>JavaScript</code> 模块库，它极大简化了使用 <code>NodeJs</code> 来扩展 <code>Web</code> 应用程序的研究与开发。</li>\n<li><code>NodeJs</code> = 运行环境 + <code>JavaScript</code> 库</li>\n</ul>\n<h3 id=\"浏览器和NodeJs中的Js\"><a href=\"#浏览器和NodeJs中的Js\" class=\"headerlink\" title=\"浏览器和NodeJs中的Js\"></a>浏览器和NodeJs中的Js</h3><ul>\n<li>浏览器的 <code>Js</code><ul>\n<li>可以通过 <code>Js</code> 操作 <code>Html</code></li>\n<li>有 <code>DOM</code> (和操作 <code>Html</code> 有关)，有 <code>BOM</code> (和浏览器有关)，有 <code>ECMA</code> (就是 <code>js</code> 语法规范)</li>\n</ul>\n</li>\n<li><code>Node</code> 中的 <code>Js</code><ul>\n<li>没有 <code>DOM</code>, 没有 <code>BOM</code>, 有 <code>ECMA</code></li>\n<li><code>windows</code> (也就是说没有 <code>windows</code> 对象)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Node安装\"><a href=\"#Node安装\" class=\"headerlink\" title=\"Node安装\"></a>Node安装</h2><p>在 <code>windows</code> 上安装 <code>NodeJs</code> (本教程中使用)。使用 <code>MSI</code> 文件，并按照提示安装 <code>NodeJs</code> ，默认情况下，安装程序将 <code>NodeJs</code> 发行到 <code>C:\\Program Files\\nodejs</code>. 但这里我们可以根据需要修改安装路径到指定的文件夹，比如：<code>D:\\Program Files\\nodejs</code> ，并将 <code>D:\\Program Files\\nodejs</code> 目录添加到 <code>Window</code> 系统的 <code>PATH</code> 环境变量中（或者安装的时候选中添加环境变量，下面会有提到）。</p>\n<ul>\n<li>第一步：双击下载的 <code>node-v7.2.1-x64.msi</code> 文件，出现提示安装界面</li>\n<li>第二步：选择安装目录，比如安装在目录 <code>D:\\Program Files\\nodejs</code> 中</li>\n<li>第三步：选择安装的模块和功能，这里全部安装，并添加到系统环境变量，最后一个选项</li>\n<li>最后一步：安装完成！</li>\n<li>验证安装：在 <code>CMD</code> 或者 <code>powershell</code> 中输入 <code>node -v</code> 注意中间有空格，显示版本号就说明安装成功了！</li>\n</ul>\n<h2 id=\"Node版本介绍\"><a href=\"#Node版本介绍\" class=\"headerlink\" title=\"Node版本介绍\"></a>Node版本介绍</h2><ul>\n<li><code>0.10.x</code> , <code>Node</code> 就开源了<ul>\n<li>开源（开放源代码）的话, 别人就可以贡献（提意见，修改等）源码! </li>\n<li>因为作者比较精益求精，所以后来第三方社区: 觉得Node更新太慢! <ul>\n<li>于是第三方社区在原来Node的基础上继续开发并加入了很多新的东西</li>\n</ul>\n</li>\n<li>后来因为反响太大，作者便直接合并: 从 <code>0.10.x</code> 直接升到 <code>4.x</code></li>\n<li>版本历史 <code>4.x</code> <code>5.x</code> <code>6.x</code> <code>7.x</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建-NodeJs-应用\"><a href=\"#创建-NodeJs-应用\" class=\"headerlink\" title=\"创建 NodeJs 应用\"></a>创建 NodeJs 应用</h2><h3 id=\"步骤一、引入-required-模块\"><a href=\"#步骤一、引入-required-模块\" class=\"headerlink\" title=\"步骤一、引入 required 模块\"></a>步骤一、引入 required 模块</h3><p>我们使用 <code>require</code> 指令来载入 <code>http</code> 模块，并将实例化的 <code>HTTP</code> 赋值给变量 http，实例如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"步骤一、创建服务器\"><a href=\"#步骤一、创建服务器\" class=\"headerlink\" title=\"步骤一、创建服务器\"></a>步骤一、创建服务器</h3><ul>\n<li>我们电脑上只要安装了node,不需要其他的软件配置，就能够开启一个http服务</li>\n</ul>\n<p>接下来我们使用 <code>http.createServer()</code> 方法创建服务器，并使用 <code>listen</code> 方法绑定 <code>8888</code> 端口。 函数通过 <code>request</code>, <code>response</code> 参数来接收和响应数据。<br>实例如下，在你项目的根目录下创建一个叫 <code>server.js</code> 的文件，并写入以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 发送 http 头部</span></div><div class=\"line\">  <span class=\"comment\">// http 状态码：200 ：OK</span></div><div class=\"line\">  <span class=\"comment\">// 内容类型： text/piain</span></div><div class=\"line\">  response.writeHead(<span class=\"number\">200</span>,&#123;<span class=\"string\">'Contenr-Type'</span>: <span class=\"string\">'text/piain'</span>&#125;)</div><div class=\"line\">  <span class=\"comment\">//发送响应数据 ‘hello world’</span></div><div class=\"line\">  response.end(<span class=\"string\">'hello-world'</span>);</div><div class=\"line\">  <span class=\"comment\">//监听8888端口</span></div><div class=\"line\">  &#125;).listen(<span class=\"number\">8888</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at http://127.0.0.1:8888/'</span>)</div></pre></td></tr></table></figure>\n<p>以上代码我们完成了一个可以工作的 HTTP 服务器。<br>使用 node 命令执行以上的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js</div><div class=\"line\">Server running at http:<span class=\"comment\">//127.0.0.1:8888/</span></div></pre></td></tr></table></figure>\n<p>接下来，打开浏览器访问 <code>http://127.0.0.1:8888/</code> ，你会看到一个写着 “Hello World”的网页。</p>\n<blockquote>\n<p>服务器</p>\n</blockquote>\n<ul>\n<li>服务器就是一台电脑, 只是性能一般比我们普通电脑高!</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p><em>file协议，默认，是不能够发ajax请求的！</em></p>\n<ul>\n<li>服务器就是一台电脑(这个电脑是有独立 <code>ip</code> )</li>\n<li>我们的笔记本也是电脑(也可以把最终的项目代码放到笔记本上! ,但是没有公司愿意这么干)</li>\n<li>操作系统都可能是一样的</li>\n<li>服务器能运行的软件，我们电脑也能运行</li>\n</ul>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><ul>\n<li>我们在 <code>cmd</code> 窗口中敲一个命令, 本质上是执行了一个程序(软件)</li>\n<li>默认按下回车时, 会到当前命令行所对应的目录寻找文件, 如果找到就立即执行</li>\n<li>如果找不到就会到环境变量中的 <code>PATH</code> 中指定的目录中寻找!</li>\n</ul>\n<p>例:我们把 <code>node</code> 的默认安装目录: <code>D:\\Program Files\\nodejs</code>, 配置 <code>PATH</code> 上，那么<br>我们在 <code>cmd</code> 中敲命令时，如果当前目录找不到，就会到 <code>D:\\Program Files\\nodejs</code><br>目录寻找相应的文件执行!</p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><ul>\n<li>系统底层还是命令</li>\n<li>windows系统刚开始的时候还没有界面</li>\n<li>在 <code>cmd</code> 中敲命令,或默认到当前命令行对应的目录中找文件执行</li>\n</ul>"},{"title":"Canvas知识整理part1","date":"2016-11-13T11:39:33.000Z","_content":"\ncanvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.\n\n<!-- more -->\n\n    canvas 英 ['kænvəs]  美 ['kænvəs]   帆布 画布\n\n默认的宽高为：`300 * 150`\n\n## Canvas 使用注意：\n\n* 设置 `canvas` 宽高 `canvas` 只是一个画布，不能直接自己绘图，绘图需要使用工具\n* 设置 `canvas` 宽和高的时候不推荐使用 `css` 样式去设置，因为会有拉伸的效果\n* 在不支持的浏览器中，`canvas` 中的内容会正常的现实出来\n* 再 `canvas` 标签内部书写内容，在支持的浏览器中，该内容会被忽略\n* 在不支持的浏览器中会将 `canvas` 标签会当作 `div` 标签来处理\n\n## canvas 的使用领域\n\n`canvas` 的使用领域很多:\n\n1. 游戏\n2. 可视化数据(重点)\n3. `banner` 广告\n4. 多媒体\n5. 未来\n    * 模拟仿真\n    * 远程操作\n    * 图形编辑\n\n## Canvas 怎么用？\n\n1. 创建一个 `Canvas` 标签\n2. 获取到该 `DOM` 对象\n3.  `Canvas` 只是一个画布，不能自己画画，需要画图工具\n4. 每个 `Canvas` 对应一个画图工具，通过 `canvas` 对象 `.getContext(\"2d\")` 参数有 `2d` 和 `webgl` 两种 `2d` 获取到一个 ` CanvasRenderingContext2D` 类型的对象,使用 `webgl` 返回 `WebGLRenderingContext` 类型的对象.\n\n## 如何画直线\n\n1. 先确定在何处下笔，画图工具 `.moveTo(x, y)`\n2. 确定从开始的点画到哪里去，  画图工具 `.lineTo(x, y)`\n3. 上面两步之后，线并没有画出来，而是描点，需要最后一步进行画线  画图工具 `.stroke();`\n\n```js\nvar canvas = document.createElement( 'canvas' );\ncanvas.width = 500;\ncanvas.height = 400;\ncanvas.style.border = '1px dashed red';\ndocument.body.appendChild( canvas );\n// 获得 CanvasRenderingContext2D 对象\nvar context = canvas.getContext( '2d' );\n// 设置 起点\ncontext.moveTo( 0, 0 );\n// 绘制直线\ncontext.lineTo( 500, 400 );\n// 设置 起点\ncontext.moveTo( 0, 400 );\n// 绘制直线\ncontext.lineTo( 500, 0 );\n// 描边显示效果\ncontext.stroke();\n```\n\n## lineTo的特性\n\n每次 `lineTo` 之后都会记录最后的 `lineTo` 的点，下次 `lineTo` 的时候就接着这个 `canvas` 只是一个画布，不能直接自己绘图，绘图需要使用工具sssss点继续画\n\n\n## closePath\n\n将最后一次 `lineTo` 的点 和最后一次 `moveTo` 的点连起来的\n两条线的交界处，如果使用的是 `closePath` 会补全缺口\n\n```js\nctx.moveTo( 100, 100 );\nctx.lineTo( 300, 100 );\nctx.lineTo( 300, 200 );\nctx.closePath();\nctx.stroke();\n```\n\n## fill\n\n可以将闭合的图形进行填充\n\n## 非零填充原则\n\n从一个闭合空间引出一条直线，如果该直线两边的箭头数量不相等，则要填充，如果相等则不填充\n\n一边有一个箭头就+1\n另一边有一个箭头就-1\n\n## 如何绘制曲线？\n\n使用 `for` 循环给每一个 `x` 对应一个 `y` 值，`x` 和 `y` 的关系需要是个多次幂的方程\n\n## 路径概念\n\n路径就是一次绘图，包含该次绘图中的所有的状态，线宽  颜色  是否虚线\n\n如果想要改变状态，就需要开启新的路径\n\n## beginPath\n\n可以用来开启新的路径\n\n## 线型相关属性\n\n|名称|描述|\n|:--:|:--:|\n|lineWidth|画线的时候的线的宽度|\n|setLineDash()|设置虚线各个线段的长度,参数是一个数组，会将数组中的数字循环使用|\n|getLineDash()|获取虚线各个线段的长度，如果是实线，获取到的是空数组|\n|lineDashOffset|设置虚线的偏移量，正值往左，负值往右|\n|strokeStyle|设置描边的，画线的颜色，颜色值可以为css中任意一种|\n|fillStyle|设置填充颜色，颜色值可以为css中任意一种|\n\n## 渐变色\n\n将线划分为 `256` 份，每一份为一个颜色，新画一条线，依次递增，就形成了一个颜色渐变的线段","source":"_posts/canvas-part1.md","raw":"---\ntitle: Canvas知识整理part1\ndate: 2016-11-13 19:39:33\ntags: \n\t- Canvas\n\t- HTML5\n\t- 画布\ncategories: Canvas\n---\n\ncanvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.\n\n<!-- more -->\n\n    canvas 英 ['kænvəs]  美 ['kænvəs]   帆布 画布\n\n默认的宽高为：`300 * 150`\n\n## Canvas 使用注意：\n\n* 设置 `canvas` 宽高 `canvas` 只是一个画布，不能直接自己绘图，绘图需要使用工具\n* 设置 `canvas` 宽和高的时候不推荐使用 `css` 样式去设置，因为会有拉伸的效果\n* 在不支持的浏览器中，`canvas` 中的内容会正常的现实出来\n* 再 `canvas` 标签内部书写内容，在支持的浏览器中，该内容会被忽略\n* 在不支持的浏览器中会将 `canvas` 标签会当作 `div` 标签来处理\n\n## canvas 的使用领域\n\n`canvas` 的使用领域很多:\n\n1. 游戏\n2. 可视化数据(重点)\n3. `banner` 广告\n4. 多媒体\n5. 未来\n    * 模拟仿真\n    * 远程操作\n    * 图形编辑\n\n## Canvas 怎么用？\n\n1. 创建一个 `Canvas` 标签\n2. 获取到该 `DOM` 对象\n3.  `Canvas` 只是一个画布，不能自己画画，需要画图工具\n4. 每个 `Canvas` 对应一个画图工具，通过 `canvas` 对象 `.getContext(\"2d\")` 参数有 `2d` 和 `webgl` 两种 `2d` 获取到一个 ` CanvasRenderingContext2D` 类型的对象,使用 `webgl` 返回 `WebGLRenderingContext` 类型的对象.\n\n## 如何画直线\n\n1. 先确定在何处下笔，画图工具 `.moveTo(x, y)`\n2. 确定从开始的点画到哪里去，  画图工具 `.lineTo(x, y)`\n3. 上面两步之后，线并没有画出来，而是描点，需要最后一步进行画线  画图工具 `.stroke();`\n\n```js\nvar canvas = document.createElement( 'canvas' );\ncanvas.width = 500;\ncanvas.height = 400;\ncanvas.style.border = '1px dashed red';\ndocument.body.appendChild( canvas );\n// 获得 CanvasRenderingContext2D 对象\nvar context = canvas.getContext( '2d' );\n// 设置 起点\ncontext.moveTo( 0, 0 );\n// 绘制直线\ncontext.lineTo( 500, 400 );\n// 设置 起点\ncontext.moveTo( 0, 400 );\n// 绘制直线\ncontext.lineTo( 500, 0 );\n// 描边显示效果\ncontext.stroke();\n```\n\n## lineTo的特性\n\n每次 `lineTo` 之后都会记录最后的 `lineTo` 的点，下次 `lineTo` 的时候就接着这个 `canvas` 只是一个画布，不能直接自己绘图，绘图需要使用工具sssss点继续画\n\n\n## closePath\n\n将最后一次 `lineTo` 的点 和最后一次 `moveTo` 的点连起来的\n两条线的交界处，如果使用的是 `closePath` 会补全缺口\n\n```js\nctx.moveTo( 100, 100 );\nctx.lineTo( 300, 100 );\nctx.lineTo( 300, 200 );\nctx.closePath();\nctx.stroke();\n```\n\n## fill\n\n可以将闭合的图形进行填充\n\n## 非零填充原则\n\n从一个闭合空间引出一条直线，如果该直线两边的箭头数量不相等，则要填充，如果相等则不填充\n\n一边有一个箭头就+1\n另一边有一个箭头就-1\n\n## 如何绘制曲线？\n\n使用 `for` 循环给每一个 `x` 对应一个 `y` 值，`x` 和 `y` 的关系需要是个多次幂的方程\n\n## 路径概念\n\n路径就是一次绘图，包含该次绘图中的所有的状态，线宽  颜色  是否虚线\n\n如果想要改变状态，就需要开启新的路径\n\n## beginPath\n\n可以用来开启新的路径\n\n## 线型相关属性\n\n|名称|描述|\n|:--:|:--:|\n|lineWidth|画线的时候的线的宽度|\n|setLineDash()|设置虚线各个线段的长度,参数是一个数组，会将数组中的数字循环使用|\n|getLineDash()|获取虚线各个线段的长度，如果是实线，获取到的是空数组|\n|lineDashOffset|设置虚线的偏移量，正值往左，负值往右|\n|strokeStyle|设置描边的，画线的颜色，颜色值可以为css中任意一种|\n|fillStyle|设置填充颜色，颜色值可以为css中任意一种|\n\n## 渐变色\n\n将线划分为 `256` 份，每一份为一个颜色，新画一条线，依次递增，就形成了一个颜色渐变的线段","slug":"canvas-part1","published":1,"updated":"2016-11-24T01:33:33.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvlx0004uwg7zvcnqi1h","content":"<p>canvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.</p>\n<a id=\"more\"></a>\n<pre><code>canvas 英 [&apos;kænvəs]  美 [&apos;kænvəs]   帆布 画布\n</code></pre><p>默认的宽高为：<code>300 * 150</code></p>\n<h2 id=\"Canvas-使用注意：\"><a href=\"#Canvas-使用注意：\" class=\"headerlink\" title=\"Canvas 使用注意：\"></a>Canvas 使用注意：</h2><ul>\n<li>设置 <code>canvas</code> 宽高 <code>canvas</code> 只是一个画布，不能直接自己绘图，绘图需要使用工具</li>\n<li>设置 <code>canvas</code> 宽和高的时候不推荐使用 <code>css</code> 样式去设置，因为会有拉伸的效果</li>\n<li>在不支持的浏览器中，<code>canvas</code> 中的内容会正常的现实出来</li>\n<li>再 <code>canvas</code> 标签内部书写内容，在支持的浏览器中，该内容会被忽略</li>\n<li>在不支持的浏览器中会将 <code>canvas</code> 标签会当作 <code>div</code> 标签来处理</li>\n</ul>\n<h2 id=\"canvas-的使用领域\"><a href=\"#canvas-的使用领域\" class=\"headerlink\" title=\"canvas 的使用领域\"></a>canvas 的使用领域</h2><p><code>canvas</code> 的使用领域很多:</p>\n<ol>\n<li>游戏</li>\n<li>可视化数据(重点)</li>\n<li><code>banner</code> 广告</li>\n<li>多媒体</li>\n<li>未来<ul>\n<li>模拟仿真</li>\n<li>远程操作</li>\n<li>图形编辑</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Canvas-怎么用？\"><a href=\"#Canvas-怎么用？\" class=\"headerlink\" title=\"Canvas 怎么用？\"></a>Canvas 怎么用？</h2><ol>\n<li>创建一个 <code>Canvas</code> 标签</li>\n<li>获取到该 <code>DOM</code> 对象</li>\n<li><code>Canvas</code> 只是一个画布，不能自己画画，需要画图工具</li>\n<li>每个 <code>Canvas</code> 对应一个画图工具，通过 <code>canvas</code> 对象 <code>.getContext(&quot;2d&quot;)</code> 参数有 <code>2d</code> 和 <code>webgl</code> 两种 <code>2d</code> 获取到一个 <code>CanvasRenderingContext2D</code> 类型的对象,使用 <code>webgl</code> 返回 <code>WebGLRenderingContext</code> 类型的对象.</li>\n</ol>\n<h2 id=\"如何画直线\"><a href=\"#如何画直线\" class=\"headerlink\" title=\"如何画直线\"></a>如何画直线</h2><ol>\n<li>先确定在何处下笔，画图工具 <code>.moveTo(x, y)</code></li>\n<li>确定从开始的点画到哪里去，  画图工具 <code>.lineTo(x, y)</code></li>\n<li>上面两步之后，线并没有画出来，而是描点，需要最后一步进行画线  画图工具 <code>.stroke();</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.createElement( <span class=\"string\">'canvas'</span> );</div><div class=\"line\">canvas.width = <span class=\"number\">500</span>;</div><div class=\"line\">canvas.height = <span class=\"number\">400</span>;</div><div class=\"line\">canvas.style.border = <span class=\"string\">'1px dashed red'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild( canvas );</div><div class=\"line\"><span class=\"comment\">// 获得 CanvasRenderingContext2D 对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> context = canvas.getContext( <span class=\"string\">'2d'</span> );</div><div class=\"line\"><span class=\"comment\">// 设置 起点</span></div><div class=\"line\">context.moveTo( <span class=\"number\">0</span>, <span class=\"number\">0</span> );</div><div class=\"line\"><span class=\"comment\">// 绘制直线</span></div><div class=\"line\">context.lineTo( <span class=\"number\">500</span>, <span class=\"number\">400</span> );</div><div class=\"line\"><span class=\"comment\">// 设置 起点</span></div><div class=\"line\">context.moveTo( <span class=\"number\">0</span>, <span class=\"number\">400</span> );</div><div class=\"line\"><span class=\"comment\">// 绘制直线</span></div><div class=\"line\">context.lineTo( <span class=\"number\">500</span>, <span class=\"number\">0</span> );</div><div class=\"line\"><span class=\"comment\">// 描边显示效果</span></div><div class=\"line\">context.stroke();</div></pre></td></tr></table></figure>\n<h2 id=\"lineTo的特性\"><a href=\"#lineTo的特性\" class=\"headerlink\" title=\"lineTo的特性\"></a>lineTo的特性</h2><p>每次 <code>lineTo</code> 之后都会记录最后的 <code>lineTo</code> 的点，下次 <code>lineTo</code> 的时候就接着这个 <code>canvas</code> 只是一个画布，不能直接自己绘图，绘图需要使用工具sssss点继续画</p>\n<h2 id=\"closePath\"><a href=\"#closePath\" class=\"headerlink\" title=\"closePath\"></a>closePath</h2><p>将最后一次 <code>lineTo</code> 的点 和最后一次 <code>moveTo</code> 的点连起来的<br>两条线的交界处，如果使用的是 <code>closePath</code> 会补全缺口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.moveTo( <span class=\"number\">100</span>, <span class=\"number\">100</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">300</span>, <span class=\"number\">100</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">300</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.stroke();</div></pre></td></tr></table></figure>\n<h2 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill\"></a>fill</h2><p>可以将闭合的图形进行填充</p>\n<h2 id=\"非零填充原则\"><a href=\"#非零填充原则\" class=\"headerlink\" title=\"非零填充原则\"></a>非零填充原则</h2><p>从一个闭合空间引出一条直线，如果该直线两边的箭头数量不相等，则要填充，如果相等则不填充</p>\n<p>一边有一个箭头就+1<br>另一边有一个箭头就-1</p>\n<h2 id=\"如何绘制曲线？\"><a href=\"#如何绘制曲线？\" class=\"headerlink\" title=\"如何绘制曲线？\"></a>如何绘制曲线？</h2><p>使用 <code>for</code> 循环给每一个 <code>x</code> 对应一个 <code>y</code> 值，<code>x</code> 和 <code>y</code> 的关系需要是个多次幂的方程</p>\n<h2 id=\"路径概念\"><a href=\"#路径概念\" class=\"headerlink\" title=\"路径概念\"></a>路径概念</h2><p>路径就是一次绘图，包含该次绘图中的所有的状态，线宽  颜色  是否虚线</p>\n<p>如果想要改变状态，就需要开启新的路径</p>\n<h2 id=\"beginPath\"><a href=\"#beginPath\" class=\"headerlink\" title=\"beginPath\"></a>beginPath</h2><p>可以用来开启新的路径</p>\n<h2 id=\"线型相关属性\"><a href=\"#线型相关属性\" class=\"headerlink\" title=\"线型相关属性\"></a>线型相关属性</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">lineWidth</td>\n<td style=\"text-align:center\">画线的时候的线的宽度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setLineDash()</td>\n<td style=\"text-align:center\">设置虚线各个线段的长度,参数是一个数组，会将数组中的数字循环使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getLineDash()</td>\n<td style=\"text-align:center\">获取虚线各个线段的长度，如果是实线，获取到的是空数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lineDashOffset</td>\n<td style=\"text-align:center\">设置虚线的偏移量，正值往左，负值往右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strokeStyle</td>\n<td style=\"text-align:center\">设置描边的，画线的颜色，颜色值可以为css中任意一种</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fillStyle</td>\n<td style=\"text-align:center\">设置填充颜色，颜色值可以为css中任意一种</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"渐变色\"><a href=\"#渐变色\" class=\"headerlink\" title=\"渐变色\"></a>渐变色</h2><p>将线划分为 <code>256</code> 份，每一份为一个颜色，新画一条线，依次递增，就形成了一个颜色渐变的线段</p>\n","excerpt":"<p>canvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.</p>","more":"<pre><code>canvas 英 [&apos;kænvəs]  美 [&apos;kænvəs]   帆布 画布\n</code></pre><p>默认的宽高为：<code>300 * 150</code></p>\n<h2 id=\"Canvas-使用注意：\"><a href=\"#Canvas-使用注意：\" class=\"headerlink\" title=\"Canvas 使用注意：\"></a>Canvas 使用注意：</h2><ul>\n<li>设置 <code>canvas</code> 宽高 <code>canvas</code> 只是一个画布，不能直接自己绘图，绘图需要使用工具</li>\n<li>设置 <code>canvas</code> 宽和高的时候不推荐使用 <code>css</code> 样式去设置，因为会有拉伸的效果</li>\n<li>在不支持的浏览器中，<code>canvas</code> 中的内容会正常的现实出来</li>\n<li>再 <code>canvas</code> 标签内部书写内容，在支持的浏览器中，该内容会被忽略</li>\n<li>在不支持的浏览器中会将 <code>canvas</code> 标签会当作 <code>div</code> 标签来处理</li>\n</ul>\n<h2 id=\"canvas-的使用领域\"><a href=\"#canvas-的使用领域\" class=\"headerlink\" title=\"canvas 的使用领域\"></a>canvas 的使用领域</h2><p><code>canvas</code> 的使用领域很多:</p>\n<ol>\n<li>游戏</li>\n<li>可视化数据(重点)</li>\n<li><code>banner</code> 广告</li>\n<li>多媒体</li>\n<li>未来<ul>\n<li>模拟仿真</li>\n<li>远程操作</li>\n<li>图形编辑</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Canvas-怎么用？\"><a href=\"#Canvas-怎么用？\" class=\"headerlink\" title=\"Canvas 怎么用？\"></a>Canvas 怎么用？</h2><ol>\n<li>创建一个 <code>Canvas</code> 标签</li>\n<li>获取到该 <code>DOM</code> 对象</li>\n<li><code>Canvas</code> 只是一个画布，不能自己画画，需要画图工具</li>\n<li>每个 <code>Canvas</code> 对应一个画图工具，通过 <code>canvas</code> 对象 <code>.getContext(&quot;2d&quot;)</code> 参数有 <code>2d</code> 和 <code>webgl</code> 两种 <code>2d</code> 获取到一个 <code>CanvasRenderingContext2D</code> 类型的对象,使用 <code>webgl</code> 返回 <code>WebGLRenderingContext</code> 类型的对象.</li>\n</ol>\n<h2 id=\"如何画直线\"><a href=\"#如何画直线\" class=\"headerlink\" title=\"如何画直线\"></a>如何画直线</h2><ol>\n<li>先确定在何处下笔，画图工具 <code>.moveTo(x, y)</code></li>\n<li>确定从开始的点画到哪里去，  画图工具 <code>.lineTo(x, y)</code></li>\n<li>上面两步之后，线并没有画出来，而是描点，需要最后一步进行画线  画图工具 <code>.stroke();</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.createElement( <span class=\"string\">'canvas'</span> );</div><div class=\"line\">canvas.width = <span class=\"number\">500</span>;</div><div class=\"line\">canvas.height = <span class=\"number\">400</span>;</div><div class=\"line\">canvas.style.border = <span class=\"string\">'1px dashed red'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild( canvas );</div><div class=\"line\"><span class=\"comment\">// 获得 CanvasRenderingContext2D 对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> context = canvas.getContext( <span class=\"string\">'2d'</span> );</div><div class=\"line\"><span class=\"comment\">// 设置 起点</span></div><div class=\"line\">context.moveTo( <span class=\"number\">0</span>, <span class=\"number\">0</span> );</div><div class=\"line\"><span class=\"comment\">// 绘制直线</span></div><div class=\"line\">context.lineTo( <span class=\"number\">500</span>, <span class=\"number\">400</span> );</div><div class=\"line\"><span class=\"comment\">// 设置 起点</span></div><div class=\"line\">context.moveTo( <span class=\"number\">0</span>, <span class=\"number\">400</span> );</div><div class=\"line\"><span class=\"comment\">// 绘制直线</span></div><div class=\"line\">context.lineTo( <span class=\"number\">500</span>, <span class=\"number\">0</span> );</div><div class=\"line\"><span class=\"comment\">// 描边显示效果</span></div><div class=\"line\">context.stroke();</div></pre></td></tr></table></figure>\n<h2 id=\"lineTo的特性\"><a href=\"#lineTo的特性\" class=\"headerlink\" title=\"lineTo的特性\"></a>lineTo的特性</h2><p>每次 <code>lineTo</code> 之后都会记录最后的 <code>lineTo</code> 的点，下次 <code>lineTo</code> 的时候就接着这个 <code>canvas</code> 只是一个画布，不能直接自己绘图，绘图需要使用工具sssss点继续画</p>\n<h2 id=\"closePath\"><a href=\"#closePath\" class=\"headerlink\" title=\"closePath\"></a>closePath</h2><p>将最后一次 <code>lineTo</code> 的点 和最后一次 <code>moveTo</code> 的点连起来的<br>两条线的交界处，如果使用的是 <code>closePath</code> 会补全缺口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.moveTo( <span class=\"number\">100</span>, <span class=\"number\">100</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">300</span>, <span class=\"number\">100</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">300</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.stroke();</div></pre></td></tr></table></figure>\n<h2 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill\"></a>fill</h2><p>可以将闭合的图形进行填充</p>\n<h2 id=\"非零填充原则\"><a href=\"#非零填充原则\" class=\"headerlink\" title=\"非零填充原则\"></a>非零填充原则</h2><p>从一个闭合空间引出一条直线，如果该直线两边的箭头数量不相等，则要填充，如果相等则不填充</p>\n<p>一边有一个箭头就+1<br>另一边有一个箭头就-1</p>\n<h2 id=\"如何绘制曲线？\"><a href=\"#如何绘制曲线？\" class=\"headerlink\" title=\"如何绘制曲线？\"></a>如何绘制曲线？</h2><p>使用 <code>for</code> 循环给每一个 <code>x</code> 对应一个 <code>y</code> 值，<code>x</code> 和 <code>y</code> 的关系需要是个多次幂的方程</p>\n<h2 id=\"路径概念\"><a href=\"#路径概念\" class=\"headerlink\" title=\"路径概念\"></a>路径概念</h2><p>路径就是一次绘图，包含该次绘图中的所有的状态，线宽  颜色  是否虚线</p>\n<p>如果想要改变状态，就需要开启新的路径</p>\n<h2 id=\"beginPath\"><a href=\"#beginPath\" class=\"headerlink\" title=\"beginPath\"></a>beginPath</h2><p>可以用来开启新的路径</p>\n<h2 id=\"线型相关属性\"><a href=\"#线型相关属性\" class=\"headerlink\" title=\"线型相关属性\"></a>线型相关属性</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">lineWidth</td>\n<td style=\"text-align:center\">画线的时候的线的宽度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setLineDash()</td>\n<td style=\"text-align:center\">设置虚线各个线段的长度,参数是一个数组，会将数组中的数字循环使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getLineDash()</td>\n<td style=\"text-align:center\">获取虚线各个线段的长度，如果是实线，获取到的是空数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lineDashOffset</td>\n<td style=\"text-align:center\">设置虚线的偏移量，正值往左，负值往右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strokeStyle</td>\n<td style=\"text-align:center\">设置描边的，画线的颜色，颜色值可以为css中任意一种</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fillStyle</td>\n<td style=\"text-align:center\">设置填充颜色，颜色值可以为css中任意一种</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"渐变色\"><a href=\"#渐变色\" class=\"headerlink\" title=\"渐变色\"></a>渐变色</h2><p>将线划分为 <code>256</code> 份，每一份为一个颜色，新画一条线，依次递增，就形成了一个颜色渐变的线段</p>"},{"title":"adb(Android Debug Bridge，Android调试桥)常用命令","date":"2016-12-18T08:18:21.000Z","_content":"\n说到 `ADB` 大家应该都不陌生，即 `Android Debug Bridge，Android` 调试桥，身为 `Android` 开发的我们，熟练使用 `ADB` 命令将会大大提升我们的开发效率， `ADB` 的命令有很多，今天就来整理下我在开发常用到的一些 ADB 命令。\n\n<!-- more -->\n\nADB 的安装这里就不多说了，输入以下命令有如下提示就证明你环境ok，否则自行网上搜索解决下。\n\n\n## 基本用法\n\n- `adb version` -- 查看版本\n\n```sh\n$ adb version\n\nAndroid Debug Bridge version 1.0.36\nRevision 8f855a3d9b35-android\n```\n\n- `adb [-d|-e|-s <serialNumber>] <command>` -- adb 命令的基本语法\n如果有多个设备/模拟器连接，则需要为命令指定目标设备。\n\n| 参数                  | 含义                                                   |\n| :-------------------: | :----------------------------------------------------: |\n| -d                    | 指定当前唯一通过 USB 连接的 Android 设备为命令目标     |\n| -e                    | 指定当前唯一运行的模拟器为命令目标                     |\n| -s <serialNumber>     | 指定相应 serialNumber 号的设备/模拟器为命令目标        |\n\n在多个设备/模拟器连接的情况下较常用的是 -s <serialNumber> 参数，serialNumber 可以通过 adb devices 命令获取。如：\n\n```sh\n$ adb devices\n\nList of devices attached\ncf264b8f    device\nemulator-5554   device\n\n#输出里的cf264b8f 和 emulator-5554 即为 serialNumber。比如这时想指定 cf264b8f 这个设备来运行 adb 命令获取屏幕分辨率：\n\nadb -s cf264b8f shell wm size\n```\n\n遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。\n\n- `adb start-server/adb kill-server`-- 启动/停止 Server\n\n一般来说，这两个命令基本不会用到，因为只要设备连接正确，会自动启动 `adb server` 的，不过大家也需要知道这俩命令。\n\n- `adb -P <port> start-server` -- 指定 adb server 的网络端口\n\n## 设备连接\n\n- `adb devices` -- 查看连接设备\n\n```sh\neg:\nadb devices\n\n#通过USB:\nList of devices attached\n02ae0c1021089daf       device\n\n#通过IP:(会有一个端口号,一般都是5555)\nList of devices attached\n192.168.123.104:5555    device\n```\n\n- `adb connect <device-ip-address>` -- 通过 IP 地址连接设备\n\n```sh\neg:\nadb connect 192.168.123.104\n#会提示:\nconnected to 192.168.123.104:5555\n```\n\n- `adb disconnect <device-ip-address>` -- 断开无线连接\n\n## 应用管理\n\n- `adb install [-l\\-r\\-s\\-d] <path_to_apk>` -- 安装应用\n\n| 参数     | 含义                               |\n| :------: | :--------------------------------: |\n| -l       | 将应用安装到保护目录 /mnt/asec     |\n| -r       | 允许覆盖安装允许覆盖安装           |\n| -s       | 将应用安装到 sdcard                |\n| -d       | 允许降级覆盖安装                   |\n\n```sh\neg:\n    adb install\n    adb install /Users/storm/temp/demo.apk\n    adb install -r demo.apk\n    adb install -s demo.apk\n\n#安装成功\n[100%] /data/local/tmp/1.apk\n    pkg: /data/local/tmp/1.apk\nSuccess\n\n#安装失败\n[100%] /data/local/tmp/map-20160831.apk\n        pkg: /data/local/tmp/map-20160831.apk\nFailure [INSTALL_FAILED_ALREADY_EXISTS]\n\n#adb install 内部原理简介\n\n#adb install 实际是分三步完成：\n\n#push apk 文件到 /data/local/tmp。\n\n#调用 pm install 安装。\n\n#删除 /data/local/tmp 下的对应 apk 文件。\n\n#所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。\n```\n\n- `adb uninstall [-k] <packagename>` -- 卸载应用\n\n<packagename> 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录。\n\n```sh\neg：\nadb uninstall com.qihoo360.mobilesafe\n#表示卸载 360 手机卫士。\n```\n\n- `adb shell pm clear <packagename>` -- 清除应用数据与缓存\n\n<packagename> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。\n\n```sh\neg:\nadb shell pm clear com.qihoo360.mobilesafe\n#表示清除 360 手机卫士的数据和缓存。\n```\n\n- `adb shell pm list packages [-f/-d/-e/-s/-3/-i/-u] [FILTER]` -- 查看应用列表\n\n| 参数         | 显示列表                     |\n| :----------: | :--------------------------: |\n| 无           | 所有应用                     |\n| -f           | 显示应用关联的 apk 文件      |\n| -d           | 只显示 disabled 的应用       |\n| -e           | 只显示 enabled 的应用        |\n| -s           | 只显示系统应用               |\n| -3           | 只显示第三方应用             |\n| [FILTER>]   | 包名包含 <FILTER> 字符串     |\n\n```sh\neg:\n    #系统应用\n    adb shell pm list packages -s\n\n    #第三方应用\n    adb shell pm list packages -3\n\n    #包名包含某字符串的应用\n    adb shell pm list packages mazhuang\n\n    #当然也可以使用 grep 来过滤：\n    adb shell pm list packages | grep mazhuang\n```\n\n- `adb shell am force-stop <packagename>` -- 强制停止应用\n\n```sh\neg:\nadb shell am force-stop com.qihoo360.mobilesafe\n#表示停止 360 安全卫士的一切进程与服务。\n```\n\n## 文件管理\n\n- `adb pull <设备里的文件路径> [电脑上的目录]` -- 复制设备里的文件到电脑\n其中 `电脑上的目录` 参数可以省略，默认复制到当前目录。\n- `adb push <电脑上的文件路径> <设备里的目录>` -- 复制电脑里的文件到设备\n\n## 模拟按键/输入\n\n- `adb shell input keyevent <keycode>` -- 模拟按键/输入\n\n| keycode     | 含义                               |\n| :---------: | :--------------------------------: |\n| 3           | HOME键                             |\n| 4           | 返回键                             |\n| 5           | 打开拨号应用                       |\n| 6           | 挂断电话                           |\n| 24          | 增加音量                           |\n| 25          | 降低音量                           |\n| 26          | 电源键                             |\n| 27          | 拍照（需要在相机应用里）           |\n| 64          | 打开浏览器                         |\n| 82          | 菜单键                             |\n| 85          | 播放/暂停                          |\n| 86          | 停止播放                           |\n| 87          | 播放下一首                         |\n| 88          | 播放上一首                         |\n| 122         | 移动光标到行首或列表顶部           |\n| 123         | 移动光标到行末或列表底部           |\n| 126         | 恢复播放                           |\n| 127         | 暂停播放                           |\n| 164         | 静音                               |\n| 176         | 打开系统设置                       |\n| 187         | 切换应用                           |\n| 207         | 打开联系人                         |\n| 208         | 打开日历                           |\n| 209         | 打开音乐                           |\n| 210         | 打开计算器                         |\n| 220         | 降低屏幕亮度                       |\n| 221         | 提高屏幕亮度                       |\n| 223         | 系统休眠                           |\n| 224         | 点亮屏幕                           |\n| 231         | 打开语音助手                       |\n| 276         | 如果没有 wakelock 则让系统休眠     |\n\n\n```sh\neg:\n#电源键\nadb shell input keyevent 26\n\n#菜单键\nadb shell input keyevent 82\n\n#HOME 键\nadb shell input keyevent 3\n\n#返回键\nadb shell input keyevent 4\n\n#音量加/减/静音\nadb shell input keyevent 24/25/164\n\n#滑动解锁(参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标)\nadb shell input swipe 300 1000 300 500\n\n#在焦点处于某文本框时，可以通过 input 命令来输入文本\nadb shell input text hello\n```\n","source":"_posts/adb-Android-Debug-Bridge.md","raw":"---\ntitle: adb(Android Debug Bridge，Android调试桥)常用命令\ndate: 2016-12-18 16:18:21\ntags:\n    - adb\n    - Android\n    - adb命令\ncategories: Android\n---\n\n说到 `ADB` 大家应该都不陌生，即 `Android Debug Bridge，Android` 调试桥，身为 `Android` 开发的我们，熟练使用 `ADB` 命令将会大大提升我们的开发效率， `ADB` 的命令有很多，今天就来整理下我在开发常用到的一些 ADB 命令。\n\n<!-- more -->\n\nADB 的安装这里就不多说了，输入以下命令有如下提示就证明你环境ok，否则自行网上搜索解决下。\n\n\n## 基本用法\n\n- `adb version` -- 查看版本\n\n```sh\n$ adb version\n\nAndroid Debug Bridge version 1.0.36\nRevision 8f855a3d9b35-android\n```\n\n- `adb [-d|-e|-s <serialNumber>] <command>` -- adb 命令的基本语法\n如果有多个设备/模拟器连接，则需要为命令指定目标设备。\n\n| 参数                  | 含义                                                   |\n| :-------------------: | :----------------------------------------------------: |\n| -d                    | 指定当前唯一通过 USB 连接的 Android 设备为命令目标     |\n| -e                    | 指定当前唯一运行的模拟器为命令目标                     |\n| -s <serialNumber>     | 指定相应 serialNumber 号的设备/模拟器为命令目标        |\n\n在多个设备/模拟器连接的情况下较常用的是 -s <serialNumber> 参数，serialNumber 可以通过 adb devices 命令获取。如：\n\n```sh\n$ adb devices\n\nList of devices attached\ncf264b8f    device\nemulator-5554   device\n\n#输出里的cf264b8f 和 emulator-5554 即为 serialNumber。比如这时想指定 cf264b8f 这个设备来运行 adb 命令获取屏幕分辨率：\n\nadb -s cf264b8f shell wm size\n```\n\n遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。\n\n- `adb start-server/adb kill-server`-- 启动/停止 Server\n\n一般来说，这两个命令基本不会用到，因为只要设备连接正确，会自动启动 `adb server` 的，不过大家也需要知道这俩命令。\n\n- `adb -P <port> start-server` -- 指定 adb server 的网络端口\n\n## 设备连接\n\n- `adb devices` -- 查看连接设备\n\n```sh\neg:\nadb devices\n\n#通过USB:\nList of devices attached\n02ae0c1021089daf       device\n\n#通过IP:(会有一个端口号,一般都是5555)\nList of devices attached\n192.168.123.104:5555    device\n```\n\n- `adb connect <device-ip-address>` -- 通过 IP 地址连接设备\n\n```sh\neg:\nadb connect 192.168.123.104\n#会提示:\nconnected to 192.168.123.104:5555\n```\n\n- `adb disconnect <device-ip-address>` -- 断开无线连接\n\n## 应用管理\n\n- `adb install [-l\\-r\\-s\\-d] <path_to_apk>` -- 安装应用\n\n| 参数     | 含义                               |\n| :------: | :--------------------------------: |\n| -l       | 将应用安装到保护目录 /mnt/asec     |\n| -r       | 允许覆盖安装允许覆盖安装           |\n| -s       | 将应用安装到 sdcard                |\n| -d       | 允许降级覆盖安装                   |\n\n```sh\neg:\n    adb install\n    adb install /Users/storm/temp/demo.apk\n    adb install -r demo.apk\n    adb install -s demo.apk\n\n#安装成功\n[100%] /data/local/tmp/1.apk\n    pkg: /data/local/tmp/1.apk\nSuccess\n\n#安装失败\n[100%] /data/local/tmp/map-20160831.apk\n        pkg: /data/local/tmp/map-20160831.apk\nFailure [INSTALL_FAILED_ALREADY_EXISTS]\n\n#adb install 内部原理简介\n\n#adb install 实际是分三步完成：\n\n#push apk 文件到 /data/local/tmp。\n\n#调用 pm install 安装。\n\n#删除 /data/local/tmp 下的对应 apk 文件。\n\n#所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。\n```\n\n- `adb uninstall [-k] <packagename>` -- 卸载应用\n\n<packagename> 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录。\n\n```sh\neg：\nadb uninstall com.qihoo360.mobilesafe\n#表示卸载 360 手机卫士。\n```\n\n- `adb shell pm clear <packagename>` -- 清除应用数据与缓存\n\n<packagename> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。\n\n```sh\neg:\nadb shell pm clear com.qihoo360.mobilesafe\n#表示清除 360 手机卫士的数据和缓存。\n```\n\n- `adb shell pm list packages [-f/-d/-e/-s/-3/-i/-u] [FILTER]` -- 查看应用列表\n\n| 参数         | 显示列表                     |\n| :----------: | :--------------------------: |\n| 无           | 所有应用                     |\n| -f           | 显示应用关联的 apk 文件      |\n| -d           | 只显示 disabled 的应用       |\n| -e           | 只显示 enabled 的应用        |\n| -s           | 只显示系统应用               |\n| -3           | 只显示第三方应用             |\n| [FILTER>]   | 包名包含 <FILTER> 字符串     |\n\n```sh\neg:\n    #系统应用\n    adb shell pm list packages -s\n\n    #第三方应用\n    adb shell pm list packages -3\n\n    #包名包含某字符串的应用\n    adb shell pm list packages mazhuang\n\n    #当然也可以使用 grep 来过滤：\n    adb shell pm list packages | grep mazhuang\n```\n\n- `adb shell am force-stop <packagename>` -- 强制停止应用\n\n```sh\neg:\nadb shell am force-stop com.qihoo360.mobilesafe\n#表示停止 360 安全卫士的一切进程与服务。\n```\n\n## 文件管理\n\n- `adb pull <设备里的文件路径> [电脑上的目录]` -- 复制设备里的文件到电脑\n其中 `电脑上的目录` 参数可以省略，默认复制到当前目录。\n- `adb push <电脑上的文件路径> <设备里的目录>` -- 复制电脑里的文件到设备\n\n## 模拟按键/输入\n\n- `adb shell input keyevent <keycode>` -- 模拟按键/输入\n\n| keycode     | 含义                               |\n| :---------: | :--------------------------------: |\n| 3           | HOME键                             |\n| 4           | 返回键                             |\n| 5           | 打开拨号应用                       |\n| 6           | 挂断电话                           |\n| 24          | 增加音量                           |\n| 25          | 降低音量                           |\n| 26          | 电源键                             |\n| 27          | 拍照（需要在相机应用里）           |\n| 64          | 打开浏览器                         |\n| 82          | 菜单键                             |\n| 85          | 播放/暂停                          |\n| 86          | 停止播放                           |\n| 87          | 播放下一首                         |\n| 88          | 播放上一首                         |\n| 122         | 移动光标到行首或列表顶部           |\n| 123         | 移动光标到行末或列表底部           |\n| 126         | 恢复播放                           |\n| 127         | 暂停播放                           |\n| 164         | 静音                               |\n| 176         | 打开系统设置                       |\n| 187         | 切换应用                           |\n| 207         | 打开联系人                         |\n| 208         | 打开日历                           |\n| 209         | 打开音乐                           |\n| 210         | 打开计算器                         |\n| 220         | 降低屏幕亮度                       |\n| 221         | 提高屏幕亮度                       |\n| 223         | 系统休眠                           |\n| 224         | 点亮屏幕                           |\n| 231         | 打开语音助手                       |\n| 276         | 如果没有 wakelock 则让系统休眠     |\n\n\n```sh\neg:\n#电源键\nadb shell input keyevent 26\n\n#菜单键\nadb shell input keyevent 82\n\n#HOME 键\nadb shell input keyevent 3\n\n#返回键\nadb shell input keyevent 4\n\n#音量加/减/静音\nadb shell input keyevent 24/25/164\n\n#滑动解锁(参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标)\nadb shell input swipe 300 1000 300 500\n\n#在焦点处于某文本框时，可以通过 input 命令来输入文本\nadb shell input text hello\n```\n","slug":"adb-Android-Debug-Bridge","published":1,"updated":"2017-01-11T11:02:07.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvm00005uwg7fc8gbe33","content":"<p>说到 <code>ADB</code> 大家应该都不陌生，即 <code>Android Debug Bridge，Android</code> 调试桥，身为 <code>Android</code> 开发的我们，熟练使用 <code>ADB</code> 命令将会大大提升我们的开发效率， <code>ADB</code> 的命令有很多，今天就来整理下我在开发常用到的一些 ADB 命令。</p>\n<a id=\"more\"></a>\n<p>ADB 的安装这里就不多说了，输入以下命令有如下提示就证明你环境ok，否则自行网上搜索解决下。</p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><ul>\n<li><code>adb version</code> – 查看版本</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ adb version</div><div class=\"line\"></div><div class=\"line\">Android Debug Bridge version 1.0.36</div><div class=\"line\">Revision 8f855a3d9b35-android</div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb [-d|-e|-s &lt;serialNumber&gt;] &lt;command&gt;</code> – adb 命令的基本语法<br>如果有多个设备/模拟器连接，则需要为命令指定目标设备。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">指定当前唯一通过 USB 连接的 Android 设备为命令目标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-e</td>\n<td style=\"text-align:center\">指定当前唯一运行的模拟器为命令目标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-s <serialnumber></serialnumber></td>\n<td style=\"text-align:center\">指定相应 serialNumber 号的设备/模拟器为命令目标</td>\n</tr>\n</tbody>\n</table>\n<p>在多个设备/模拟器连接的情况下较常用的是 -s <serialnumber> 参数，serialNumber 可以通过 adb devices 命令获取。如：</serialnumber></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ adb devices</div><div class=\"line\"></div><div class=\"line\">List of devices attached</div><div class=\"line\">cf264b8f    device</div><div class=\"line\">emulator-5554   device</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#输出里的cf264b8f 和 emulator-5554 即为 serialNumber。比如这时想指定 cf264b8f 这个设备来运行 adb 命令获取屏幕分辨率：</span></div><div class=\"line\"></div><div class=\"line\">adb <span class=\"_\">-s</span> cf264b8f shell wm size</div></pre></td></tr></table></figure>\n<p>遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。</p>\n<ul>\n<li><code>adb start-server/adb kill-server</code>– 启动/停止 Server</li>\n</ul>\n<p>一般来说，这两个命令基本不会用到，因为只要设备连接正确，会自动启动 <code>adb server</code> 的，不过大家也需要知道这俩命令。</p>\n<ul>\n<li><code>adb -P &lt;port&gt; start-server</code> – 指定 adb server 的网络端口</li>\n</ul>\n<h2 id=\"设备连接\"><a href=\"#设备连接\" class=\"headerlink\" title=\"设备连接\"></a>设备连接</h2><ul>\n<li><code>adb devices</code> – 查看连接设备</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\">adb devices</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#通过USB:</span></div><div class=\"line\">List of devices attached</div><div class=\"line\">02ae0c1021089daf       device</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#通过IP:(会有一个端口号,一般都是5555)</span></div><div class=\"line\">List of devices attached</div><div class=\"line\">192.168.123.104:5555    device</div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb connect &lt;device-ip-address&gt;</code> – 通过 IP 地址连接设备</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\">adb connect 192.168.123.104</div><div class=\"line\"><span class=\"comment\">#会提示:</span></div><div class=\"line\">connected to 192.168.123.104:5555</div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb disconnect &lt;device-ip-address&gt;</code> – 断开无线连接</li>\n</ul>\n<h2 id=\"应用管理\"><a href=\"#应用管理\" class=\"headerlink\" title=\"应用管理\"></a>应用管理</h2><ul>\n<li><code>adb install [-l\\-r\\-s\\-d] &lt;path_to_apk&gt;</code> – 安装应用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-l</td>\n<td style=\"text-align:center\">将应用安装到保护目录 /mnt/asec</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-r</td>\n<td style=\"text-align:center\">允许覆盖安装允许覆盖安装</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-s</td>\n<td style=\"text-align:center\">将应用安装到 sdcard</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">允许降级覆盖安装</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\">    adb install</div><div class=\"line\">    adb install /Users/storm/temp/demo.apk</div><div class=\"line\">    adb install -r demo.apk</div><div class=\"line\">    adb install <span class=\"_\">-s</span> demo.apk</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#安装成功</span></div><div class=\"line\">[100%] /data/<span class=\"built_in\">local</span>/tmp/1.apk</div><div class=\"line\">    pkg: /data/<span class=\"built_in\">local</span>/tmp/1.apk</div><div class=\"line\">Success</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#安装失败</span></div><div class=\"line\">[100%] /data/<span class=\"built_in\">local</span>/tmp/map-20160831.apk</div><div class=\"line\">        pkg: /data/<span class=\"built_in\">local</span>/tmp/map-20160831.apk</div><div class=\"line\">Failure [INSTALL_FAILED_ALREADY_EXISTS]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#adb install 内部原理简介</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#adb install 实际是分三步完成：</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#push apk 文件到 /data/local/tmp。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#调用 pm install 安装。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#删除 /data/local/tmp 下的对应 apk 文件。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb uninstall [-k] &lt;packagename&gt;</code> – 卸载应用</li>\n</ul>\n<p><packagename> 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录。</packagename></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg：</div><div class=\"line\">adb uninstall com.qihoo360.mobilesafe</div><div class=\"line\"><span class=\"comment\">#表示卸载 360 手机卫士。</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb shell pm clear &lt;packagename&gt;</code> – 清除应用数据与缓存</li>\n</ul>\n<p><packagename> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。</packagename></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\">adb shell pm clear com.qihoo360.mobilesafe</div><div class=\"line\"><span class=\"comment\">#表示清除 360 手机卫士的数据和缓存。</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb shell pm list packages [-f/-d/-e/-s/-3/-i/-u] [FILTER]</code> – 查看应用列表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">显示列表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">所有应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-f</td>\n<td style=\"text-align:center\">显示应用关联的 apk 文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">只显示 disabled 的应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-e</td>\n<td style=\"text-align:center\">只显示 enabled 的应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-s</td>\n<td style=\"text-align:center\">只显示系统应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-3</td>\n<td style=\"text-align:center\">只显示第三方应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[FILTER&gt;]</td>\n<td style=\"text-align:center\">包名包含 <filter> 字符串</filter></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\">    <span class=\"comment\">#系统应用</span></div><div class=\"line\">    adb shell pm list packages <span class=\"_\">-s</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#第三方应用</span></div><div class=\"line\">    adb shell pm list packages -3</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#包名包含某字符串的应用</span></div><div class=\"line\">    adb shell pm list packages mazhuang</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#当然也可以使用 grep 来过滤：</span></div><div class=\"line\">    adb shell pm list packages | grep mazhuang</div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb shell am force-stop &lt;packagename&gt;</code> – 强制停止应用</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\">adb shell am force-stop com.qihoo360.mobilesafe</div><div class=\"line\"><span class=\"comment\">#表示停止 360 安全卫士的一切进程与服务。</span></div></pre></td></tr></table></figure>\n<h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><ul>\n<li><code>adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</code> – 复制设备里的文件到电脑<br>其中 <code>电脑上的目录</code> 参数可以省略，默认复制到当前目录。</li>\n<li><code>adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</code> – 复制电脑里的文件到设备</li>\n</ul>\n<h2 id=\"模拟按键-输入\"><a href=\"#模拟按键-输入\" class=\"headerlink\" title=\"模拟按键/输入\"></a>模拟按键/输入</h2><ul>\n<li><code>adb shell input keyevent &lt;keycode&gt;</code> – 模拟按键/输入</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">keycode</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">HOME键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">返回键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">打开拨号应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">挂断电话</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td style=\"text-align:center\">增加音量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td style=\"text-align:center\">降低音量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td style=\"text-align:center\">电源键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td style=\"text-align:center\">拍照（需要在相机应用里）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">打开浏览器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">82</td>\n<td style=\"text-align:center\">菜单键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">85</td>\n<td style=\"text-align:center\">播放/暂停</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">86</td>\n<td style=\"text-align:center\">停止播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">87</td>\n<td style=\"text-align:center\">播放下一首</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">88</td>\n<td style=\"text-align:center\">播放上一首</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">122</td>\n<td style=\"text-align:center\">移动光标到行首或列表顶部</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">123</td>\n<td style=\"text-align:center\">移动光标到行末或列表底部</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">126</td>\n<td style=\"text-align:center\">恢复播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">127</td>\n<td style=\"text-align:center\">暂停播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">164</td>\n<td style=\"text-align:center\">静音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">176</td>\n<td style=\"text-align:center\">打开系统设置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">187</td>\n<td style=\"text-align:center\">切换应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">207</td>\n<td style=\"text-align:center\">打开联系人</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">208</td>\n<td style=\"text-align:center\">打开日历</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">209</td>\n<td style=\"text-align:center\">打开音乐</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">210</td>\n<td style=\"text-align:center\">打开计算器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">220</td>\n<td style=\"text-align:center\">降低屏幕亮度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">221</td>\n<td style=\"text-align:center\">提高屏幕亮度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">223</td>\n<td style=\"text-align:center\">系统休眠</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">224</td>\n<td style=\"text-align:center\">点亮屏幕</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">231</td>\n<td style=\"text-align:center\">打开语音助手</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">276</td>\n<td style=\"text-align:center\">如果没有 wakelock 则让系统休眠</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\"><span class=\"comment\">#电源键</span></div><div class=\"line\">adb shell input keyevent 26</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#菜单键</span></div><div class=\"line\">adb shell input keyevent 82</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#HOME 键</span></div><div class=\"line\">adb shell input keyevent 3</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#返回键</span></div><div class=\"line\">adb shell input keyevent 4</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#音量加/减/静音</span></div><div class=\"line\">adb shell input keyevent 24/25/164</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#滑动解锁(参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标)</span></div><div class=\"line\">adb shell input swipe 300 1000 300 500</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#在焦点处于某文本框时，可以通过 input 命令来输入文本</span></div><div class=\"line\">adb shell input text hello</div></pre></td></tr></table></figure>\n","excerpt":"<p>说到 <code>ADB</code> 大家应该都不陌生，即 <code>Android Debug Bridge，Android</code> 调试桥，身为 <code>Android</code> 开发的我们，熟练使用 <code>ADB</code> 命令将会大大提升我们的开发效率， <code>ADB</code> 的命令有很多，今天就来整理下我在开发常用到的一些 ADB 命令。</p>","more":"<p>ADB 的安装这里就不多说了，输入以下命令有如下提示就证明你环境ok，否则自行网上搜索解决下。</p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><ul>\n<li><code>adb version</code> – 查看版本</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ adb version</div><div class=\"line\"></div><div class=\"line\">Android Debug Bridge version 1.0.36</div><div class=\"line\">Revision 8f855a3d9b35-android</div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb [-d|-e|-s &lt;serialNumber&gt;] &lt;command&gt;</code> – adb 命令的基本语法<br>如果有多个设备/模拟器连接，则需要为命令指定目标设备。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">指定当前唯一通过 USB 连接的 Android 设备为命令目标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-e</td>\n<td style=\"text-align:center\">指定当前唯一运行的模拟器为命令目标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-s <serialNumber></td>\n<td style=\"text-align:center\">指定相应 serialNumber 号的设备/模拟器为命令目标</td>\n</tr>\n</tbody>\n</table>\n<p>在多个设备/模拟器连接的情况下较常用的是 -s <serialNumber> 参数，serialNumber 可以通过 adb devices 命令获取。如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ adb devices</div><div class=\"line\"></div><div class=\"line\">List of devices attached</div><div class=\"line\">cf264b8f    device</div><div class=\"line\">emulator-5554   device</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#输出里的cf264b8f 和 emulator-5554 即为 serialNumber。比如这时想指定 cf264b8f 这个设备来运行 adb 命令获取屏幕分辨率：</span></div><div class=\"line\"></div><div class=\"line\">adb <span class=\"_\">-s</span> cf264b8f shell wm size</div></pre></td></tr></table></figure>\n<p>遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。</p>\n<ul>\n<li><code>adb start-server/adb kill-server</code>– 启动/停止 Server</li>\n</ul>\n<p>一般来说，这两个命令基本不会用到，因为只要设备连接正确，会自动启动 <code>adb server</code> 的，不过大家也需要知道这俩命令。</p>\n<ul>\n<li><code>adb -P &lt;port&gt; start-server</code> – 指定 adb server 的网络端口</li>\n</ul>\n<h2 id=\"设备连接\"><a href=\"#设备连接\" class=\"headerlink\" title=\"设备连接\"></a>设备连接</h2><ul>\n<li><code>adb devices</code> – 查看连接设备</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\">adb devices</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#通过USB:</span></div><div class=\"line\">List of devices attached</div><div class=\"line\">02ae0c1021089daf       device</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#通过IP:(会有一个端口号,一般都是5555)</span></div><div class=\"line\">List of devices attached</div><div class=\"line\">192.168.123.104:5555    device</div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb connect &lt;device-ip-address&gt;</code> – 通过 IP 地址连接设备</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\">adb connect 192.168.123.104</div><div class=\"line\"><span class=\"comment\">#会提示:</span></div><div class=\"line\">connected to 192.168.123.104:5555</div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb disconnect &lt;device-ip-address&gt;</code> – 断开无线连接</li>\n</ul>\n<h2 id=\"应用管理\"><a href=\"#应用管理\" class=\"headerlink\" title=\"应用管理\"></a>应用管理</h2><ul>\n<li><code>adb install [-l\\-r\\-s\\-d] &lt;path_to_apk&gt;</code> – 安装应用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-l</td>\n<td style=\"text-align:center\">将应用安装到保护目录 /mnt/asec</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-r</td>\n<td style=\"text-align:center\">允许覆盖安装允许覆盖安装</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-s</td>\n<td style=\"text-align:center\">将应用安装到 sdcard</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">允许降级覆盖安装</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\">    adb install</div><div class=\"line\">    adb install /Users/storm/temp/demo.apk</div><div class=\"line\">    adb install -r demo.apk</div><div class=\"line\">    adb install <span class=\"_\">-s</span> demo.apk</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#安装成功</span></div><div class=\"line\">[100%] /data/<span class=\"built_in\">local</span>/tmp/1.apk</div><div class=\"line\">    pkg: /data/<span class=\"built_in\">local</span>/tmp/1.apk</div><div class=\"line\">Success</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#安装失败</span></div><div class=\"line\">[100%] /data/<span class=\"built_in\">local</span>/tmp/map-20160831.apk</div><div class=\"line\">        pkg: /data/<span class=\"built_in\">local</span>/tmp/map-20160831.apk</div><div class=\"line\">Failure [INSTALL_FAILED_ALREADY_EXISTS]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#adb install 内部原理简介</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#adb install 实际是分三步完成：</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#push apk 文件到 /data/local/tmp。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#调用 pm install 安装。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#删除 /data/local/tmp 下的对应 apk 文件。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb uninstall [-k] &lt;packagename&gt;</code> – 卸载应用</li>\n</ul>\n<p><packagename> 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg：</div><div class=\"line\">adb uninstall com.qihoo360.mobilesafe</div><div class=\"line\"><span class=\"comment\">#表示卸载 360 手机卫士。</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb shell pm clear &lt;packagename&gt;</code> – 清除应用数据与缓存</li>\n</ul>\n<p><packagename> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\">adb shell pm clear com.qihoo360.mobilesafe</div><div class=\"line\"><span class=\"comment\">#表示清除 360 手机卫士的数据和缓存。</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb shell pm list packages [-f/-d/-e/-s/-3/-i/-u] [FILTER]</code> – 查看应用列表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">显示列表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">所有应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-f</td>\n<td style=\"text-align:center\">显示应用关联的 apk 文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">只显示 disabled 的应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-e</td>\n<td style=\"text-align:center\">只显示 enabled 的应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-s</td>\n<td style=\"text-align:center\">只显示系统应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-3</td>\n<td style=\"text-align:center\">只显示第三方应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[FILTER&gt;]</td>\n<td style=\"text-align:center\">包名包含 <FILTER> 字符串</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\">    <span class=\"comment\">#系统应用</span></div><div class=\"line\">    adb shell pm list packages <span class=\"_\">-s</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#第三方应用</span></div><div class=\"line\">    adb shell pm list packages -3</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#包名包含某字符串的应用</span></div><div class=\"line\">    adb shell pm list packages mazhuang</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#当然也可以使用 grep 来过滤：</span></div><div class=\"line\">    adb shell pm list packages | grep mazhuang</div></pre></td></tr></table></figure>\n<ul>\n<li><code>adb shell am force-stop &lt;packagename&gt;</code> – 强制停止应用</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\">adb shell am force-stop com.qihoo360.mobilesafe</div><div class=\"line\"><span class=\"comment\">#表示停止 360 安全卫士的一切进程与服务。</span></div></pre></td></tr></table></figure>\n<h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><ul>\n<li><code>adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</code> – 复制设备里的文件到电脑<br>其中 <code>电脑上的目录</code> 参数可以省略，默认复制到当前目录。</li>\n<li><code>adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</code> – 复制电脑里的文件到设备</li>\n</ul>\n<h2 id=\"模拟按键-输入\"><a href=\"#模拟按键-输入\" class=\"headerlink\" title=\"模拟按键/输入\"></a>模拟按键/输入</h2><ul>\n<li><code>adb shell input keyevent &lt;keycode&gt;</code> – 模拟按键/输入</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">keycode</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">HOME键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">返回键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">打开拨号应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">挂断电话</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td style=\"text-align:center\">增加音量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td style=\"text-align:center\">降低音量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td style=\"text-align:center\">电源键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td style=\"text-align:center\">拍照（需要在相机应用里）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">打开浏览器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">82</td>\n<td style=\"text-align:center\">菜单键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">85</td>\n<td style=\"text-align:center\">播放/暂停</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">86</td>\n<td style=\"text-align:center\">停止播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">87</td>\n<td style=\"text-align:center\">播放下一首</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">88</td>\n<td style=\"text-align:center\">播放上一首</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">122</td>\n<td style=\"text-align:center\">移动光标到行首或列表顶部</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">123</td>\n<td style=\"text-align:center\">移动光标到行末或列表底部</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">126</td>\n<td style=\"text-align:center\">恢复播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">127</td>\n<td style=\"text-align:center\">暂停播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">164</td>\n<td style=\"text-align:center\">静音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">176</td>\n<td style=\"text-align:center\">打开系统设置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">187</td>\n<td style=\"text-align:center\">切换应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">207</td>\n<td style=\"text-align:center\">打开联系人</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">208</td>\n<td style=\"text-align:center\">打开日历</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">209</td>\n<td style=\"text-align:center\">打开音乐</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">210</td>\n<td style=\"text-align:center\">打开计算器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">220</td>\n<td style=\"text-align:center\">降低屏幕亮度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">221</td>\n<td style=\"text-align:center\">提高屏幕亮度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">223</td>\n<td style=\"text-align:center\">系统休眠</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">224</td>\n<td style=\"text-align:center\">点亮屏幕</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">231</td>\n<td style=\"text-align:center\">打开语音助手</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">276</td>\n<td style=\"text-align:center\">如果没有 wakelock 则让系统休眠</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\"><span class=\"comment\">#电源键</span></div><div class=\"line\">adb shell input keyevent 26</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#菜单键</span></div><div class=\"line\">adb shell input keyevent 82</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#HOME 键</span></div><div class=\"line\">adb shell input keyevent 3</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#返回键</span></div><div class=\"line\">adb shell input keyevent 4</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#音量加/减/静音</span></div><div class=\"line\">adb shell input keyevent 24/25/164</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#滑动解锁(参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标)</span></div><div class=\"line\">adb shell input swipe 300 1000 300 500</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#在焦点处于某文本框时，可以通过 input 命令来输入文本</span></div><div class=\"line\">adb shell input text hello</div></pre></td></tr></table></figure>"},{"title":"Canvas知识整理part2","date":"2016-11-14T11:42:44.000Z","_content":"Html5Canvas笔记整理，接part1篇！！\n\n绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法!\n1. 绘制矩形\n2. 绘制圆弧\n3. 绘制文本\n4. 绘制图片\n5. 绘制动画\n\n<!-- more -->\n\n## 绘制矩形\n\n1. strokeRect();\n\n```js\nstrokeRect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, `y`坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：绘制一个矩形路径，并描边\n- 用来绘制一个矩形. 比起直接使用 `moveTo` 和 `lineTo` 方法要简单许多.\n- 该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.\n- 使用该方法不需要使用 `moveTo` 方法设置起始点, 也不需要调用 `stroke` 等绘画方法.\n- 绘制的矩形支持 `strokeStyle` 设置颜色样式.\n\n```js\nctx.strokeStyle = 'red';\nctx.strokeRect( 100, 100, 200, 100 );\n```\n\n2. fillRect();\n\n```js\nfillRect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, `y`坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：绘制一个矩形路径，并填充\n- 用来绘制一个矩形. 比起直接使用 `moveTo` 和 `lineTo` 方法要简单许多.\n- 该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.\n- 使用该方法不需要使用 `moveTo` 方法设置起始点, 也不需要调用 `stroke` 等绘画方法.\n- 绘制的矩形支持 `fillStyle` 设置颜色样式.\n\n```js\nctx.fillStyle = 'green';\nctx.fillRect( 100, 100, 200, 100 );\n```\n\n3. rect();\n\n```js\nrect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, y坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：绘制一个矩形路径，不描边\n\n4. clearRect();\n\n```js\nclearRect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, `y`坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：清除指定的矩形区域\n- 用于清除画布中的矩形区域的内容.\n- 参数 `x`, `y` 表示矩形区域左上角的坐标,`width` 与 `height` 表示矩形区域的宽高.\n\n```js\nctx.fillRect( 100, 100, 200, 100 );\nctx.clearRect( 110, 110, 50, 50 );\n```\n\n* save restore\n\tsave 保存当前的路径状态\n\trestore 恢复上一次保存的路径状态( `restore` 是与之对应的,先 `save` 的,后被 `restore` )\n\t\n```js\nvar x = 10, y = 10, oldx = 10, oldy = 10;\nvar width = 100, height = 50;     \nvar intervalId = setInterval(function () {\n\tctx.clearRect( oldx - 1, oldy - 1, width + 2, height + 2 );\n\n\tctx.strokeRect( x, y, width, height );\n\n\toldx = x;\n\toldy = y;\n\n\tx += 4;\n\ty += 2;\n\n\tif ( oldy >= 200 ) {\n\t\t// clearInterval( intervalId );\n\t\tx = 10, y = 10;\n\t}\n}, 20);\n```\n\n## 绘制圆弧\n\n```js\narc(x, y, r, startAngle, endAngle, anticlockwise)\n```\n\n* `x,y` 圆心坐标\n* `r `  圆的半径\n* `startAngle` 起始角度（弧度表示）\n* `endAngle` 结束角度（弧度表示）\n* `anticlockwise` 是否逆时针绘制，注意找角的时候还是顺时针找\n\n注意事项，每次画完弧之后，都会保存点，下次绘图会从该点开始\n\n```js\n// 在 200, 200 的地方绘制一段半径为 100 的圆弧, 圆心角为 - PI / 2 到 PI / 4\n...\nctx.arc( 200, 200, 100, -Math.PI/2, Math.PI/4 );\nctx.stroke();\n\n// 为了方便看清楚结构, 绘制坐标轴\nctx.beginPath();\nctx.strokeStyle = 'red';\nctx.moveTo( 50, 200 );\nctx.lineTo( 350, 200 );\n\nctx.moveTo( 200, 50 );\nctx.lineTo( 200, 350 );\n\nctx.moveTo( 200, 200 );\nctx.lineTo( 300, 300 );\n\nctx.stroke();\n```\n\n## 绘制扇形\n\n先 `moveTo` 圆心，然后画弧 ，然后 `closePath` 弧就有了\n\n```js\nctx.strokeStyle = 'red';\nctx.fillStyle = 'pink';\n\nctx.moveTo( 100, 200 );\nctx.arc( 100, 200, 100, -Math.PI/3, Math.PI/3 );\nctx.closePath();\nctx.stroke();\n\nctx.beginPath();\nctx.moveTo( 300, 200 );\nctx.arc( 300, 200, 100, -Math.PI/3, Math.PI/3 );\nctx.closePath();\nctx.fill();\n```\n\n## 绘制扇形动画\n\n绘制扇形动画, 就是每隔几毫秒( 20 毫秒)擦除以前绘制的内容, 然后在以前绘制的基础上比以前多绘制一点东西. 这里多绘制的内容就是由角度决定. 比如一开始角度从 `-Math.PI / 2` 开始绘制. 那么每次角度都 `+0.1` , 直到 绘制到 `Math.PI * 3 / 2 `为止.\n\n```js\nctx.fillStyle = 'green';\nvar startAngle = -Math.PI / 2,\n\tangle = startAngle,\n\tx = 200, y = 200,\n\tr = 100;\nvar intervalId = setInterval(function () {\n\t// 清除之前绘制的内容\n\tctx.clearRect( 0, 0, cas.width, cas.height );\n\t// 角度增量\n\tangle += 0.1;\n\t// 判断是否停止计时器\n\tif ( angle >= Math.PI * 3 / 2 ) {\n\t\tclearInterval( intervalId);\n\t\tangle = Math.PI * 3 / 2; \n\t\tconsole.log( '绘制完成' );\n\t}\n\t// 绘制\n\tctx.moveTo( x, y );\n\tctx.arc( x, y, r, startAngle, angle );\n\tctx.fill();\n}, 20);\n```\n\n## 绘制饼形图\n\n\t等分的饼图,饼图的起始位置在\t`-90°` .\n绘制饼形图最大的特点是角度是叠加的. 开始从 `-Math.PI/2` 开始绘制, 达到执行角 `x` 后, 下一个区域从 `x` 开始绘制, 然后有到一个角 `y` 停下来. 如此反复到 `Math.PI * 3 / 2` 结束.\n\n```js\nvar x = 200, y = 200,\n\tr = 100,\n\tstep = Math.PI * 2 / 3,     // 120 度一个区域\n\tstart = -Math.PI / 2,       // 起始角度\n\tcolors = [ 'red', 'green', 'blue' ];\n\nfor ( var i = 0; i < 3; i++ ) {\n\tctx.beginPath();\n\tctx.moveTo( x, y );\n\tctx.fillStyle = colors[ i ];\n\tctx.arc( x, y, r, start, start+=step );\n\tctx.fill();\n}\n```","source":"_posts/canvas-part2.md","raw":"---\ntitle: Canvas知识整理part2\ndate: 2016-11-14 19:42:44\ntags: \n\t- Canvas\n\t- HTML5\n\t- 画布\ncategories: Canvas\n---\nHtml5Canvas笔记整理，接part1篇！！\n\n绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法!\n1. 绘制矩形\n2. 绘制圆弧\n3. 绘制文本\n4. 绘制图片\n5. 绘制动画\n\n<!-- more -->\n\n## 绘制矩形\n\n1. strokeRect();\n\n```js\nstrokeRect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, `y`坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：绘制一个矩形路径，并描边\n- 用来绘制一个矩形. 比起直接使用 `moveTo` 和 `lineTo` 方法要简单许多.\n- 该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.\n- 使用该方法不需要使用 `moveTo` 方法设置起始点, 也不需要调用 `stroke` 等绘画方法.\n- 绘制的矩形支持 `strokeStyle` 设置颜色样式.\n\n```js\nctx.strokeStyle = 'red';\nctx.strokeRect( 100, 100, 200, 100 );\n```\n\n2. fillRect();\n\n```js\nfillRect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, `y`坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：绘制一个矩形路径，并填充\n- 用来绘制一个矩形. 比起直接使用 `moveTo` 和 `lineTo` 方法要简单许多.\n- 该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.\n- 使用该方法不需要使用 `moveTo` 方法设置起始点, 也不需要调用 `stroke` 等绘画方法.\n- 绘制的矩形支持 `fillStyle` 设置颜色样式.\n\n```js\nctx.fillStyle = 'green';\nctx.fillRect( 100, 100, 200, 100 );\n```\n\n3. rect();\n\n```js\nrect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, y坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：绘制一个矩形路径，不描边\n\n4. clearRect();\n\n```js\nclearRect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, `y`坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：清除指定的矩形区域\n- 用于清除画布中的矩形区域的内容.\n- 参数 `x`, `y` 表示矩形区域左上角的坐标,`width` 与 `height` 表示矩形区域的宽高.\n\n```js\nctx.fillRect( 100, 100, 200, 100 );\nctx.clearRect( 110, 110, 50, 50 );\n```\n\n* save restore\n\tsave 保存当前的路径状态\n\trestore 恢复上一次保存的路径状态( `restore` 是与之对应的,先 `save` 的,后被 `restore` )\n\t\n```js\nvar x = 10, y = 10, oldx = 10, oldy = 10;\nvar width = 100, height = 50;     \nvar intervalId = setInterval(function () {\n\tctx.clearRect( oldx - 1, oldy - 1, width + 2, height + 2 );\n\n\tctx.strokeRect( x, y, width, height );\n\n\toldx = x;\n\toldy = y;\n\n\tx += 4;\n\ty += 2;\n\n\tif ( oldy >= 200 ) {\n\t\t// clearInterval( intervalId );\n\t\tx = 10, y = 10;\n\t}\n}, 20);\n```\n\n## 绘制圆弧\n\n```js\narc(x, y, r, startAngle, endAngle, anticlockwise)\n```\n\n* `x,y` 圆心坐标\n* `r `  圆的半径\n* `startAngle` 起始角度（弧度表示）\n* `endAngle` 结束角度（弧度表示）\n* `anticlockwise` 是否逆时针绘制，注意找角的时候还是顺时针找\n\n注意事项，每次画完弧之后，都会保存点，下次绘图会从该点开始\n\n```js\n// 在 200, 200 的地方绘制一段半径为 100 的圆弧, 圆心角为 - PI / 2 到 PI / 4\n...\nctx.arc( 200, 200, 100, -Math.PI/2, Math.PI/4 );\nctx.stroke();\n\n// 为了方便看清楚结构, 绘制坐标轴\nctx.beginPath();\nctx.strokeStyle = 'red';\nctx.moveTo( 50, 200 );\nctx.lineTo( 350, 200 );\n\nctx.moveTo( 200, 50 );\nctx.lineTo( 200, 350 );\n\nctx.moveTo( 200, 200 );\nctx.lineTo( 300, 300 );\n\nctx.stroke();\n```\n\n## 绘制扇形\n\n先 `moveTo` 圆心，然后画弧 ，然后 `closePath` 弧就有了\n\n```js\nctx.strokeStyle = 'red';\nctx.fillStyle = 'pink';\n\nctx.moveTo( 100, 200 );\nctx.arc( 100, 200, 100, -Math.PI/3, Math.PI/3 );\nctx.closePath();\nctx.stroke();\n\nctx.beginPath();\nctx.moveTo( 300, 200 );\nctx.arc( 300, 200, 100, -Math.PI/3, Math.PI/3 );\nctx.closePath();\nctx.fill();\n```\n\n## 绘制扇形动画\n\n绘制扇形动画, 就是每隔几毫秒( 20 毫秒)擦除以前绘制的内容, 然后在以前绘制的基础上比以前多绘制一点东西. 这里多绘制的内容就是由角度决定. 比如一开始角度从 `-Math.PI / 2` 开始绘制. 那么每次角度都 `+0.1` , 直到 绘制到 `Math.PI * 3 / 2 `为止.\n\n```js\nctx.fillStyle = 'green';\nvar startAngle = -Math.PI / 2,\n\tangle = startAngle,\n\tx = 200, y = 200,\n\tr = 100;\nvar intervalId = setInterval(function () {\n\t// 清除之前绘制的内容\n\tctx.clearRect( 0, 0, cas.width, cas.height );\n\t// 角度增量\n\tangle += 0.1;\n\t// 判断是否停止计时器\n\tif ( angle >= Math.PI * 3 / 2 ) {\n\t\tclearInterval( intervalId);\n\t\tangle = Math.PI * 3 / 2; \n\t\tconsole.log( '绘制完成' );\n\t}\n\t// 绘制\n\tctx.moveTo( x, y );\n\tctx.arc( x, y, r, startAngle, angle );\n\tctx.fill();\n}, 20);\n```\n\n## 绘制饼形图\n\n\t等分的饼图,饼图的起始位置在\t`-90°` .\n绘制饼形图最大的特点是角度是叠加的. 开始从 `-Math.PI/2` 开始绘制, 达到执行角 `x` 后, 下一个区域从 `x` 开始绘制, 然后有到一个角 `y` 停下来. 如此反复到 `Math.PI * 3 / 2` 结束.\n\n```js\nvar x = 200, y = 200,\n\tr = 100,\n\tstep = Math.PI * 2 / 3,     // 120 度一个区域\n\tstart = -Math.PI / 2,       // 起始角度\n\tcolors = [ 'red', 'green', 'blue' ];\n\nfor ( var i = 0; i < 3; i++ ) {\n\tctx.beginPath();\n\tctx.moveTo( x, y );\n\tctx.fillStyle = colors[ i ];\n\tctx.arc( x, y, r, start, start+=step );\n\tctx.fill();\n}\n```","slug":"canvas-part2","published":1,"updated":"2016-11-24T01:34:33.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvm30006uwg79c3jbqcr","content":"<p>Html5Canvas笔记整理，接part1篇！！</p>\n<p>绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法!</p>\n<ol>\n<li>绘制矩形</li>\n<li>绘制圆弧</li>\n<li>绘制文本</li>\n<li>绘制图片</li>\n<li>绘制动画</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h2><ol>\n<li>strokeRect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">strokeRect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，并描边</p>\n<ul>\n<li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li>\n<li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li>\n<li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li>\n<li>绘制的矩形支持 <code>strokeStyle</code> 设置颜色样式.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.strokeRect( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span> );</div></pre></td></tr></table></figure>\n<ol>\n<li>fillRect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillRect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，并填充</p>\n<ul>\n<li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li>\n<li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li>\n<li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li>\n<li>绘制的矩形支持 <code>fillStyle</code> 设置颜色样式.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">'green'</span>;</div><div class=\"line\">ctx.fillRect( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span> );</div></pre></td></tr></table></figure>\n<ol>\n<li>rect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, y坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，不描边</p>\n<ol>\n<li>clearRect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clearRect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：清除指定的矩形区域</p>\n<ul>\n<li>用于清除画布中的矩形区域的内容.</li>\n<li>参数 <code>x</code>, <code>y</code> 表示矩形区域左上角的坐标,<code>width</code> 与 <code>height</code> 表示矩形区域的宽高.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillRect( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span> );</div><div class=\"line\">ctx.clearRect( <span class=\"number\">110</span>, <span class=\"number\">110</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span> );</div></pre></td></tr></table></figure>\n<ul>\n<li>save restore<br>  save 保存当前的路径状态<br>  restore 恢复上一次保存的路径状态( <code>restore</code> 是与之对应的,先 <code>save</code> 的,后被 <code>restore</code> )</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>, y = <span class=\"number\">10</span>, oldx = <span class=\"number\">10</span>, oldy = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">100</span>, height = <span class=\"number\">50</span>;     </div><div class=\"line\"><span class=\"keyword\">var</span> intervalId = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tctx.clearRect( oldx - <span class=\"number\">1</span>, oldy - <span class=\"number\">1</span>, width + <span class=\"number\">2</span>, height + <span class=\"number\">2</span> );</div><div class=\"line\"></div><div class=\"line\">\tctx.strokeRect( x, y, width, height );</div><div class=\"line\"></div><div class=\"line\">\toldx = x;</div><div class=\"line\">\toldy = y;</div><div class=\"line\"></div><div class=\"line\">\tx += <span class=\"number\">4</span>;</div><div class=\"line\">\ty += <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ( oldy &gt;= <span class=\"number\">200</span> ) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// clearInterval( intervalId );</span></div><div class=\"line\">\t\tx = <span class=\"number\">10</span>, y = <span class=\"number\">10</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;, <span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"绘制圆弧\"><a href=\"#绘制圆弧\" class=\"headerlink\" title=\"绘制圆弧\"></a>绘制圆弧</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arc(x, y, r, startAngle, endAngle, anticlockwise)</div></pre></td></tr></table></figure>\n<ul>\n<li><code>x,y</code> 圆心坐标</li>\n<li><code>r</code>  圆的半径</li>\n<li><code>startAngle</code> 起始角度（弧度表示）</li>\n<li><code>endAngle</code> 结束角度（弧度表示）</li>\n<li><code>anticlockwise</code> 是否逆时针绘制，注意找角的时候还是顺时针找</li>\n</ul>\n<p>注意事项，每次画完弧之后，都会保存点，下次绘图会从该点开始</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在 200, 200 的地方绘制一段半径为 100 的圆弧, 圆心角为 - PI / 2 到 PI / 4</span></div><div class=\"line\">...</div><div class=\"line\">ctx.arc( <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">2</span>, <span class=\"built_in\">Math</span>.PI/<span class=\"number\">4</span> );</div><div class=\"line\">ctx.stroke();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为了方便看清楚结构, 绘制坐标轴</span></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.moveTo( <span class=\"number\">50</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">350</span>, <span class=\"number\">200</span> );</div><div class=\"line\"></div><div class=\"line\">ctx.moveTo( <span class=\"number\">200</span>, <span class=\"number\">50</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">200</span>, <span class=\"number\">350</span> );</div><div class=\"line\"></div><div class=\"line\">ctx.moveTo( <span class=\"number\">200</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">300</span>, <span class=\"number\">300</span> );</div><div class=\"line\"></div><div class=\"line\">ctx.stroke();</div></pre></td></tr></table></figure>\n<h2 id=\"绘制扇形\"><a href=\"#绘制扇形\" class=\"headerlink\" title=\"绘制扇形\"></a>绘制扇形</h2><p>先 <code>moveTo</code> 圆心，然后画弧 ，然后 <code>closePath</code> 弧就有了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'pink'</span>;</div><div class=\"line\"></div><div class=\"line\">ctx.moveTo( <span class=\"number\">100</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.arc( <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span>, <span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span> );</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.stroke();</div><div class=\"line\"></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.moveTo( <span class=\"number\">300</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.arc( <span class=\"number\">300</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span>, <span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span> );</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n<h2 id=\"绘制扇形动画\"><a href=\"#绘制扇形动画\" class=\"headerlink\" title=\"绘制扇形动画\"></a>绘制扇形动画</h2><p>绘制扇形动画, 就是每隔几毫秒( 20 毫秒)擦除以前绘制的内容, 然后在以前绘制的基础上比以前多绘制一点东西. 这里多绘制的内容就是由角度决定. 比如一开始角度从 <code>-Math.PI / 2</code> 开始绘制. 那么每次角度都 <code>+0.1</code> , 直到 绘制到 <code>Math.PI * 3 / 2</code>为止.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">'green'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> startAngle = -<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>,</div><div class=\"line\">\tangle = startAngle,</div><div class=\"line\">\tx = <span class=\"number\">200</span>, y = <span class=\"number\">200</span>,</div><div class=\"line\">\tr = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> intervalId = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 清除之前绘制的内容</span></div><div class=\"line\">\tctx.clearRect( <span class=\"number\">0</span>, <span class=\"number\">0</span>, cas.width, cas.height );</div><div class=\"line\">\t<span class=\"comment\">// 角度增量</span></div><div class=\"line\">\tangle += <span class=\"number\">0.1</span>;</div><div class=\"line\">\t<span class=\"comment\">// 判断是否停止计时器</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ( angle &gt;= <span class=\"built_in\">Math</span>.PI * <span class=\"number\">3</span> / <span class=\"number\">2</span> ) &#123;</div><div class=\"line\">\t\tclearInterval( intervalId);</div><div class=\"line\">\t\tangle = <span class=\"built_in\">Math</span>.PI * <span class=\"number\">3</span> / <span class=\"number\">2</span>; </div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log( <span class=\"string\">'绘制完成'</span> );</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 绘制</span></div><div class=\"line\">\tctx.moveTo( x, y );</div><div class=\"line\">\tctx.arc( x, y, r, startAngle, angle );</div><div class=\"line\">\tctx.fill();</div><div class=\"line\">&#125;, <span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"绘制饼形图\"><a href=\"#绘制饼形图\" class=\"headerlink\" title=\"绘制饼形图\"></a>绘制饼形图</h2><pre><code>等分的饼图,饼图的起始位置在    `-90°` .\n</code></pre><p>绘制饼形图最大的特点是角度是叠加的. 开始从 <code>-Math.PI/2</code> 开始绘制, 达到执行角 <code>x</code> 后, 下一个区域从 <code>x</code> 开始绘制, 然后有到一个角 <code>y</code> 停下来. 如此反复到 <code>Math.PI * 3 / 2</code> 结束.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">200</span>, y = <span class=\"number\">200</span>,</div><div class=\"line\">\tr = <span class=\"number\">100</span>,</div><div class=\"line\">\tstep = <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span> / <span class=\"number\">3</span>,     <span class=\"comment\">// 120 度一个区域</span></div><div class=\"line\">\tstart = -<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>,       <span class=\"comment\">// 起始角度</span></div><div class=\"line\">\tcolors = [ <span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span> ];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</div><div class=\"line\">\tctx.beginPath();</div><div class=\"line\">\tctx.moveTo( x, y );</div><div class=\"line\">\tctx.fillStyle = colors[ i ];</div><div class=\"line\">\tctx.arc( x, y, r, start, start+=step );</div><div class=\"line\">\tctx.fill();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>Html5Canvas笔记整理，接part1篇！！</p>\n<p>绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法!</p>\n<ol>\n<li>绘制矩形</li>\n<li>绘制圆弧</li>\n<li>绘制文本</li>\n<li>绘制图片</li>\n<li>绘制动画</li>\n</ol>","more":"<h2 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h2><ol>\n<li>strokeRect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">strokeRect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，并描边</p>\n<ul>\n<li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li>\n<li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li>\n<li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li>\n<li>绘制的矩形支持 <code>strokeStyle</code> 设置颜色样式.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.strokeRect( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span> );</div></pre></td></tr></table></figure>\n<ol>\n<li>fillRect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillRect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，并填充</p>\n<ul>\n<li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li>\n<li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li>\n<li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li>\n<li>绘制的矩形支持 <code>fillStyle</code> 设置颜色样式.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">'green'</span>;</div><div class=\"line\">ctx.fillRect( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span> );</div></pre></td></tr></table></figure>\n<ol>\n<li>rect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, y坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，不描边</p>\n<ol>\n<li>clearRect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clearRect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：清除指定的矩形区域</p>\n<ul>\n<li>用于清除画布中的矩形区域的内容.</li>\n<li>参数 <code>x</code>, <code>y</code> 表示矩形区域左上角的坐标,<code>width</code> 与 <code>height</code> 表示矩形区域的宽高.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillRect( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span> );</div><div class=\"line\">ctx.clearRect( <span class=\"number\">110</span>, <span class=\"number\">110</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span> );</div></pre></td></tr></table></figure>\n<ul>\n<li>save restore<br>  save 保存当前的路径状态<br>  restore 恢复上一次保存的路径状态( <code>restore</code> 是与之对应的,先 <code>save</code> 的,后被 <code>restore</code> )</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>, y = <span class=\"number\">10</span>, oldx = <span class=\"number\">10</span>, oldy = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">100</span>, height = <span class=\"number\">50</span>;     </div><div class=\"line\"><span class=\"keyword\">var</span> intervalId = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tctx.clearRect( oldx - <span class=\"number\">1</span>, oldy - <span class=\"number\">1</span>, width + <span class=\"number\">2</span>, height + <span class=\"number\">2</span> );</div><div class=\"line\"></div><div class=\"line\">\tctx.strokeRect( x, y, width, height );</div><div class=\"line\"></div><div class=\"line\">\toldx = x;</div><div class=\"line\">\toldy = y;</div><div class=\"line\"></div><div class=\"line\">\tx += <span class=\"number\">4</span>;</div><div class=\"line\">\ty += <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ( oldy &gt;= <span class=\"number\">200</span> ) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// clearInterval( intervalId );</span></div><div class=\"line\">\t\tx = <span class=\"number\">10</span>, y = <span class=\"number\">10</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;, <span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"绘制圆弧\"><a href=\"#绘制圆弧\" class=\"headerlink\" title=\"绘制圆弧\"></a>绘制圆弧</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arc(x, y, r, startAngle, endAngle, anticlockwise)</div></pre></td></tr></table></figure>\n<ul>\n<li><code>x,y</code> 圆心坐标</li>\n<li><code>r</code>  圆的半径</li>\n<li><code>startAngle</code> 起始角度（弧度表示）</li>\n<li><code>endAngle</code> 结束角度（弧度表示）</li>\n<li><code>anticlockwise</code> 是否逆时针绘制，注意找角的时候还是顺时针找</li>\n</ul>\n<p>注意事项，每次画完弧之后，都会保存点，下次绘图会从该点开始</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在 200, 200 的地方绘制一段半径为 100 的圆弧, 圆心角为 - PI / 2 到 PI / 4</span></div><div class=\"line\">...</div><div class=\"line\">ctx.arc( <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">2</span>, <span class=\"built_in\">Math</span>.PI/<span class=\"number\">4</span> );</div><div class=\"line\">ctx.stroke();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为了方便看清楚结构, 绘制坐标轴</span></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.moveTo( <span class=\"number\">50</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">350</span>, <span class=\"number\">200</span> );</div><div class=\"line\"></div><div class=\"line\">ctx.moveTo( <span class=\"number\">200</span>, <span class=\"number\">50</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">200</span>, <span class=\"number\">350</span> );</div><div class=\"line\"></div><div class=\"line\">ctx.moveTo( <span class=\"number\">200</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">300</span>, <span class=\"number\">300</span> );</div><div class=\"line\"></div><div class=\"line\">ctx.stroke();</div></pre></td></tr></table></figure>\n<h2 id=\"绘制扇形\"><a href=\"#绘制扇形\" class=\"headerlink\" title=\"绘制扇形\"></a>绘制扇形</h2><p>先 <code>moveTo</code> 圆心，然后画弧 ，然后 <code>closePath</code> 弧就有了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'pink'</span>;</div><div class=\"line\"></div><div class=\"line\">ctx.moveTo( <span class=\"number\">100</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.arc( <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span>, <span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span> );</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.stroke();</div><div class=\"line\"></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.moveTo( <span class=\"number\">300</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.arc( <span class=\"number\">300</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span>, <span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span> );</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n<h2 id=\"绘制扇形动画\"><a href=\"#绘制扇形动画\" class=\"headerlink\" title=\"绘制扇形动画\"></a>绘制扇形动画</h2><p>绘制扇形动画, 就是每隔几毫秒( 20 毫秒)擦除以前绘制的内容, 然后在以前绘制的基础上比以前多绘制一点东西. 这里多绘制的内容就是由角度决定. 比如一开始角度从 <code>-Math.PI / 2</code> 开始绘制. 那么每次角度都 <code>+0.1</code> , 直到 绘制到 <code>Math.PI * 3 / 2</code>为止.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">'green'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> startAngle = -<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>,</div><div class=\"line\">\tangle = startAngle,</div><div class=\"line\">\tx = <span class=\"number\">200</span>, y = <span class=\"number\">200</span>,</div><div class=\"line\">\tr = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> intervalId = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 清除之前绘制的内容</span></div><div class=\"line\">\tctx.clearRect( <span class=\"number\">0</span>, <span class=\"number\">0</span>, cas.width, cas.height );</div><div class=\"line\">\t<span class=\"comment\">// 角度增量</span></div><div class=\"line\">\tangle += <span class=\"number\">0.1</span>;</div><div class=\"line\">\t<span class=\"comment\">// 判断是否停止计时器</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ( angle &gt;= <span class=\"built_in\">Math</span>.PI * <span class=\"number\">3</span> / <span class=\"number\">2</span> ) &#123;</div><div class=\"line\">\t\tclearInterval( intervalId);</div><div class=\"line\">\t\tangle = <span class=\"built_in\">Math</span>.PI * <span class=\"number\">3</span> / <span class=\"number\">2</span>; </div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log( <span class=\"string\">'绘制完成'</span> );</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 绘制</span></div><div class=\"line\">\tctx.moveTo( x, y );</div><div class=\"line\">\tctx.arc( x, y, r, startAngle, angle );</div><div class=\"line\">\tctx.fill();</div><div class=\"line\">&#125;, <span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"绘制饼形图\"><a href=\"#绘制饼形图\" class=\"headerlink\" title=\"绘制饼形图\"></a>绘制饼形图</h2><pre><code>等分的饼图,饼图的起始位置在    `-90°` .\n</code></pre><p>绘制饼形图最大的特点是角度是叠加的. 开始从 <code>-Math.PI/2</code> 开始绘制, 达到执行角 <code>x</code> 后, 下一个区域从 <code>x</code> 开始绘制, 然后有到一个角 <code>y</code> 停下来. 如此反复到 <code>Math.PI * 3 / 2</code> 结束.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">200</span>, y = <span class=\"number\">200</span>,</div><div class=\"line\">\tr = <span class=\"number\">100</span>,</div><div class=\"line\">\tstep = <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span> / <span class=\"number\">3</span>,     <span class=\"comment\">// 120 度一个区域</span></div><div class=\"line\">\tstart = -<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>,       <span class=\"comment\">// 起始角度</span></div><div class=\"line\">\tcolors = [ <span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span> ];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</div><div class=\"line\">\tctx.beginPath();</div><div class=\"line\">\tctx.moveTo( x, y );</div><div class=\"line\">\tctx.fillStyle = colors[ i ];</div><div class=\"line\">\tctx.arc( x, y, r, start, start+=step );</div><div class=\"line\">\tctx.fill();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"adb设备信息查询修改刷机等命令","date":"2016-12-22T10:51:53.000Z","_content":"\nADB很强大，记住一些ADB命令有助于提高工作效率。\n通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等\n\n<!-- more -->\n\n## 查看设备信息\n\n- `adb logcat` -- 查看日志\n- `adb shell dumpsys battery` -- 电池状况\n其中 scale 代表最大电量，level 代表当前电量。上面的输出表示还剩下 44% 的电量\n- `adb reboot` -- 重启\n- `adb get-serialno` -- 获取序列号\n- `adb shell  cat /sys/class/net/wlan0/address` -- MAC 地址\n- `adb shell getprop ro.product.model` -- 型号\n- `adb shell getprop ro.build.version.release` -- 查看 Android 系统版本\n- `adb shell wm size` -- 查看屏幕分辨率\n- `adb shell wm density` -- 查看屏幕密度\n- `adb shell dumpsys window displays` -- 显示屏参数\n- `adb shell settings get secure android_id` -- android_id\n- `adb shell ifconfig | grep Mask` -- IP 地址(powershell无效)\n- `adb shell cat /proc/cpuinfo` -- CPU 信息\n- `adb shell cat /proc/meminfo` -- 内存信息(输出内容: `MemTotal` 总内存，`MemFree` 空闲内存)\n- `adb shell cat /system/build.prop` -- 更多硬件与系统属性\n\n| 属性名                              | 含义                         |\n| :---------------------------------: | :--------------------------: |\n| ro.build.version.sdk                | SDK 版本                     |\n| ro.build.version.release            | Android 系统版本             |\n| ro.build.version.security_patch     | Android 安全补丁程序级别     |\n| ro.product.model                    | 型号                         |\n| ro.product.brand                    | 品牌                         |\n| ro.product.name                     | 设备名                       |\n| ro.product.board                    | 处理器型号                   |\n| ro.product.cpu.abilist              | CPU 支持的 abi 列表          |\n| persist.sys.isUsbOtgEnabled         | 是否支持 OTG                 |\n| dalvik.vm.heapsize                  | 每个应用程序的内存上限       |\n| ro.sf.lcd_density                   | 屏幕密度                     |\n\n## 修改设置\n\n**注：**修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 `adb reboot` 重启设备，或手动重启。\n\n修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。\n\n### 分辨率\n\n命令：\n\n```sh\nadb shell wm size 480x1024\n```\n\n表示将分辨率修改为 480px * 1024px。\n\n恢复原分辨率命令：\n\n```sh\nadb shell wm size reset\n```\n\n### 屏幕密度\n\n命令：\n\n```sh\nadb shell wm density 160\n```\n\n表示将屏幕密度修改为 160dpi。\n\n恢复原屏幕密度命令：\n\n```sh\nadb shell wm density reset\n```\n\n### 显示区域\n\n命令：\n\n```sh\nadb shell wm overscan 0,0,0,200\n```\n\n四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 200px 留白。\n\n恢复原显示区域命令：\n\n```sh\nadb shell wm overscan reset\n```\n\n### 关闭 USB 调试模式\n\n命令：\n\n```sh\nadb shell settings put global adb_enabled 0\n```\n\n恢复：\n\n用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。\n\n去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。\n\n### 状态栏和导航栏的显示隐藏\n\n本节所说的相关设置对应 Cyanogenmod 里的「扩展桌面」。\n\n命令：\n\n```sh\nadb shell settings put global policy_control <key-values>\n```\n\n`<key-values>` 可由如下几种键及其对应的值组成，格式为 `<key1>=<value1>:<key2>=<value2>`。\n\n| key                       | 含义           |\n| :-----------------------: | :------------: |\n| immersive.full            | 同时隐藏       |\n| immersive.status          | 隐藏状态栏     |\n| immersive.navigation      | 隐藏导航栏     |\n| immersive.preconfirms     | ?              |\n\n这些键对应的值可则如下值用逗号组合：\n\n| value              | 含义             |\n| :----------------: | :--------------: |\n| `apps`             | 所有应用         |\n| `*`                | 所有界面         |\n| `packagename`      | 指定应用         |\n| `-packagename`     | 排除指定应用     |\n\n例如：\n\n```sh\nadb shell settings put global policy_control immersive.full=*\n```\n\n表示设置在所有界面下都同时隐藏状态栏和导航栏。\n\n```sh\nadb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3\n```\n\n表示设置在包名为 `com.package1` 和 `com.package2` 的应用里隐藏状态栏，在除了包名为 `com.package3` 的所有应用里隐藏导航栏。\n\n## 实用功能\n\n### 屏幕截图\n\n命令：\n\n```sh\nadb shell screencap -p /sdcard/sc.png\n```\n\n然后将 png 文件导出到电脑：\n\n```sh\nadb pull /sdcard/sc.png\n```\n\n可以使用 `adb shell screencap -h` 查看 `screencap` 命令的帮助信息，下面是两个有意义的参数及含义：\n\n| 参数              | 含义                                           |\n| :---------------: | :--------------------------------------------: |\n| -p                | 指定保存文件为 png 格式                        |\n| -d display-id     | 指定截图的显示屏编号（有多显示屏的情况下）     |\n\n实测如果指定文件名以 `.png` 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。\n\n直接一行命令截图并保存到电脑的方法：\n\n```sh\nadb shell screencap -p | sed \"s/\\r$//\" > sc.png\n```\n\n这个方法需要用到 sed 命令，在 Linux 和 Mac 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 [sed for Windows](http://gnuwin32.sourceforge.net/packages/sed.htm) 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。\n\n### 录制屏幕\n\n录制屏幕以 mp4 格式保存到 /sdcard：\n\n```sh\nadb shell screenrecord /sdcard/filename.mp4\n```\n\n需要停止时按 <kbd>Ctrl-C</kbd>，默认录制时间和最长录制时间都是 180 秒。\n\n如果需要导出到电脑：\n\n```sh\nadb pull /sdcard/filename.mp4\n```\n\n可以使用 `adb shell screenrecord --help` 查看 `screenrecord` 命令的帮助信息，下面是常见参数及含义：\n\n| 参数                    | 含义                                                |\n| :---------------------: | :-------------------------------------------------: |\n| --size WIDTHxHEIGHT     | 视频的尺寸，比如 `1280x720`，默认是屏幕分辨率。     |\n| --bit-rate RATE         | 视频的比特率，默认是 4Mbps。                        |\n| --time-limit TIME       | 录制时长，单位秒。                                  |\n| --verbose               | 输出更多信息。                                      |\n\n### 重新挂载 system 分区为可写\n\n**注：需要 root 权限。**\n\n/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。\n\n步骤：\n\n1. 进入 shell 并切换到 root 用户权限。\n\n   命令：\n\n   ```sh\n   adb shell\n   su\n   ```\n\n2. 查看当前分区挂载情况。\n\n   命令：\n\n   ```sh\n   mount\n   ```\n\n   输出示例：\n\n   ```sh\n   rootfs / rootfs ro,relatime 0 0\n   tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0\n   devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0\n   proc /proc proc rw,relatime 0 0\n   sysfs /sys sysfs rw,seclabel,relatime 0 0\n   selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0\n   debugfs /sys/kernel/debug debugfs rw,relatime 0 0\n   none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0\n   none /acct cgroup rw,relatime,cpuacct 0 0\n   none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0\n   none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0\n   tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0\n   tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0\n   none /dev/memcg cgroup rw,relatime,memory 0 0\n   none /dev/cpuctl cgroup rw,relatime,cpu 0 0\n   none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0\n   none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0\n   none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0\n   /dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0\n   /dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0\n   /dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0\n   /dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0\n   /dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0\n   /dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0\n   /dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0\n   ```\n\n   找到其中我们关注的带 /system 的那一行：\n\n   ```sh\n   /dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0\n   ```\n\n3. 重新挂载。\n\n   命令：\n\n   ```sh\n   mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system\n   ```\n\n   这里的 `/dev/block/platform/msm_sdcc.1/by-name/system` 就是我们从上一步的输出里得到的文件路径。\n\n如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。\n\n### 查看连接过的 WiFi 密码\n\n**注：需要 root 权限。**\n\n命令：\n\n```sh\nadb shell\nsu\ncat /data/misc/wifi/*.conf\n```\n\n输出示例：\n\n```sh\nnetwork={\n    ssid=\"TP-LINK_9DFC\"\n    scan_ssid=1\n    psk=\"123456789\"\n    key_mgmt=WPA-PSK\n    group=CCMP TKIP\n    auth_alg=OPEN\n    sim_num=1\n    priority=13893\n}\n\nnetwork={\n    ssid=\"TP-LINK_F11E\"\n    psk=\"987654321\"\n    key_mgmt=WPA-PSK\n    sim_num=1\n    priority=17293\n}\n```\n\n`ssid` 即为我们在 WLAN 设置里看到的名称，`psk` 为密码，`key_mgmt` 为安全加密方式。\n\n### 设置系统日期和时间\n\n**注：需要 root 权限。**\n\n命令：\n\n```sh\nadb shell\nsu\ndate -s 20160823.131500\n```\n\n表示将系统日期和时间更改为 2016 年 08 月 23 日 13 点 15 分 00 秒。\n\n### 重启手机\n\n命令：\n\n```sh\nadb reboot\n```\n\n### 检测设备是否已 root\n\n命令：\n\n```sh\nadb shell\nsu\n```\n\n此时命令行提示符是 `$` 则表示没有 root 权限，是 `#` 则表示已 root。\n\n### 使用 Monkey 进行压力测试\n\nMonkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。\n\n简单用法：\n\n```sh\nadb shell monkey -p <packagename> -v 500\n```\n\n表示向 `<packagename>` 指定的应用程序发送 500 个伪随机事件。\n\nMonkey 的详细用法参考 [官方文档](https://developer.android.com/studio/test/monkey.html)。\n\n### 开启/关闭 WiFi\n\n**注：需要 root 权限。**\n\n有时需要控制设备的 WiFi 状态，可以用以下指令完成。\n\n开启 WiFi：\n\n```sh\nadb root\nadb shell svc wifi enable\n```\n\n关闭 WiFi：\n\n```sh\nadb root\nadb shell svc wifi disable\n```\n\n若执行成功，输出为空；若未取得 root 权限执行此命令，将执行失败，输出 `Killed`。\n\n## 刷机相关命令\n\n### 重启到 Recovery 模式\n\n命令：\n\n```sh\nadb reboot recovery\n```\n\n### 从 Recovery 重启到 Android\n\n命令：\n\n```sh\nadb reboot\n```\n\n### 重启到 Fastboot 模式\n\n命令：\n\n```sh\nadb reboot bootloader\n```\n\n### 通过 sideload 更新系统\n\n如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。\n\n以 Recovery 模式下更新为例：\n\n1. 重启到 Recovery 模式。\n\n   命令：\n\n   ```sh\n   adb reboot recovery\n   ```\n\n2. 在设备的 Recovery 界面上操作进入 `Apply update`-`Apply from ADB`。\n\n   注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 `Apply update from ADB`。\n\n3. 通过 adb 上传和更新系统。\n\n   命令：\n\n   ```sh\n   adb sideload <path-to-update.zip>\n   ```\n\n## 更多 adb shell 命令\n\nAndroid 系统是基于 Linux 内核的，所以 Linux 里的很多命令在 Android 里也有相同或类似的实现，在 `adb shell` 里可以调用。本文档前面的部分内容已经用到了 `adb shell` 命令。\n\n### 查看进程\n\n命令：\n\n```sh\nadb shell ps\n```\n\n输出示例：\n\n```sh\nUSER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME\nroot      1     0     8904   788   ffffffff 00000000 S /init\nroot      2     0     0      0     ffffffff 00000000 S kthreadd\n...\nu0_a71    7779  5926  1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classic\nu0_a58    7963  5926  1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure\n...\nshell     8750  217   10640  740   00000000 b6f28340 R ps\n```\n\n各列含义：\n\n| 列名     | 含义          |\n| :------: | :-----------: |\n| USER     | 所属用户      |\n| PID      | 进程 ID       |\n| PPID     | 父进程 ID     |\n| NAME     | 进程名        |\n\n### 查看实时资源占用情况\n\n命令：\n\n```sh\nadb shell top\n```\n\n输出示例：\n\n```sh\nUser 0%, System 6%, IOW 0%, IRQ 0%\nUser 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307\n\n  PID PR CPU% S  #THR     VSS     RSS PCY UID      Name\n 8763  0   3% R     1  10640K   1064K  fg shell    top\n  131  0   3% S     1      0K      0K  fg root     dhd_dpc\n 6144  0   0% S   115 1682004K 115916K  fg system   system_server\n  132  0   0% S     1      0K      0K  fg root     dhd_rxf\n 1731  0   0% S     6  20288K    788K  fg root     /system/bin/mpdecision\n  217  0   0% S     6  18008K    356K  fg shell    /sbin/adbd\n ...\n 7779  2   0% S    19 1538748K  48896K  bg u0_a71   com.sohu.inputmethod.sogou:classic\n 7963  0   0% S    18 1561916K  59568K  fg u0_a58   org.mazhuang.boottimemeasure\n ...\n```\n\n各列含义：\n\n| 列名     | 含义                                                           |\n| :------: | :------------------------------------------------------------: |\n| PID      | 进程 ID                                                        |\n| PR       | 优先级                                                         |\n| CPU%     | 当前瞬间占用 CPU 百分比                                        |\n| S        | 进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）            |\n| #THR     | 线程数                                                         |\n| VSS      | Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）          |\n| RSS      | Resident Set Size 实际使用物理内存（包含共享库占用的内存）     |\n| PCY      | 调度策略优先级，SP_BACKGROUND/SPFOREGROUND                     |\n| UID      | 进程所有者的用户 ID                                            |\n| NAME     | 进程名                                                         |\n\n`top` 命令还支持一些命令行参数，详细用法如下：\n\n```sh\nUsage: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]\n    -m num  最多显示多少个进程\n    -n num  刷新多少次后退出\n    -d num  刷新时间间隔（单位秒，默认值 5）\n    -s col  按某列排序（可用 col 值：cpu, vss, rss, thr）\n    -t      显示线程信息\n    -h      显示帮助文档\n```\n\n### 其它\n\n如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明：\n\n| 命令      | 功能                            |\n| :-------: | :-----------------------------: |\n| cat       | 显示文件内容                    |\n| cd        | 切换目录                        |\n| chmod     | 改变文件的存取模式/访问权限     |\n| df        | 查看磁盘空间使用情况            |\n| grep      | 过滤输出                        |\n| kill      | 杀死指定 PID 的进程             |\n| ls        | 列举目录内容                    |\n| mount     | 挂载目录的查看和管理            |\n| mv        | 移动或重命名文件                |\n| ps        | 查看正在运行的进程              |\n| rm        | 删除文件                        |\n| top       | 查看进程的资源占用情况          |\n\n## 常见问题\n\n### 启动 adb server 失败\n\n**出错提示**\n\n```sh\nerror: protocol fault (couldn\\'t read status): No error\n```\n\n\n**可能原因**\n\nadb server 进程想使用的 5037 端口被占用。\n\n**解决方案**\n\n找到占用 5037 端口的进程，然后终止它。以 Windows 下为例：\n\n```sh\nnetstat -ano | findstr LISTENING\n\n...\nTCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       1548\n...\n```\n\n这里 1548 即为进程 ID，用命令结束该进程：\n\n```sh\ntaskkill /PID 1548\n```\n\n然后再启动 adb 就没问题了。\n","source":"_posts/adb-Android-Debug-Bridge-2.md","raw":"---\ntitle: adb设备信息查询修改刷机等命令\ndate: 2016-12-22 18:51:53\ntags:\n    - adb\n    - Android\n    - adb命令\ncategories: Android\n---\n\nADB很强大，记住一些ADB命令有助于提高工作效率。\n通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等\n\n<!-- more -->\n\n## 查看设备信息\n\n- `adb logcat` -- 查看日志\n- `adb shell dumpsys battery` -- 电池状况\n其中 scale 代表最大电量，level 代表当前电量。上面的输出表示还剩下 44% 的电量\n- `adb reboot` -- 重启\n- `adb get-serialno` -- 获取序列号\n- `adb shell  cat /sys/class/net/wlan0/address` -- MAC 地址\n- `adb shell getprop ro.product.model` -- 型号\n- `adb shell getprop ro.build.version.release` -- 查看 Android 系统版本\n- `adb shell wm size` -- 查看屏幕分辨率\n- `adb shell wm density` -- 查看屏幕密度\n- `adb shell dumpsys window displays` -- 显示屏参数\n- `adb shell settings get secure android_id` -- android_id\n- `adb shell ifconfig | grep Mask` -- IP 地址(powershell无效)\n- `adb shell cat /proc/cpuinfo` -- CPU 信息\n- `adb shell cat /proc/meminfo` -- 内存信息(输出内容: `MemTotal` 总内存，`MemFree` 空闲内存)\n- `adb shell cat /system/build.prop` -- 更多硬件与系统属性\n\n| 属性名                              | 含义                         |\n| :---------------------------------: | :--------------------------: |\n| ro.build.version.sdk                | SDK 版本                     |\n| ro.build.version.release            | Android 系统版本             |\n| ro.build.version.security_patch     | Android 安全补丁程序级别     |\n| ro.product.model                    | 型号                         |\n| ro.product.brand                    | 品牌                         |\n| ro.product.name                     | 设备名                       |\n| ro.product.board                    | 处理器型号                   |\n| ro.product.cpu.abilist              | CPU 支持的 abi 列表          |\n| persist.sys.isUsbOtgEnabled         | 是否支持 OTG                 |\n| dalvik.vm.heapsize                  | 每个应用程序的内存上限       |\n| ro.sf.lcd_density                   | 屏幕密度                     |\n\n## 修改设置\n\n**注：**修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 `adb reboot` 重启设备，或手动重启。\n\n修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。\n\n### 分辨率\n\n命令：\n\n```sh\nadb shell wm size 480x1024\n```\n\n表示将分辨率修改为 480px * 1024px。\n\n恢复原分辨率命令：\n\n```sh\nadb shell wm size reset\n```\n\n### 屏幕密度\n\n命令：\n\n```sh\nadb shell wm density 160\n```\n\n表示将屏幕密度修改为 160dpi。\n\n恢复原屏幕密度命令：\n\n```sh\nadb shell wm density reset\n```\n\n### 显示区域\n\n命令：\n\n```sh\nadb shell wm overscan 0,0,0,200\n```\n\n四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 200px 留白。\n\n恢复原显示区域命令：\n\n```sh\nadb shell wm overscan reset\n```\n\n### 关闭 USB 调试模式\n\n命令：\n\n```sh\nadb shell settings put global adb_enabled 0\n```\n\n恢复：\n\n用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。\n\n去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。\n\n### 状态栏和导航栏的显示隐藏\n\n本节所说的相关设置对应 Cyanogenmod 里的「扩展桌面」。\n\n命令：\n\n```sh\nadb shell settings put global policy_control <key-values>\n```\n\n`<key-values>` 可由如下几种键及其对应的值组成，格式为 `<key1>=<value1>:<key2>=<value2>`。\n\n| key                       | 含义           |\n| :-----------------------: | :------------: |\n| immersive.full            | 同时隐藏       |\n| immersive.status          | 隐藏状态栏     |\n| immersive.navigation      | 隐藏导航栏     |\n| immersive.preconfirms     | ?              |\n\n这些键对应的值可则如下值用逗号组合：\n\n| value              | 含义             |\n| :----------------: | :--------------: |\n| `apps`             | 所有应用         |\n| `*`                | 所有界面         |\n| `packagename`      | 指定应用         |\n| `-packagename`     | 排除指定应用     |\n\n例如：\n\n```sh\nadb shell settings put global policy_control immersive.full=*\n```\n\n表示设置在所有界面下都同时隐藏状态栏和导航栏。\n\n```sh\nadb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3\n```\n\n表示设置在包名为 `com.package1` 和 `com.package2` 的应用里隐藏状态栏，在除了包名为 `com.package3` 的所有应用里隐藏导航栏。\n\n## 实用功能\n\n### 屏幕截图\n\n命令：\n\n```sh\nadb shell screencap -p /sdcard/sc.png\n```\n\n然后将 png 文件导出到电脑：\n\n```sh\nadb pull /sdcard/sc.png\n```\n\n可以使用 `adb shell screencap -h` 查看 `screencap` 命令的帮助信息，下面是两个有意义的参数及含义：\n\n| 参数              | 含义                                           |\n| :---------------: | :--------------------------------------------: |\n| -p                | 指定保存文件为 png 格式                        |\n| -d display-id     | 指定截图的显示屏编号（有多显示屏的情况下）     |\n\n实测如果指定文件名以 `.png` 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。\n\n直接一行命令截图并保存到电脑的方法：\n\n```sh\nadb shell screencap -p | sed \"s/\\r$//\" > sc.png\n```\n\n这个方法需要用到 sed 命令，在 Linux 和 Mac 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 [sed for Windows](http://gnuwin32.sourceforge.net/packages/sed.htm) 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。\n\n### 录制屏幕\n\n录制屏幕以 mp4 格式保存到 /sdcard：\n\n```sh\nadb shell screenrecord /sdcard/filename.mp4\n```\n\n需要停止时按 <kbd>Ctrl-C</kbd>，默认录制时间和最长录制时间都是 180 秒。\n\n如果需要导出到电脑：\n\n```sh\nadb pull /sdcard/filename.mp4\n```\n\n可以使用 `adb shell screenrecord --help` 查看 `screenrecord` 命令的帮助信息，下面是常见参数及含义：\n\n| 参数                    | 含义                                                |\n| :---------------------: | :-------------------------------------------------: |\n| --size WIDTHxHEIGHT     | 视频的尺寸，比如 `1280x720`，默认是屏幕分辨率。     |\n| --bit-rate RATE         | 视频的比特率，默认是 4Mbps。                        |\n| --time-limit TIME       | 录制时长，单位秒。                                  |\n| --verbose               | 输出更多信息。                                      |\n\n### 重新挂载 system 分区为可写\n\n**注：需要 root 权限。**\n\n/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。\n\n步骤：\n\n1. 进入 shell 并切换到 root 用户权限。\n\n   命令：\n\n   ```sh\n   adb shell\n   su\n   ```\n\n2. 查看当前分区挂载情况。\n\n   命令：\n\n   ```sh\n   mount\n   ```\n\n   输出示例：\n\n   ```sh\n   rootfs / rootfs ro,relatime 0 0\n   tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0\n   devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0\n   proc /proc proc rw,relatime 0 0\n   sysfs /sys sysfs rw,seclabel,relatime 0 0\n   selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0\n   debugfs /sys/kernel/debug debugfs rw,relatime 0 0\n   none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0\n   none /acct cgroup rw,relatime,cpuacct 0 0\n   none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0\n   none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0\n   tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0\n   tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0\n   none /dev/memcg cgroup rw,relatime,memory 0 0\n   none /dev/cpuctl cgroup rw,relatime,cpu 0 0\n   none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0\n   none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0\n   none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0\n   /dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0\n   /dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0\n   /dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0\n   /dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0\n   /dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0\n   /dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0\n   /dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0\n   ```\n\n   找到其中我们关注的带 /system 的那一行：\n\n   ```sh\n   /dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0\n   ```\n\n3. 重新挂载。\n\n   命令：\n\n   ```sh\n   mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system\n   ```\n\n   这里的 `/dev/block/platform/msm_sdcc.1/by-name/system` 就是我们从上一步的输出里得到的文件路径。\n\n如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。\n\n### 查看连接过的 WiFi 密码\n\n**注：需要 root 权限。**\n\n命令：\n\n```sh\nadb shell\nsu\ncat /data/misc/wifi/*.conf\n```\n\n输出示例：\n\n```sh\nnetwork={\n    ssid=\"TP-LINK_9DFC\"\n    scan_ssid=1\n    psk=\"123456789\"\n    key_mgmt=WPA-PSK\n    group=CCMP TKIP\n    auth_alg=OPEN\n    sim_num=1\n    priority=13893\n}\n\nnetwork={\n    ssid=\"TP-LINK_F11E\"\n    psk=\"987654321\"\n    key_mgmt=WPA-PSK\n    sim_num=1\n    priority=17293\n}\n```\n\n`ssid` 即为我们在 WLAN 设置里看到的名称，`psk` 为密码，`key_mgmt` 为安全加密方式。\n\n### 设置系统日期和时间\n\n**注：需要 root 权限。**\n\n命令：\n\n```sh\nadb shell\nsu\ndate -s 20160823.131500\n```\n\n表示将系统日期和时间更改为 2016 年 08 月 23 日 13 点 15 分 00 秒。\n\n### 重启手机\n\n命令：\n\n```sh\nadb reboot\n```\n\n### 检测设备是否已 root\n\n命令：\n\n```sh\nadb shell\nsu\n```\n\n此时命令行提示符是 `$` 则表示没有 root 权限，是 `#` 则表示已 root。\n\n### 使用 Monkey 进行压力测试\n\nMonkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。\n\n简单用法：\n\n```sh\nadb shell monkey -p <packagename> -v 500\n```\n\n表示向 `<packagename>` 指定的应用程序发送 500 个伪随机事件。\n\nMonkey 的详细用法参考 [官方文档](https://developer.android.com/studio/test/monkey.html)。\n\n### 开启/关闭 WiFi\n\n**注：需要 root 权限。**\n\n有时需要控制设备的 WiFi 状态，可以用以下指令完成。\n\n开启 WiFi：\n\n```sh\nadb root\nadb shell svc wifi enable\n```\n\n关闭 WiFi：\n\n```sh\nadb root\nadb shell svc wifi disable\n```\n\n若执行成功，输出为空；若未取得 root 权限执行此命令，将执行失败，输出 `Killed`。\n\n## 刷机相关命令\n\n### 重启到 Recovery 模式\n\n命令：\n\n```sh\nadb reboot recovery\n```\n\n### 从 Recovery 重启到 Android\n\n命令：\n\n```sh\nadb reboot\n```\n\n### 重启到 Fastboot 模式\n\n命令：\n\n```sh\nadb reboot bootloader\n```\n\n### 通过 sideload 更新系统\n\n如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。\n\n以 Recovery 模式下更新为例：\n\n1. 重启到 Recovery 模式。\n\n   命令：\n\n   ```sh\n   adb reboot recovery\n   ```\n\n2. 在设备的 Recovery 界面上操作进入 `Apply update`-`Apply from ADB`。\n\n   注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 `Apply update from ADB`。\n\n3. 通过 adb 上传和更新系统。\n\n   命令：\n\n   ```sh\n   adb sideload <path-to-update.zip>\n   ```\n\n## 更多 adb shell 命令\n\nAndroid 系统是基于 Linux 内核的，所以 Linux 里的很多命令在 Android 里也有相同或类似的实现，在 `adb shell` 里可以调用。本文档前面的部分内容已经用到了 `adb shell` 命令。\n\n### 查看进程\n\n命令：\n\n```sh\nadb shell ps\n```\n\n输出示例：\n\n```sh\nUSER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME\nroot      1     0     8904   788   ffffffff 00000000 S /init\nroot      2     0     0      0     ffffffff 00000000 S kthreadd\n...\nu0_a71    7779  5926  1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classic\nu0_a58    7963  5926  1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure\n...\nshell     8750  217   10640  740   00000000 b6f28340 R ps\n```\n\n各列含义：\n\n| 列名     | 含义          |\n| :------: | :-----------: |\n| USER     | 所属用户      |\n| PID      | 进程 ID       |\n| PPID     | 父进程 ID     |\n| NAME     | 进程名        |\n\n### 查看实时资源占用情况\n\n命令：\n\n```sh\nadb shell top\n```\n\n输出示例：\n\n```sh\nUser 0%, System 6%, IOW 0%, IRQ 0%\nUser 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307\n\n  PID PR CPU% S  #THR     VSS     RSS PCY UID      Name\n 8763  0   3% R     1  10640K   1064K  fg shell    top\n  131  0   3% S     1      0K      0K  fg root     dhd_dpc\n 6144  0   0% S   115 1682004K 115916K  fg system   system_server\n  132  0   0% S     1      0K      0K  fg root     dhd_rxf\n 1731  0   0% S     6  20288K    788K  fg root     /system/bin/mpdecision\n  217  0   0% S     6  18008K    356K  fg shell    /sbin/adbd\n ...\n 7779  2   0% S    19 1538748K  48896K  bg u0_a71   com.sohu.inputmethod.sogou:classic\n 7963  0   0% S    18 1561916K  59568K  fg u0_a58   org.mazhuang.boottimemeasure\n ...\n```\n\n各列含义：\n\n| 列名     | 含义                                                           |\n| :------: | :------------------------------------------------------------: |\n| PID      | 进程 ID                                                        |\n| PR       | 优先级                                                         |\n| CPU%     | 当前瞬间占用 CPU 百分比                                        |\n| S        | 进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）            |\n| #THR     | 线程数                                                         |\n| VSS      | Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）          |\n| RSS      | Resident Set Size 实际使用物理内存（包含共享库占用的内存）     |\n| PCY      | 调度策略优先级，SP_BACKGROUND/SPFOREGROUND                     |\n| UID      | 进程所有者的用户 ID                                            |\n| NAME     | 进程名                                                         |\n\n`top` 命令还支持一些命令行参数，详细用法如下：\n\n```sh\nUsage: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]\n    -m num  最多显示多少个进程\n    -n num  刷新多少次后退出\n    -d num  刷新时间间隔（单位秒，默认值 5）\n    -s col  按某列排序（可用 col 值：cpu, vss, rss, thr）\n    -t      显示线程信息\n    -h      显示帮助文档\n```\n\n### 其它\n\n如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明：\n\n| 命令      | 功能                            |\n| :-------: | :-----------------------------: |\n| cat       | 显示文件内容                    |\n| cd        | 切换目录                        |\n| chmod     | 改变文件的存取模式/访问权限     |\n| df        | 查看磁盘空间使用情况            |\n| grep      | 过滤输出                        |\n| kill      | 杀死指定 PID 的进程             |\n| ls        | 列举目录内容                    |\n| mount     | 挂载目录的查看和管理            |\n| mv        | 移动或重命名文件                |\n| ps        | 查看正在运行的进程              |\n| rm        | 删除文件                        |\n| top       | 查看进程的资源占用情况          |\n\n## 常见问题\n\n### 启动 adb server 失败\n\n**出错提示**\n\n```sh\nerror: protocol fault (couldn\\'t read status): No error\n```\n\n\n**可能原因**\n\nadb server 进程想使用的 5037 端口被占用。\n\n**解决方案**\n\n找到占用 5037 端口的进程，然后终止它。以 Windows 下为例：\n\n```sh\nnetstat -ano | findstr LISTENING\n\n...\nTCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       1548\n...\n```\n\n这里 1548 即为进程 ID，用命令结束该进程：\n\n```sh\ntaskkill /PID 1548\n```\n\n然后再启动 adb 就没问题了。\n","slug":"adb-Android-Debug-Bridge-2","published":1,"updated":"2017-01-11T11:02:21.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvnh0015uwg7jigt4kco","content":"<p>ADB很强大，记住一些ADB命令有助于提高工作效率。<br>通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等</p>\n<a id=\"more\"></a>\n<h2 id=\"查看设备信息\"><a href=\"#查看设备信息\" class=\"headerlink\" title=\"查看设备信息\"></a>查看设备信息</h2><ul>\n<li><code>adb logcat</code> – 查看日志</li>\n<li><code>adb shell dumpsys battery</code> – 电池状况<br>其中 scale 代表最大电量，level 代表当前电量。上面的输出表示还剩下 44% 的电量</li>\n<li><code>adb reboot</code> – 重启</li>\n<li><code>adb get-serialno</code> – 获取序列号</li>\n<li><code>adb shell  cat /sys/class/net/wlan0/address</code> – MAC 地址</li>\n<li><code>adb shell getprop ro.product.model</code> – 型号</li>\n<li><code>adb shell getprop ro.build.version.release</code> – 查看 Android 系统版本</li>\n<li><code>adb shell wm size</code> – 查看屏幕分辨率</li>\n<li><code>adb shell wm density</code> – 查看屏幕密度</li>\n<li><code>adb shell dumpsys window displays</code> – 显示屏参数</li>\n<li><code>adb shell settings get secure android_id</code> – android_id</li>\n<li><code>adb shell ifconfig | grep Mask</code> – IP 地址(powershell无效)</li>\n<li><code>adb shell cat /proc/cpuinfo</code> – CPU 信息</li>\n<li><code>adb shell cat /proc/meminfo</code> – 内存信息(输出内容: <code>MemTotal</code> 总内存，<code>MemFree</code> 空闲内存)</li>\n<li><code>adb shell cat /system/build.prop</code> – 更多硬件与系统属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ro.build.version.sdk</td>\n<td style=\"text-align:center\">SDK 版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.build.version.release</td>\n<td style=\"text-align:center\">Android 系统版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.build.version.security_patch</td>\n<td style=\"text-align:center\">Android 安全补丁程序级别</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.product.model</td>\n<td style=\"text-align:center\">型号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.product.brand</td>\n<td style=\"text-align:center\">品牌</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.product.name</td>\n<td style=\"text-align:center\">设备名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.product.board</td>\n<td style=\"text-align:center\">处理器型号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.product.cpu.abilist</td>\n<td style=\"text-align:center\">CPU 支持的 abi 列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">persist.sys.isUsbOtgEnabled</td>\n<td style=\"text-align:center\">是否支持 OTG</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dalvik.vm.heapsize</td>\n<td style=\"text-align:center\">每个应用程序的内存上限</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.sf.lcd_density</td>\n<td style=\"text-align:center\">屏幕密度</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"修改设置\"><a href=\"#修改设置\" class=\"headerlink\" title=\"修改设置\"></a>修改设置</h2><p><strong>注：</strong>修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 <code>adb reboot</code> 重启设备，或手动重启。</p>\n<p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p>\n<h3 id=\"分辨率\"><a href=\"#分辨率\" class=\"headerlink\" title=\"分辨率\"></a>分辨率</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm size 480x1024</div></pre></td></tr></table></figure>\n<p>表示将分辨率修改为 480px * 1024px。</p>\n<p>恢复原分辨率命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm size reset</div></pre></td></tr></table></figure>\n<h3 id=\"屏幕密度\"><a href=\"#屏幕密度\" class=\"headerlink\" title=\"屏幕密度\"></a>屏幕密度</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm density 160</div></pre></td></tr></table></figure>\n<p>表示将屏幕密度修改为 160dpi。</p>\n<p>恢复原屏幕密度命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm density reset</div></pre></td></tr></table></figure>\n<h3 id=\"显示区域\"><a href=\"#显示区域\" class=\"headerlink\" title=\"显示区域\"></a>显示区域</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm overscan 0,0,0,200</div></pre></td></tr></table></figure>\n<p>四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 200px 留白。</p>\n<p>恢复原显示区域命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm overscan reset</div></pre></td></tr></table></figure>\n<h3 id=\"关闭-USB-调试模式\"><a href=\"#关闭-USB-调试模式\" class=\"headerlink\" title=\"关闭 USB 调试模式\"></a>关闭 USB 调试模式</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell settings put global adb_enabled 0</div></pre></td></tr></table></figure>\n<p>恢复：</p>\n<p>用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。</p>\n<p>去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。</p>\n<h3 id=\"状态栏和导航栏的显示隐藏\"><a href=\"#状态栏和导航栏的显示隐藏\" class=\"headerlink\" title=\"状态栏和导航栏的显示隐藏\"></a>状态栏和导航栏的显示隐藏</h3><p>本节所说的相关设置对应 Cyanogenmod 里的「扩展桌面」。</p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell settings put global policy_control &lt;key-values&gt;</div></pre></td></tr></table></figure>\n<p><code>&lt;key-values&gt;</code> 可由如下几种键及其对应的值组成，格式为 <code>&lt;key1&gt;=&lt;value1&gt;:&lt;key2&gt;=&lt;value2&gt;</code>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">key</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">immersive.full</td>\n<td style=\"text-align:center\">同时隐藏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">immersive.status</td>\n<td style=\"text-align:center\">隐藏状态栏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">immersive.navigation</td>\n<td style=\"text-align:center\">隐藏导航栏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">immersive.preconfirms</td>\n<td style=\"text-align:center\">?</td>\n</tr>\n</tbody>\n</table>\n<p>这些键对应的值可则如下值用逗号组合：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">value</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>apps</code></td>\n<td style=\"text-align:center\">所有应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*</code></td>\n<td style=\"text-align:center\">所有界面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>packagename</code></td>\n<td style=\"text-align:center\">指定应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-packagename</code></td>\n<td style=\"text-align:center\">排除指定应用</td>\n</tr>\n</tbody>\n</table>\n<p>例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell settings put global policy_control immersive.full=*</div></pre></td></tr></table></figure>\n<p>表示设置在所有界面下都同时隐藏状态栏和导航栏。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3</div></pre></td></tr></table></figure>\n<p>表示设置在包名为 <code>com.package1</code> 和 <code>com.package2</code> 的应用里隐藏状态栏，在除了包名为 <code>com.package3</code> 的所有应用里隐藏导航栏。</p>\n<h2 id=\"实用功能\"><a href=\"#实用功能\" class=\"headerlink\" title=\"实用功能\"></a>实用功能</h2><h3 id=\"屏幕截图\"><a href=\"#屏幕截图\" class=\"headerlink\" title=\"屏幕截图\"></a>屏幕截图</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell screencap -p /sdcard/sc.png</div></pre></td></tr></table></figure>\n<p>然后将 png 文件导出到电脑：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb pull /sdcard/sc.png</div></pre></td></tr></table></figure>\n<p>可以使用 <code>adb shell screencap -h</code> 查看 <code>screencap</code> 命令的帮助信息，下面是两个有意义的参数及含义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-p</td>\n<td style=\"text-align:center\">指定保存文件为 png 格式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d display-id</td>\n<td style=\"text-align:center\">指定截图的显示屏编号（有多显示屏的情况下）</td>\n</tr>\n</tbody>\n</table>\n<p>实测如果指定文件名以 <code>.png</code> 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。</p>\n<p>直接一行命令截图并保存到电脑的方法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell screencap -p | sed <span class=\"string\">\"s/\\r$//\"</span> &gt; sc.png</div></pre></td></tr></table></figure>\n<p>这个方法需要用到 sed 命令，在 Linux 和 Mac 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 <a href=\"http://gnuwin32.sourceforge.net/packages/sed.htm\" target=\"_blank\" rel=\"external\">sed for Windows</a> 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。</p>\n<h3 id=\"录制屏幕\"><a href=\"#录制屏幕\" class=\"headerlink\" title=\"录制屏幕\"></a>录制屏幕</h3><p>录制屏幕以 mp4 格式保存到 /sdcard：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell screenrecord /sdcard/filename.mp4</div></pre></td></tr></table></figure>\n<p>需要停止时按 <kbd>Ctrl-C</kbd>，默认录制时间和最长录制时间都是 180 秒。</p>\n<p>如果需要导出到电脑：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb pull /sdcard/filename.mp4</div></pre></td></tr></table></figure>\n<p>可以使用 <code>adb shell screenrecord --help</code> 查看 <code>screenrecord</code> 命令的帮助信息，下面是常见参数及含义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">–size WIDTHxHEIGHT</td>\n<td style=\"text-align:center\">视频的尺寸，比如 <code>1280x720</code>，默认是屏幕分辨率。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">–bit-rate RATE</td>\n<td style=\"text-align:center\">视频的比特率，默认是 4Mbps。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">–time-limit TIME</td>\n<td style=\"text-align:center\">录制时长，单位秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">–verbose</td>\n<td style=\"text-align:center\">输出更多信息。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"重新挂载-system-分区为可写\"><a href=\"#重新挂载-system-分区为可写\" class=\"headerlink\" title=\"重新挂载 system 分区为可写\"></a>重新挂载 system 分区为可写</h3><p><strong>注：需要 root 权限。</strong></p>\n<p>/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。</p>\n<p>步骤：</p>\n<ol>\n<li><p>进入 shell 并切换到 root 用户权限。</p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">su</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前分区挂载情况。</p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount</div></pre></td></tr></table></figure>\n<p>输出示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">rootfs / rootfs ro,relatime 0 0</div><div class=\"line\">tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0</div><div class=\"line\">devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0</div><div class=\"line\">proc /proc proc rw,relatime 0 0</div><div class=\"line\">sysfs /sys sysfs rw,seclabel,relatime 0 0</div><div class=\"line\">selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0</div><div class=\"line\">debugfs /sys/kernel/debug debugfs rw,relatime 0 0</div><div class=\"line\">none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0</div><div class=\"line\">none /acct cgroup rw,relatime,cpuacct 0 0</div><div class=\"line\">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class=\"line\">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class=\"line\">tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class=\"line\">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class=\"line\">none /dev/memcg cgroup rw,relatime,memory 0 0</div><div class=\"line\">none /dev/cpuctl cgroup rw,relatime,cpu 0 0</div><div class=\"line\">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class=\"line\">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class=\"line\">none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0</div><div class=\"line\">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div><div class=\"line\">/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0</div><div class=\"line\">/dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class=\"line\">/dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class=\"line\">/dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0</div><div class=\"line\">/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div><div class=\"line\">/dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div></pre></td></tr></table></figure>\n<p>找到其中我们关注的带 /system 的那一行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新挂载。</p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system</div></pre></td></tr></table></figure>\n<p>这里的 <code>/dev/block/platform/msm_sdcc.1/by-name/system</code> 就是我们从上一步的输出里得到的文件路径。</p>\n</li>\n</ol>\n<p>如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。</p>\n<h3 id=\"查看连接过的-WiFi-密码\"><a href=\"#查看连接过的-WiFi-密码\" class=\"headerlink\" title=\"查看连接过的 WiFi 密码\"></a>查看连接过的 WiFi 密码</h3><p><strong>注：需要 root 权限。</strong></p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">su</div><div class=\"line\">cat /data/misc/wifi/*.conf</div></pre></td></tr></table></figure>\n<p>输出示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">network=&#123;</div><div class=\"line\">    ssid=<span class=\"string\">\"TP-LINK_9DFC\"</span></div><div class=\"line\">    scan_ssid=1</div><div class=\"line\">    psk=<span class=\"string\">\"123456789\"</span></div><div class=\"line\">    key_mgmt=WPA-PSK</div><div class=\"line\">    group=CCMP TKIP</div><div class=\"line\">    auth_alg=OPEN</div><div class=\"line\">    sim_num=1</div><div class=\"line\">    priority=13893</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">network=&#123;</div><div class=\"line\">    ssid=<span class=\"string\">\"TP-LINK_F11E\"</span></div><div class=\"line\">    psk=<span class=\"string\">\"987654321\"</span></div><div class=\"line\">    key_mgmt=WPA-PSK</div><div class=\"line\">    sim_num=1</div><div class=\"line\">    priority=17293</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>ssid</code> 即为我们在 WLAN 设置里看到的名称，<code>psk</code> 为密码，<code>key_mgmt</code> 为安全加密方式。</p>\n<h3 id=\"设置系统日期和时间\"><a href=\"#设置系统日期和时间\" class=\"headerlink\" title=\"设置系统日期和时间\"></a>设置系统日期和时间</h3><p><strong>注：需要 root 权限。</strong></p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">su</div><div class=\"line\">date <span class=\"_\">-s</span> 20160823.131500</div></pre></td></tr></table></figure>\n<p>表示将系统日期和时间更改为 2016 年 08 月 23 日 13 点 15 分 00 秒。</p>\n<h3 id=\"重启手机\"><a href=\"#重启手机\" class=\"headerlink\" title=\"重启手机\"></a>重启手机</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot</div></pre></td></tr></table></figure>\n<h3 id=\"检测设备是否已-root\"><a href=\"#检测设备是否已-root\" class=\"headerlink\" title=\"检测设备是否已 root\"></a>检测设备是否已 root</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">su</div></pre></td></tr></table></figure>\n<p>此时命令行提示符是 <code>$</code> 则表示没有 root 权限，是 <code>#</code> 则表示已 root。</p>\n<h3 id=\"使用-Monkey-进行压力测试\"><a href=\"#使用-Monkey-进行压力测试\" class=\"headerlink\" title=\"使用 Monkey 进行压力测试\"></a>使用 Monkey 进行压力测试</h3><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p>\n<p>简单用法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell monkey -p &lt;packagename&gt; -v 500</div></pre></td></tr></table></figure>\n<p>表示向 <code>&lt;packagename&gt;</code> 指定的应用程序发送 500 个伪随机事件。</p>\n<p>Monkey 的详细用法参考 <a href=\"https://developer.android.com/studio/test/monkey.html\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<h3 id=\"开启-关闭-WiFi\"><a href=\"#开启-关闭-WiFi\" class=\"headerlink\" title=\"开启/关闭 WiFi\"></a>开启/关闭 WiFi</h3><p><strong>注：需要 root 权限。</strong></p>\n<p>有时需要控制设备的 WiFi 状态，可以用以下指令完成。</p>\n<p>开启 WiFi：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb root</div><div class=\"line\">adb shell svc wifi <span class=\"built_in\">enable</span></div></pre></td></tr></table></figure>\n<p>关闭 WiFi：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb root</div><div class=\"line\">adb shell svc wifi <span class=\"built_in\">disable</span></div></pre></td></tr></table></figure>\n<p>若执行成功，输出为空；若未取得 root 权限执行此命令，将执行失败，输出 <code>Killed</code>。</p>\n<h2 id=\"刷机相关命令\"><a href=\"#刷机相关命令\" class=\"headerlink\" title=\"刷机相关命令\"></a>刷机相关命令</h2><h3 id=\"重启到-Recovery-模式\"><a href=\"#重启到-Recovery-模式\" class=\"headerlink\" title=\"重启到 Recovery 模式\"></a>重启到 Recovery 模式</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot recovery</div></pre></td></tr></table></figure>\n<h3 id=\"从-Recovery-重启到-Android\"><a href=\"#从-Recovery-重启到-Android\" class=\"headerlink\" title=\"从 Recovery 重启到 Android\"></a>从 Recovery 重启到 Android</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot</div></pre></td></tr></table></figure>\n<h3 id=\"重启到-Fastboot-模式\"><a href=\"#重启到-Fastboot-模式\" class=\"headerlink\" title=\"重启到 Fastboot 模式\"></a>重启到 Fastboot 模式</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot bootloader</div></pre></td></tr></table></figure>\n<h3 id=\"通过-sideload-更新系统\"><a href=\"#通过-sideload-更新系统\" class=\"headerlink\" title=\"通过 sideload 更新系统\"></a>通过 sideload 更新系统</h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p>\n<p>以 Recovery 模式下更新为例：</p>\n<ol>\n<li><p>重启到 Recovery 模式。</p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot recovery</div></pre></td></tr></table></figure>\n</li>\n<li><p>在设备的 Recovery 界面上操作进入 <code>Apply update</code>-<code>Apply from ADB</code>。</p>\n<p>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 <code>Apply update from ADB</code>。</p>\n</li>\n<li><p>通过 adb 上传和更新系统。</p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb sideload &lt;path-to-update.zip&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"更多-adb-shell-命令\"><a href=\"#更多-adb-shell-命令\" class=\"headerlink\" title=\"更多 adb shell 命令\"></a>更多 adb shell 命令</h2><p>Android 系统是基于 Linux 内核的，所以 Linux 里的很多命令在 Android 里也有相同或类似的实现，在 <code>adb shell</code> 里可以调用。本文档前面的部分内容已经用到了 <code>adb shell</code> 命令。</p>\n<h3 id=\"查看进程\"><a href=\"#查看进程\" class=\"headerlink\" title=\"查看进程\"></a>查看进程</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell ps</div></pre></td></tr></table></figure>\n<p>输出示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">USER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME</div><div class=\"line\">root      1     0     8904   788   ffffffff 00000000 S /init</div><div class=\"line\">root      2     0     0      0     ffffffff 00000000 S kthreadd</div><div class=\"line\">...</div><div class=\"line\">u0_a71    7779  5926  1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classic</div><div class=\"line\">u0_a58    7963  5926  1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure</div><div class=\"line\">...</div><div class=\"line\">shell     8750  217   10640  740   00000000 b6f28340 R ps</div></pre></td></tr></table></figure>\n<p>各列含义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">列名</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">USER</td>\n<td style=\"text-align:center\">所属用户</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PID</td>\n<td style=\"text-align:center\">进程 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PPID</td>\n<td style=\"text-align:center\">父进程 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NAME</td>\n<td style=\"text-align:center\">进程名</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"查看实时资源占用情况\"><a href=\"#查看实时资源占用情况\" class=\"headerlink\" title=\"查看实时资源占用情况\"></a>查看实时资源占用情况</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell top</div></pre></td></tr></table></figure>\n<p>输出示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">User 0%, System 6%, IOW 0%, IRQ 0%</div><div class=\"line\">User 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307</div><div class=\"line\"></div><div class=\"line\">  PID PR CPU% S  <span class=\"comment\">#THR     VSS     RSS PCY UID      Name</span></div><div class=\"line\"> 8763  0   3% R     1  10640K   1064K  <span class=\"built_in\">fg</span> shell    top</div><div class=\"line\">  131  0   3% S     1      0K      0K  <span class=\"built_in\">fg</span> root     dhd_dpc</div><div class=\"line\"> 6144  0   0% S   115 1682004K 115916K  <span class=\"built_in\">fg</span> system   system_server</div><div class=\"line\">  132  0   0% S     1      0K      0K  <span class=\"built_in\">fg</span> root     dhd_rxf</div><div class=\"line\"> 1731  0   0% S     6  20288K    788K  <span class=\"built_in\">fg</span> root     /system/bin/mpdecision</div><div class=\"line\">  217  0   0% S     6  18008K    356K  <span class=\"built_in\">fg</span> shell    /sbin/adbd</div><div class=\"line\"> ...</div><div class=\"line\"> 7779  2   0% S    19 1538748K  48896K  <span class=\"built_in\">bg</span> u0_a71   com.sohu.inputmethod.sogou:classic</div><div class=\"line\"> 7963  0   0% S    18 1561916K  59568K  <span class=\"built_in\">fg</span> u0_a58   org.mazhuang.boottimemeasure</div><div class=\"line\"> ...</div></pre></td></tr></table></figure>\n<p>各列含义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">列名</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">PID</td>\n<td style=\"text-align:center\">进程 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PR</td>\n<td style=\"text-align:center\">优先级</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CPU%</td>\n<td style=\"text-align:center\">当前瞬间占用 CPU 百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#THR</td>\n<td style=\"text-align:center\">线程数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">VSS</td>\n<td style=\"text-align:center\">Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RSS</td>\n<td style=\"text-align:center\">Resident Set Size 实际使用物理内存（包含共享库占用的内存）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PCY</td>\n<td style=\"text-align:center\">调度策略优先级，SP_BACKGROUND/SPFOREGROUND</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UID</td>\n<td style=\"text-align:center\">进程所有者的用户 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NAME</td>\n<td style=\"text-align:center\">进程名</td>\n</tr>\n</tbody>\n</table>\n<p><code>top</code> 命令还支持一些命令行参数，详细用法如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Usage: top [ -m max_procs ] [ -n iterations ] [ <span class=\"_\">-d</span> delay ] [ <span class=\"_\">-s</span> sort_column ] [ -t ] [ -h ]</div><div class=\"line\">    -m num  最多显示多少个进程</div><div class=\"line\">    -n num  刷新多少次后退出</div><div class=\"line\">    <span class=\"_\">-d</span> num  刷新时间间隔（单位秒，默认值 5）</div><div class=\"line\">    <span class=\"_\">-s</span> col  按某列排序（可用 col 值：cpu, vss, rss, thr）</div><div class=\"line\">    -t      显示线程信息</div><div class=\"line\">    -h      显示帮助文档</div></pre></td></tr></table></figure>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">cat</td>\n<td style=\"text-align:center\">显示文件内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cd</td>\n<td style=\"text-align:center\">切换目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">chmod</td>\n<td style=\"text-align:center\">改变文件的存取模式/访问权限</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">df</td>\n<td style=\"text-align:center\">查看磁盘空间使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">grep</td>\n<td style=\"text-align:center\">过滤输出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">kill</td>\n<td style=\"text-align:center\">杀死指定 PID 的进程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ls</td>\n<td style=\"text-align:center\">列举目录内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mount</td>\n<td style=\"text-align:center\">挂载目录的查看和管理</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mv</td>\n<td style=\"text-align:center\">移动或重命名文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ps</td>\n<td style=\"text-align:center\">查看正在运行的进程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rm</td>\n<td style=\"text-align:center\">删除文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">top</td>\n<td style=\"text-align:center\">查看进程的资源占用情况</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"启动-adb-server-失败\"><a href=\"#启动-adb-server-失败\" class=\"headerlink\" title=\"启动 adb server 失败\"></a>启动 adb server 失败</h3><p><strong>出错提示</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">error: protocol fault (couldn\\<span class=\"string\">'t read status): No error</span></div></pre></td></tr></table></figure>\n<p><strong>可能原因</strong></p>\n<p>adb server 进程想使用的 5037 端口被占用。</p>\n<p><strong>解决方案</strong></p>\n<p>找到占用 5037 端口的进程，然后终止它。以 Windows 下为例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -ano | findstr LISTENING</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">TCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       1548</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>这里 1548 即为进程 ID，用命令结束该进程：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskkill /PID 1548</div></pre></td></tr></table></figure>\n<p>然后再启动 adb 就没问题了。</p>\n","excerpt":"<p>ADB很强大，记住一些ADB命令有助于提高工作效率。<br>通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等</p>","more":"<h2 id=\"查看设备信息\"><a href=\"#查看设备信息\" class=\"headerlink\" title=\"查看设备信息\"></a>查看设备信息</h2><ul>\n<li><code>adb logcat</code> – 查看日志</li>\n<li><code>adb shell dumpsys battery</code> – 电池状况<br>其中 scale 代表最大电量，level 代表当前电量。上面的输出表示还剩下 44% 的电量</li>\n<li><code>adb reboot</code> – 重启</li>\n<li><code>adb get-serialno</code> – 获取序列号</li>\n<li><code>adb shell  cat /sys/class/net/wlan0/address</code> – MAC 地址</li>\n<li><code>adb shell getprop ro.product.model</code> – 型号</li>\n<li><code>adb shell getprop ro.build.version.release</code> – 查看 Android 系统版本</li>\n<li><code>adb shell wm size</code> – 查看屏幕分辨率</li>\n<li><code>adb shell wm density</code> – 查看屏幕密度</li>\n<li><code>adb shell dumpsys window displays</code> – 显示屏参数</li>\n<li><code>adb shell settings get secure android_id</code> – android_id</li>\n<li><code>adb shell ifconfig | grep Mask</code> – IP 地址(powershell无效)</li>\n<li><code>adb shell cat /proc/cpuinfo</code> – CPU 信息</li>\n<li><code>adb shell cat /proc/meminfo</code> – 内存信息(输出内容: <code>MemTotal</code> 总内存，<code>MemFree</code> 空闲内存)</li>\n<li><code>adb shell cat /system/build.prop</code> – 更多硬件与系统属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ro.build.version.sdk</td>\n<td style=\"text-align:center\">SDK 版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.build.version.release</td>\n<td style=\"text-align:center\">Android 系统版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.build.version.security_patch</td>\n<td style=\"text-align:center\">Android 安全补丁程序级别</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.product.model</td>\n<td style=\"text-align:center\">型号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.product.brand</td>\n<td style=\"text-align:center\">品牌</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.product.name</td>\n<td style=\"text-align:center\">设备名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.product.board</td>\n<td style=\"text-align:center\">处理器型号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.product.cpu.abilist</td>\n<td style=\"text-align:center\">CPU 支持的 abi 列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">persist.sys.isUsbOtgEnabled</td>\n<td style=\"text-align:center\">是否支持 OTG</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dalvik.vm.heapsize</td>\n<td style=\"text-align:center\">每个应用程序的内存上限</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ro.sf.lcd_density</td>\n<td style=\"text-align:center\">屏幕密度</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"修改设置\"><a href=\"#修改设置\" class=\"headerlink\" title=\"修改设置\"></a>修改设置</h2><p><strong>注：</strong>修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 <code>adb reboot</code> 重启设备，或手动重启。</p>\n<p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p>\n<h3 id=\"分辨率\"><a href=\"#分辨率\" class=\"headerlink\" title=\"分辨率\"></a>分辨率</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm size 480x1024</div></pre></td></tr></table></figure>\n<p>表示将分辨率修改为 480px * 1024px。</p>\n<p>恢复原分辨率命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm size reset</div></pre></td></tr></table></figure>\n<h3 id=\"屏幕密度\"><a href=\"#屏幕密度\" class=\"headerlink\" title=\"屏幕密度\"></a>屏幕密度</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm density 160</div></pre></td></tr></table></figure>\n<p>表示将屏幕密度修改为 160dpi。</p>\n<p>恢复原屏幕密度命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm density reset</div></pre></td></tr></table></figure>\n<h3 id=\"显示区域\"><a href=\"#显示区域\" class=\"headerlink\" title=\"显示区域\"></a>显示区域</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm overscan 0,0,0,200</div></pre></td></tr></table></figure>\n<p>四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 200px 留白。</p>\n<p>恢复原显示区域命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell wm overscan reset</div></pre></td></tr></table></figure>\n<h3 id=\"关闭-USB-调试模式\"><a href=\"#关闭-USB-调试模式\" class=\"headerlink\" title=\"关闭 USB 调试模式\"></a>关闭 USB 调试模式</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell settings put global adb_enabled 0</div></pre></td></tr></table></figure>\n<p>恢复：</p>\n<p>用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。</p>\n<p>去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。</p>\n<h3 id=\"状态栏和导航栏的显示隐藏\"><a href=\"#状态栏和导航栏的显示隐藏\" class=\"headerlink\" title=\"状态栏和导航栏的显示隐藏\"></a>状态栏和导航栏的显示隐藏</h3><p>本节所说的相关设置对应 Cyanogenmod 里的「扩展桌面」。</p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell settings put global policy_control &lt;key-values&gt;</div></pre></td></tr></table></figure>\n<p><code>&lt;key-values&gt;</code> 可由如下几种键及其对应的值组成，格式为 <code>&lt;key1&gt;=&lt;value1&gt;:&lt;key2&gt;=&lt;value2&gt;</code>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">key</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">immersive.full</td>\n<td style=\"text-align:center\">同时隐藏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">immersive.status</td>\n<td style=\"text-align:center\">隐藏状态栏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">immersive.navigation</td>\n<td style=\"text-align:center\">隐藏导航栏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">immersive.preconfirms</td>\n<td style=\"text-align:center\">?</td>\n</tr>\n</tbody>\n</table>\n<p>这些键对应的值可则如下值用逗号组合：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">value</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>apps</code></td>\n<td style=\"text-align:center\">所有应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*</code></td>\n<td style=\"text-align:center\">所有界面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>packagename</code></td>\n<td style=\"text-align:center\">指定应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-packagename</code></td>\n<td style=\"text-align:center\">排除指定应用</td>\n</tr>\n</tbody>\n</table>\n<p>例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell settings put global policy_control immersive.full=*</div></pre></td></tr></table></figure>\n<p>表示设置在所有界面下都同时隐藏状态栏和导航栏。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3</div></pre></td></tr></table></figure>\n<p>表示设置在包名为 <code>com.package1</code> 和 <code>com.package2</code> 的应用里隐藏状态栏，在除了包名为 <code>com.package3</code> 的所有应用里隐藏导航栏。</p>\n<h2 id=\"实用功能\"><a href=\"#实用功能\" class=\"headerlink\" title=\"实用功能\"></a>实用功能</h2><h3 id=\"屏幕截图\"><a href=\"#屏幕截图\" class=\"headerlink\" title=\"屏幕截图\"></a>屏幕截图</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell screencap -p /sdcard/sc.png</div></pre></td></tr></table></figure>\n<p>然后将 png 文件导出到电脑：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb pull /sdcard/sc.png</div></pre></td></tr></table></figure>\n<p>可以使用 <code>adb shell screencap -h</code> 查看 <code>screencap</code> 命令的帮助信息，下面是两个有意义的参数及含义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-p</td>\n<td style=\"text-align:center\">指定保存文件为 png 格式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d display-id</td>\n<td style=\"text-align:center\">指定截图的显示屏编号（有多显示屏的情况下）</td>\n</tr>\n</tbody>\n</table>\n<p>实测如果指定文件名以 <code>.png</code> 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。</p>\n<p>直接一行命令截图并保存到电脑的方法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell screencap -p | sed <span class=\"string\">\"s/\\r$//\"</span> &gt; sc.png</div></pre></td></tr></table></figure>\n<p>这个方法需要用到 sed 命令，在 Linux 和 Mac 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 <a href=\"http://gnuwin32.sourceforge.net/packages/sed.htm\">sed for Windows</a> 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。</p>\n<h3 id=\"录制屏幕\"><a href=\"#录制屏幕\" class=\"headerlink\" title=\"录制屏幕\"></a>录制屏幕</h3><p>录制屏幕以 mp4 格式保存到 /sdcard：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell screenrecord /sdcard/filename.mp4</div></pre></td></tr></table></figure>\n<p>需要停止时按 <kbd>Ctrl-C</kbd>，默认录制时间和最长录制时间都是 180 秒。</p>\n<p>如果需要导出到电脑：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb pull /sdcard/filename.mp4</div></pre></td></tr></table></figure>\n<p>可以使用 <code>adb shell screenrecord --help</code> 查看 <code>screenrecord</code> 命令的帮助信息，下面是常见参数及含义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">–size WIDTHxHEIGHT</td>\n<td style=\"text-align:center\">视频的尺寸，比如 <code>1280x720</code>，默认是屏幕分辨率。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">–bit-rate RATE</td>\n<td style=\"text-align:center\">视频的比特率，默认是 4Mbps。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">–time-limit TIME</td>\n<td style=\"text-align:center\">录制时长，单位秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">–verbose</td>\n<td style=\"text-align:center\">输出更多信息。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"重新挂载-system-分区为可写\"><a href=\"#重新挂载-system-分区为可写\" class=\"headerlink\" title=\"重新挂载 system 分区为可写\"></a>重新挂载 system 分区为可写</h3><p><strong>注：需要 root 权限。</strong></p>\n<p>/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。</p>\n<p>步骤：</p>\n<ol>\n<li><p>进入 shell 并切换到 root 用户权限。</p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">su</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前分区挂载情况。</p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount</div></pre></td></tr></table></figure>\n<p>输出示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">rootfs / rootfs ro,relatime 0 0</div><div class=\"line\">tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0</div><div class=\"line\">devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0</div><div class=\"line\">proc /proc proc rw,relatime 0 0</div><div class=\"line\">sysfs /sys sysfs rw,seclabel,relatime 0 0</div><div class=\"line\">selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0</div><div class=\"line\">debugfs /sys/kernel/debug debugfs rw,relatime 0 0</div><div class=\"line\">none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0</div><div class=\"line\">none /acct cgroup rw,relatime,cpuacct 0 0</div><div class=\"line\">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class=\"line\">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class=\"line\">tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class=\"line\">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class=\"line\">none /dev/memcg cgroup rw,relatime,memory 0 0</div><div class=\"line\">none /dev/cpuctl cgroup rw,relatime,cpu 0 0</div><div class=\"line\">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class=\"line\">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class=\"line\">none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0</div><div class=\"line\">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div><div class=\"line\">/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0</div><div class=\"line\">/dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class=\"line\">/dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class=\"line\">/dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0</div><div class=\"line\">/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div><div class=\"line\">/dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div></pre></td></tr></table></figure>\n<p>找到其中我们关注的带 /system 的那一行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新挂载。</p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system</div></pre></td></tr></table></figure>\n<p>这里的 <code>/dev/block/platform/msm_sdcc.1/by-name/system</code> 就是我们从上一步的输出里得到的文件路径。</p>\n</li>\n</ol>\n<p>如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。</p>\n<h3 id=\"查看连接过的-WiFi-密码\"><a href=\"#查看连接过的-WiFi-密码\" class=\"headerlink\" title=\"查看连接过的 WiFi 密码\"></a>查看连接过的 WiFi 密码</h3><p><strong>注：需要 root 权限。</strong></p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">su</div><div class=\"line\">cat /data/misc/wifi/*.conf</div></pre></td></tr></table></figure>\n<p>输出示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">network=&#123;</div><div class=\"line\">    ssid=<span class=\"string\">\"TP-LINK_9DFC\"</span></div><div class=\"line\">    scan_ssid=1</div><div class=\"line\">    psk=<span class=\"string\">\"123456789\"</span></div><div class=\"line\">    key_mgmt=WPA-PSK</div><div class=\"line\">    group=CCMP TKIP</div><div class=\"line\">    auth_alg=OPEN</div><div class=\"line\">    sim_num=1</div><div class=\"line\">    priority=13893</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">network=&#123;</div><div class=\"line\">    ssid=<span class=\"string\">\"TP-LINK_F11E\"</span></div><div class=\"line\">    psk=<span class=\"string\">\"987654321\"</span></div><div class=\"line\">    key_mgmt=WPA-PSK</div><div class=\"line\">    sim_num=1</div><div class=\"line\">    priority=17293</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>ssid</code> 即为我们在 WLAN 设置里看到的名称，<code>psk</code> 为密码，<code>key_mgmt</code> 为安全加密方式。</p>\n<h3 id=\"设置系统日期和时间\"><a href=\"#设置系统日期和时间\" class=\"headerlink\" title=\"设置系统日期和时间\"></a>设置系统日期和时间</h3><p><strong>注：需要 root 权限。</strong></p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">su</div><div class=\"line\">date <span class=\"_\">-s</span> 20160823.131500</div></pre></td></tr></table></figure>\n<p>表示将系统日期和时间更改为 2016 年 08 月 23 日 13 点 15 分 00 秒。</p>\n<h3 id=\"重启手机\"><a href=\"#重启手机\" class=\"headerlink\" title=\"重启手机\"></a>重启手机</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot</div></pre></td></tr></table></figure>\n<h3 id=\"检测设备是否已-root\"><a href=\"#检测设备是否已-root\" class=\"headerlink\" title=\"检测设备是否已 root\"></a>检测设备是否已 root</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">su</div></pre></td></tr></table></figure>\n<p>此时命令行提示符是 <code>$</code> 则表示没有 root 权限，是 <code>#</code> 则表示已 root。</p>\n<h3 id=\"使用-Monkey-进行压力测试\"><a href=\"#使用-Monkey-进行压力测试\" class=\"headerlink\" title=\"使用 Monkey 进行压力测试\"></a>使用 Monkey 进行压力测试</h3><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p>\n<p>简单用法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell monkey -p &lt;packagename&gt; -v 500</div></pre></td></tr></table></figure>\n<p>表示向 <code>&lt;packagename&gt;</code> 指定的应用程序发送 500 个伪随机事件。</p>\n<p>Monkey 的详细用法参考 <a href=\"https://developer.android.com/studio/test/monkey.html\">官方文档</a>。</p>\n<h3 id=\"开启-关闭-WiFi\"><a href=\"#开启-关闭-WiFi\" class=\"headerlink\" title=\"开启/关闭 WiFi\"></a>开启/关闭 WiFi</h3><p><strong>注：需要 root 权限。</strong></p>\n<p>有时需要控制设备的 WiFi 状态，可以用以下指令完成。</p>\n<p>开启 WiFi：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb root</div><div class=\"line\">adb shell svc wifi <span class=\"built_in\">enable</span></div></pre></td></tr></table></figure>\n<p>关闭 WiFi：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb root</div><div class=\"line\">adb shell svc wifi <span class=\"built_in\">disable</span></div></pre></td></tr></table></figure>\n<p>若执行成功，输出为空；若未取得 root 权限执行此命令，将执行失败，输出 <code>Killed</code>。</p>\n<h2 id=\"刷机相关命令\"><a href=\"#刷机相关命令\" class=\"headerlink\" title=\"刷机相关命令\"></a>刷机相关命令</h2><h3 id=\"重启到-Recovery-模式\"><a href=\"#重启到-Recovery-模式\" class=\"headerlink\" title=\"重启到 Recovery 模式\"></a>重启到 Recovery 模式</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot recovery</div></pre></td></tr></table></figure>\n<h3 id=\"从-Recovery-重启到-Android\"><a href=\"#从-Recovery-重启到-Android\" class=\"headerlink\" title=\"从 Recovery 重启到 Android\"></a>从 Recovery 重启到 Android</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot</div></pre></td></tr></table></figure>\n<h3 id=\"重启到-Fastboot-模式\"><a href=\"#重启到-Fastboot-模式\" class=\"headerlink\" title=\"重启到 Fastboot 模式\"></a>重启到 Fastboot 模式</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot bootloader</div></pre></td></tr></table></figure>\n<h3 id=\"通过-sideload-更新系统\"><a href=\"#通过-sideload-更新系统\" class=\"headerlink\" title=\"通过 sideload 更新系统\"></a>通过 sideload 更新系统</h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p>\n<p>以 Recovery 模式下更新为例：</p>\n<ol>\n<li><p>重启到 Recovery 模式。</p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot recovery</div></pre></td></tr></table></figure>\n</li>\n<li><p>在设备的 Recovery 界面上操作进入 <code>Apply update</code>-<code>Apply from ADB</code>。</p>\n<p>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 <code>Apply update from ADB</code>。</p>\n</li>\n<li><p>通过 adb 上传和更新系统。</p>\n<p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb sideload &lt;path-to-update.zip&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"更多-adb-shell-命令\"><a href=\"#更多-adb-shell-命令\" class=\"headerlink\" title=\"更多 adb shell 命令\"></a>更多 adb shell 命令</h2><p>Android 系统是基于 Linux 内核的，所以 Linux 里的很多命令在 Android 里也有相同或类似的实现，在 <code>adb shell</code> 里可以调用。本文档前面的部分内容已经用到了 <code>adb shell</code> 命令。</p>\n<h3 id=\"查看进程\"><a href=\"#查看进程\" class=\"headerlink\" title=\"查看进程\"></a>查看进程</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell ps</div></pre></td></tr></table></figure>\n<p>输出示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">USER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME</div><div class=\"line\">root      1     0     8904   788   ffffffff 00000000 S /init</div><div class=\"line\">root      2     0     0      0     ffffffff 00000000 S kthreadd</div><div class=\"line\">...</div><div class=\"line\">u0_a71    7779  5926  1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classic</div><div class=\"line\">u0_a58    7963  5926  1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure</div><div class=\"line\">...</div><div class=\"line\">shell     8750  217   10640  740   00000000 b6f28340 R ps</div></pre></td></tr></table></figure>\n<p>各列含义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">列名</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">USER</td>\n<td style=\"text-align:center\">所属用户</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PID</td>\n<td style=\"text-align:center\">进程 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PPID</td>\n<td style=\"text-align:center\">父进程 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NAME</td>\n<td style=\"text-align:center\">进程名</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"查看实时资源占用情况\"><a href=\"#查看实时资源占用情况\" class=\"headerlink\" title=\"查看实时资源占用情况\"></a>查看实时资源占用情况</h3><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell top</div></pre></td></tr></table></figure>\n<p>输出示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">User 0%, System 6%, IOW 0%, IRQ 0%</div><div class=\"line\">User 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307</div><div class=\"line\"></div><div class=\"line\">  PID PR CPU% S  <span class=\"comment\">#THR     VSS     RSS PCY UID      Name</span></div><div class=\"line\"> 8763  0   3% R     1  10640K   1064K  <span class=\"built_in\">fg</span> shell    top</div><div class=\"line\">  131  0   3% S     1      0K      0K  <span class=\"built_in\">fg</span> root     dhd_dpc</div><div class=\"line\"> 6144  0   0% S   115 1682004K 115916K  <span class=\"built_in\">fg</span> system   system_server</div><div class=\"line\">  132  0   0% S     1      0K      0K  <span class=\"built_in\">fg</span> root     dhd_rxf</div><div class=\"line\"> 1731  0   0% S     6  20288K    788K  <span class=\"built_in\">fg</span> root     /system/bin/mpdecision</div><div class=\"line\">  217  0   0% S     6  18008K    356K  <span class=\"built_in\">fg</span> shell    /sbin/adbd</div><div class=\"line\"> ...</div><div class=\"line\"> 7779  2   0% S    19 1538748K  48896K  <span class=\"built_in\">bg</span> u0_a71   com.sohu.inputmethod.sogou:classic</div><div class=\"line\"> 7963  0   0% S    18 1561916K  59568K  <span class=\"built_in\">fg</span> u0_a58   org.mazhuang.boottimemeasure</div><div class=\"line\"> ...</div></pre></td></tr></table></figure>\n<p>各列含义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">列名</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">PID</td>\n<td style=\"text-align:center\">进程 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PR</td>\n<td style=\"text-align:center\">优先级</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CPU%</td>\n<td style=\"text-align:center\">当前瞬间占用 CPU 百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#THR</td>\n<td style=\"text-align:center\">线程数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">VSS</td>\n<td style=\"text-align:center\">Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RSS</td>\n<td style=\"text-align:center\">Resident Set Size 实际使用物理内存（包含共享库占用的内存）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PCY</td>\n<td style=\"text-align:center\">调度策略优先级，SP_BACKGROUND/SPFOREGROUND</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UID</td>\n<td style=\"text-align:center\">进程所有者的用户 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NAME</td>\n<td style=\"text-align:center\">进程名</td>\n</tr>\n</tbody>\n</table>\n<p><code>top</code> 命令还支持一些命令行参数，详细用法如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Usage: top [ -m max_procs ] [ -n iterations ] [ <span class=\"_\">-d</span> delay ] [ <span class=\"_\">-s</span> sort_column ] [ -t ] [ -h ]</div><div class=\"line\">    -m num  最多显示多少个进程</div><div class=\"line\">    -n num  刷新多少次后退出</div><div class=\"line\">    <span class=\"_\">-d</span> num  刷新时间间隔（单位秒，默认值 5）</div><div class=\"line\">    <span class=\"_\">-s</span> col  按某列排序（可用 col 值：cpu, vss, rss, thr）</div><div class=\"line\">    -t      显示线程信息</div><div class=\"line\">    -h      显示帮助文档</div></pre></td></tr></table></figure>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">cat</td>\n<td style=\"text-align:center\">显示文件内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cd</td>\n<td style=\"text-align:center\">切换目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">chmod</td>\n<td style=\"text-align:center\">改变文件的存取模式/访问权限</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">df</td>\n<td style=\"text-align:center\">查看磁盘空间使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">grep</td>\n<td style=\"text-align:center\">过滤输出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">kill</td>\n<td style=\"text-align:center\">杀死指定 PID 的进程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ls</td>\n<td style=\"text-align:center\">列举目录内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mount</td>\n<td style=\"text-align:center\">挂载目录的查看和管理</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mv</td>\n<td style=\"text-align:center\">移动或重命名文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ps</td>\n<td style=\"text-align:center\">查看正在运行的进程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rm</td>\n<td style=\"text-align:center\">删除文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">top</td>\n<td style=\"text-align:center\">查看进程的资源占用情况</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"启动-adb-server-失败\"><a href=\"#启动-adb-server-失败\" class=\"headerlink\" title=\"启动 adb server 失败\"></a>启动 adb server 失败</h3><p><strong>出错提示</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">error: protocol fault (couldn\\<span class=\"string\">'t read status): No error</span></div></pre></td></tr></table></figure>\n<p><strong>可能原因</strong></p>\n<p>adb server 进程想使用的 5037 端口被占用。</p>\n<p><strong>解决方案</strong></p>\n<p>找到占用 5037 端口的进程，然后终止它。以 Windows 下为例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -ano | findstr LISTENING</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">TCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       1548</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>这里 1548 即为进程 ID，用命令结束该进程：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskkill /PID 1548</div></pre></td></tr></table></figure>\n<p>然后再启动 adb 就没问题了。</p>"},{"title":"js高级与面向对象之构造函数","date":"2016-05-20T05:39:33.000Z","_content":"\n首先，什么是_声明_、_初始化_、_赋值_、_定义_?\n* 声明：告诉解析器有这个东西存在\n* 初始化：就理解为第一次赋值\n* 定义：不需要去理解\n* 赋值：改变变量的值，就是赋值\n\n<!-- more -->\n\n## 什么是构造函数？\n\n* 构造函数其实就是一个函数，只是用途跟普通函数不太一样\n* 构造函数一般用于初始化对象\n\n## 构造函数的特点\n\n* 首字母大写\n* 构造函数一般情况下和 `new` 关键字结合使用\n* 构造函数不需要写返回值\n\n构造函数的返回值默认为创建出来的对象，如果手动的去设置返回值\n\n* 设置返回值为基本类型，不会对默认返回值有任何的影响\n* 设置返回值为对象类型，就会替换掉默认的返回值\n\n## 构造函数的执行顺序\n\n* 使用 `new` 关键字创建对象\n* 调用构造函数，并且将构造函数内的 `this` 赋值为新创建的对象\n* 在构造函数内部，使用 `this` 为新创建出来的对象新增成员\n* 默认的返回新创建的这个对象\n\n返回值代码\n\n```js\nfunction Person(){\n    this.name = \"范冰冰\";\n    //初始化对象的代码\n\t//return \"范冰冰\";\n\t//return 123;\n\t//return true;\n\t//return null;\n    return {};\n}\nvar p = new Person();\nconsole.log(p);\n```\n自定义构造函数代码\n\n```js\n//自定义构造函数，就是自己创建的构造函数s\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.kanren = function(){\n        console.log(\"上课再闲聊，我就砍死你\");\n    }\n}\n\nvar p = new Person(\"大飞\", 50);\nconsole.log(p);\np.kanren();\n\nvar p1 = new Person(\"陈浩南\", 30);\nconsole.log(p1);\np1.kanren();\n```\n构造函数补充\n\n```js\n//因为构造函数也是函数\n//所以构造函数可以使用函数的使用方式\n//但是如果把构造函数当做普通函数来使用的话\n//该构造函数内的this就指向了window对象\n//返回值为undefined\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.kanren = function(){\n        console.log(\"上课再闲聊，我就砍死你\");\n    }\n}\n\nvar p = Person(\"谢文东\", 30);\nconsole.log(p);\nwindow.kanren();\n```\n\n## 传统构造函数存在的问题\n\n如果在构造函数内部声明函数，并为新创建的对象方法赋值的话每次创建对象，调用构造函数，都会新创建一个函数出来，每个对象独占一份函数 但是，所有的对象中的方法的代码是一模一样的，没有必要每人一份所以就造成了资源的浪费\n\n### 解决方案一\n\n将构造函数内部给对象的方法赋值的时候的函数声明提出来放到构造函外面，这样，在每次创建对象的时候，就不会再重新声明函数而是直接拿外面的函数地址进行赋值，所以，这样子创建出来的所有的对象都会共享构造函数外面的声明的这个函数\n\n### 解决方案一存在的问题\n\n1. 如果方法过多，会造成全局变量污染\n2. 代码结构会变得混乱不堪，不利于维护\n\n```js\n//解决方案一存在的问题\nfunction eat(){\n    console.log(\"吃个红烧鸡屁股\");\n}\n\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.eat = eat;\n//\t\tthis.eat = function (){\n//\t\tconsole.log(\"吃个红烧鸡屁股\");\n//     }\n}\n\nvar p = new Person(\"唐伯虎\",500);\np.eat();\nvar p1 = new Person(\"李二狗\",81);\np1.eat();\n\nconsole.log(p.eat == p1.eat);\n```\n\n这个问题我们可以通过原型来处理","source":"_posts/javascript-constructor.md","raw":"---\ntitle: js高级与面向对象之构造函数\ndate: 2016-05-20 13:39:33\ntags: \n\t- javascript\n\t- js构造函数\ncategories: javascript\n---\n\n首先，什么是_声明_、_初始化_、_赋值_、_定义_?\n* 声明：告诉解析器有这个东西存在\n* 初始化：就理解为第一次赋值\n* 定义：不需要去理解\n* 赋值：改变变量的值，就是赋值\n\n<!-- more -->\n\n## 什么是构造函数？\n\n* 构造函数其实就是一个函数，只是用途跟普通函数不太一样\n* 构造函数一般用于初始化对象\n\n## 构造函数的特点\n\n* 首字母大写\n* 构造函数一般情况下和 `new` 关键字结合使用\n* 构造函数不需要写返回值\n\n构造函数的返回值默认为创建出来的对象，如果手动的去设置返回值\n\n* 设置返回值为基本类型，不会对默认返回值有任何的影响\n* 设置返回值为对象类型，就会替换掉默认的返回值\n\n## 构造函数的执行顺序\n\n* 使用 `new` 关键字创建对象\n* 调用构造函数，并且将构造函数内的 `this` 赋值为新创建的对象\n* 在构造函数内部，使用 `this` 为新创建出来的对象新增成员\n* 默认的返回新创建的这个对象\n\n返回值代码\n\n```js\nfunction Person(){\n    this.name = \"范冰冰\";\n    //初始化对象的代码\n\t//return \"范冰冰\";\n\t//return 123;\n\t//return true;\n\t//return null;\n    return {};\n}\nvar p = new Person();\nconsole.log(p);\n```\n自定义构造函数代码\n\n```js\n//自定义构造函数，就是自己创建的构造函数s\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.kanren = function(){\n        console.log(\"上课再闲聊，我就砍死你\");\n    }\n}\n\nvar p = new Person(\"大飞\", 50);\nconsole.log(p);\np.kanren();\n\nvar p1 = new Person(\"陈浩南\", 30);\nconsole.log(p1);\np1.kanren();\n```\n构造函数补充\n\n```js\n//因为构造函数也是函数\n//所以构造函数可以使用函数的使用方式\n//但是如果把构造函数当做普通函数来使用的话\n//该构造函数内的this就指向了window对象\n//返回值为undefined\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.kanren = function(){\n        console.log(\"上课再闲聊，我就砍死你\");\n    }\n}\n\nvar p = Person(\"谢文东\", 30);\nconsole.log(p);\nwindow.kanren();\n```\n\n## 传统构造函数存在的问题\n\n如果在构造函数内部声明函数，并为新创建的对象方法赋值的话每次创建对象，调用构造函数，都会新创建一个函数出来，每个对象独占一份函数 但是，所有的对象中的方法的代码是一模一样的，没有必要每人一份所以就造成了资源的浪费\n\n### 解决方案一\n\n将构造函数内部给对象的方法赋值的时候的函数声明提出来放到构造函外面，这样，在每次创建对象的时候，就不会再重新声明函数而是直接拿外面的函数地址进行赋值，所以，这样子创建出来的所有的对象都会共享构造函数外面的声明的这个函数\n\n### 解决方案一存在的问题\n\n1. 如果方法过多，会造成全局变量污染\n2. 代码结构会变得混乱不堪，不利于维护\n\n```js\n//解决方案一存在的问题\nfunction eat(){\n    console.log(\"吃个红烧鸡屁股\");\n}\n\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.eat = eat;\n//\t\tthis.eat = function (){\n//\t\tconsole.log(\"吃个红烧鸡屁股\");\n//     }\n}\n\nvar p = new Person(\"唐伯虎\",500);\np.eat();\nvar p1 = new Person(\"李二狗\",81);\np1.eat();\n\nconsole.log(p.eat == p1.eat);\n```\n\n这个问题我们可以通过原型来处理","slug":"javascript-constructor","published":1,"updated":"2016-11-24T01:25:58.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvnn0017uwg775toj8d7","content":"<p>首先，什么是<em>声明</em>、<em>初始化</em>、<em>赋值</em>、<em>定义</em>?</p>\n<ul>\n<li>声明：告诉解析器有这个东西存在</li>\n<li>初始化：就理解为第一次赋值</li>\n<li>定义：不需要去理解</li>\n<li>赋值：改变变量的值，就是赋值</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"什么是构造函数？\"><a href=\"#什么是构造函数？\" class=\"headerlink\" title=\"什么是构造函数？\"></a>什么是构造函数？</h2><ul>\n<li>构造函数其实就是一个函数，只是用途跟普通函数不太一样</li>\n<li>构造函数一般用于初始化对象</li>\n</ul>\n<h2 id=\"构造函数的特点\"><a href=\"#构造函数的特点\" class=\"headerlink\" title=\"构造函数的特点\"></a>构造函数的特点</h2><ul>\n<li>首字母大写</li>\n<li>构造函数一般情况下和 <code>new</code> 关键字结合使用</li>\n<li>构造函数不需要写返回值</li>\n</ul>\n<p>构造函数的返回值默认为创建出来的对象，如果手动的去设置返回值</p>\n<ul>\n<li>设置返回值为基本类型，不会对默认返回值有任何的影响</li>\n<li>设置返回值为对象类型，就会替换掉默认的返回值</li>\n</ul>\n<h2 id=\"构造函数的执行顺序\"><a href=\"#构造函数的执行顺序\" class=\"headerlink\" title=\"构造函数的执行顺序\"></a>构造函数的执行顺序</h2><ul>\n<li>使用 <code>new</code> 关键字创建对象</li>\n<li>调用构造函数，并且将构造函数内的 <code>this</code> 赋值为新创建的对象</li>\n<li>在构造函数内部，使用 <code>this</code> 为新创建出来的对象新增成员</li>\n<li>默认的返回新创建的这个对象</li>\n</ul>\n<p>返回值代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"范冰冰\"</span>;</div><div class=\"line\">    <span class=\"comment\">//初始化对象的代码</span></div><div class=\"line\">\t<span class=\"comment\">//return \"范冰冰\";</span></div><div class=\"line\">\t<span class=\"comment\">//return 123;</span></div><div class=\"line\">\t<span class=\"comment\">//return true;</span></div><div class=\"line\">\t<span class=\"comment\">//return null;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p);</div></pre></td></tr></table></figure>\n<p>自定义构造函数代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//自定义构造函数，就是自己创建的构造函数s</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.kanren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"上课再闲聊，我就砍死你\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"大飞\"</span>, <span class=\"number\">50</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p);</div><div class=\"line\">p.kanren();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"陈浩南\"</span>, <span class=\"number\">30</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1);</div><div class=\"line\">p1.kanren();</div></pre></td></tr></table></figure>\n<p>构造函数补充</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//因为构造函数也是函数</span></div><div class=\"line\"><span class=\"comment\">//所以构造函数可以使用函数的使用方式</span></div><div class=\"line\"><span class=\"comment\">//但是如果把构造函数当做普通函数来使用的话</span></div><div class=\"line\"><span class=\"comment\">//该构造函数内的this就指向了window对象</span></div><div class=\"line\"><span class=\"comment\">//返回值为undefined</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.kanren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"上课再闲聊，我就砍死你\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = Person(<span class=\"string\">\"谢文东\"</span>, <span class=\"number\">30</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p);</div><div class=\"line\"><span class=\"built_in\">window</span>.kanren();</div></pre></td></tr></table></figure>\n<h2 id=\"传统构造函数存在的问题\"><a href=\"#传统构造函数存在的问题\" class=\"headerlink\" title=\"传统构造函数存在的问题\"></a>传统构造函数存在的问题</h2><p>如果在构造函数内部声明函数，并为新创建的对象方法赋值的话每次创建对象，调用构造函数，都会新创建一个函数出来，每个对象独占一份函数 但是，所有的对象中的方法的代码是一模一样的，没有必要每人一份所以就造成了资源的浪费</p>\n<h3 id=\"解决方案一\"><a href=\"#解决方案一\" class=\"headerlink\" title=\"解决方案一\"></a>解决方案一</h3><p>将构造函数内部给对象的方法赋值的时候的函数声明提出来放到构造函外面，这样，在每次创建对象的时候，就不会再重新声明函数而是直接拿外面的函数地址进行赋值，所以，这样子创建出来的所有的对象都会共享构造函数外面的声明的这个函数</p>\n<h3 id=\"解决方案一存在的问题\"><a href=\"#解决方案一存在的问题\" class=\"headerlink\" title=\"解决方案一存在的问题\"></a>解决方案一存在的问题</h3><ol>\n<li>如果方法过多，会造成全局变量污染</li>\n<li>代码结构会变得混乱不堪，不利于维护</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//解决方案一存在的问题</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"吃个红烧鸡屁股\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eat = eat;</div><div class=\"line\"><span class=\"comment\">//\t\tthis.eat = function ()&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\tconsole.log(\"吃个红烧鸡屁股\");</span></div><div class=\"line\"><span class=\"comment\">//     &#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"唐伯虎\"</span>,<span class=\"number\">500</span>);</div><div class=\"line\">p.eat();</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"李二狗\"</span>,<span class=\"number\">81</span>);</div><div class=\"line\">p1.eat();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.eat == p1.eat);</div></pre></td></tr></table></figure>\n<p>这个问题我们可以通过原型来处理</p>\n","excerpt":"<p>首先，什么是<em>声明</em>、<em>初始化</em>、<em>赋值</em>、<em>定义</em>?</p>\n<ul>\n<li>声明：告诉解析器有这个东西存在</li>\n<li>初始化：就理解为第一次赋值</li>\n<li>定义：不需要去理解</li>\n<li>赋值：改变变量的值，就是赋值</li>\n</ul>","more":"<h2 id=\"什么是构造函数？\"><a href=\"#什么是构造函数？\" class=\"headerlink\" title=\"什么是构造函数？\"></a>什么是构造函数？</h2><ul>\n<li>构造函数其实就是一个函数，只是用途跟普通函数不太一样</li>\n<li>构造函数一般用于初始化对象</li>\n</ul>\n<h2 id=\"构造函数的特点\"><a href=\"#构造函数的特点\" class=\"headerlink\" title=\"构造函数的特点\"></a>构造函数的特点</h2><ul>\n<li>首字母大写</li>\n<li>构造函数一般情况下和 <code>new</code> 关键字结合使用</li>\n<li>构造函数不需要写返回值</li>\n</ul>\n<p>构造函数的返回值默认为创建出来的对象，如果手动的去设置返回值</p>\n<ul>\n<li>设置返回值为基本类型，不会对默认返回值有任何的影响</li>\n<li>设置返回值为对象类型，就会替换掉默认的返回值</li>\n</ul>\n<h2 id=\"构造函数的执行顺序\"><a href=\"#构造函数的执行顺序\" class=\"headerlink\" title=\"构造函数的执行顺序\"></a>构造函数的执行顺序</h2><ul>\n<li>使用 <code>new</code> 关键字创建对象</li>\n<li>调用构造函数，并且将构造函数内的 <code>this</code> 赋值为新创建的对象</li>\n<li>在构造函数内部，使用 <code>this</code> 为新创建出来的对象新增成员</li>\n<li>默认的返回新创建的这个对象</li>\n</ul>\n<p>返回值代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"范冰冰\"</span>;</div><div class=\"line\">    <span class=\"comment\">//初始化对象的代码</span></div><div class=\"line\">\t<span class=\"comment\">//return \"范冰冰\";</span></div><div class=\"line\">\t<span class=\"comment\">//return 123;</span></div><div class=\"line\">\t<span class=\"comment\">//return true;</span></div><div class=\"line\">\t<span class=\"comment\">//return null;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p);</div></pre></td></tr></table></figure>\n<p>自定义构造函数代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//自定义构造函数，就是自己创建的构造函数s</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.kanren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"上课再闲聊，我就砍死你\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"大飞\"</span>, <span class=\"number\">50</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p);</div><div class=\"line\">p.kanren();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"陈浩南\"</span>, <span class=\"number\">30</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1);</div><div class=\"line\">p1.kanren();</div></pre></td></tr></table></figure>\n<p>构造函数补充</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//因为构造函数也是函数</span></div><div class=\"line\"><span class=\"comment\">//所以构造函数可以使用函数的使用方式</span></div><div class=\"line\"><span class=\"comment\">//但是如果把构造函数当做普通函数来使用的话</span></div><div class=\"line\"><span class=\"comment\">//该构造函数内的this就指向了window对象</span></div><div class=\"line\"><span class=\"comment\">//返回值为undefined</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.kanren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"上课再闲聊，我就砍死你\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = Person(<span class=\"string\">\"谢文东\"</span>, <span class=\"number\">30</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p);</div><div class=\"line\"><span class=\"built_in\">window</span>.kanren();</div></pre></td></tr></table></figure>\n<h2 id=\"传统构造函数存在的问题\"><a href=\"#传统构造函数存在的问题\" class=\"headerlink\" title=\"传统构造函数存在的问题\"></a>传统构造函数存在的问题</h2><p>如果在构造函数内部声明函数，并为新创建的对象方法赋值的话每次创建对象，调用构造函数，都会新创建一个函数出来，每个对象独占一份函数 但是，所有的对象中的方法的代码是一模一样的，没有必要每人一份所以就造成了资源的浪费</p>\n<h3 id=\"解决方案一\"><a href=\"#解决方案一\" class=\"headerlink\" title=\"解决方案一\"></a>解决方案一</h3><p>将构造函数内部给对象的方法赋值的时候的函数声明提出来放到构造函外面，这样，在每次创建对象的时候，就不会再重新声明函数而是直接拿外面的函数地址进行赋值，所以，这样子创建出来的所有的对象都会共享构造函数外面的声明的这个函数</p>\n<h3 id=\"解决方案一存在的问题\"><a href=\"#解决方案一存在的问题\" class=\"headerlink\" title=\"解决方案一存在的问题\"></a>解决方案一存在的问题</h3><ol>\n<li>如果方法过多，会造成全局变量污染</li>\n<li>代码结构会变得混乱不堪，不利于维护</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//解决方案一存在的问题</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"吃个红烧鸡屁股\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eat = eat;</div><div class=\"line\"><span class=\"comment\">//\t\tthis.eat = function ()&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\tconsole.log(\"吃个红烧鸡屁股\");</span></div><div class=\"line\"><span class=\"comment\">//     &#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"唐伯虎\"</span>,<span class=\"number\">500</span>);</div><div class=\"line\">p.eat();</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"李二狗\"</span>,<span class=\"number\">81</span>);</div><div class=\"line\">p1.eat();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.eat == p1.eat);</div></pre></td></tr></table></figure>\n<p>这个问题我们可以通过原型来处理</p>"},{"title":"js高级与面向对象之函数","date":"2016-07-22T11:40:39.000Z","_content":"\n## 函数声明\n\n```js\nfunction func(){\n    //函数体\n}\n//2.函数表达式\nvar func1 = function(){\n\n}\n//3.通过Function构造函数来创建\nvar func2 = new Function();\n```\n<!-- more -->\n\n### 函数的name属性\n\n```js\nfunction Person(){\n\n}\nvar p = new Person();\n//p.constructor\nconsole.log(typeof p);  //object\nconsole.log(p.constructor.toString());\nconsole.log(Person.name);\nconsole.log(p.constructor.name);\n```\n\n函数都会有一个 `name` 属性，所以我们可以通过对象先找到构造函数，然后直接访问构造函数的 `name` ，就拿到了具体类型\n\n## Function的使用\n\n### 语法:\n\n```js\n//Function函数所有的参数全都是字符串\n//Function函数的作用就是将所有的参数组合起来，变成一个函数\n//1、如果只传一个参数，那么这个函数必然是函数体\n//2、如果传多个参数，那么最后一个参数表示函数体，前面的参数代表将要创建的函数的参数\n//3、如果不传参数，表示创建一个空函数\nnew Function(arg1, arg2, arg3, ..., argN, body);\n```\n\n### 创建一个打印一句话的函数\n\n```js\n//传统的方式\nfunction foo(){\n    console.log(\"你好\");\n}\n\n//使用Function\nvar func = new Function(\"console.log('你好');\");\n```\n\n### 创建一个空函数\n\n```js\n//传统的方式\nfunction foo(){}\n\n//Function\nvar func = new Function();\n```\n\n### 创建一个有参数的函数\n\n```js\n//传统的方式\nfunction foo(num){\n    console.log(num);\n}\n\n//Function\n\nvar func = new Function(){\"num\", \"console.log(num);\"};\n```\n\n## 静态成员与实例成员的概念\n\n静态成员和实例成员这两个概念其实也是从面相对象的编程语言中引入的，对应到 `JavaScript` 中的理解为：\n\n### 静态成员\n\n* 静态成员是指静态属性和静态方法，所谓静态，就是有构造函数提供的。\n\n### 实例成员\n\n* 实例成员是值实例属性和实例方法，所谓实例，就是由构造函数创建出来的对象。\n\n### 举例说明\n\n```js\nfunction Person(){\n    this.name = \"zs\",\n    this.sayHello = function(){\n        console.log(\"Hello World\");\n    }\n}\n\n//下面这个sayHi方法就是构造函数自己的方法，也就是静态方法\nPerson.sayHi = function(){\n    console.log(\"I'm a Person\");\n}\n\n//原型属性属于构造函数，所以原型属性是静态属性\nPerson.prototype = {};\nvar p = new Person();\n\n//这里的name是构造函数创建出来的实例对象的属性，所以是实例属性\np.name = \"李四\";\n\n\n//这里的sayHello也是构造函数创建出来的实例对象的方法，所以是实例方法\np.sayHello();\n```\n提示：\n\n一般工具型方法都有静态成员提供, 一般与实例对象有关的方法由实例成员表示.\n\n工具方法：比如 `jQuery.Ajax()` 、 `jQuery.trim()` 、 `jQuery.Each()`","source":"_posts/javascript-Function.md","raw":"---\ntitle: js高级与面向对象之函数\ndate: 2016-07-22 19:40:39\ntags:\n\t- Function\ncategories: javascript\n---\n\n## 函数声明\n\n```js\nfunction func(){\n    //函数体\n}\n//2.函数表达式\nvar func1 = function(){\n\n}\n//3.通过Function构造函数来创建\nvar func2 = new Function();\n```\n<!-- more -->\n\n### 函数的name属性\n\n```js\nfunction Person(){\n\n}\nvar p = new Person();\n//p.constructor\nconsole.log(typeof p);  //object\nconsole.log(p.constructor.toString());\nconsole.log(Person.name);\nconsole.log(p.constructor.name);\n```\n\n函数都会有一个 `name` 属性，所以我们可以通过对象先找到构造函数，然后直接访问构造函数的 `name` ，就拿到了具体类型\n\n## Function的使用\n\n### 语法:\n\n```js\n//Function函数所有的参数全都是字符串\n//Function函数的作用就是将所有的参数组合起来，变成一个函数\n//1、如果只传一个参数，那么这个函数必然是函数体\n//2、如果传多个参数，那么最后一个参数表示函数体，前面的参数代表将要创建的函数的参数\n//3、如果不传参数，表示创建一个空函数\nnew Function(arg1, arg2, arg3, ..., argN, body);\n```\n\n### 创建一个打印一句话的函数\n\n```js\n//传统的方式\nfunction foo(){\n    console.log(\"你好\");\n}\n\n//使用Function\nvar func = new Function(\"console.log('你好');\");\n```\n\n### 创建一个空函数\n\n```js\n//传统的方式\nfunction foo(){}\n\n//Function\nvar func = new Function();\n```\n\n### 创建一个有参数的函数\n\n```js\n//传统的方式\nfunction foo(num){\n    console.log(num);\n}\n\n//Function\n\nvar func = new Function(){\"num\", \"console.log(num);\"};\n```\n\n## 静态成员与实例成员的概念\n\n静态成员和实例成员这两个概念其实也是从面相对象的编程语言中引入的，对应到 `JavaScript` 中的理解为：\n\n### 静态成员\n\n* 静态成员是指静态属性和静态方法，所谓静态，就是有构造函数提供的。\n\n### 实例成员\n\n* 实例成员是值实例属性和实例方法，所谓实例，就是由构造函数创建出来的对象。\n\n### 举例说明\n\n```js\nfunction Person(){\n    this.name = \"zs\",\n    this.sayHello = function(){\n        console.log(\"Hello World\");\n    }\n}\n\n//下面这个sayHi方法就是构造函数自己的方法，也就是静态方法\nPerson.sayHi = function(){\n    console.log(\"I'm a Person\");\n}\n\n//原型属性属于构造函数，所以原型属性是静态属性\nPerson.prototype = {};\nvar p = new Person();\n\n//这里的name是构造函数创建出来的实例对象的属性，所以是实例属性\np.name = \"李四\";\n\n\n//这里的sayHello也是构造函数创建出来的实例对象的方法，所以是实例方法\np.sayHello();\n```\n提示：\n\n一般工具型方法都有静态成员提供, 一般与实例对象有关的方法由实例成员表示.\n\n工具方法：比如 `jQuery.Ajax()` 、 `jQuery.trim()` 、 `jQuery.Each()`","slug":"javascript-Function","published":1,"updated":"2016-11-24T01:28:37.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvnu001auwg72y3af5m6","content":"<h2 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//2.函数表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> func1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//3.通过Function构造函数来创建</span></div><div class=\"line\"><span class=\"keyword\">var</span> func2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>();</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"函数的name属性\"><a href=\"#函数的name属性\" class=\"headerlink\" title=\"函数的name属性\"></a>函数的name属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"comment\">//p.constructor</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> p);  <span class=\"comment\">//object</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.constructor.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.name);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.constructor.name);</div></pre></td></tr></table></figure>\n<p>函数都会有一个 <code>name</code> 属性，所以我们可以通过对象先找到构造函数，然后直接访问构造函数的 <code>name</code> ，就拿到了具体类型</p>\n<h2 id=\"Function的使用\"><a href=\"#Function的使用\" class=\"headerlink\" title=\"Function的使用\"></a>Function的使用</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法:\"></a>语法:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Function函数所有的参数全都是字符串</span></div><div class=\"line\"><span class=\"comment\">//Function函数的作用就是将所有的参数组合起来，变成一个函数</span></div><div class=\"line\"><span class=\"comment\">//1、如果只传一个参数，那么这个函数必然是函数体</span></div><div class=\"line\"><span class=\"comment\">//2、如果传多个参数，那么最后一个参数表示函数体，前面的参数代表将要创建的函数的参数</span></div><div class=\"line\"><span class=\"comment\">//3、如果不传参数，表示创建一个空函数</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(arg1, arg2, arg3, ..., argN, body);</div></pre></td></tr></table></figure>\n<h3 id=\"创建一个打印一句话的函数\"><a href=\"#创建一个打印一句话的函数\" class=\"headerlink\" title=\"创建一个打印一句话的函数\"></a>创建一个打印一句话的函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传统的方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用Function</span></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"console.log('你好');\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"创建一个空函数\"><a href=\"#创建一个空函数\" class=\"headerlink\" title=\"创建一个空函数\"></a>创建一个空函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传统的方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Function</span></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>();</div></pre></td></tr></table></figure>\n<h3 id=\"创建一个有参数的函数\"><a href=\"#创建一个有参数的函数\" class=\"headerlink\" title=\"创建一个有参数的函数\"></a>创建一个有参数的函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传统的方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()&#123;<span class=\"string\">\"num\"</span>, <span class=\"string\">\"console.log(num);\"</span>&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"静态成员与实例成员的概念\"><a href=\"#静态成员与实例成员的概念\" class=\"headerlink\" title=\"静态成员与实例成员的概念\"></a>静态成员与实例成员的概念</h2><p>静态成员和实例成员这两个概念其实也是从面相对象的编程语言中引入的，对应到 <code>JavaScript</code> 中的理解为：</p>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><ul>\n<li>静态成员是指静态属性和静态方法，所谓静态，就是有构造函数提供的。</li>\n</ul>\n<h3 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h3><ul>\n<li>实例成员是值实例属性和实例方法，所谓实例，就是由构造函数创建出来的对象。</li>\n</ul>\n<h3 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"zs\"</span>,</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面这个sayHi方法就是构造函数自己的方法，也就是静态方法</span></div><div class=\"line\">Person.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"I'm a Person\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//原型属性属于构造函数，所以原型属性是静态属性</span></div><div class=\"line\">Person.prototype = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里的name是构造函数创建出来的实例对象的属性，所以是实例属性</span></div><div class=\"line\">p.name = <span class=\"string\">\"李四\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里的sayHello也是构造函数创建出来的实例对象的方法，所以是实例方法</span></div><div class=\"line\">p.sayHello();</div></pre></td></tr></table></figure>\n<p>提示：</p>\n<p>一般工具型方法都有静态成员提供, 一般与实例对象有关的方法由实例成员表示.</p>\n<p>工具方法：比如 <code>jQuery.Ajax()</code> 、 <code>jQuery.trim()</code> 、 <code>jQuery.Each()</code></p>\n","excerpt":"<h2 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//2.函数表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> func1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//3.通过Function构造函数来创建</span></div><div class=\"line\"><span class=\"keyword\">var</span> func2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>();</div></pre></td></tr></table></figure>","more":"<h3 id=\"函数的name属性\"><a href=\"#函数的name属性\" class=\"headerlink\" title=\"函数的name属性\"></a>函数的name属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"comment\">//p.constructor</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> p);  <span class=\"comment\">//object</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.constructor.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.name);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.constructor.name);</div></pre></td></tr></table></figure>\n<p>函数都会有一个 <code>name</code> 属性，所以我们可以通过对象先找到构造函数，然后直接访问构造函数的 <code>name</code> ，就拿到了具体类型</p>\n<h2 id=\"Function的使用\"><a href=\"#Function的使用\" class=\"headerlink\" title=\"Function的使用\"></a>Function的使用</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法:\"></a>语法:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Function函数所有的参数全都是字符串</span></div><div class=\"line\"><span class=\"comment\">//Function函数的作用就是将所有的参数组合起来，变成一个函数</span></div><div class=\"line\"><span class=\"comment\">//1、如果只传一个参数，那么这个函数必然是函数体</span></div><div class=\"line\"><span class=\"comment\">//2、如果传多个参数，那么最后一个参数表示函数体，前面的参数代表将要创建的函数的参数</span></div><div class=\"line\"><span class=\"comment\">//3、如果不传参数，表示创建一个空函数</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(arg1, arg2, arg3, ..., argN, body);</div></pre></td></tr></table></figure>\n<h3 id=\"创建一个打印一句话的函数\"><a href=\"#创建一个打印一句话的函数\" class=\"headerlink\" title=\"创建一个打印一句话的函数\"></a>创建一个打印一句话的函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传统的方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用Function</span></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"console.log('你好');\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"创建一个空函数\"><a href=\"#创建一个空函数\" class=\"headerlink\" title=\"创建一个空函数\"></a>创建一个空函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传统的方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Function</span></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>();</div></pre></td></tr></table></figure>\n<h3 id=\"创建一个有参数的函数\"><a href=\"#创建一个有参数的函数\" class=\"headerlink\" title=\"创建一个有参数的函数\"></a>创建一个有参数的函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传统的方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()&#123;<span class=\"string\">\"num\"</span>, <span class=\"string\">\"console.log(num);\"</span>&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"静态成员与实例成员的概念\"><a href=\"#静态成员与实例成员的概念\" class=\"headerlink\" title=\"静态成员与实例成员的概念\"></a>静态成员与实例成员的概念</h2><p>静态成员和实例成员这两个概念其实也是从面相对象的编程语言中引入的，对应到 <code>JavaScript</code> 中的理解为：</p>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><ul>\n<li>静态成员是指静态属性和静态方法，所谓静态，就是有构造函数提供的。</li>\n</ul>\n<h3 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h3><ul>\n<li>实例成员是值实例属性和实例方法，所谓实例，就是由构造函数创建出来的对象。</li>\n</ul>\n<h3 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"zs\"</span>,</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面这个sayHi方法就是构造函数自己的方法，也就是静态方法</span></div><div class=\"line\">Person.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"I'm a Person\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//原型属性属于构造函数，所以原型属性是静态属性</span></div><div class=\"line\">Person.prototype = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里的name是构造函数创建出来的实例对象的属性，所以是实例属性</span></div><div class=\"line\">p.name = <span class=\"string\">\"李四\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里的sayHello也是构造函数创建出来的实例对象的方法，所以是实例方法</span></div><div class=\"line\">p.sayHello();</div></pre></td></tr></table></figure>\n<p>提示：</p>\n<p>一般工具型方法都有静态成员提供, 一般与实例对象有关的方法由实例成员表示.</p>\n<p>工具方法：比如 <code>jQuery.Ajax()</code> 、 <code>jQuery.trim()</code> 、 <code>jQuery.Each()</code></p>"},{"title":"js高级与面向对象之继承","date":"2016-06-15T05:43:28.000Z","_content":"\n一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承\n\n<!-- more -->\n\n## 继承的实现方式\n\n### 混入式继承\n\n```js\nvar obj = {};\nvar obj1 = {\n    money : 10000000,\n    car : 100,\n    brand: \"布加迪威航\",\n    huaqian: function(){\n        console.log(\"不差钱，随便花\");\n    }\n};\nconsole.log(obj);\n\nfor(var k in obj1){\n    //money\n    //car\n    //brand\n    //huaqian\n    obj[k] = obj1[k];\n}\n\nconsole.log(obj);\n```\n\n### 原型继承\n\n* 通过修改原型实现的继承 就是原型继承\n\t通过构造函数创建出来的对象继承自构造函数的原型对象\n\n```js\nvar human = {\n    gender:\"female\",\n    height: 170,\n    weight: 50\n}\nfunction Person(){\n\n}\n//Person.prototype.name = \"王莉莉\";\n```\n\n#### 原型继承的方式\n\n1. 通过混入的方式给原型添加属性和方法\n\n```js\n//Person.prototype\nvar human = {\n    gender:\"female\",\n    height: 170,\n    weight: 50\n}\nfunction Person(){\n\n}\nPerson.prototype.name = \"王莉莉\";\n\nfor(var k in human){\n    Person.prototype[k] = human[k];\n}\nvar p = new Person();\nconsole.log(p.name,p.gender,p.height,p.weight);\n```\n\n2. 修改原型对象\n\n```js\nPerson.prototype.maimeng = function (){\n    console.log(\"感觉自己萌萌哒\");\n}\n\np.maimeng();\n```\n\n3. 替换原型对象\n\n```js\nPerson.prototype = human;\nvar p = new Person();\nconsole.log(p.gender);\n```\n\n### 经典继承\n\n《JavaScript语言精粹》\n* 调用一个方法，就能实现继承\n`var obj1 = Object.create(obj)`\n* 创建出来一个新的继承自参数 `obj` 的对象 `obj1` \n* 其实内部使用的就是原型继承\n* ES5才支持的这个方法 需要考虑兼容性问题\n\n```js\nvar human = {\n    name: \"王莉莉\",\n    gender: \"female\",\n    dance :function(){\n        console.log(\"二人转，转转转\")\n    }\n}\n\nvar obj = Object.create(human);\n\nconsole.log(obj);\n```\n\n## 处理经典继承的兼容性问题\n\n```js\nif(Object.create){\n    var obj = Object.create({name:\"李狗二\",age:18});\n}else{\n    Object.create = function(obj){\n\n\t\t//在这个函数中要实现的功能\n\t\t//就是，创建一个对象，将obj设置为该对象的原型\n\n\t\t//要设置原型，只能通过两种方式，\n\t\t// 一种是 对象.__proto__  另外一种是 构造函数.prototype\n\t\t//由于__proto__这个属性有兼容性问题，所以不使用\n\t\t//就只能使用 构造函数.prototype 去替换原型对象了\n\n        function F(){}\n        F.prototype = obj;\n        var result = new F();\n        return result;\n    }\n}\n\n//不推荐直接修改内置对象，因为在多人开发的时候，会产生冲突\n\nObject.creat = function () {\n    console.log(\"我是李二狗，我的create方法就是用来输出这句话的，哈哈哈\");\n}\n\nfunction hanyingxinCreate(obj){\n    if(Object.create){\n        return Object.creat(obj);\n    }else{\n        function F(){}\n        F.prototype = obj;\n        var result = new F();\n        return result;\n    }\n}\n\n```\n\n## 继承的实际应用\n\n* 扩展内置对象\n\n* 扩展 `string` 的方法  `trim()`\n\n```js\n//$.trim()\n\nArray.prototype.sayHello = function () {\n   console.log(\"Hello, i'm a Array\")\n}\n\nvar arr = new Array();\narr.sayHello();\n\nvar arr1 = [];\narr1.sayHello();\n\n//需求分析\n//1.创建出来的对象得有数组的所有的方法和属性\n//2.创建输出来的对象得有sayHello方法\n//3.不能修改原生的内置对象\n\n\nfunction MyArray(){\n\n}\n\nMyArray.prototype = [];\nMyArray.prototype.sayHello = function () {\n    console.log(\"相加就加，随心所欲，为所欲为\");\n}\n\nvar myArr = new MyArray();\nmyArr.push(1,2,3,4,4,5);\nconsole.log(myArr);\nmyArr.sayHello();\n```","source":"_posts/javascript-inherit.md","raw":"---\ntitle: js高级与面向对象之继承\ndate: 2016-06-15 13:43:28\ntags: \n\t- javascript\n\t- js面向对象\n\t- 继承\n\t- 继承的实现方式\ncategories: javascript\n---\n\n一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承\n\n<!-- more -->\n\n## 继承的实现方式\n\n### 混入式继承\n\n```js\nvar obj = {};\nvar obj1 = {\n    money : 10000000,\n    car : 100,\n    brand: \"布加迪威航\",\n    huaqian: function(){\n        console.log(\"不差钱，随便花\");\n    }\n};\nconsole.log(obj);\n\nfor(var k in obj1){\n    //money\n    //car\n    //brand\n    //huaqian\n    obj[k] = obj1[k];\n}\n\nconsole.log(obj);\n```\n\n### 原型继承\n\n* 通过修改原型实现的继承 就是原型继承\n\t通过构造函数创建出来的对象继承自构造函数的原型对象\n\n```js\nvar human = {\n    gender:\"female\",\n    height: 170,\n    weight: 50\n}\nfunction Person(){\n\n}\n//Person.prototype.name = \"王莉莉\";\n```\n\n#### 原型继承的方式\n\n1. 通过混入的方式给原型添加属性和方法\n\n```js\n//Person.prototype\nvar human = {\n    gender:\"female\",\n    height: 170,\n    weight: 50\n}\nfunction Person(){\n\n}\nPerson.prototype.name = \"王莉莉\";\n\nfor(var k in human){\n    Person.prototype[k] = human[k];\n}\nvar p = new Person();\nconsole.log(p.name,p.gender,p.height,p.weight);\n```\n\n2. 修改原型对象\n\n```js\nPerson.prototype.maimeng = function (){\n    console.log(\"感觉自己萌萌哒\");\n}\n\np.maimeng();\n```\n\n3. 替换原型对象\n\n```js\nPerson.prototype = human;\nvar p = new Person();\nconsole.log(p.gender);\n```\n\n### 经典继承\n\n《JavaScript语言精粹》\n* 调用一个方法，就能实现继承\n`var obj1 = Object.create(obj)`\n* 创建出来一个新的继承自参数 `obj` 的对象 `obj1` \n* 其实内部使用的就是原型继承\n* ES5才支持的这个方法 需要考虑兼容性问题\n\n```js\nvar human = {\n    name: \"王莉莉\",\n    gender: \"female\",\n    dance :function(){\n        console.log(\"二人转，转转转\")\n    }\n}\n\nvar obj = Object.create(human);\n\nconsole.log(obj);\n```\n\n## 处理经典继承的兼容性问题\n\n```js\nif(Object.create){\n    var obj = Object.create({name:\"李狗二\",age:18});\n}else{\n    Object.create = function(obj){\n\n\t\t//在这个函数中要实现的功能\n\t\t//就是，创建一个对象，将obj设置为该对象的原型\n\n\t\t//要设置原型，只能通过两种方式，\n\t\t// 一种是 对象.__proto__  另外一种是 构造函数.prototype\n\t\t//由于__proto__这个属性有兼容性问题，所以不使用\n\t\t//就只能使用 构造函数.prototype 去替换原型对象了\n\n        function F(){}\n        F.prototype = obj;\n        var result = new F();\n        return result;\n    }\n}\n\n//不推荐直接修改内置对象，因为在多人开发的时候，会产生冲突\n\nObject.creat = function () {\n    console.log(\"我是李二狗，我的create方法就是用来输出这句话的，哈哈哈\");\n}\n\nfunction hanyingxinCreate(obj){\n    if(Object.create){\n        return Object.creat(obj);\n    }else{\n        function F(){}\n        F.prototype = obj;\n        var result = new F();\n        return result;\n    }\n}\n\n```\n\n## 继承的实际应用\n\n* 扩展内置对象\n\n* 扩展 `string` 的方法  `trim()`\n\n```js\n//$.trim()\n\nArray.prototype.sayHello = function () {\n   console.log(\"Hello, i'm a Array\")\n}\n\nvar arr = new Array();\narr.sayHello();\n\nvar arr1 = [];\narr1.sayHello();\n\n//需求分析\n//1.创建出来的对象得有数组的所有的方法和属性\n//2.创建输出来的对象得有sayHello方法\n//3.不能修改原生的内置对象\n\n\nfunction MyArray(){\n\n}\n\nMyArray.prototype = [];\nMyArray.prototype.sayHello = function () {\n    console.log(\"相加就加，随心所欲，为所欲为\");\n}\n\nvar myArr = new MyArray();\nmyArr.push(1,2,3,4,4,5);\nconsole.log(myArr);\nmyArr.sayHello();\n```","slug":"javascript-inherit","published":1,"updated":"2016-11-24T01:27:30.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvny001guwg79jxyasfx","content":"<p>一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承</p>\n<a id=\"more\"></a>\n<h2 id=\"继承的实现方式\"><a href=\"#继承的实现方式\" class=\"headerlink\" title=\"继承的实现方式\"></a>继承的实现方式</h2><h3 id=\"混入式继承\"><a href=\"#混入式继承\" class=\"headerlink\" title=\"混入式继承\"></a>混入式继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">    <span class=\"attr\">money</span> : <span class=\"number\">10000000</span>,</div><div class=\"line\">    <span class=\"attr\">car</span> : <span class=\"number\">100</span>,</div><div class=\"line\">    <span class=\"attr\">brand</span>: <span class=\"string\">\"布加迪威航\"</span>,</div><div class=\"line\">    <span class=\"attr\">huaqian</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"不差钱，随便花\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj1)&#123;</div><div class=\"line\">    <span class=\"comment\">//money</span></div><div class=\"line\">    <span class=\"comment\">//car</span></div><div class=\"line\">    <span class=\"comment\">//brand</span></div><div class=\"line\">    <span class=\"comment\">//huaqian</span></div><div class=\"line\">    obj[k] = obj1[k];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj);</div></pre></td></tr></table></figure>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><ul>\n<li>通过修改原型实现的继承 就是原型继承<br>  通过构造函数创建出来的对象继承自构造函数的原型对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">\"female\"</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">170</span>,</div><div class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"number\">50</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Person.prototype.name = \"王莉莉\";</span></div></pre></td></tr></table></figure>\n<h4 id=\"原型继承的方式\"><a href=\"#原型继承的方式\" class=\"headerlink\" title=\"原型继承的方式\"></a>原型继承的方式</h4><ol>\n<li>通过混入的方式给原型添加属性和方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Person.prototype</span></div><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">\"female\"</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">170</span>,</div><div class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"number\">50</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">\"王莉莉\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> human)&#123;</div><div class=\"line\">    Person.prototype[k] = human[k];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.name,p.gender,p.height,p.weight);</div></pre></td></tr></table></figure>\n<ol>\n<li>修改原型对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype.maimeng = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"感觉自己萌萌哒\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">p.maimeng();</div></pre></td></tr></table></figure>\n<ol>\n<li>替换原型对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype = human;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.gender);</div></pre></td></tr></table></figure>\n<h3 id=\"经典继承\"><a href=\"#经典继承\" class=\"headerlink\" title=\"经典继承\"></a>经典继承</h3><p>《JavaScript语言精粹》</p>\n<ul>\n<li>调用一个方法，就能实现继承<br><code>var obj1 = Object.create(obj)</code></li>\n<li>创建出来一个新的继承自参数 <code>obj</code> 的对象 <code>obj1</code> </li>\n<li>其实内部使用的就是原型继承</li>\n<li>ES5才支持的这个方法 需要考虑兼容性问题</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"王莉莉\"</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">\"female\"</span>,</div><div class=\"line\">    <span class=\"attr\">dance</span> :<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"二人转，转转转\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(human);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj);</div></pre></td></tr></table></figure>\n<h2 id=\"处理经典继承的兼容性问题\"><a href=\"#处理经典继承的兼容性问题\" class=\"headerlink\" title=\"处理经典继承的兼容性问题\"></a>处理经典继承的兼容性问题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.create)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"李狗二\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//在这个函数中要实现的功能</span></div><div class=\"line\">\t\t<span class=\"comment\">//就是，创建一个对象，将obj设置为该对象的原型</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//要设置原型，只能通过两种方式，</span></div><div class=\"line\">\t\t<span class=\"comment\">// 一种是 对象.__proto__  另外一种是 构造函数.prototype</span></div><div class=\"line\">\t\t<span class=\"comment\">//由于__proto__这个属性有兼容性问题，所以不使用</span></div><div class=\"line\">\t\t<span class=\"comment\">//就只能使用 构造函数.prototype 去替换原型对象了</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">        F.prototype = obj;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//不推荐直接修改内置对象，因为在多人开发的时候，会产生冲突</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.creat = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是李二狗，我的create方法就是用来输出这句话的，哈哈哈\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hanyingxinCreate</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.create)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.creat(obj);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">        F.prototype = obj;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"继承的实际应用\"><a href=\"#继承的实际应用\" class=\"headerlink\" title=\"继承的实际应用\"></a>继承的实际应用</h2><ul>\n<li><p>扩展内置对象</p>\n</li>\n<li><p>扩展 <code>string</code> 的方法  <code>trim()</code></p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//$.trim()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, i'm a Array\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">arr.sayHello();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [];</div><div class=\"line\">arr1.sayHello();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//需求分析</span></div><div class=\"line\"><span class=\"comment\">//1.创建出来的对象得有数组的所有的方法和属性</span></div><div class=\"line\"><span class=\"comment\">//2.创建输出来的对象得有sayHello方法</span></div><div class=\"line\"><span class=\"comment\">//3.不能修改原生的内置对象</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyArray</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyArray.prototype = [];</div><div class=\"line\">MyArray.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"相加就加，随心所欲，为所欲为\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myArr = <span class=\"keyword\">new</span> MyArray();</div><div class=\"line\">myArr.push(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myArr);</div><div class=\"line\">myArr.sayHello();</div></pre></td></tr></table></figure>","excerpt":"<p>一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承</p>","more":"<h2 id=\"继承的实现方式\"><a href=\"#继承的实现方式\" class=\"headerlink\" title=\"继承的实现方式\"></a>继承的实现方式</h2><h3 id=\"混入式继承\"><a href=\"#混入式继承\" class=\"headerlink\" title=\"混入式继承\"></a>混入式继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">    <span class=\"attr\">money</span> : <span class=\"number\">10000000</span>,</div><div class=\"line\">    <span class=\"attr\">car</span> : <span class=\"number\">100</span>,</div><div class=\"line\">    <span class=\"attr\">brand</span>: <span class=\"string\">\"布加迪威航\"</span>,</div><div class=\"line\">    <span class=\"attr\">huaqian</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"不差钱，随便花\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj1)&#123;</div><div class=\"line\">    <span class=\"comment\">//money</span></div><div class=\"line\">    <span class=\"comment\">//car</span></div><div class=\"line\">    <span class=\"comment\">//brand</span></div><div class=\"line\">    <span class=\"comment\">//huaqian</span></div><div class=\"line\">    obj[k] = obj1[k];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj);</div></pre></td></tr></table></figure>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><ul>\n<li>通过修改原型实现的继承 就是原型继承<br>  通过构造函数创建出来的对象继承自构造函数的原型对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">\"female\"</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">170</span>,</div><div class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"number\">50</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Person.prototype.name = \"王莉莉\";</span></div></pre></td></tr></table></figure>\n<h4 id=\"原型继承的方式\"><a href=\"#原型继承的方式\" class=\"headerlink\" title=\"原型继承的方式\"></a>原型继承的方式</h4><ol>\n<li>通过混入的方式给原型添加属性和方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Person.prototype</span></div><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">\"female\"</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">170</span>,</div><div class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"number\">50</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">\"王莉莉\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> human)&#123;</div><div class=\"line\">    Person.prototype[k] = human[k];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.name,p.gender,p.height,p.weight);</div></pre></td></tr></table></figure>\n<ol>\n<li>修改原型对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype.maimeng = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"感觉自己萌萌哒\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">p.maimeng();</div></pre></td></tr></table></figure>\n<ol>\n<li>替换原型对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype = human;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.gender);</div></pre></td></tr></table></figure>\n<h3 id=\"经典继承\"><a href=\"#经典继承\" class=\"headerlink\" title=\"经典继承\"></a>经典继承</h3><p>《JavaScript语言精粹》</p>\n<ul>\n<li>调用一个方法，就能实现继承<br><code>var obj1 = Object.create(obj)</code></li>\n<li>创建出来一个新的继承自参数 <code>obj</code> 的对象 <code>obj1</code> </li>\n<li>其实内部使用的就是原型继承</li>\n<li>ES5才支持的这个方法 需要考虑兼容性问题</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"王莉莉\"</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">\"female\"</span>,</div><div class=\"line\">    <span class=\"attr\">dance</span> :<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"二人转，转转转\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(human);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj);</div></pre></td></tr></table></figure>\n<h2 id=\"处理经典继承的兼容性问题\"><a href=\"#处理经典继承的兼容性问题\" class=\"headerlink\" title=\"处理经典继承的兼容性问题\"></a>处理经典继承的兼容性问题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.create)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"李狗二\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//在这个函数中要实现的功能</span></div><div class=\"line\">\t\t<span class=\"comment\">//就是，创建一个对象，将obj设置为该对象的原型</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//要设置原型，只能通过两种方式，</span></div><div class=\"line\">\t\t<span class=\"comment\">// 一种是 对象.__proto__  另外一种是 构造函数.prototype</span></div><div class=\"line\">\t\t<span class=\"comment\">//由于__proto__这个属性有兼容性问题，所以不使用</span></div><div class=\"line\">\t\t<span class=\"comment\">//就只能使用 构造函数.prototype 去替换原型对象了</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">        F.prototype = obj;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//不推荐直接修改内置对象，因为在多人开发的时候，会产生冲突</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.creat = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是李二狗，我的create方法就是用来输出这句话的，哈哈哈\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hanyingxinCreate</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.create)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.creat(obj);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">        F.prototype = obj;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"继承的实际应用\"><a href=\"#继承的实际应用\" class=\"headerlink\" title=\"继承的实际应用\"></a>继承的实际应用</h2><ul>\n<li><p>扩展内置对象</p>\n</li>\n<li><p>扩展 <code>string</code> 的方法  <code>trim()</code></p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//$.trim()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, i'm a Array\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">arr.sayHello();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [];</div><div class=\"line\">arr1.sayHello();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//需求分析</span></div><div class=\"line\"><span class=\"comment\">//1.创建出来的对象得有数组的所有的方法和属性</span></div><div class=\"line\"><span class=\"comment\">//2.创建输出来的对象得有sayHello方法</span></div><div class=\"line\"><span class=\"comment\">//3.不能修改原生的内置对象</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyArray</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyArray.prototype = [];</div><div class=\"line\">MyArray.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"相加就加，随心所欲，为所欲为\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myArr = <span class=\"keyword\">new</span> MyArray();</div><div class=\"line\">myArr.push(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myArr);</div><div class=\"line\">myArr.sayHello();</div></pre></td></tr></table></figure>"},{"title":"Hexo 最常用的几个命令","date":"2015-08-28T10:29:33.000Z","_content":"Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:\n\n<!-- more -->\n\n## hexo s\n\n```bash\n$ hexo s\n```\n\n### 启动本地服务器 ###\n用于预览主题。默认地址： http://localhost:4000/\n\t\n* hexo s 是 hexo server 的缩写，命令效果一致；\n* 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；\n* 对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。\n\t\n## hexo new\n\n\n``` bash\n$ hexo new \"学习笔记  六\"\n```\n\n### 新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。\n\t\n* 文章标题可以在对应 md 文件里改，新建时标题可以写的简单些，纯字母一般不加引号。\n\n## hexo d\n\n```bash\n$ hexo d\n```\n\n### 自动生成网站静态文件，并部署到设定的仓库。\n\n* hexo d 是 hexo deploy 的缩写，命令效果一致。\n\n## hexo clean\n\n``` bash\n$ hexo clean\n```\n\n### 清除缓存文件 db.json 和已生成的静态文件 public 。\n\t\n* 网站显示异常时可以执行这条命令试试。\n\n## hexo g\n\n``` bash\n$ hexo g\n```\n\n### 生成网站静态文件到默认设置的 public 文件夹。\n\t\n* 便于查看网站生成的静态文件或者手动部署网站；\n* 如果使用自动部署，不需要先执行该命令；\n* hexo g 是 hexo generate 的缩写，命令效果一致。\n\n## hexo new page\n\n``` bash\n$ hexo new page aboutme\n```\n\n### 新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/\n\n* 标题可以为中文，但一般习惯用英文；\n* 页面标题和文章一样可以随意修改；\n* 页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。","source":"_posts/hello-world.md","raw":"---\ntitle: Hexo 最常用的几个命令\ndate: 2015-08-28 18:29:33\ntags: \n\t- hexo\n\t- 梦魇小栈\n\t- 梦魇\n\t- houyi1121\ncategories: Hexo\n---\nHexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:\n\n<!-- more -->\n\n## hexo s\n\n```bash\n$ hexo s\n```\n\n### 启动本地服务器 ###\n用于预览主题。默认地址： http://localhost:4000/\n\t\n* hexo s 是 hexo server 的缩写，命令效果一致；\n* 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；\n* 对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。\n\t\n## hexo new\n\n\n``` bash\n$ hexo new \"学习笔记  六\"\n```\n\n### 新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。\n\t\n* 文章标题可以在对应 md 文件里改，新建时标题可以写的简单些，纯字母一般不加引号。\n\n## hexo d\n\n```bash\n$ hexo d\n```\n\n### 自动生成网站静态文件，并部署到设定的仓库。\n\n* hexo d 是 hexo deploy 的缩写，命令效果一致。\n\n## hexo clean\n\n``` bash\n$ hexo clean\n```\n\n### 清除缓存文件 db.json 和已生成的静态文件 public 。\n\t\n* 网站显示异常时可以执行这条命令试试。\n\n## hexo g\n\n``` bash\n$ hexo g\n```\n\n### 生成网站静态文件到默认设置的 public 文件夹。\n\t\n* 便于查看网站生成的静态文件或者手动部署网站；\n* 如果使用自动部署，不需要先执行该命令；\n* hexo g 是 hexo generate 的缩写，命令效果一致。\n\n## hexo new page\n\n``` bash\n$ hexo new page aboutme\n```\n\n### 新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/\n\n* 标题可以为中文，但一般习惯用英文；\n* 页面标题和文章一样可以随意修改；\n* 页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。","slug":"hello-world","published":1,"updated":"2016-11-24T01:16:30.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvo0001iuwg7z43vbfy2","content":"<p>Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:</p>\n<a id=\"more\"></a>\n<h2 id=\"hexo-s\"><a href=\"#hexo-s\" class=\"headerlink\" title=\"hexo s\"></a>hexo s</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure>\n<h3 id=\"启动本地服务器\"><a href=\"#启动本地服务器\" class=\"headerlink\" title=\"启动本地服务器\"></a>启动本地服务器</h3><p>用于预览主题。默认地址： <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a></p>\n<ul>\n<li>hexo s 是 hexo server 的缩写，命令效果一致；</li>\n<li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li>\n<li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</li>\n</ul>\n<h2 id=\"hexo-new\"><a href=\"#hexo-new\" class=\"headerlink\" title=\"hexo new\"></a>hexo new</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"学习笔记  六\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"新建一篇标题为-学习笔记-六-的文章，因为标题里有空格，所以加上了引号。\"><a href=\"#新建一篇标题为-学习笔记-六-的文章，因为标题里有空格，所以加上了引号。\" class=\"headerlink\" title=\"新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。\"></a>新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。</h3><ul>\n<li>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些，纯字母一般不加引号。</li>\n</ul>\n<h2 id=\"hexo-d\"><a href=\"#hexo-d\" class=\"headerlink\" title=\"hexo d\"></a>hexo d</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure>\n<h3 id=\"自动生成网站静态文件，并部署到设定的仓库。\"><a href=\"#自动生成网站静态文件，并部署到设定的仓库。\" class=\"headerlink\" title=\"自动生成网站静态文件，并部署到设定的仓库。\"></a>自动生成网站静态文件，并部署到设定的仓库。</h3><ul>\n<li>hexo d 是 hexo deploy 的缩写，命令效果一致。</li>\n</ul>\n<h2 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure>\n<h3 id=\"清除缓存文件-db-json-和已生成的静态文件-public-。\"><a href=\"#清除缓存文件-db-json-和已生成的静态文件-public-。\" class=\"headerlink\" title=\"清除缓存文件 db.json 和已生成的静态文件 public 。\"></a>清除缓存文件 db.json 和已生成的静态文件 public 。</h3><ul>\n<li>网站显示异常时可以执行这条命令试试。</li>\n</ul>\n<h2 id=\"hexo-g\"><a href=\"#hexo-g\" class=\"headerlink\" title=\"hexo g\"></a>hexo g</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div></pre></td></tr></table></figure>\n<h3 id=\"生成网站静态文件到默认设置的-public-文件夹。\"><a href=\"#生成网站静态文件到默认设置的-public-文件夹。\" class=\"headerlink\" title=\"生成网站静态文件到默认设置的 public 文件夹。\"></a>生成网站静态文件到默认设置的 public 文件夹。</h3><ul>\n<li>便于查看网站生成的静态文件或者手动部署网站；</li>\n<li>如果使用自动部署，不需要先执行该命令；</li>\n<li>hexo g 是 hexo generate 的缩写，命令效果一致。</li>\n</ul>\n<h2 id=\"hexo-new-page\"><a href=\"#hexo-new-page\" class=\"headerlink\" title=\"hexo new page\"></a>hexo new page</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page aboutme</div></pre></td></tr></table></figure>\n<h3 id=\"新建一个标题为-aboutme-的页面，默认链接地址为-主页地址-aboutme\"><a href=\"#新建一个标题为-aboutme-的页面，默认链接地址为-主页地址-aboutme\" class=\"headerlink\" title=\"新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/\"></a>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/</h3><ul>\n<li>标题可以为中文，但一般习惯用英文；</li>\n<li>页面标题和文章一样可以随意修改；</li>\n<li>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</li>\n</ul>\n","excerpt":"<p>Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:</p>","more":"<h2 id=\"hexo-s\"><a href=\"#hexo-s\" class=\"headerlink\" title=\"hexo s\"></a>hexo s</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure>\n<h3 id=\"启动本地服务器\"><a href=\"#启动本地服务器\" class=\"headerlink\" title=\"启动本地服务器\"></a>启动本地服务器</h3><p>用于预览主题。默认地址： <a href=\"http://localhost:4000/\">http://localhost:4000/</a></p>\n<ul>\n<li>hexo s 是 hexo server 的缩写，命令效果一致；</li>\n<li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li>\n<li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</li>\n</ul>\n<h2 id=\"hexo-new\"><a href=\"#hexo-new\" class=\"headerlink\" title=\"hexo new\"></a>hexo new</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"学习笔记  六\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"新建一篇标题为-学习笔记-六-的文章，因为标题里有空格，所以加上了引号。\"><a href=\"#新建一篇标题为-学习笔记-六-的文章，因为标题里有空格，所以加上了引号。\" class=\"headerlink\" title=\"新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。\"></a>新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。</h3><ul>\n<li>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些，纯字母一般不加引号。</li>\n</ul>\n<h2 id=\"hexo-d\"><a href=\"#hexo-d\" class=\"headerlink\" title=\"hexo d\"></a>hexo d</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure>\n<h3 id=\"自动生成网站静态文件，并部署到设定的仓库。\"><a href=\"#自动生成网站静态文件，并部署到设定的仓库。\" class=\"headerlink\" title=\"自动生成网站静态文件，并部署到设定的仓库。\"></a>自动生成网站静态文件，并部署到设定的仓库。</h3><ul>\n<li>hexo d 是 hexo deploy 的缩写，命令效果一致。</li>\n</ul>\n<h2 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure>\n<h3 id=\"清除缓存文件-db-json-和已生成的静态文件-public-。\"><a href=\"#清除缓存文件-db-json-和已生成的静态文件-public-。\" class=\"headerlink\" title=\"清除缓存文件 db.json 和已生成的静态文件 public 。\"></a>清除缓存文件 db.json 和已生成的静态文件 public 。</h3><ul>\n<li>网站显示异常时可以执行这条命令试试。</li>\n</ul>\n<h2 id=\"hexo-g\"><a href=\"#hexo-g\" class=\"headerlink\" title=\"hexo g\"></a>hexo g</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div></pre></td></tr></table></figure>\n<h3 id=\"生成网站静态文件到默认设置的-public-文件夹。\"><a href=\"#生成网站静态文件到默认设置的-public-文件夹。\" class=\"headerlink\" title=\"生成网站静态文件到默认设置的 public 文件夹。\"></a>生成网站静态文件到默认设置的 public 文件夹。</h3><ul>\n<li>便于查看网站生成的静态文件或者手动部署网站；</li>\n<li>如果使用自动部署，不需要先执行该命令；</li>\n<li>hexo g 是 hexo generate 的缩写，命令效果一致。</li>\n</ul>\n<h2 id=\"hexo-new-page\"><a href=\"#hexo-new-page\" class=\"headerlink\" title=\"hexo new page\"></a>hexo new page</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page aboutme</div></pre></td></tr></table></figure>\n<h3 id=\"新建一个标题为-aboutme-的页面，默认链接地址为-主页地址-aboutme\"><a href=\"#新建一个标题为-aboutme-的页面，默认链接地址为-主页地址-aboutme\" class=\"headerlink\" title=\"新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/\"></a>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/</h3><ul>\n<li>标题可以为中文，但一般习惯用英文；</li>\n<li>页面标题和文章一样可以随意修改；</li>\n<li>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</li>\n</ul>"},{"title":"Git 常用命令学习及整理","date":"2017-04-23T02:23:21.000Z","_content":"\n最近用Git比较多，所以大概整理下 **Git是目前世界上最先进的分布式版本控制系统。**\n\n<!--more-->\n\n## 安装\n\n安装软件就不多说了，这个肯定都会了\n- 下载地址：<a class=\"active\" href=\"https://git-scm.com/downloads\" rel=\"nofollow\">Downloads</a>\n\n## 配置\n\n```sh\ngit config --global user.name \"ihoey\"           #设置git用户名\ngit config --global user.email \"mail@ihoey.com\" #设置git邮箱\ngit config --global color.ui true               #为true是终端着色\ngit config --global alias.co checkout           #配置checkout的别名\ngit config --global alias.ci commit             #配置commit的别名\ngit config --global alias.st status             #配置status的别名\ngit config --global alias.br branch             #配置branch的别名\ngit config --global core.editor \"mate -w\"       # 设置Editor使用textmate\ngit config -l                                   # 列举所有配置\n#用户的git配置文件~/.gitconfig\n```\n\n## 基本命令\n\n- 创建`git`仓库 `git init`\n- 添加文件到暂存区 `git add fileName` / `git add .`\n- 提交文件到仓库 `git commit -m \"版本提交信息\"`\n- 查看文件提交状态 `git status`\n- 查看文件修改的信息 `git diff readme.txt `\n\n```sh\ngit help <command>          # 显示command的help\ngit show                    # 显示某次提交的内容\ngit show $id\n\ngit checkout  -- <file>     # 抛弃工作区修改\ngit checkout  .             # 抛弃工作区修改\n\ngit add <file>              # 将工作文件修改提交到本地暂存区\ngit add .                   # 将所有修改过的工作文件提交暂存区\n\ngit rm <file>               # 从版本库中删除文件\ngit rm <file> --cached      # 从版本库中删除文件，但不删除文件\n\ngit reset <file>            # 从暂存区恢复到工作文件\ngit reset -- .              # 从暂存区恢复到工作文件\ngit reset --hard            # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\n\ngit commit -m \"some comments\"\n\ngit revert <$id>            # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象\ngit revert HEAD             # 恢复最后一次提交的状态\n```\n\n\n## 查看文件\n\n```sh\ngit diff <file>                 # 比较当前文件和暂存区文件差异\ngit diff\ngit diff <$id1> <$id2>          # 比较两次提交之间的差异\ngit diff <branch1>..<branch2>   # 在两个分支之间比较\ngit diff --staged               # 比较暂存区和版本库差异\ngit diff --cached               # 比较暂存区和版本库差异\ngit diff --stat                 # 仅仅比较统计信息\n```\n\n## 查看提交记录\n\n```sh\ngit log\ngit log <file>      # 查看该文件每次提交记录\ngit log -p <file>   # 查看每次详细修改内容的diff\ngit log -p -2       # 查看最近两次详细修改内容的diff\ngit log --stat      # 查看提交统计信息\n```\n\n## 分支管理\n\n```sh\ngit branch -r                           # 查看远程分支\ngit branch <new_branch>                 # 创建新的分支\ngit branch -v                           # 查看各个分支最后提交信息\ngit branch --merged                     # 查看已经被合并到当前分支的分支\ngit branch --no-merged                  # 查看尚未被合并到当前分支的分支\n\ngit checkout <branch>                   # 切换到某个分支\ngit checkout -b <new_branch>            # 创建新的分支，并且切换过去\ngit checkout -b <new_branch> <branch>   # 基于branch创建新的new_branch\ngit checkout $id       # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除\ngit checkout $id -b <new_branch>        # 把某次历史提交记录checkout出来，创建成一个分支\ngit branch -d <branch>                  # 删除某个分支\ngit branch -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)\n```\n\n## 分支合并和rebase\n\n```sh\ngit merge <branch>               # 将branch分支合并到当前分支\ngit merge --no-ff <branch>       # 不要Fast-Foward合并，这样可以生成merge提交\ngit rebase master <branch>       # 将master rebase到branch，相当于：\ngit checkout <branch> && git rebase master && git checkout master && git merge <branch>\n```\n\n- 在我们操作过程中。`merge `操作遇到冲突的时候，当前`merge`不能继续进行下去。手动修改冲突内容后，`add` 修改，`commit` 就可以了。\n- 而`rebase` 操作的话，会中断`rebase`,同时会提示去解决冲突。解决冲突后,将修改`add`后执行`git rebase –continue`继续操作，或者`git rebase –skip`忽略冲突。\n\n## Git暂存管理\n\n```sh\ngit stash                        # 暂存\ngit stash list                   # 列所有stash\ngit stash apply                  # 恢复暂存的内容\ngit stash drop                   # 删除暂存区\n```\n\n## 远程分支管理\n\n```sh\ngit pull                         # 抓取远程仓库所有分支更新并合并到本地\ngit pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并\ngit fetch origin                 # 抓取远程仓库更新\ngit merge origin/master          # 将远程主分支合并到本地当前分支\ngit checkout --track origin/branch     # 跟踪某个远程分支创建相应的本地分支\ngit checkout -b <local_branch> origin/<remote_branch>  # 基于远程分支创建本地分支，功能同上\ngit push                         # push所有分支\ngit push origin master           # 将本地主分支推到远程主分支\ngit push -u origin master    # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)\ngit push origin <local_branch>   # 创建远程分支， origin是远程仓库名\ngit push origin <local_branch>:<remote_branch>  # 创建远程分支\ngit push origin :<remote_branch> #先删除本地分支(git br -d <branch>)，然后再push删除远程分支\n```\n\n## Git远程仓库管理\n\n```sh\ngit remote -v                    # 查看远程服务器地址和仓库名称\ngit remote show origin           # 查看远程服务器仓库状态\ngit remote add origin git@github.com:ihoey/blog.git     # 添加远程仓库地址\ngit remote set-url origin git@github.com:ihoey/blog.git # 设置远程仓库地址(用于修改远程仓库地址)\ngit remote rm <repository>       # 删除远程仓库\n```\n\n## 创建远程仓库\n\n```sh\ngit clone --bare ihoey.com blog.git     # 用带版本的项目创建纯版本仓库\nscp -r my_blog.git git@ihoey.com:~      # 将纯仓库上传到服务器上\nmkdir blog.git && cd blog.git && git --bare init # 在服务器创建纯仓库\n\ngit push -u origin master         # 客户端首次提交\ngit push -u origin develop        # 首次将本地develop分支提交到远程develop分支，并且track\n\ngit remote set-head origin master # 设置远程仓库的HEAD指向master分支\n```\n\n## 设置跟踪远程库和本地库\n\n```sh\ngit branch --set-upstream master origin/master      #master\ngit branch --set-upstream develop origin/develop    #develop\n```\n\n## 其他命令\n\n```sh\nmkdir XX    #(创建一个空目录 XX指目录名)\npwd         #显示当前目录的路径。\ncat XX      #查看XX文件内容\nrm  XX      #删除文件\n```\n","source":"_posts/git.md","raw":"---\ntitle: Git 常用命令学习及整理\ndate: 2017-04-23 10:23:21\ntags:\n    - Git\ncategories: Git\n---\n\n最近用Git比较多，所以大概整理下 **Git是目前世界上最先进的分布式版本控制系统。**\n\n<!--more-->\n\n## 安装\n\n安装软件就不多说了，这个肯定都会了\n- 下载地址：<a class=\"active\" href=\"https://git-scm.com/downloads\" rel=\"nofollow\">Downloads</a>\n\n## 配置\n\n```sh\ngit config --global user.name \"ihoey\"           #设置git用户名\ngit config --global user.email \"mail@ihoey.com\" #设置git邮箱\ngit config --global color.ui true               #为true是终端着色\ngit config --global alias.co checkout           #配置checkout的别名\ngit config --global alias.ci commit             #配置commit的别名\ngit config --global alias.st status             #配置status的别名\ngit config --global alias.br branch             #配置branch的别名\ngit config --global core.editor \"mate -w\"       # 设置Editor使用textmate\ngit config -l                                   # 列举所有配置\n#用户的git配置文件~/.gitconfig\n```\n\n## 基本命令\n\n- 创建`git`仓库 `git init`\n- 添加文件到暂存区 `git add fileName` / `git add .`\n- 提交文件到仓库 `git commit -m \"版本提交信息\"`\n- 查看文件提交状态 `git status`\n- 查看文件修改的信息 `git diff readme.txt `\n\n```sh\ngit help <command>          # 显示command的help\ngit show                    # 显示某次提交的内容\ngit show $id\n\ngit checkout  -- <file>     # 抛弃工作区修改\ngit checkout  .             # 抛弃工作区修改\n\ngit add <file>              # 将工作文件修改提交到本地暂存区\ngit add .                   # 将所有修改过的工作文件提交暂存区\n\ngit rm <file>               # 从版本库中删除文件\ngit rm <file> --cached      # 从版本库中删除文件，但不删除文件\n\ngit reset <file>            # 从暂存区恢复到工作文件\ngit reset -- .              # 从暂存区恢复到工作文件\ngit reset --hard            # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\n\ngit commit -m \"some comments\"\n\ngit revert <$id>            # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象\ngit revert HEAD             # 恢复最后一次提交的状态\n```\n\n\n## 查看文件\n\n```sh\ngit diff <file>                 # 比较当前文件和暂存区文件差异\ngit diff\ngit diff <$id1> <$id2>          # 比较两次提交之间的差异\ngit diff <branch1>..<branch2>   # 在两个分支之间比较\ngit diff --staged               # 比较暂存区和版本库差异\ngit diff --cached               # 比较暂存区和版本库差异\ngit diff --stat                 # 仅仅比较统计信息\n```\n\n## 查看提交记录\n\n```sh\ngit log\ngit log <file>      # 查看该文件每次提交记录\ngit log -p <file>   # 查看每次详细修改内容的diff\ngit log -p -2       # 查看最近两次详细修改内容的diff\ngit log --stat      # 查看提交统计信息\n```\n\n## 分支管理\n\n```sh\ngit branch -r                           # 查看远程分支\ngit branch <new_branch>                 # 创建新的分支\ngit branch -v                           # 查看各个分支最后提交信息\ngit branch --merged                     # 查看已经被合并到当前分支的分支\ngit branch --no-merged                  # 查看尚未被合并到当前分支的分支\n\ngit checkout <branch>                   # 切换到某个分支\ngit checkout -b <new_branch>            # 创建新的分支，并且切换过去\ngit checkout -b <new_branch> <branch>   # 基于branch创建新的new_branch\ngit checkout $id       # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除\ngit checkout $id -b <new_branch>        # 把某次历史提交记录checkout出来，创建成一个分支\ngit branch -d <branch>                  # 删除某个分支\ngit branch -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)\n```\n\n## 分支合并和rebase\n\n```sh\ngit merge <branch>               # 将branch分支合并到当前分支\ngit merge --no-ff <branch>       # 不要Fast-Foward合并，这样可以生成merge提交\ngit rebase master <branch>       # 将master rebase到branch，相当于：\ngit checkout <branch> && git rebase master && git checkout master && git merge <branch>\n```\n\n- 在我们操作过程中。`merge `操作遇到冲突的时候，当前`merge`不能继续进行下去。手动修改冲突内容后，`add` 修改，`commit` 就可以了。\n- 而`rebase` 操作的话，会中断`rebase`,同时会提示去解决冲突。解决冲突后,将修改`add`后执行`git rebase –continue`继续操作，或者`git rebase –skip`忽略冲突。\n\n## Git暂存管理\n\n```sh\ngit stash                        # 暂存\ngit stash list                   # 列所有stash\ngit stash apply                  # 恢复暂存的内容\ngit stash drop                   # 删除暂存区\n```\n\n## 远程分支管理\n\n```sh\ngit pull                         # 抓取远程仓库所有分支更新并合并到本地\ngit pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并\ngit fetch origin                 # 抓取远程仓库更新\ngit merge origin/master          # 将远程主分支合并到本地当前分支\ngit checkout --track origin/branch     # 跟踪某个远程分支创建相应的本地分支\ngit checkout -b <local_branch> origin/<remote_branch>  # 基于远程分支创建本地分支，功能同上\ngit push                         # push所有分支\ngit push origin master           # 将本地主分支推到远程主分支\ngit push -u origin master    # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)\ngit push origin <local_branch>   # 创建远程分支， origin是远程仓库名\ngit push origin <local_branch>:<remote_branch>  # 创建远程分支\ngit push origin :<remote_branch> #先删除本地分支(git br -d <branch>)，然后再push删除远程分支\n```\n\n## Git远程仓库管理\n\n```sh\ngit remote -v                    # 查看远程服务器地址和仓库名称\ngit remote show origin           # 查看远程服务器仓库状态\ngit remote add origin git@github.com:ihoey/blog.git     # 添加远程仓库地址\ngit remote set-url origin git@github.com:ihoey/blog.git # 设置远程仓库地址(用于修改远程仓库地址)\ngit remote rm <repository>       # 删除远程仓库\n```\n\n## 创建远程仓库\n\n```sh\ngit clone --bare ihoey.com blog.git     # 用带版本的项目创建纯版本仓库\nscp -r my_blog.git git@ihoey.com:~      # 将纯仓库上传到服务器上\nmkdir blog.git && cd blog.git && git --bare init # 在服务器创建纯仓库\n\ngit push -u origin master         # 客户端首次提交\ngit push -u origin develop        # 首次将本地develop分支提交到远程develop分支，并且track\n\ngit remote set-head origin master # 设置远程仓库的HEAD指向master分支\n```\n\n## 设置跟踪远程库和本地库\n\n```sh\ngit branch --set-upstream master origin/master      #master\ngit branch --set-upstream develop origin/develop    #develop\n```\n\n## 其他命令\n\n```sh\nmkdir XX    #(创建一个空目录 XX指目录名)\npwd         #显示当前目录的路径。\ncat XX      #查看XX文件内容\nrm  XX      #删除文件\n```\n","slug":"git","published":1,"updated":"2017-04-22T03:20:20.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvo2001juwg7vvg2fqbc","content":"<p>最近用Git比较多，所以大概整理下 <strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p>\n<a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装软件就不多说了，这个肯定都会了</p>\n<ul>\n<li>下载地址：<a class=\"active\" href=\"https://git-scm.com/downloads\" rel=\"external\" target=\"_blank\">Downloads</a></li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name <span class=\"string\">\"ihoey\"</span>           <span class=\"comment\">#设置git用户名</span></div><div class=\"line\">git config --global user.email <span class=\"string\">\"mail@ihoey.com\"</span> <span class=\"comment\">#设置git邮箱</span></div><div class=\"line\">git config --global color.ui <span class=\"literal\">true</span>               <span class=\"comment\">#为true是终端着色</span></div><div class=\"line\">git config --global alias.co checkout           <span class=\"comment\">#配置checkout的别名</span></div><div class=\"line\">git config --global alias.ci commit             <span class=\"comment\">#配置commit的别名</span></div><div class=\"line\">git config --global alias.st status             <span class=\"comment\">#配置status的别名</span></div><div class=\"line\">git config --global alias.br branch             <span class=\"comment\">#配置branch的别名</span></div><div class=\"line\">git config --global core.editor <span class=\"string\">\"mate -w\"</span>       <span class=\"comment\"># 设置Editor使用textmate</span></div><div class=\"line\">git config <span class=\"_\">-l</span>                                   <span class=\"comment\"># 列举所有配置</span></div><div class=\"line\"><span class=\"comment\">#用户的git配置文件~/.gitconfig</span></div></pre></td></tr></table></figure>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><ul>\n<li>创建<code>git</code>仓库 <code>git init</code></li>\n<li>添加文件到暂存区 <code>git add fileName</code> / <code>git add .</code></li>\n<li>提交文件到仓库 <code>git commit -m &quot;版本提交信息&quot;</code></li>\n<li>查看文件提交状态 <code>git status</code></li>\n<li>查看文件修改的信息 <code>git diff readme.txt</code></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">help</span> &lt;<span class=\"built_in\">command</span>&gt;          <span class=\"comment\"># 显示command的help</span></div><div class=\"line\">git show                    <span class=\"comment\"># 显示某次提交的内容</span></div><div class=\"line\">git show <span class=\"variable\">$id</span></div><div class=\"line\"></div><div class=\"line\">git checkout  -- &lt;file&gt;     <span class=\"comment\"># 抛弃工作区修改</span></div><div class=\"line\">git checkout  .             <span class=\"comment\"># 抛弃工作区修改</span></div><div class=\"line\"></div><div class=\"line\">git add &lt;file&gt;              <span class=\"comment\"># 将工作文件修改提交到本地暂存区</span></div><div class=\"line\">git add .                   <span class=\"comment\"># 将所有修改过的工作文件提交暂存区</span></div><div class=\"line\"></div><div class=\"line\">git rm &lt;file&gt;               <span class=\"comment\"># 从版本库中删除文件</span></div><div class=\"line\">git rm &lt;file&gt; --cached      <span class=\"comment\"># 从版本库中删除文件，但不删除文件</span></div><div class=\"line\"></div><div class=\"line\">git reset &lt;file&gt;            <span class=\"comment\"># 从暂存区恢复到工作文件</span></div><div class=\"line\">git reset -- .              <span class=\"comment\"># 从暂存区恢复到工作文件</span></div><div class=\"line\">git reset --hard            <span class=\"comment\"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span></div><div class=\"line\"></div><div class=\"line\">git commit -m <span class=\"string\">\"some comments\"</span></div><div class=\"line\"></div><div class=\"line\">git revert &lt;<span class=\"variable\">$id</span>&gt;            <span class=\"comment\"># 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</span></div><div class=\"line\">git revert HEAD             <span class=\"comment\"># 恢复最后一次提交的状态</span></div></pre></td></tr></table></figure>\n<h2 id=\"查看文件\"><a href=\"#查看文件\" class=\"headerlink\" title=\"查看文件\"></a>查看文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff &lt;file&gt;                 <span class=\"comment\"># 比较当前文件和暂存区文件差异</span></div><div class=\"line\">git diff</div><div class=\"line\">git diff &lt;<span class=\"variable\">$id1</span>&gt; &lt;<span class=\"variable\">$id2</span>&gt;          <span class=\"comment\"># 比较两次提交之间的差异</span></div><div class=\"line\">git diff &lt;branch1&gt;..&lt;branch2&gt;   <span class=\"comment\"># 在两个分支之间比较</span></div><div class=\"line\">git diff --staged               <span class=\"comment\"># 比较暂存区和版本库差异</span></div><div class=\"line\">git diff --cached               <span class=\"comment\"># 比较暂存区和版本库差异</span></div><div class=\"line\">git diff --stat                 <span class=\"comment\"># 仅仅比较统计信息</span></div></pre></td></tr></table></figure>\n<h2 id=\"查看提交记录\"><a href=\"#查看提交记录\" class=\"headerlink\" title=\"查看提交记录\"></a>查看提交记录</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span></div><div class=\"line\">git <span class=\"built_in\">log</span> &lt;file&gt;      <span class=\"comment\"># 查看该文件每次提交记录</span></div><div class=\"line\">git <span class=\"built_in\">log</span> -p &lt;file&gt;   <span class=\"comment\"># 查看每次详细修改内容的diff</span></div><div class=\"line\">git <span class=\"built_in\">log</span> -p -2       <span class=\"comment\"># 查看最近两次详细修改内容的diff</span></div><div class=\"line\">git <span class=\"built_in\">log</span> --stat      <span class=\"comment\"># 查看提交统计信息</span></div></pre></td></tr></table></figure>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -r                           <span class=\"comment\"># 查看远程分支</span></div><div class=\"line\">git branch &lt;new_branch&gt;                 <span class=\"comment\"># 创建新的分支</span></div><div class=\"line\">git branch -v                           <span class=\"comment\"># 查看各个分支最后提交信息</span></div><div class=\"line\">git branch --merged                     <span class=\"comment\"># 查看已经被合并到当前分支的分支</span></div><div class=\"line\">git branch --no-merged                  <span class=\"comment\"># 查看尚未被合并到当前分支的分支</span></div><div class=\"line\"></div><div class=\"line\">git checkout &lt;branch&gt;                   <span class=\"comment\"># 切换到某个分支</span></div><div class=\"line\">git checkout -b &lt;new_branch&gt;            <span class=\"comment\"># 创建新的分支，并且切换过去</span></div><div class=\"line\">git checkout -b &lt;new_branch&gt; &lt;branch&gt;   <span class=\"comment\"># 基于branch创建新的new_branch</span></div><div class=\"line\">git checkout <span class=\"variable\">$id</span>       <span class=\"comment\"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span></div><div class=\"line\">git checkout <span class=\"variable\">$id</span> -b &lt;new_branch&gt;        <span class=\"comment\"># 把某次历史提交记录checkout出来，创建成一个分支</span></div><div class=\"line\">git branch <span class=\"_\">-d</span> &lt;branch&gt;                  <span class=\"comment\"># 删除某个分支</span></div><div class=\"line\">git branch -D &lt;branch&gt; <span class=\"comment\"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span></div></pre></td></tr></table></figure>\n<h2 id=\"分支合并和rebase\"><a href=\"#分支合并和rebase\" class=\"headerlink\" title=\"分支合并和rebase\"></a>分支合并和rebase</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge &lt;branch&gt;               <span class=\"comment\"># 将branch分支合并到当前分支</span></div><div class=\"line\">git merge --no-ff &lt;branch&gt;       <span class=\"comment\"># 不要Fast-Foward合并，这样可以生成merge提交</span></div><div class=\"line\">git rebase master &lt;branch&gt;       <span class=\"comment\"># 将master rebase到branch，相当于：</span></div><div class=\"line\">git checkout &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git checkout master &amp;&amp; git merge &lt;branch&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>在我们操作过程中。<code>merge</code>操作遇到冲突的时候，当前<code>merge</code>不能继续进行下去。手动修改冲突内容后，<code>add</code> 修改，<code>commit</code> 就可以了。</li>\n<li>而<code>rebase</code> 操作的话，会中断<code>rebase</code>,同时会提示去解决冲突。解决冲突后,将修改<code>add</code>后执行<code>git rebase –continue</code>继续操作，或者<code>git rebase –skip</code>忽略冲突。</li>\n</ul>\n<h2 id=\"Git暂存管理\"><a href=\"#Git暂存管理\" class=\"headerlink\" title=\"Git暂存管理\"></a>Git暂存管理</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash                        <span class=\"comment\"># 暂存</span></div><div class=\"line\">git stash list                   <span class=\"comment\"># 列所有stash</span></div><div class=\"line\">git stash apply                  <span class=\"comment\"># 恢复暂存的内容</span></div><div class=\"line\">git stash drop                   <span class=\"comment\"># 删除暂存区</span></div></pre></td></tr></table></figure>\n<h2 id=\"远程分支管理\"><a href=\"#远程分支管理\" class=\"headerlink\" title=\"远程分支管理\"></a>远程分支管理</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull                         <span class=\"comment\"># 抓取远程仓库所有分支更新并合并到本地</span></div><div class=\"line\">git pull --no-ff                 <span class=\"comment\"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span></div><div class=\"line\">git fetch origin                 <span class=\"comment\"># 抓取远程仓库更新</span></div><div class=\"line\">git merge origin/master          <span class=\"comment\"># 将远程主分支合并到本地当前分支</span></div><div class=\"line\">git checkout --track origin/branch     <span class=\"comment\"># 跟踪某个远程分支创建相应的本地分支</span></div><div class=\"line\">git checkout -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  <span class=\"comment\"># 基于远程分支创建本地分支，功能同上</span></div><div class=\"line\">git push                         <span class=\"comment\"># push所有分支</span></div><div class=\"line\">git push origin master           <span class=\"comment\"># 将本地主分支推到远程主分支</span></div><div class=\"line\">git push -u origin master    <span class=\"comment\"># 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span></div><div class=\"line\">git push origin &lt;local_branch&gt;   <span class=\"comment\"># 创建远程分支， origin是远程仓库名</span></div><div class=\"line\">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  <span class=\"comment\"># 创建远程分支</span></div><div class=\"line\">git push origin :&lt;remote_branch&gt; <span class=\"comment\">#先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"Git远程仓库管理\"><a href=\"#Git远程仓库管理\" class=\"headerlink\" title=\"Git远程仓库管理\"></a>Git远程仓库管理</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote -v                    <span class=\"comment\"># 查看远程服务器地址和仓库名称</span></div><div class=\"line\">git remote show origin           <span class=\"comment\"># 查看远程服务器仓库状态</span></div><div class=\"line\">git remote add origin git@github.com:ihoey/blog.git     <span class=\"comment\"># 添加远程仓库地址</span></div><div class=\"line\">git remote <span class=\"built_in\">set</span>-url origin git@github.com:ihoey/blog.git <span class=\"comment\"># 设置远程仓库地址(用于修改远程仓库地址)</span></div><div class=\"line\">git remote rm &lt;repository&gt;       <span class=\"comment\"># 删除远程仓库</span></div></pre></td></tr></table></figure>\n<h2 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> --bare ihoey.com blog.git     <span class=\"comment\"># 用带版本的项目创建纯版本仓库</span></div><div class=\"line\">scp -r my_blog.git git@ihoey.com:~      <span class=\"comment\"># 将纯仓库上传到服务器上</span></div><div class=\"line\">mkdir blog.git &amp;&amp; <span class=\"built_in\">cd</span> blog.git &amp;&amp; git --bare init <span class=\"comment\"># 在服务器创建纯仓库</span></div><div class=\"line\"></div><div class=\"line\">git push -u origin master         <span class=\"comment\"># 客户端首次提交</span></div><div class=\"line\">git push -u origin develop        <span class=\"comment\"># 首次将本地develop分支提交到远程develop分支，并且track</span></div><div class=\"line\"></div><div class=\"line\">git remote <span class=\"built_in\">set</span>-head origin master <span class=\"comment\"># 设置远程仓库的HEAD指向master分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"设置跟踪远程库和本地库\"><a href=\"#设置跟踪远程库和本地库\" class=\"headerlink\" title=\"设置跟踪远程库和本地库\"></a>设置跟踪远程库和本地库</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch --set-upstream master origin/master      <span class=\"comment\">#master</span></div><div class=\"line\">git branch --set-upstream develop origin/develop    <span class=\"comment\">#develop</span></div></pre></td></tr></table></figure>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir XX    <span class=\"comment\">#(创建一个空目录 XX指目录名)</span></div><div class=\"line\"><span class=\"built_in\">pwd</span>         <span class=\"comment\">#显示当前目录的路径。</span></div><div class=\"line\">cat XX      <span class=\"comment\">#查看XX文件内容</span></div><div class=\"line\">rm  XX      <span class=\"comment\">#删除文件</span></div></pre></td></tr></table></figure>\n","excerpt":"<p>最近用Git比较多，所以大概整理下 <strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装软件就不多说了，这个肯定都会了</p>\n<ul>\n<li>下载地址：<a class=\"active\" href=\"https://git-scm.com/downloads\" rel=\"nofollow\">Downloads</a></li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name <span class=\"string\">\"ihoey\"</span>           <span class=\"comment\">#设置git用户名</span></div><div class=\"line\">git config --global user.email <span class=\"string\">\"mail@ihoey.com\"</span> <span class=\"comment\">#设置git邮箱</span></div><div class=\"line\">git config --global color.ui <span class=\"literal\">true</span>               <span class=\"comment\">#为true是终端着色</span></div><div class=\"line\">git config --global alias.co checkout           <span class=\"comment\">#配置checkout的别名</span></div><div class=\"line\">git config --global alias.ci commit             <span class=\"comment\">#配置commit的别名</span></div><div class=\"line\">git config --global alias.st status             <span class=\"comment\">#配置status的别名</span></div><div class=\"line\">git config --global alias.br branch             <span class=\"comment\">#配置branch的别名</span></div><div class=\"line\">git config --global core.editor <span class=\"string\">\"mate -w\"</span>       <span class=\"comment\"># 设置Editor使用textmate</span></div><div class=\"line\">git config <span class=\"_\">-l</span>                                   <span class=\"comment\"># 列举所有配置</span></div><div class=\"line\"><span class=\"comment\">#用户的git配置文件~/.gitconfig</span></div></pre></td></tr></table></figure>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><ul>\n<li>创建<code>git</code>仓库 <code>git init</code></li>\n<li>添加文件到暂存区 <code>git add fileName</code> / <code>git add .</code></li>\n<li>提交文件到仓库 <code>git commit -m &quot;版本提交信息&quot;</code></li>\n<li>查看文件提交状态 <code>git status</code></li>\n<li>查看文件修改的信息 <code>git diff readme.txt</code></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">help</span> &lt;<span class=\"built_in\">command</span>&gt;          <span class=\"comment\"># 显示command的help</span></div><div class=\"line\">git show                    <span class=\"comment\"># 显示某次提交的内容</span></div><div class=\"line\">git show <span class=\"variable\">$id</span></div><div class=\"line\"></div><div class=\"line\">git checkout  -- &lt;file&gt;     <span class=\"comment\"># 抛弃工作区修改</span></div><div class=\"line\">git checkout  .             <span class=\"comment\"># 抛弃工作区修改</span></div><div class=\"line\"></div><div class=\"line\">git add &lt;file&gt;              <span class=\"comment\"># 将工作文件修改提交到本地暂存区</span></div><div class=\"line\">git add .                   <span class=\"comment\"># 将所有修改过的工作文件提交暂存区</span></div><div class=\"line\"></div><div class=\"line\">git rm &lt;file&gt;               <span class=\"comment\"># 从版本库中删除文件</span></div><div class=\"line\">git rm &lt;file&gt; --cached      <span class=\"comment\"># 从版本库中删除文件，但不删除文件</span></div><div class=\"line\"></div><div class=\"line\">git reset &lt;file&gt;            <span class=\"comment\"># 从暂存区恢复到工作文件</span></div><div class=\"line\">git reset -- .              <span class=\"comment\"># 从暂存区恢复到工作文件</span></div><div class=\"line\">git reset --hard            <span class=\"comment\"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span></div><div class=\"line\"></div><div class=\"line\">git commit -m <span class=\"string\">\"some comments\"</span></div><div class=\"line\"></div><div class=\"line\">git revert &lt;<span class=\"variable\">$id</span>&gt;            <span class=\"comment\"># 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</span></div><div class=\"line\">git revert HEAD             <span class=\"comment\"># 恢复最后一次提交的状态</span></div></pre></td></tr></table></figure>\n<h2 id=\"查看文件\"><a href=\"#查看文件\" class=\"headerlink\" title=\"查看文件\"></a>查看文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff &lt;file&gt;                 <span class=\"comment\"># 比较当前文件和暂存区文件差异</span></div><div class=\"line\">git diff</div><div class=\"line\">git diff &lt;<span class=\"variable\">$id1</span>&gt; &lt;<span class=\"variable\">$id2</span>&gt;          <span class=\"comment\"># 比较两次提交之间的差异</span></div><div class=\"line\">git diff &lt;branch1&gt;..&lt;branch2&gt;   <span class=\"comment\"># 在两个分支之间比较</span></div><div class=\"line\">git diff --staged               <span class=\"comment\"># 比较暂存区和版本库差异</span></div><div class=\"line\">git diff --cached               <span class=\"comment\"># 比较暂存区和版本库差异</span></div><div class=\"line\">git diff --stat                 <span class=\"comment\"># 仅仅比较统计信息</span></div></pre></td></tr></table></figure>\n<h2 id=\"查看提交记录\"><a href=\"#查看提交记录\" class=\"headerlink\" title=\"查看提交记录\"></a>查看提交记录</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span></div><div class=\"line\">git <span class=\"built_in\">log</span> &lt;file&gt;      <span class=\"comment\"># 查看该文件每次提交记录</span></div><div class=\"line\">git <span class=\"built_in\">log</span> -p &lt;file&gt;   <span class=\"comment\"># 查看每次详细修改内容的diff</span></div><div class=\"line\">git <span class=\"built_in\">log</span> -p -2       <span class=\"comment\"># 查看最近两次详细修改内容的diff</span></div><div class=\"line\">git <span class=\"built_in\">log</span> --stat      <span class=\"comment\"># 查看提交统计信息</span></div></pre></td></tr></table></figure>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -r                           <span class=\"comment\"># 查看远程分支</span></div><div class=\"line\">git branch &lt;new_branch&gt;                 <span class=\"comment\"># 创建新的分支</span></div><div class=\"line\">git branch -v                           <span class=\"comment\"># 查看各个分支最后提交信息</span></div><div class=\"line\">git branch --merged                     <span class=\"comment\"># 查看已经被合并到当前分支的分支</span></div><div class=\"line\">git branch --no-merged                  <span class=\"comment\"># 查看尚未被合并到当前分支的分支</span></div><div class=\"line\"></div><div class=\"line\">git checkout &lt;branch&gt;                   <span class=\"comment\"># 切换到某个分支</span></div><div class=\"line\">git checkout -b &lt;new_branch&gt;            <span class=\"comment\"># 创建新的分支，并且切换过去</span></div><div class=\"line\">git checkout -b &lt;new_branch&gt; &lt;branch&gt;   <span class=\"comment\"># 基于branch创建新的new_branch</span></div><div class=\"line\">git checkout <span class=\"variable\">$id</span>       <span class=\"comment\"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span></div><div class=\"line\">git checkout <span class=\"variable\">$id</span> -b &lt;new_branch&gt;        <span class=\"comment\"># 把某次历史提交记录checkout出来，创建成一个分支</span></div><div class=\"line\">git branch <span class=\"_\">-d</span> &lt;branch&gt;                  <span class=\"comment\"># 删除某个分支</span></div><div class=\"line\">git branch -D &lt;branch&gt; <span class=\"comment\"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span></div></pre></td></tr></table></figure>\n<h2 id=\"分支合并和rebase\"><a href=\"#分支合并和rebase\" class=\"headerlink\" title=\"分支合并和rebase\"></a>分支合并和rebase</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge &lt;branch&gt;               <span class=\"comment\"># 将branch分支合并到当前分支</span></div><div class=\"line\">git merge --no-ff &lt;branch&gt;       <span class=\"comment\"># 不要Fast-Foward合并，这样可以生成merge提交</span></div><div class=\"line\">git rebase master &lt;branch&gt;       <span class=\"comment\"># 将master rebase到branch，相当于：</span></div><div class=\"line\">git checkout &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git checkout master &amp;&amp; git merge &lt;branch&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>在我们操作过程中。<code>merge</code>操作遇到冲突的时候，当前<code>merge</code>不能继续进行下去。手动修改冲突内容后，<code>add</code> 修改，<code>commit</code> 就可以了。</li>\n<li>而<code>rebase</code> 操作的话，会中断<code>rebase</code>,同时会提示去解决冲突。解决冲突后,将修改<code>add</code>后执行<code>git rebase –continue</code>继续操作，或者<code>git rebase –skip</code>忽略冲突。</li>\n</ul>\n<h2 id=\"Git暂存管理\"><a href=\"#Git暂存管理\" class=\"headerlink\" title=\"Git暂存管理\"></a>Git暂存管理</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash                        <span class=\"comment\"># 暂存</span></div><div class=\"line\">git stash list                   <span class=\"comment\"># 列所有stash</span></div><div class=\"line\">git stash apply                  <span class=\"comment\"># 恢复暂存的内容</span></div><div class=\"line\">git stash drop                   <span class=\"comment\"># 删除暂存区</span></div></pre></td></tr></table></figure>\n<h2 id=\"远程分支管理\"><a href=\"#远程分支管理\" class=\"headerlink\" title=\"远程分支管理\"></a>远程分支管理</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull                         <span class=\"comment\"># 抓取远程仓库所有分支更新并合并到本地</span></div><div class=\"line\">git pull --no-ff                 <span class=\"comment\"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span></div><div class=\"line\">git fetch origin                 <span class=\"comment\"># 抓取远程仓库更新</span></div><div class=\"line\">git merge origin/master          <span class=\"comment\"># 将远程主分支合并到本地当前分支</span></div><div class=\"line\">git checkout --track origin/branch     <span class=\"comment\"># 跟踪某个远程分支创建相应的本地分支</span></div><div class=\"line\">git checkout -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  <span class=\"comment\"># 基于远程分支创建本地分支，功能同上</span></div><div class=\"line\">git push                         <span class=\"comment\"># push所有分支</span></div><div class=\"line\">git push origin master           <span class=\"comment\"># 将本地主分支推到远程主分支</span></div><div class=\"line\">git push -u origin master    <span class=\"comment\"># 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span></div><div class=\"line\">git push origin &lt;local_branch&gt;   <span class=\"comment\"># 创建远程分支， origin是远程仓库名</span></div><div class=\"line\">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  <span class=\"comment\"># 创建远程分支</span></div><div class=\"line\">git push origin :&lt;remote_branch&gt; <span class=\"comment\">#先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"Git远程仓库管理\"><a href=\"#Git远程仓库管理\" class=\"headerlink\" title=\"Git远程仓库管理\"></a>Git远程仓库管理</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote -v                    <span class=\"comment\"># 查看远程服务器地址和仓库名称</span></div><div class=\"line\">git remote show origin           <span class=\"comment\"># 查看远程服务器仓库状态</span></div><div class=\"line\">git remote add origin git@github.com:ihoey/blog.git     <span class=\"comment\"># 添加远程仓库地址</span></div><div class=\"line\">git remote <span class=\"built_in\">set</span>-url origin git@github.com:ihoey/blog.git <span class=\"comment\"># 设置远程仓库地址(用于修改远程仓库地址)</span></div><div class=\"line\">git remote rm &lt;repository&gt;       <span class=\"comment\"># 删除远程仓库</span></div></pre></td></tr></table></figure>\n<h2 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> --bare ihoey.com blog.git     <span class=\"comment\"># 用带版本的项目创建纯版本仓库</span></div><div class=\"line\">scp -r my_blog.git git@ihoey.com:~      <span class=\"comment\"># 将纯仓库上传到服务器上</span></div><div class=\"line\">mkdir blog.git &amp;&amp; <span class=\"built_in\">cd</span> blog.git &amp;&amp; git --bare init <span class=\"comment\"># 在服务器创建纯仓库</span></div><div class=\"line\"></div><div class=\"line\">git push -u origin master         <span class=\"comment\"># 客户端首次提交</span></div><div class=\"line\">git push -u origin develop        <span class=\"comment\"># 首次将本地develop分支提交到远程develop分支，并且track</span></div><div class=\"line\"></div><div class=\"line\">git remote <span class=\"built_in\">set</span>-head origin master <span class=\"comment\"># 设置远程仓库的HEAD指向master分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"设置跟踪远程库和本地库\"><a href=\"#设置跟踪远程库和本地库\" class=\"headerlink\" title=\"设置跟踪远程库和本地库\"></a>设置跟踪远程库和本地库</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch --set-upstream master origin/master      <span class=\"comment\">#master</span></div><div class=\"line\">git branch --set-upstream develop origin/develop    <span class=\"comment\">#develop</span></div></pre></td></tr></table></figure>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir XX    <span class=\"comment\">#(创建一个空目录 XX指目录名)</span></div><div class=\"line\"><span class=\"built_in\">pwd</span>         <span class=\"comment\">#显示当前目录的路径。</span></div><div class=\"line\">cat XX      <span class=\"comment\">#查看XX文件内容</span></div><div class=\"line\">rm  XX      <span class=\"comment\">#删除文件</span></div></pre></td></tr></table></figure>"},{"title":"JQuery分析及实现part1框架结构","date":"2016-11-18T10:40:35.000Z","_content":"\nJQuery模块分析及其实现第一部分!\n\n<img src=\"https://oisha19l0.qnssl.com/20161119.png\" width=\"100%\">\n\n<!-- more -->\n\n## 案例：获取指定DOM下所有子元素\n\t\n1. 在框架内部，遍历子节点，应该使用 `firstChild` 和 `nextSibling` 两种方式实现,代码如下。\n获取 `id` 为 `dv` 的元素下所有的子元素 `nodeType：1 - 12 (1 2 3 8 9 11 --documentFrament)` .\n\n* 第一种方式: `childNodes`\n\n```js\n// 实现思路：\n// 通过childNodes获取到所有的子节点；\n// 将上述所有的子节点中，元素节点获取出来。\n/**\n * [getChildren 获取子元素]\n * @param  {[type]} parent [父节点]\n * @return {[type]}        [返回parent的所有子元素]\n */\nfunction getChildren(parent) {\n\t// 存储结果集\n\tvar ret = [],\n\t\tnodes;\n\t// 获取parent所有子节点\n\tnodes = parent.childNodes;\n\n\t// 遍历nodes\n\tfor(var i = 0,l = nodes.length; i < l;i++){\n\t\t// 如果遍历到当前子节点类型为元素，即为所要结果。存储在ret内。\n\t\tif(nodes[i].nodeType === 1) {\n\t\t\tret.push(nodes[i]);\n\t\t}\n\t}\n\t// 返回结果\n\treturn ret;\n}\nconsole.log(getChildren(document.getElementById('dv')));\n```\n\n* 第二种方式：`firstChild nextSibling（推荐）`\n\n```js\n//使用while方式\nfunction getChildren(parent) {\n\tvar ret = [],\n\t\telem = parent.firstChild;\n\t// 遍历parent所有子节点\n\t// 如果有子节点\n\twhile(elem){\n\t\t// 并且节点类型为元素。存储在ret内\n\t\tif(elem.nodeType === 1) ret.push(elem);\n\t\t// 更新循环标量\n\t\t// 赋值为下一个兄弟节点\n\t\telem = elem.nextSibling;\n\t}\n\t// 返回结果\n\treturn ret;\n} \n\n\n//使用for循环\nfunction getChildren(parent) {\n\tvar ret = [],\n\t\telem = parent.firstChild;\n\tfor(; elem ; elem = elem.nextSibling){\n\t\tif(elem.nodeType === 1) ret.push(elem);\n\t}\t\t\t\n\treturn ret;\n}\n\nconsole.log(getChildren(document.getElementById('dv')));\n```\n\n## 框架结构\n\n1. 在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架\n\t+ 在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将它们当做实参传入沙箱内。\n\n2. 核心函数为 `itcast` ，相当于 `jQuery` 。最终要暴露给用户使用的\n\n3. 实现 `itcast` 函数，使用的是 工厂模式 来 创建对象。好处：用户 `new` 或 不 `new` 都可以得到正确的对象\n\n4.  `init` 构造函数 的 位置\n\n\t+ 如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更改用户，尽量将构造函数暴露给用户\n\t+ 可以把构造函数放在 `itcast` 函数上，也可以放在 `itcast` 函数原型上。\n\t+ 处于 `jQuery` 之父，在写简单继承模式时，将构造函数放在其原型上。那么在编写框架时，即延续下来了\n\n5.  `init` 创建出来的对象，最终继承自 `itcast.prototype` 。所以可以将 `init` 对象称为 `itcast` 对象。\n\n6. 由于暴露给用户 的 是 `itcast` 和 其原型。所以在扩展成员时，只能在这两个对象上扩展。而在函数对象上扩展的成员 为 静态成员。可以直接通过函数名字来访问。但是，在原型上的成员，必须创建实例来访问。因此为了实现 `init` 对象可以访问 `itcast` 原型上的成员，就基于原型来实现继承。\n\n```js\n(function(global) {\n\tvar init;\n\t// 核心函数（工厂函数）\n\tvar itcast = function(selector) {\n\t\treturn new itcast.fn.init(selector);\n\t};\n\n\t// 核心原型\t\n\titcast.fn = itcast.prototype = {\n\t\tconstructor: itcast\n\t};\n\n\t// 构造函数\n\tinit = itcast.fn.init = function(selector) {};\n\t// 实现init对象继承自itcast原型\n\tinit.prototype = itcast.fn;\n\n\t// 可扩展方法\n\t// 如果target为undefined值，那么就是给this扩展成员\n\t// 否则就是给target对象扩展。\n\titcast.extend = itcast.fn.extend = function(source, target) {\n\t\tvar k;\n\t\t// 如果target为undefined值，就赋值为this\n\t\t// 给this扩展成员\n\t\tif (target == undefined) {\n\t\t\ttarget = this;\n\t\t}\t\n\n\t\t// target = target || this;\n\n\t\tfor(k in source){\n\t\t\ttarget[k] = source[k];\n\t\t}\t\t\n\t};\n\t// 暴露给用户\n\tglobal.$ = global.itcast = itcast;\n}(window));\n\nitcast.fn.addClass = function(className) {};\nitcast.fn.append = function(className) {};\n```\n\n7. 完善`init`构造函数\n\n\t+ `selector` 类型：\n\t\t- 无效值： `null` `undefined` `' '` `false`\n\t\t- 字符串\n\t\t\t* 选择器：\t `div` 根据选择器筛选dom元素，并以伪数组形式 存储在 `this` 上\n\t\t\t*  `html` 字符串 `<p>123</p><p>456</p>` `<p>` 将html字符串 转换成 `html` 元素\n\t\t- `DOM` 节点 \n\t\t- `DOM` 数组（伪数组） \n\t\t- `function`：入口函数 `DOMContentLoaded`\n\t\t\t* 使用静态属性 `isReady` 存储 `dom` 树是否加载完毕\n\t\t\t* 判断 `isReady` 值， 如果为 `true` ，就直接执行传入的函数。\n\t\t\t* 否则，就给 `document` 的 `DOMContentLoaded` 事件绑定处理程序，在处理程序中，先将 `isReady` 赋值为 `true` ，在执行传入的函数。\n\n8. 如何判断字符串为 `html` 字符串，必须满足一下条件：\n\n\t* 以 `<` 开头\n\t* 以 `>` 结尾\n\t* 最小长度为 `3`\n\n9. 如何判断像数组（数组和伪数组）\n\n\t+ 用 `length` 属性去判断，若具有 `length` 属性 表示为 像数组类型\n\t+ 除了 `window` 对象以及函数对象\n\t+  `{length: 1} {4: \"123\", length: 5}` 稀疏数组\n\n\t+ 如果为真数组，返回 `true`\n\t+ 如果 `length` 属性值为 `0` （除了 `window` 对象以及函数对象），返回 `true`\n\t+ 如果 `length` 属性值 `>0`, 如果对象 具有 `length - 1` 索引，返回 `true`\n\n10. 全局对象 `window` 特性：有一个 `window` 属性 引用 自身。\n\n```js\n(function(global) {\n\tvar init,\n\t\tdocument = global.document;\n\n\tvar itcast = function(selector) {\n\t\treturn new itcast.fn.init(selector);\n\t};\n\n\titcast.fn = itcast.prototype = {\n\t\tconstructor: itcast,\n\t\tlength: 0\n\t};\n\tinit = itcast.fn.init = function(selector) {\n\t\t// handle: null undefined '' false\n\t\tif(!selector) return this;\n\t\t// handle: string\n\t\telse if(itcast.isString(selector)){\n\t\t\t// handle: html string '<p>123</p>'\n\t\t\tif(itcast.isHTML(selector)){\t\t\t\t\t\t\n\t\t\t\t// 怎么存储 以伪数组对象形式存储 dom元素\n\t\t\t\tArray.prototype.push.apply(this, itcast.parseHTML(selector));\n\t\t\t}\n\t\t\t// handle: selector\n\t\t\telse {\n\t\t\t\t// 根据选择器获取dom元素\n\t\t\t\tvar nodelist = document.querySelectorAll(selector);\n\t\t\t\t// 将结果伪数组对象 变成 真数组\n\t\t\t\tvar ret = Array.prototype.slice.call(nodelist);\n\t\t\t\t// 借调数组对象的slice方法将数组中的所有元素 以伪数组形式存储在this上\n\t\t\t\tArray.prototype.push.apply(this, ret);\n\t\t\t}\n\t\t}\n\t\t// handle: dom node\n\t\telse if(itcast.isDOM(selector)){\n\t\t\tthis[0] = selector;\n\t\t\tthis.length = 1;\n\t\t}\n\t\t// handle: dom array(伪数组对象)\n\t\telse if(itcast.isArrayLike(selector)){\n\t\t\t// 获取selector类型\n\t\t\tvar _type = Object.prototype.toString.call(selector).\n\t\t\t\t\tslice(8, -1).toLowerCase();\n\t\t\t// 如果不是数组类型,就 将其转换 为 真数组类型\n\t\t\tif(_type !== 'array') \n\t\t\t\tselector = Array.prototype.slice.call(selector);\n\t\t\tArray.prototype.push.apply(this, selector);\n\t\t}\t\n\t\t// handle: function\n\t\telse if(itcast.isFunction(selector)){\n\t\t\tif(itcast.isReady){\n\t\t\t\tselector();\n\t\t\t} else {\n\t\t\t\tdoucment.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t\tselector();\n\t\t\t\t\titcast.isReady = true;\n\t\t\t\t});\t\n\t\t\t}\n\t\t}\n\t};\n\tinit.prototype = itcast.fn;\n\n\titcast.extend = itcast.fn.extend = function(source, target) {\n\t\tvar k;\n\n\t\ttarget = target || this;\n\n\t\tfor(k in source){\n\t\t\ttarget[k] = source[k];\n\t\t}\n\t};\n\n\t// 添加工具类方法\n\titcast.extend({\n\t\tisReady: false,\n\t\tpaseHTML: function(html) {\n\t\t\tvar div = document.createElement('div'),\n\t\t\t\tret = [];\n\t\t\tdiv.innerHTML = html;\n\n\t\t\tfor(var elem = div.firstChild; elem; elem = elem.nextSibling){\n\t\t\t\tif(elem.nodeType === 1) ret.push(elem);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\t});\n\t// 类型判断方法\n\titcast.extend({\n\t\t// 判断是否为字符串类型\n\t\tisString: function(obj) {\n\t\t\t// 如果为null或undefined，返回false\n\t\t\t// 如果typeof值为string，返回true否则返回false。\n\t\t\treturn !!obj && typeof obj === 'string';\n\t\t},\n\t\tisHTML: function(obj) {\n\t\t\treturn !!obj && obj.charAt(0) === '<' && \n\t\t\t\tobj.charAt(obj.length - 1) === '>' &&\n\t\t\t\tobj.length >= 3;\n\t\t},\n\t\tisDOM: function(obj) {\n\t\t\treturn !!obj && !!obj.nodeType;\n\t\t},\n\t\tisFunction: function(obj) {\n\t\t\treturn !!obj && typeof obj === 'function';\n\t\t},\n\t\tisGlobal: function(obj) {\n\t\t\treturn !!obj && obj.window === obj;\n\t\t},\n\t\tisArrayLike: function(obj) {\n\t\t\tvar _type = Object.prototype.toString.call(obj).slice(8, -1).toLowerCase(),\n\t\t\t\tlength = !!obj && 'length' in obj && obj.length;\n\t\t\t// 过滤 window对象和函数对象\n\t\t\tif(itcast.isFunction(obj) || itcast.isGlobal(obj)) return false;\n\t\t\treturn _type === 'array' || length === 0 || \n\t\t\t\ttypeof length === 'number' && length > 0 && (length - 1) in obj;\n\t\t}\n\t});\n\n\tglobal.$ = global.itcast = itcast;\n}(window));\n```\n\n到此,一个完整的 `init` 框架结构就好了!\n","source":"_posts/javascript-jquery-part1.md","raw":"---\ntitle: JQuery分析及实现part1框架结构\ndate: 2016-11-18 18:40:35\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第一部分!\n\n<img src=\"https://oisha19l0.qnssl.com/20161119.png\" width=\"100%\">\n\n<!-- more -->\n\n## 案例：获取指定DOM下所有子元素\n\t\n1. 在框架内部，遍历子节点，应该使用 `firstChild` 和 `nextSibling` 两种方式实现,代码如下。\n获取 `id` 为 `dv` 的元素下所有的子元素 `nodeType：1 - 12 (1 2 3 8 9 11 --documentFrament)` .\n\n* 第一种方式: `childNodes`\n\n```js\n// 实现思路：\n// 通过childNodes获取到所有的子节点；\n// 将上述所有的子节点中，元素节点获取出来。\n/**\n * [getChildren 获取子元素]\n * @param  {[type]} parent [父节点]\n * @return {[type]}        [返回parent的所有子元素]\n */\nfunction getChildren(parent) {\n\t// 存储结果集\n\tvar ret = [],\n\t\tnodes;\n\t// 获取parent所有子节点\n\tnodes = parent.childNodes;\n\n\t// 遍历nodes\n\tfor(var i = 0,l = nodes.length; i < l;i++){\n\t\t// 如果遍历到当前子节点类型为元素，即为所要结果。存储在ret内。\n\t\tif(nodes[i].nodeType === 1) {\n\t\t\tret.push(nodes[i]);\n\t\t}\n\t}\n\t// 返回结果\n\treturn ret;\n}\nconsole.log(getChildren(document.getElementById('dv')));\n```\n\n* 第二种方式：`firstChild nextSibling（推荐）`\n\n```js\n//使用while方式\nfunction getChildren(parent) {\n\tvar ret = [],\n\t\telem = parent.firstChild;\n\t// 遍历parent所有子节点\n\t// 如果有子节点\n\twhile(elem){\n\t\t// 并且节点类型为元素。存储在ret内\n\t\tif(elem.nodeType === 1) ret.push(elem);\n\t\t// 更新循环标量\n\t\t// 赋值为下一个兄弟节点\n\t\telem = elem.nextSibling;\n\t}\n\t// 返回结果\n\treturn ret;\n} \n\n\n//使用for循环\nfunction getChildren(parent) {\n\tvar ret = [],\n\t\telem = parent.firstChild;\n\tfor(; elem ; elem = elem.nextSibling){\n\t\tif(elem.nodeType === 1) ret.push(elem);\n\t}\t\t\t\n\treturn ret;\n}\n\nconsole.log(getChildren(document.getElementById('dv')));\n```\n\n## 框架结构\n\n1. 在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架\n\t+ 在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将它们当做实参传入沙箱内。\n\n2. 核心函数为 `itcast` ，相当于 `jQuery` 。最终要暴露给用户使用的\n\n3. 实现 `itcast` 函数，使用的是 工厂模式 来 创建对象。好处：用户 `new` 或 不 `new` 都可以得到正确的对象\n\n4.  `init` 构造函数 的 位置\n\n\t+ 如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更改用户，尽量将构造函数暴露给用户\n\t+ 可以把构造函数放在 `itcast` 函数上，也可以放在 `itcast` 函数原型上。\n\t+ 处于 `jQuery` 之父，在写简单继承模式时，将构造函数放在其原型上。那么在编写框架时，即延续下来了\n\n5.  `init` 创建出来的对象，最终继承自 `itcast.prototype` 。所以可以将 `init` 对象称为 `itcast` 对象。\n\n6. 由于暴露给用户 的 是 `itcast` 和 其原型。所以在扩展成员时，只能在这两个对象上扩展。而在函数对象上扩展的成员 为 静态成员。可以直接通过函数名字来访问。但是，在原型上的成员，必须创建实例来访问。因此为了实现 `init` 对象可以访问 `itcast` 原型上的成员，就基于原型来实现继承。\n\n```js\n(function(global) {\n\tvar init;\n\t// 核心函数（工厂函数）\n\tvar itcast = function(selector) {\n\t\treturn new itcast.fn.init(selector);\n\t};\n\n\t// 核心原型\t\n\titcast.fn = itcast.prototype = {\n\t\tconstructor: itcast\n\t};\n\n\t// 构造函数\n\tinit = itcast.fn.init = function(selector) {};\n\t// 实现init对象继承自itcast原型\n\tinit.prototype = itcast.fn;\n\n\t// 可扩展方法\n\t// 如果target为undefined值，那么就是给this扩展成员\n\t// 否则就是给target对象扩展。\n\titcast.extend = itcast.fn.extend = function(source, target) {\n\t\tvar k;\n\t\t// 如果target为undefined值，就赋值为this\n\t\t// 给this扩展成员\n\t\tif (target == undefined) {\n\t\t\ttarget = this;\n\t\t}\t\n\n\t\t// target = target || this;\n\n\t\tfor(k in source){\n\t\t\ttarget[k] = source[k];\n\t\t}\t\t\n\t};\n\t// 暴露给用户\n\tglobal.$ = global.itcast = itcast;\n}(window));\n\nitcast.fn.addClass = function(className) {};\nitcast.fn.append = function(className) {};\n```\n\n7. 完善`init`构造函数\n\n\t+ `selector` 类型：\n\t\t- 无效值： `null` `undefined` `' '` `false`\n\t\t- 字符串\n\t\t\t* 选择器：\t `div` 根据选择器筛选dom元素，并以伪数组形式 存储在 `this` 上\n\t\t\t*  `html` 字符串 `<p>123</p><p>456</p>` `<p>` 将html字符串 转换成 `html` 元素\n\t\t- `DOM` 节点 \n\t\t- `DOM` 数组（伪数组） \n\t\t- `function`：入口函数 `DOMContentLoaded`\n\t\t\t* 使用静态属性 `isReady` 存储 `dom` 树是否加载完毕\n\t\t\t* 判断 `isReady` 值， 如果为 `true` ，就直接执行传入的函数。\n\t\t\t* 否则，就给 `document` 的 `DOMContentLoaded` 事件绑定处理程序，在处理程序中，先将 `isReady` 赋值为 `true` ，在执行传入的函数。\n\n8. 如何判断字符串为 `html` 字符串，必须满足一下条件：\n\n\t* 以 `<` 开头\n\t* 以 `>` 结尾\n\t* 最小长度为 `3`\n\n9. 如何判断像数组（数组和伪数组）\n\n\t+ 用 `length` 属性去判断，若具有 `length` 属性 表示为 像数组类型\n\t+ 除了 `window` 对象以及函数对象\n\t+  `{length: 1} {4: \"123\", length: 5}` 稀疏数组\n\n\t+ 如果为真数组，返回 `true`\n\t+ 如果 `length` 属性值为 `0` （除了 `window` 对象以及函数对象），返回 `true`\n\t+ 如果 `length` 属性值 `>0`, 如果对象 具有 `length - 1` 索引，返回 `true`\n\n10. 全局对象 `window` 特性：有一个 `window` 属性 引用 自身。\n\n```js\n(function(global) {\n\tvar init,\n\t\tdocument = global.document;\n\n\tvar itcast = function(selector) {\n\t\treturn new itcast.fn.init(selector);\n\t};\n\n\titcast.fn = itcast.prototype = {\n\t\tconstructor: itcast,\n\t\tlength: 0\n\t};\n\tinit = itcast.fn.init = function(selector) {\n\t\t// handle: null undefined '' false\n\t\tif(!selector) return this;\n\t\t// handle: string\n\t\telse if(itcast.isString(selector)){\n\t\t\t// handle: html string '<p>123</p>'\n\t\t\tif(itcast.isHTML(selector)){\t\t\t\t\t\t\n\t\t\t\t// 怎么存储 以伪数组对象形式存储 dom元素\n\t\t\t\tArray.prototype.push.apply(this, itcast.parseHTML(selector));\n\t\t\t}\n\t\t\t// handle: selector\n\t\t\telse {\n\t\t\t\t// 根据选择器获取dom元素\n\t\t\t\tvar nodelist = document.querySelectorAll(selector);\n\t\t\t\t// 将结果伪数组对象 变成 真数组\n\t\t\t\tvar ret = Array.prototype.slice.call(nodelist);\n\t\t\t\t// 借调数组对象的slice方法将数组中的所有元素 以伪数组形式存储在this上\n\t\t\t\tArray.prototype.push.apply(this, ret);\n\t\t\t}\n\t\t}\n\t\t// handle: dom node\n\t\telse if(itcast.isDOM(selector)){\n\t\t\tthis[0] = selector;\n\t\t\tthis.length = 1;\n\t\t}\n\t\t// handle: dom array(伪数组对象)\n\t\telse if(itcast.isArrayLike(selector)){\n\t\t\t// 获取selector类型\n\t\t\tvar _type = Object.prototype.toString.call(selector).\n\t\t\t\t\tslice(8, -1).toLowerCase();\n\t\t\t// 如果不是数组类型,就 将其转换 为 真数组类型\n\t\t\tif(_type !== 'array') \n\t\t\t\tselector = Array.prototype.slice.call(selector);\n\t\t\tArray.prototype.push.apply(this, selector);\n\t\t}\t\n\t\t// handle: function\n\t\telse if(itcast.isFunction(selector)){\n\t\t\tif(itcast.isReady){\n\t\t\t\tselector();\n\t\t\t} else {\n\t\t\t\tdoucment.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t\tselector();\n\t\t\t\t\titcast.isReady = true;\n\t\t\t\t});\t\n\t\t\t}\n\t\t}\n\t};\n\tinit.prototype = itcast.fn;\n\n\titcast.extend = itcast.fn.extend = function(source, target) {\n\t\tvar k;\n\n\t\ttarget = target || this;\n\n\t\tfor(k in source){\n\t\t\ttarget[k] = source[k];\n\t\t}\n\t};\n\n\t// 添加工具类方法\n\titcast.extend({\n\t\tisReady: false,\n\t\tpaseHTML: function(html) {\n\t\t\tvar div = document.createElement('div'),\n\t\t\t\tret = [];\n\t\t\tdiv.innerHTML = html;\n\n\t\t\tfor(var elem = div.firstChild; elem; elem = elem.nextSibling){\n\t\t\t\tif(elem.nodeType === 1) ret.push(elem);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\t});\n\t// 类型判断方法\n\titcast.extend({\n\t\t// 判断是否为字符串类型\n\t\tisString: function(obj) {\n\t\t\t// 如果为null或undefined，返回false\n\t\t\t// 如果typeof值为string，返回true否则返回false。\n\t\t\treturn !!obj && typeof obj === 'string';\n\t\t},\n\t\tisHTML: function(obj) {\n\t\t\treturn !!obj && obj.charAt(0) === '<' && \n\t\t\t\tobj.charAt(obj.length - 1) === '>' &&\n\t\t\t\tobj.length >= 3;\n\t\t},\n\t\tisDOM: function(obj) {\n\t\t\treturn !!obj && !!obj.nodeType;\n\t\t},\n\t\tisFunction: function(obj) {\n\t\t\treturn !!obj && typeof obj === 'function';\n\t\t},\n\t\tisGlobal: function(obj) {\n\t\t\treturn !!obj && obj.window === obj;\n\t\t},\n\t\tisArrayLike: function(obj) {\n\t\t\tvar _type = Object.prototype.toString.call(obj).slice(8, -1).toLowerCase(),\n\t\t\t\tlength = !!obj && 'length' in obj && obj.length;\n\t\t\t// 过滤 window对象和函数对象\n\t\t\tif(itcast.isFunction(obj) || itcast.isGlobal(obj)) return false;\n\t\t\treturn _type === 'array' || length === 0 || \n\t\t\t\ttypeof length === 'number' && length > 0 && (length - 1) in obj;\n\t\t}\n\t});\n\n\tglobal.$ = global.itcast = itcast;\n}(window));\n```\n\n到此,一个完整的 `init` 框架结构就好了!\n","slug":"javascript-jquery-part1","published":1,"updated":"2016-12-26T11:38:22.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvo4001muwg7sqn0omyf","content":"<p>JQuery模块分析及其实现第一部分!</p>\n<p><img src=\"https://oisha19l0.qnssl.com/20161119.png\" width=\"100%\"></p>\n<a id=\"more\"></a>\n<h2 id=\"案例：获取指定DOM下所有子元素\"><a href=\"#案例：获取指定DOM下所有子元素\" class=\"headerlink\" title=\"案例：获取指定DOM下所有子元素\"></a>案例：获取指定DOM下所有子元素</h2><ol>\n<li>在框架内部，遍历子节点，应该使用 <code>firstChild</code> 和 <code>nextSibling</code> 两种方式实现,代码如下。<br>获取 <code>id</code> 为 <code>dv</code> 的元素下所有的子元素 <code>nodeType：1 - 12 (1 2 3 8 9 11 --documentFrament)</code> .</li>\n</ol>\n<ul>\n<li>第一种方式: <code>childNodes</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 实现思路：</span></div><div class=\"line\"><span class=\"comment\">// 通过childNodes获取到所有的子节点；</span></div><div class=\"line\"><span class=\"comment\">// 将上述所有的子节点中，元素节点获取出来。</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * [getChildren 获取子元素]</div><div class=\"line\"> * @param  &#123;[type]&#125; parent [父节点]</div><div class=\"line\"> * @return &#123;[type]&#125;        [返回parent的所有子元素]</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">parent</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 存储结果集</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\tnodes;</div><div class=\"line\">\t<span class=\"comment\">// 获取parent所有子节点</span></div><div class=\"line\">\tnodes = parent.childNodes;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 遍历nodes</span></div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,l = nodes.length; i &lt; l;i++)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果遍历到当前子节点类型为元素，即为所要结果。存储在ret内。</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(nodes[i].nodeType === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tret.push(nodes[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 返回结果</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(getChildren(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>)));</div></pre></td></tr></table></figure>\n<ul>\n<li>第二种方式：<code>firstChild nextSibling（推荐）</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用while方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">parent</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\telem = parent.firstChild;</div><div class=\"line\">\t<span class=\"comment\">// 遍历parent所有子节点</span></div><div class=\"line\">\t<span class=\"comment\">// 如果有子节点</span></div><div class=\"line\">\t<span class=\"keyword\">while</span>(elem)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 并且节点类型为元素。存储在ret内</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(elem.nodeType === <span class=\"number\">1</span>) ret.push(elem);</div><div class=\"line\">\t\t<span class=\"comment\">// 更新循环标量</span></div><div class=\"line\">\t\t<span class=\"comment\">// 赋值为下一个兄弟节点</span></div><div class=\"line\">\t\telem = elem.nextSibling;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 返回结果</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用for循环</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">parent</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\telem = parent.firstChild;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(; elem ; elem = elem.nextSibling)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(elem.nodeType === <span class=\"number\">1</span>) ret.push(elem);</div><div class=\"line\">\t&#125;\t\t\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getChildren(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>)));</div></pre></td></tr></table></figure>\n<h2 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h2><ol>\n<li><p>在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架</p>\n<ul>\n<li>在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将它们当做实参传入沙箱内。</li>\n</ul>\n</li>\n<li><p>核心函数为 <code>itcast</code> ，相当于 <code>jQuery</code> 。最终要暴露给用户使用的</p>\n</li>\n<li><p>实现 <code>itcast</code> 函数，使用的是 工厂模式 来 创建对象。好处：用户 <code>new</code> 或 不 <code>new</code> 都可以得到正确的对象</p>\n</li>\n<li><p><code>init</code> 构造函数 的 位置</p>\n<ul>\n<li>如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更改用户，尽量将构造函数暴露给用户</li>\n<li>可以把构造函数放在 <code>itcast</code> 函数上，也可以放在 <code>itcast</code> 函数原型上。</li>\n<li>处于 <code>jQuery</code> 之父，在写简单继承模式时，将构造函数放在其原型上。那么在编写框架时，即延续下来了</li>\n</ul>\n</li>\n<li><p><code>init</code> 创建出来的对象，最终继承自 <code>itcast.prototype</code> 。所以可以将 <code>init</code> 对象称为 <code>itcast</code> 对象。</p>\n</li>\n<li><p>由于暴露给用户 的 是 <code>itcast</code> 和 其原型。所以在扩展成员时，只能在这两个对象上扩展。而在函数对象上扩展的成员 为 静态成员。可以直接通过函数名字来访问。但是，在原型上的成员，必须创建实例来访问。因此为了实现 <code>init</code> 对象可以访问 <code>itcast</code> 原型上的成员，就基于原型来实现继承。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">global</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> init;</div><div class=\"line\">\t<span class=\"comment\">// 核心函数（工厂函数）</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> itcast = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> itcast.fn.init(selector);</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 核心原型\t</span></div><div class=\"line\">\titcast.fn = itcast.prototype = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">constructor</span>: itcast</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 构造函数</span></div><div class=\"line\">\tinit = itcast.fn.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 实现init对象继承自itcast原型</span></div><div class=\"line\">\tinit.prototype = itcast.fn;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 可扩展方法</span></div><div class=\"line\">\t<span class=\"comment\">// 如果target为undefined值，那么就是给this扩展成员</span></div><div class=\"line\">\t<span class=\"comment\">// 否则就是给target对象扩展。</span></div><div class=\"line\">\titcast.extend = itcast.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> k;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果target为undefined值，就赋值为this</span></div><div class=\"line\">\t\t<span class=\"comment\">// 给this扩展成员</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (target == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">\t\t\ttarget = <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// target = target || this;</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(k <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">\t\t\ttarget[k] = source[k];</div><div class=\"line\">\t\t&#125;\t\t</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 暴露给用户</span></div><div class=\"line\">\tglobal.$ = global.itcast = itcast;</div><div class=\"line\">&#125;(<span class=\"built_in\">window</span>));</div><div class=\"line\"></div><div class=\"line\">itcast.fn.addClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;&#125;;</div><div class=\"line\">itcast.fn.append = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>完善<code>init</code>构造函数</p>\n<ul>\n<li><code>selector</code> 类型：<ul>\n<li>无效值： <code>null</code> <code>undefined</code> <code>&#39; &#39;</code> <code>false</code></li>\n<li>字符串<ul>\n<li>选择器：     <code>div</code> 根据选择器筛选dom元素，并以伪数组形式 存储在 <code>this</code> 上</li>\n<li><code>html</code> 字符串 <code>&lt;p&gt;123&lt;/p&gt;&lt;p&gt;456&lt;/p&gt;</code> <code>&lt;p&gt;</code> 将html字符串 转换成 <code>html</code> 元素</li>\n</ul>\n</li>\n<li><code>DOM</code> 节点 </li>\n<li><code>DOM</code> 数组（伪数组） </li>\n<li><code>function</code>：入口函数 <code>DOMContentLoaded</code><ul>\n<li>使用静态属性 <code>isReady</code> 存储 <code>dom</code> 树是否加载完毕</li>\n<li>判断 <code>isReady</code> 值， 如果为 <code>true</code> ，就直接执行传入的函数。</li>\n<li>否则，就给 <code>document</code> 的 <code>DOMContentLoaded</code> 事件绑定处理程序，在处理程序中，先将 <code>isReady</code> 赋值为 <code>true</code> ，在执行传入的函数。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>如何判断字符串为 <code>html</code> 字符串，必须满足一下条件：</p>\n<ul>\n<li>以 <code>&lt;</code> 开头</li>\n<li>以 <code>&gt;</code> 结尾</li>\n<li>最小长度为 <code>3</code></li>\n</ul>\n</li>\n<li><p>如何判断像数组（数组和伪数组）</p>\n<ul>\n<li>用 <code>length</code> 属性去判断，若具有 <code>length</code> 属性 表示为 像数组类型</li>\n<li>除了 <code>window</code> 对象以及函数对象</li>\n<li><p><code>{length: 1} {4: &quot;123&quot;, length: 5}</code> 稀疏数组</p>\n</li>\n<li><p>如果为真数组，返回 <code>true</code></p>\n</li>\n<li>如果 <code>length</code> 属性值为 <code>0</code> （除了 <code>window</code> 对象以及函数对象），返回 <code>true</code></li>\n<li>如果 <code>length</code> 属性值 <code>&gt;0</code>, 如果对象 具有 <code>length - 1</code> 索引，返回 <code>true</code></li>\n</ul>\n</li>\n<li><p>全局对象 <code>window</code> 特性：有一个 <code>window</code> 属性 引用 自身。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">global</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> init,</div><div class=\"line\">\t\t<span class=\"built_in\">document</span> = global.document;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> itcast = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> itcast.fn.init(selector);</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\titcast.fn = itcast.prototype = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">constructor</span>: itcast,</div><div class=\"line\">\t\t<span class=\"attr\">length</span>: <span class=\"number\">0</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">\tinit = itcast.fn.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: null undefined '' false</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!selector) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: string</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isString(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// handle: html string '&lt;p&gt;123&lt;/p&gt;'</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(itcast.isHTML(selector))&#123;\t\t\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 怎么存储 以伪数组对象形式存储 dom元素</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"keyword\">this</span>, itcast.parseHTML(selector));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// handle: selector</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 根据选择器获取dom元素</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> nodelist = <span class=\"built_in\">document</span>.querySelectorAll(selector);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 将结果伪数组对象 变成 真数组</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> ret = <span class=\"built_in\">Array</span>.prototype.slice.call(nodelist);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 借调数组对象的slice方法将数组中的所有元素 以伪数组形式存储在this上</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"keyword\">this</span>, ret);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: dom node</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isDOM(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>[<span class=\"number\">0</span>] = selector;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.length = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: dom array(伪数组对象)</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isArrayLike(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取selector类型</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> _type = <span class=\"built_in\">Object</span>.prototype.toString.call(selector).</div><div class=\"line\">\t\t\t\t\tslice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>).toLowerCase();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果不是数组类型,就 将其转换 为 真数组类型</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(_type !== <span class=\"string\">'array'</span>) </div><div class=\"line\">\t\t\t\tselector = <span class=\"built_in\">Array</span>.prototype.slice.call(selector);</div><div class=\"line\">\t\t\t<span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"keyword\">this</span>, selector);</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t\t<span class=\"comment\">// handle: function</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isFunction(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(itcast.isReady)&#123;</div><div class=\"line\">\t\t\t\tselector();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tdoucment.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t\tselector();</div><div class=\"line\">\t\t\t\t\titcast.isReady = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t\t&#125;);\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\tinit.prototype = itcast.fn;</div><div class=\"line\"></div><div class=\"line\">\titcast.extend = itcast.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> k;</div><div class=\"line\"></div><div class=\"line\">\t\ttarget = target || <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(k <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">\t\t\ttarget[k] = source[k];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 添加工具类方法</span></div><div class=\"line\">\titcast.extend(&#123;</div><div class=\"line\">\t\t<span class=\"attr\">isReady</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">\t\t<span class=\"attr\">paseHTML</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>),</div><div class=\"line\">\t\t\t\tret = [];</div><div class=\"line\">\t\t\tdiv.innerHTML = html;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> elem = div.firstChild; elem; elem = elem.nextSibling)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(elem.nodeType === <span class=\"number\">1</span>) ret.push(elem);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 类型判断方法</span></div><div class=\"line\">\titcast.extend(&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 判断是否为字符串类型</span></div><div class=\"line\">\t\tisString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果为null或undefined，返回false</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果typeof值为string，返回true否则返回false。</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'string'</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isHTML</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; obj.charAt(<span class=\"number\">0</span>) === <span class=\"string\">'&lt;'</span> &amp;&amp; </div><div class=\"line\">\t\t\t\tobj.charAt(obj.length - <span class=\"number\">1</span>) === <span class=\"string\">'&gt;'</span> &amp;&amp;</div><div class=\"line\">\t\t\t\tobj.length &gt;= <span class=\"number\">3</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isDOM</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; !!obj.nodeType;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isFunction</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'function'</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isGlobal</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; obj.window === obj;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isArrayLike</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> _type = <span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>).toLowerCase(),</div><div class=\"line\">\t\t\t\tlength = !!obj &amp;&amp; <span class=\"string\">'length'</span> <span class=\"keyword\">in</span> obj &amp;&amp; obj.length;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 过滤 window对象和函数对象</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(itcast.isFunction(obj) || itcast.isGlobal(obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _type === <span class=\"string\">'array'</span> || length === <span class=\"number\">0</span> || </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">typeof</span> length === <span class=\"string\">'number'</span> &amp;&amp; length &gt; <span class=\"number\">0</span> &amp;&amp; (length - <span class=\"number\">1</span>) <span class=\"keyword\">in</span> obj;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\tglobal.$ = global.itcast = itcast;</div><div class=\"line\">&#125;(<span class=\"built_in\">window</span>));</div></pre></td></tr></table></figure>\n<p>到此,一个完整的 <code>init</code> 框架结构就好了!</p>\n","excerpt":"<p>JQuery模块分析及其实现第一部分!</p>\n<p><img src=\"https://oisha19l0.qnssl.com/20161119.png\" width=\"100%\"></p>","more":"<h2 id=\"案例：获取指定DOM下所有子元素\"><a href=\"#案例：获取指定DOM下所有子元素\" class=\"headerlink\" title=\"案例：获取指定DOM下所有子元素\"></a>案例：获取指定DOM下所有子元素</h2><ol>\n<li>在框架内部，遍历子节点，应该使用 <code>firstChild</code> 和 <code>nextSibling</code> 两种方式实现,代码如下。<br>获取 <code>id</code> 为 <code>dv</code> 的元素下所有的子元素 <code>nodeType：1 - 12 (1 2 3 8 9 11 --documentFrament)</code> .</li>\n</ol>\n<ul>\n<li>第一种方式: <code>childNodes</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 实现思路：</span></div><div class=\"line\"><span class=\"comment\">// 通过childNodes获取到所有的子节点；</span></div><div class=\"line\"><span class=\"comment\">// 将上述所有的子节点中，元素节点获取出来。</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * [getChildren 获取子元素]</div><div class=\"line\"> * @param  &#123;[type]&#125; parent [父节点]</div><div class=\"line\"> * @return &#123;[type]&#125;        [返回parent的所有子元素]</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">parent</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 存储结果集</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\tnodes;</div><div class=\"line\">\t<span class=\"comment\">// 获取parent所有子节点</span></div><div class=\"line\">\tnodes = parent.childNodes;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 遍历nodes</span></div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,l = nodes.length; i &lt; l;i++)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果遍历到当前子节点类型为元素，即为所要结果。存储在ret内。</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(nodes[i].nodeType === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tret.push(nodes[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 返回结果</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(getChildren(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>)));</div></pre></td></tr></table></figure>\n<ul>\n<li>第二种方式：<code>firstChild nextSibling（推荐）</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用while方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">parent</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\telem = parent.firstChild;</div><div class=\"line\">\t<span class=\"comment\">// 遍历parent所有子节点</span></div><div class=\"line\">\t<span class=\"comment\">// 如果有子节点</span></div><div class=\"line\">\t<span class=\"keyword\">while</span>(elem)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 并且节点类型为元素。存储在ret内</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(elem.nodeType === <span class=\"number\">1</span>) ret.push(elem);</div><div class=\"line\">\t\t<span class=\"comment\">// 更新循环标量</span></div><div class=\"line\">\t\t<span class=\"comment\">// 赋值为下一个兄弟节点</span></div><div class=\"line\">\t\telem = elem.nextSibling;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 返回结果</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用for循环</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">parent</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\telem = parent.firstChild;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(; elem ; elem = elem.nextSibling)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(elem.nodeType === <span class=\"number\">1</span>) ret.push(elem);</div><div class=\"line\">\t&#125;\t\t\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getChildren(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>)));</div></pre></td></tr></table></figure>\n<h2 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h2><ol>\n<li><p>在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架</p>\n<ul>\n<li>在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将它们当做实参传入沙箱内。</li>\n</ul>\n</li>\n<li><p>核心函数为 <code>itcast</code> ，相当于 <code>jQuery</code> 。最终要暴露给用户使用的</p>\n</li>\n<li><p>实现 <code>itcast</code> 函数，使用的是 工厂模式 来 创建对象。好处：用户 <code>new</code> 或 不 <code>new</code> 都可以得到正确的对象</p>\n</li>\n<li><p><code>init</code> 构造函数 的 位置</p>\n<ul>\n<li>如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更改用户，尽量将构造函数暴露给用户</li>\n<li>可以把构造函数放在 <code>itcast</code> 函数上，也可以放在 <code>itcast</code> 函数原型上。</li>\n<li>处于 <code>jQuery</code> 之父，在写简单继承模式时，将构造函数放在其原型上。那么在编写框架时，即延续下来了</li>\n</ul>\n</li>\n<li><p><code>init</code> 创建出来的对象，最终继承自 <code>itcast.prototype</code> 。所以可以将 <code>init</code> 对象称为 <code>itcast</code> 对象。</p>\n</li>\n<li><p>由于暴露给用户 的 是 <code>itcast</code> 和 其原型。所以在扩展成员时，只能在这两个对象上扩展。而在函数对象上扩展的成员 为 静态成员。可以直接通过函数名字来访问。但是，在原型上的成员，必须创建实例来访问。因此为了实现 <code>init</code> 对象可以访问 <code>itcast</code> 原型上的成员，就基于原型来实现继承。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">global</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> init;</div><div class=\"line\">\t<span class=\"comment\">// 核心函数（工厂函数）</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> itcast = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> itcast.fn.init(selector);</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 核心原型\t</span></div><div class=\"line\">\titcast.fn = itcast.prototype = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">constructor</span>: itcast</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 构造函数</span></div><div class=\"line\">\tinit = itcast.fn.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 实现init对象继承自itcast原型</span></div><div class=\"line\">\tinit.prototype = itcast.fn;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 可扩展方法</span></div><div class=\"line\">\t<span class=\"comment\">// 如果target为undefined值，那么就是给this扩展成员</span></div><div class=\"line\">\t<span class=\"comment\">// 否则就是给target对象扩展。</span></div><div class=\"line\">\titcast.extend = itcast.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> k;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果target为undefined值，就赋值为this</span></div><div class=\"line\">\t\t<span class=\"comment\">// 给this扩展成员</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (target == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">\t\t\ttarget = <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// target = target || this;</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(k <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">\t\t\ttarget[k] = source[k];</div><div class=\"line\">\t\t&#125;\t\t</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 暴露给用户</span></div><div class=\"line\">\tglobal.$ = global.itcast = itcast;</div><div class=\"line\">&#125;(<span class=\"built_in\">window</span>));</div><div class=\"line\"></div><div class=\"line\">itcast.fn.addClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;&#125;;</div><div class=\"line\">itcast.fn.append = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>完善<code>init</code>构造函数</p>\n<ul>\n<li><code>selector</code> 类型：<ul>\n<li>无效值： <code>null</code> <code>undefined</code> <code>&#39; &#39;</code> <code>false</code></li>\n<li>字符串<ul>\n<li>选择器：     <code>div</code> 根据选择器筛选dom元素，并以伪数组形式 存储在 <code>this</code> 上</li>\n<li><code>html</code> 字符串 <code>&lt;p&gt;123&lt;/p&gt;&lt;p&gt;456&lt;/p&gt;</code> <code>&lt;p&gt;</code> 将html字符串 转换成 <code>html</code> 元素</li>\n</ul>\n</li>\n<li><code>DOM</code> 节点 </li>\n<li><code>DOM</code> 数组（伪数组） </li>\n<li><code>function</code>：入口函数 <code>DOMContentLoaded</code><ul>\n<li>使用静态属性 <code>isReady</code> 存储 <code>dom</code> 树是否加载完毕</li>\n<li>判断 <code>isReady</code> 值， 如果为 <code>true</code> ，就直接执行传入的函数。</li>\n<li>否则，就给 <code>document</code> 的 <code>DOMContentLoaded</code> 事件绑定处理程序，在处理程序中，先将 <code>isReady</code> 赋值为 <code>true</code> ，在执行传入的函数。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>如何判断字符串为 <code>html</code> 字符串，必须满足一下条件：</p>\n<ul>\n<li>以 <code>&lt;</code> 开头</li>\n<li>以 <code>&gt;</code> 结尾</li>\n<li>最小长度为 <code>3</code></li>\n</ul>\n</li>\n<li><p>如何判断像数组（数组和伪数组）</p>\n<ul>\n<li>用 <code>length</code> 属性去判断，若具有 <code>length</code> 属性 表示为 像数组类型</li>\n<li>除了 <code>window</code> 对象以及函数对象</li>\n<li><p><code>{length: 1} {4: &quot;123&quot;, length: 5}</code> 稀疏数组</p>\n</li>\n<li><p>如果为真数组，返回 <code>true</code></p>\n</li>\n<li>如果 <code>length</code> 属性值为 <code>0</code> （除了 <code>window</code> 对象以及函数对象），返回 <code>true</code></li>\n<li>如果 <code>length</code> 属性值 <code>&gt;0</code>, 如果对象 具有 <code>length - 1</code> 索引，返回 <code>true</code></li>\n</ul>\n</li>\n<li><p>全局对象 <code>window</code> 特性：有一个 <code>window</code> 属性 引用 自身。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">global</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> init,</div><div class=\"line\">\t\t<span class=\"built_in\">document</span> = global.document;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> itcast = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> itcast.fn.init(selector);</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\titcast.fn = itcast.prototype = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">constructor</span>: itcast,</div><div class=\"line\">\t\t<span class=\"attr\">length</span>: <span class=\"number\">0</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">\tinit = itcast.fn.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: null undefined '' false</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!selector) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: string</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isString(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// handle: html string '&lt;p&gt;123&lt;/p&gt;'</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(itcast.isHTML(selector))&#123;\t\t\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 怎么存储 以伪数组对象形式存储 dom元素</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"keyword\">this</span>, itcast.parseHTML(selector));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// handle: selector</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 根据选择器获取dom元素</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> nodelist = <span class=\"built_in\">document</span>.querySelectorAll(selector);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 将结果伪数组对象 变成 真数组</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> ret = <span class=\"built_in\">Array</span>.prototype.slice.call(nodelist);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 借调数组对象的slice方法将数组中的所有元素 以伪数组形式存储在this上</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"keyword\">this</span>, ret);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: dom node</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isDOM(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>[<span class=\"number\">0</span>] = selector;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.length = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: dom array(伪数组对象)</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isArrayLike(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取selector类型</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> _type = <span class=\"built_in\">Object</span>.prototype.toString.call(selector).</div><div class=\"line\">\t\t\t\t\tslice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>).toLowerCase();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果不是数组类型,就 将其转换 为 真数组类型</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(_type !== <span class=\"string\">'array'</span>) </div><div class=\"line\">\t\t\t\tselector = <span class=\"built_in\">Array</span>.prototype.slice.call(selector);</div><div class=\"line\">\t\t\t<span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"keyword\">this</span>, selector);</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t\t<span class=\"comment\">// handle: function</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isFunction(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(itcast.isReady)&#123;</div><div class=\"line\">\t\t\t\tselector();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tdoucment.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t\tselector();</div><div class=\"line\">\t\t\t\t\titcast.isReady = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t\t&#125;);\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\tinit.prototype = itcast.fn;</div><div class=\"line\"></div><div class=\"line\">\titcast.extend = itcast.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> k;</div><div class=\"line\"></div><div class=\"line\">\t\ttarget = target || <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(k <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">\t\t\ttarget[k] = source[k];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 添加工具类方法</span></div><div class=\"line\">\titcast.extend(&#123;</div><div class=\"line\">\t\t<span class=\"attr\">isReady</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">\t\t<span class=\"attr\">paseHTML</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>),</div><div class=\"line\">\t\t\t\tret = [];</div><div class=\"line\">\t\t\tdiv.innerHTML = html;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> elem = div.firstChild; elem; elem = elem.nextSibling)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(elem.nodeType === <span class=\"number\">1</span>) ret.push(elem);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 类型判断方法</span></div><div class=\"line\">\titcast.extend(&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 判断是否为字符串类型</span></div><div class=\"line\">\t\tisString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果为null或undefined，返回false</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果typeof值为string，返回true否则返回false。</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'string'</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isHTML</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; obj.charAt(<span class=\"number\">0</span>) === <span class=\"string\">'&lt;'</span> &amp;&amp; </div><div class=\"line\">\t\t\t\tobj.charAt(obj.length - <span class=\"number\">1</span>) === <span class=\"string\">'&gt;'</span> &amp;&amp;</div><div class=\"line\">\t\t\t\tobj.length &gt;= <span class=\"number\">3</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isDOM</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; !!obj.nodeType;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isFunction</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'function'</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isGlobal</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; obj.window === obj;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isArrayLike</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> _type = <span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>).toLowerCase(),</div><div class=\"line\">\t\t\t\tlength = !!obj &amp;&amp; <span class=\"string\">'length'</span> <span class=\"keyword\">in</span> obj &amp;&amp; obj.length;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 过滤 window对象和函数对象</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(itcast.isFunction(obj) || itcast.isGlobal(obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _type === <span class=\"string\">'array'</span> || length === <span class=\"number\">0</span> || </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">typeof</span> length === <span class=\"string\">'number'</span> &amp;&amp; length &gt; <span class=\"number\">0</span> &amp;&amp; (length - <span class=\"number\">1</span>) <span class=\"keyword\">in</span> obj;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\tglobal.$ = global.itcast = itcast;</div><div class=\"line\">&#125;(<span class=\"built_in\">window</span>));</div></pre></td></tr></table></figure>\n<p>到此,一个完整的 <code>init</code> 框架结构就好了!</p>"},{"title":"Canvas部分知识总结","date":"2016-11-15T12:38:26.000Z","_content":"\nCanvas笔记总结！！\n接前部分~\n\n<!-- more -->\n\n## canvas是什么?\n\n是一个 `HTML5` 标签,该标签用来绘图\n\n## canvas怎么用\n\n`canvas` 是一个画布,不能自己画图,画图需要绘图上下文\n\n```js\nvar cas = document.querySelector(\"#c\");\n//获取绘图上下文\ncar ctx = cas.getContext(\"2d\");\n```\n\n## 画直线\n\n```js\n//设置直线的起点\nctx.moveTo(x,y);\n//画路径到直线的终点\nctx.lineTo(x,y);\n```\n\n## 开启新路径\n\n```js\nctx.befinPath();\n```\n\n## 画曲线\n\n```js\n//使用for循环,用函数来帮一个y确定一个x\n//然后讲x,y的每一个点用lingTo连起来就变成了一条曲线\n```\n\n## 画矩形\n\n```js\n//1. 手动,纯人工\n//2. ctx.rect(x,y,w,h);\n//3. ctx.strokeRect(x,y,w,h);\n//4. ctx.fillRect(x,y,w,h);\n```\n\n## 画弧\n\n```js\nctx.arc(x,y,r,startAngle.endAngle[,Boolean optional anticlockwise])\n```\n\n## 扇形\n\n```js\n//先moveTo到原心\nmoveTo(x,y);\nctx.arc(x,y,r,startAngle.endAngle[,Boolean optional anticlockwise])\nctx.closePath();\nctx.fill();\n```\n\n## 饼图\n\n`3` 等分的饼\n1. 开始的角度一般是 `-90`\n2. 每画一个扇形,就让角度 `+120`\n3. 再从加了 `120` 的角度画下一个扇形\n\n## 动画饼图\n\n定时器\n每一段时间画一个小扇形,就和画饼一样\n\n## 文字\n\n```js\nfillText(str, x, y)\nstrokText(str, x, y)\n```\n\n### 对其方式\n\n#### 水平\n\n* left\n* center\n* right\n* start\n* end\n\n#### 垂直\n\n* top\n* middle\n* bottom\n* hanging\n* alphabetic\n* ideographic\n\n## 完整饼图\n\n1. 先算所有数据的总和\n2. 算每个数据的比例,用比例算出角度\n3. 更具每个角度去画扇形\n4. 在去画扇形的中线\n5. 画文字下面的线\n6. 写文字\n\n## 图片\n\n```js\n//3参\nctx.drawImage(img, x, y)\n//直接画不管宽高\n//5参\nctx.drawImage(img, x, y, w, h)\n//要确定宽高\n//9参\nctx.drawImage(img, x, y, w, h, x1, y1, w1, h1)\n\n//拿出图片中 x, y, w, h 这个矩形所在的位置的图像\n//放到canvas中x1, y1, w1, h1这个矩形所在的位置\n```\n\n## 帧动画\n\n\n## 变换\n\n* 平移变换   把画布的原点移动到指定的位置\n    `ctx.translate(x, y)`\n* 缩放变换   对画布进行缩放\n\n```js\n    ctx.scale(x, y)  //x表示的是对画布x轴的缩放，如果大于1 是放大 如果小于1 是缩小\n    ctx.scale(x, y)  //y表示的是对画布y轴的缩放，如果大于1 是放大 如果小于1 是缩小\n```\n\n* 旋转变换\n    `ctx.rotate(弧度)  //将画布，围绕原点旋转指定的弧度`","source":"_posts/canvas-summary.md","raw":"---\ntitle: Canvas部分知识总结\ndate: 2016-11-15 20:38:26\ntags: \n\t- Canvas\n\t- HTML5\n\t- 画布\ncategories: Canvas\n---\n\nCanvas笔记总结！！\n接前部分~\n\n<!-- more -->\n\n## canvas是什么?\n\n是一个 `HTML5` 标签,该标签用来绘图\n\n## canvas怎么用\n\n`canvas` 是一个画布,不能自己画图,画图需要绘图上下文\n\n```js\nvar cas = document.querySelector(\"#c\");\n//获取绘图上下文\ncar ctx = cas.getContext(\"2d\");\n```\n\n## 画直线\n\n```js\n//设置直线的起点\nctx.moveTo(x,y);\n//画路径到直线的终点\nctx.lineTo(x,y);\n```\n\n## 开启新路径\n\n```js\nctx.befinPath();\n```\n\n## 画曲线\n\n```js\n//使用for循环,用函数来帮一个y确定一个x\n//然后讲x,y的每一个点用lingTo连起来就变成了一条曲线\n```\n\n## 画矩形\n\n```js\n//1. 手动,纯人工\n//2. ctx.rect(x,y,w,h);\n//3. ctx.strokeRect(x,y,w,h);\n//4. ctx.fillRect(x,y,w,h);\n```\n\n## 画弧\n\n```js\nctx.arc(x,y,r,startAngle.endAngle[,Boolean optional anticlockwise])\n```\n\n## 扇形\n\n```js\n//先moveTo到原心\nmoveTo(x,y);\nctx.arc(x,y,r,startAngle.endAngle[,Boolean optional anticlockwise])\nctx.closePath();\nctx.fill();\n```\n\n## 饼图\n\n`3` 等分的饼\n1. 开始的角度一般是 `-90`\n2. 每画一个扇形,就让角度 `+120`\n3. 再从加了 `120` 的角度画下一个扇形\n\n## 动画饼图\n\n定时器\n每一段时间画一个小扇形,就和画饼一样\n\n## 文字\n\n```js\nfillText(str, x, y)\nstrokText(str, x, y)\n```\n\n### 对其方式\n\n#### 水平\n\n* left\n* center\n* right\n* start\n* end\n\n#### 垂直\n\n* top\n* middle\n* bottom\n* hanging\n* alphabetic\n* ideographic\n\n## 完整饼图\n\n1. 先算所有数据的总和\n2. 算每个数据的比例,用比例算出角度\n3. 更具每个角度去画扇形\n4. 在去画扇形的中线\n5. 画文字下面的线\n6. 写文字\n\n## 图片\n\n```js\n//3参\nctx.drawImage(img, x, y)\n//直接画不管宽高\n//5参\nctx.drawImage(img, x, y, w, h)\n//要确定宽高\n//9参\nctx.drawImage(img, x, y, w, h, x1, y1, w1, h1)\n\n//拿出图片中 x, y, w, h 这个矩形所在的位置的图像\n//放到canvas中x1, y1, w1, h1这个矩形所在的位置\n```\n\n## 帧动画\n\n\n## 变换\n\n* 平移变换   把画布的原点移动到指定的位置\n    `ctx.translate(x, y)`\n* 缩放变换   对画布进行缩放\n\n```js\n    ctx.scale(x, y)  //x表示的是对画布x轴的缩放，如果大于1 是放大 如果小于1 是缩小\n    ctx.scale(x, y)  //y表示的是对画布y轴的缩放，如果大于1 是放大 如果小于1 是缩小\n```\n\n* 旋转变换\n    `ctx.rotate(弧度)  //将画布，围绕原点旋转指定的弧度`","slug":"canvas-summary","published":1,"updated":"2016-11-24T01:35:09.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvo7001ouwg78opmr30n","content":"<p>Canvas笔记总结！！<br>接前部分~</p>\n<a id=\"more\"></a>\n<h2 id=\"canvas是什么\"><a href=\"#canvas是什么\" class=\"headerlink\" title=\"canvas是什么?\"></a>canvas是什么?</h2><p>是一个 <code>HTML5</code> 标签,该标签用来绘图</p>\n<h2 id=\"canvas怎么用\"><a href=\"#canvas怎么用\" class=\"headerlink\" title=\"canvas怎么用\"></a>canvas怎么用</h2><p><code>canvas</code> 是一个画布,不能自己画图,画图需要绘图上下文</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#c\"</span>);</div><div class=\"line\"><span class=\"comment\">//获取绘图上下文</span></div><div class=\"line\">car ctx = cas.getContext(<span class=\"string\">\"2d\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"画直线\"><a href=\"#画直线\" class=\"headerlink\" title=\"画直线\"></a>画直线</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置直线的起点</span></div><div class=\"line\">ctx.moveTo(x,y);</div><div class=\"line\"><span class=\"comment\">//画路径到直线的终点</span></div><div class=\"line\">ctx.lineTo(x,y);</div></pre></td></tr></table></figure>\n<h2 id=\"开启新路径\"><a href=\"#开启新路径\" class=\"headerlink\" title=\"开启新路径\"></a>开启新路径</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.befinPath();</div></pre></td></tr></table></figure>\n<h2 id=\"画曲线\"><a href=\"#画曲线\" class=\"headerlink\" title=\"画曲线\"></a>画曲线</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用for循环,用函数来帮一个y确定一个x</span></div><div class=\"line\"><span class=\"comment\">//然后讲x,y的每一个点用lingTo连起来就变成了一条曲线</span></div></pre></td></tr></table></figure>\n<h2 id=\"画矩形\"><a href=\"#画矩形\" class=\"headerlink\" title=\"画矩形\"></a>画矩形</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1. 手动,纯人工</span></div><div class=\"line\"><span class=\"comment\">//2. ctx.rect(x,y,w,h);</span></div><div class=\"line\"><span class=\"comment\">//3. ctx.strokeRect(x,y,w,h);</span></div><div class=\"line\"><span class=\"comment\">//4. ctx.fillRect(x,y,w,h);</span></div></pre></td></tr></table></figure>\n<h2 id=\"画弧\"><a href=\"#画弧\" class=\"headerlink\" title=\"画弧\"></a>画弧</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.arc(x,y,r,startAngle.endAngle[,<span class=\"built_in\">Boolean</span> optional anticlockwise])</div></pre></td></tr></table></figure>\n<h2 id=\"扇形\"><a href=\"#扇形\" class=\"headerlink\" title=\"扇形\"></a>扇形</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//先moveTo到原心</span></div><div class=\"line\">moveTo(x,y);</div><div class=\"line\">ctx.arc(x,y,r,startAngle.endAngle[,<span class=\"built_in\">Boolean</span> optional anticlockwise])</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n<h2 id=\"饼图\"><a href=\"#饼图\" class=\"headerlink\" title=\"饼图\"></a>饼图</h2><p><code>3</code> 等分的饼</p>\n<ol>\n<li>开始的角度一般是 <code>-90</code></li>\n<li>每画一个扇形,就让角度 <code>+120</code></li>\n<li>再从加了 <code>120</code> 的角度画下一个扇形</li>\n</ol>\n<h2 id=\"动画饼图\"><a href=\"#动画饼图\" class=\"headerlink\" title=\"动画饼图\"></a>动画饼图</h2><p>定时器<br>每一段时间画一个小扇形,就和画饼一样</p>\n<h2 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillText(str, x, y)</div><div class=\"line\">strokText(str, x, y)</div></pre></td></tr></table></figure>\n<h3 id=\"对其方式\"><a href=\"#对其方式\" class=\"headerlink\" title=\"对其方式\"></a>对其方式</h3><h4 id=\"水平\"><a href=\"#水平\" class=\"headerlink\" title=\"水平\"></a>水平</h4><ul>\n<li>left</li>\n<li>center</li>\n<li>right</li>\n<li>start</li>\n<li>end</li>\n</ul>\n<h4 id=\"垂直\"><a href=\"#垂直\" class=\"headerlink\" title=\"垂直\"></a>垂直</h4><ul>\n<li>top</li>\n<li>middle</li>\n<li>bottom</li>\n<li>hanging</li>\n<li>alphabetic</li>\n<li>ideographic</li>\n</ul>\n<h2 id=\"完整饼图\"><a href=\"#完整饼图\" class=\"headerlink\" title=\"完整饼图\"></a>完整饼图</h2><ol>\n<li>先算所有数据的总和</li>\n<li>算每个数据的比例,用比例算出角度</li>\n<li>更具每个角度去画扇形</li>\n<li>在去画扇形的中线</li>\n<li>画文字下面的线</li>\n<li>写文字</li>\n</ol>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//3参</span></div><div class=\"line\">ctx.drawImage(img, x, y)</div><div class=\"line\"><span class=\"comment\">//直接画不管宽高</span></div><div class=\"line\"><span class=\"comment\">//5参</span></div><div class=\"line\">ctx.drawImage(img, x, y, w, h)</div><div class=\"line\"><span class=\"comment\">//要确定宽高</span></div><div class=\"line\"><span class=\"comment\">//9参</span></div><div class=\"line\">ctx.drawImage(img, x, y, w, h, x1, y1, w1, h1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//拿出图片中 x, y, w, h 这个矩形所在的位置的图像</span></div><div class=\"line\"><span class=\"comment\">//放到canvas中x1, y1, w1, h1这个矩形所在的位置</span></div></pre></td></tr></table></figure>\n<h2 id=\"帧动画\"><a href=\"#帧动画\" class=\"headerlink\" title=\"帧动画\"></a>帧动画</h2><h2 id=\"变换\"><a href=\"#变换\" class=\"headerlink\" title=\"变换\"></a>变换</h2><ul>\n<li>平移变换   把画布的原点移动到指定的位置<br>  <code>ctx.translate(x, y)</code></li>\n<li>缩放变换   对画布进行缩放</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.scale(x, y)  <span class=\"comment\">//x表示的是对画布x轴的缩放，如果大于1 是放大 如果小于1 是缩小</span></div><div class=\"line\">ctx.scale(x, y)  <span class=\"comment\">//y表示的是对画布y轴的缩放，如果大于1 是放大 如果小于1 是缩小</span></div></pre></td></tr></table></figure>\n<ul>\n<li>旋转变换<br>  <code>ctx.rotate(弧度)  //将画布，围绕原点旋转指定的弧度</code></li>\n</ul>\n","excerpt":"<p>Canvas笔记总结！！<br>接前部分~</p>","more":"<h2 id=\"canvas是什么\"><a href=\"#canvas是什么\" class=\"headerlink\" title=\"canvas是什么?\"></a>canvas是什么?</h2><p>是一个 <code>HTML5</code> 标签,该标签用来绘图</p>\n<h2 id=\"canvas怎么用\"><a href=\"#canvas怎么用\" class=\"headerlink\" title=\"canvas怎么用\"></a>canvas怎么用</h2><p><code>canvas</code> 是一个画布,不能自己画图,画图需要绘图上下文</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#c\"</span>);</div><div class=\"line\"><span class=\"comment\">//获取绘图上下文</span></div><div class=\"line\">car ctx = cas.getContext(<span class=\"string\">\"2d\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"画直线\"><a href=\"#画直线\" class=\"headerlink\" title=\"画直线\"></a>画直线</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置直线的起点</span></div><div class=\"line\">ctx.moveTo(x,y);</div><div class=\"line\"><span class=\"comment\">//画路径到直线的终点</span></div><div class=\"line\">ctx.lineTo(x,y);</div></pre></td></tr></table></figure>\n<h2 id=\"开启新路径\"><a href=\"#开启新路径\" class=\"headerlink\" title=\"开启新路径\"></a>开启新路径</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.befinPath();</div></pre></td></tr></table></figure>\n<h2 id=\"画曲线\"><a href=\"#画曲线\" class=\"headerlink\" title=\"画曲线\"></a>画曲线</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用for循环,用函数来帮一个y确定一个x</span></div><div class=\"line\"><span class=\"comment\">//然后讲x,y的每一个点用lingTo连起来就变成了一条曲线</span></div></pre></td></tr></table></figure>\n<h2 id=\"画矩形\"><a href=\"#画矩形\" class=\"headerlink\" title=\"画矩形\"></a>画矩形</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1. 手动,纯人工</span></div><div class=\"line\"><span class=\"comment\">//2. ctx.rect(x,y,w,h);</span></div><div class=\"line\"><span class=\"comment\">//3. ctx.strokeRect(x,y,w,h);</span></div><div class=\"line\"><span class=\"comment\">//4. ctx.fillRect(x,y,w,h);</span></div></pre></td></tr></table></figure>\n<h2 id=\"画弧\"><a href=\"#画弧\" class=\"headerlink\" title=\"画弧\"></a>画弧</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.arc(x,y,r,startAngle.endAngle[,<span class=\"built_in\">Boolean</span> optional anticlockwise])</div></pre></td></tr></table></figure>\n<h2 id=\"扇形\"><a href=\"#扇形\" class=\"headerlink\" title=\"扇形\"></a>扇形</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//先moveTo到原心</span></div><div class=\"line\">moveTo(x,y);</div><div class=\"line\">ctx.arc(x,y,r,startAngle.endAngle[,<span class=\"built_in\">Boolean</span> optional anticlockwise])</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n<h2 id=\"饼图\"><a href=\"#饼图\" class=\"headerlink\" title=\"饼图\"></a>饼图</h2><p><code>3</code> 等分的饼</p>\n<ol>\n<li>开始的角度一般是 <code>-90</code></li>\n<li>每画一个扇形,就让角度 <code>+120</code></li>\n<li>再从加了 <code>120</code> 的角度画下一个扇形</li>\n</ol>\n<h2 id=\"动画饼图\"><a href=\"#动画饼图\" class=\"headerlink\" title=\"动画饼图\"></a>动画饼图</h2><p>定时器<br>每一段时间画一个小扇形,就和画饼一样</p>\n<h2 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillText(str, x, y)</div><div class=\"line\">strokText(str, x, y)</div></pre></td></tr></table></figure>\n<h3 id=\"对其方式\"><a href=\"#对其方式\" class=\"headerlink\" title=\"对其方式\"></a>对其方式</h3><h4 id=\"水平\"><a href=\"#水平\" class=\"headerlink\" title=\"水平\"></a>水平</h4><ul>\n<li>left</li>\n<li>center</li>\n<li>right</li>\n<li>start</li>\n<li>end</li>\n</ul>\n<h4 id=\"垂直\"><a href=\"#垂直\" class=\"headerlink\" title=\"垂直\"></a>垂直</h4><ul>\n<li>top</li>\n<li>middle</li>\n<li>bottom</li>\n<li>hanging</li>\n<li>alphabetic</li>\n<li>ideographic</li>\n</ul>\n<h2 id=\"完整饼图\"><a href=\"#完整饼图\" class=\"headerlink\" title=\"完整饼图\"></a>完整饼图</h2><ol>\n<li>先算所有数据的总和</li>\n<li>算每个数据的比例,用比例算出角度</li>\n<li>更具每个角度去画扇形</li>\n<li>在去画扇形的中线</li>\n<li>画文字下面的线</li>\n<li>写文字</li>\n</ol>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//3参</span></div><div class=\"line\">ctx.drawImage(img, x, y)</div><div class=\"line\"><span class=\"comment\">//直接画不管宽高</span></div><div class=\"line\"><span class=\"comment\">//5参</span></div><div class=\"line\">ctx.drawImage(img, x, y, w, h)</div><div class=\"line\"><span class=\"comment\">//要确定宽高</span></div><div class=\"line\"><span class=\"comment\">//9参</span></div><div class=\"line\">ctx.drawImage(img, x, y, w, h, x1, y1, w1, h1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//拿出图片中 x, y, w, h 这个矩形所在的位置的图像</span></div><div class=\"line\"><span class=\"comment\">//放到canvas中x1, y1, w1, h1这个矩形所在的位置</span></div></pre></td></tr></table></figure>\n<h2 id=\"帧动画\"><a href=\"#帧动画\" class=\"headerlink\" title=\"帧动画\"></a>帧动画</h2><h2 id=\"变换\"><a href=\"#变换\" class=\"headerlink\" title=\"变换\"></a>变换</h2><ul>\n<li>平移变换   把画布的原点移动到指定的位置<br>  <code>ctx.translate(x, y)</code></li>\n<li>缩放变换   对画布进行缩放</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.scale(x, y)  <span class=\"comment\">//x表示的是对画布x轴的缩放，如果大于1 是放大 如果小于1 是缩小</span></div><div class=\"line\">ctx.scale(x, y)  <span class=\"comment\">//y表示的是对画布y轴的缩放，如果大于1 是放大 如果小于1 是缩小</span></div></pre></td></tr></table></figure>\n<ul>\n<li>旋转变换<br>  <code>ctx.rotate(弧度)  //将画布，围绕原点旋转指定的弧度</code></li>\n</ul>"},{"title":"Ubuntu 使用 Cron 实现计划任务","date":"2017-04-21T16:21:21.000Z","_content":"\nWindows 自带定时执行任务的工具叫做“计划任务”，Linux 下我们使用 Cron 实现这一功能。\n\n<!--more-->\n\n\n## 安装 cron 服务\n\n- 通常 ubuntu 下自带 cron，如果没有也可以通过以下命令进行安装：`apt-get install cron`\n- 若已经安装，输入以下命令判断 cron 服务是否启动：`pgrep cron`\n- 如果有 pid （一串数字）输出则说明 cron 服务已经启动，没有任何输出说明需要手动启动 cron 服务。\n\n## 启动 cron 服务\n\n- 启动服务 `service cron start`\n\n## 编辑计划文件\n\n`crontab -e`\n\n来打开你的用户所属的crontab文件。第一次用这个命令，会让你选择文本编辑器，我选的是vim。选定的编辑器也可以使用\n\n你也可以每次自己更改 `select-editor`\n\n## 重启 cron 服务\n\n每次保存了crontab之后，我们还需要重启cron来应用这个计划任务。使用命令：`sudo service cron restart`\n\n## 管理任务计划文件\n\ncron 的所有任务计划都记录在 crontab 任务计划文件中，通过 crontab 命令对该任务文件进行管理。\n\n```sh\n$ crontab -u root -e     #编辑用户 root 的计划任务文件\n\n$ crontab -e            #编辑当前用户的计划任务文件\n\n$ crontab -u root -l     #显示用户 root 的计划任务文件\n\n$ crontab -l            #显示当前用户的计划任务文件\n\n$ crontab -r            #删除当前用户的计划任务文件\n```\n\n## cron 语法格式\n\n```sh\nm h dom mon dow   command\n0-59 0-23 1-31 1-12 0-7  command\n```\n\n- m: 表示分钟\n- h: 表示小时\n- dom: 表示日期\n- mon: 表示月份\n- dow: 表示星期\n- command: 预执行的命令\n\n另外需要使用一些特殊符号实现灵活的配置：\n\n- `* 代表所有值`\n- `/ 代表“每”`\n- `- 代表范围`\n- `, 分割数字`\n\n## 任务示例\n\n```sh\n## 指定具体执行时间\n2   *  *  *  * ls    #每个小时的第2分钟执行一次 ls 命令\n30  7  *  *  * ls    #每天7：30执行一次 ls 命令\n30 20  *  *  2 ls    #每周二，20：30执行一次 ls 命令（0和7表示星期天）\n\n## 指定间隔时间\n*/2 *  *  *  * ls    #每隔2分钟执行一次 ls 命令\n\n## 指定时间段\n30  7 3-6 *  * ls    #每个月的3，4，5，6号的7：30分各执行一次 ls 命令\n\n## 指定多个时间\n30  7 3,6 *  * ls    #每月的3号和6号的7：30分各执行一次 ls 命令\n```\n\n另外，使用 run-parts 可以运行指定目录下所有的脚本（注意脚本必须加上 “#!/bin/bash\"，否则 run-parts 会调用失败）\n\n```sh\n30 7 * * * run-parts /home   #每天7：30运行 /home 目录下的所有脚本\n```\n","source":"_posts/Cron.md","raw":"---\ntitle: Ubuntu 使用 Cron 实现计划任务\ndate: 2017-04-22 00:21:21\ntags:\n    - Ubuntu\n    - Cron\ncategories: Cron\n---\n\nWindows 自带定时执行任务的工具叫做“计划任务”，Linux 下我们使用 Cron 实现这一功能。\n\n<!--more-->\n\n\n## 安装 cron 服务\n\n- 通常 ubuntu 下自带 cron，如果没有也可以通过以下命令进行安装：`apt-get install cron`\n- 若已经安装，输入以下命令判断 cron 服务是否启动：`pgrep cron`\n- 如果有 pid （一串数字）输出则说明 cron 服务已经启动，没有任何输出说明需要手动启动 cron 服务。\n\n## 启动 cron 服务\n\n- 启动服务 `service cron start`\n\n## 编辑计划文件\n\n`crontab -e`\n\n来打开你的用户所属的crontab文件。第一次用这个命令，会让你选择文本编辑器，我选的是vim。选定的编辑器也可以使用\n\n你也可以每次自己更改 `select-editor`\n\n## 重启 cron 服务\n\n每次保存了crontab之后，我们还需要重启cron来应用这个计划任务。使用命令：`sudo service cron restart`\n\n## 管理任务计划文件\n\ncron 的所有任务计划都记录在 crontab 任务计划文件中，通过 crontab 命令对该任务文件进行管理。\n\n```sh\n$ crontab -u root -e     #编辑用户 root 的计划任务文件\n\n$ crontab -e            #编辑当前用户的计划任务文件\n\n$ crontab -u root -l     #显示用户 root 的计划任务文件\n\n$ crontab -l            #显示当前用户的计划任务文件\n\n$ crontab -r            #删除当前用户的计划任务文件\n```\n\n## cron 语法格式\n\n```sh\nm h dom mon dow   command\n0-59 0-23 1-31 1-12 0-7  command\n```\n\n- m: 表示分钟\n- h: 表示小时\n- dom: 表示日期\n- mon: 表示月份\n- dow: 表示星期\n- command: 预执行的命令\n\n另外需要使用一些特殊符号实现灵活的配置：\n\n- `* 代表所有值`\n- `/ 代表“每”`\n- `- 代表范围`\n- `, 分割数字`\n\n## 任务示例\n\n```sh\n## 指定具体执行时间\n2   *  *  *  * ls    #每个小时的第2分钟执行一次 ls 命令\n30  7  *  *  * ls    #每天7：30执行一次 ls 命令\n30 20  *  *  2 ls    #每周二，20：30执行一次 ls 命令（0和7表示星期天）\n\n## 指定间隔时间\n*/2 *  *  *  * ls    #每隔2分钟执行一次 ls 命令\n\n## 指定时间段\n30  7 3-6 *  * ls    #每个月的3，4，5，6号的7：30分各执行一次 ls 命令\n\n## 指定多个时间\n30  7 3,6 *  * ls    #每月的3号和6号的7：30分各执行一次 ls 命令\n```\n\n另外，使用 run-parts 可以运行指定目录下所有的脚本（注意脚本必须加上 “#!/bin/bash\"，否则 run-parts 会调用失败）\n\n```sh\n30 7 * * * run-parts /home   #每天7：30运行 /home 目录下的所有脚本\n```\n","slug":"Cron","published":1,"updated":"2017-04-21T16:34:17.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvoc001ruwg7wlvpo3tz","content":"<p>Windows 自带定时执行任务的工具叫做“计划任务”，Linux 下我们使用 Cron 实现这一功能。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装-cron-服务\"><a href=\"#安装-cron-服务\" class=\"headerlink\" title=\"安装 cron 服务\"></a>安装 cron 服务</h2><ul>\n<li>通常 ubuntu 下自带 cron，如果没有也可以通过以下命令进行安装：<code>apt-get install cron</code></li>\n<li>若已经安装，输入以下命令判断 cron 服务是否启动：<code>pgrep cron</code></li>\n<li>如果有 pid （一串数字）输出则说明 cron 服务已经启动，没有任何输出说明需要手动启动 cron 服务。</li>\n</ul>\n<h2 id=\"启动-cron-服务\"><a href=\"#启动-cron-服务\" class=\"headerlink\" title=\"启动 cron 服务\"></a>启动 cron 服务</h2><ul>\n<li>启动服务 <code>service cron start</code></li>\n</ul>\n<h2 id=\"编辑计划文件\"><a href=\"#编辑计划文件\" class=\"headerlink\" title=\"编辑计划文件\"></a>编辑计划文件</h2><p><code>crontab -e</code></p>\n<p>来打开你的用户所属的crontab文件。第一次用这个命令，会让你选择文本编辑器，我选的是vim。选定的编辑器也可以使用</p>\n<p>你也可以每次自己更改 <code>select-editor</code></p>\n<h2 id=\"重启-cron-服务\"><a href=\"#重启-cron-服务\" class=\"headerlink\" title=\"重启 cron 服务\"></a>重启 cron 服务</h2><p>每次保存了crontab之后，我们还需要重启cron来应用这个计划任务。使用命令：<code>sudo service cron restart</code></p>\n<h2 id=\"管理任务计划文件\"><a href=\"#管理任务计划文件\" class=\"headerlink\" title=\"管理任务计划文件\"></a>管理任务计划文件</h2><p>cron 的所有任务计划都记录在 crontab 任务计划文件中，通过 crontab 命令对该任务文件进行管理。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ crontab -u root <span class=\"_\">-e</span>     <span class=\"comment\">#编辑用户 root 的计划任务文件</span></div><div class=\"line\"></div><div class=\"line\">$ crontab <span class=\"_\">-e</span>            <span class=\"comment\">#编辑当前用户的计划任务文件</span></div><div class=\"line\"></div><div class=\"line\">$ crontab -u root <span class=\"_\">-l</span>     <span class=\"comment\">#显示用户 root 的计划任务文件</span></div><div class=\"line\"></div><div class=\"line\">$ crontab <span class=\"_\">-l</span>            <span class=\"comment\">#显示当前用户的计划任务文件</span></div><div class=\"line\"></div><div class=\"line\">$ crontab -r            <span class=\"comment\">#删除当前用户的计划任务文件</span></div></pre></td></tr></table></figure>\n<h2 id=\"cron-语法格式\"><a href=\"#cron-语法格式\" class=\"headerlink\" title=\"cron 语法格式\"></a>cron 语法格式</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">m h dom mon dow   <span class=\"built_in\">command</span></div><div class=\"line\">0-59 0-23 1-31 1-12 0-7  <span class=\"built_in\">command</span></div></pre></td></tr></table></figure>\n<ul>\n<li>m: 表示分钟</li>\n<li>h: 表示小时</li>\n<li>dom: 表示日期</li>\n<li>mon: 表示月份</li>\n<li>dow: 表示星期</li>\n<li>command: 预执行的命令</li>\n</ul>\n<p>另外需要使用一些特殊符号实现灵活的配置：</p>\n<ul>\n<li><code>* 代表所有值</code></li>\n<li><code>/ 代表“每”</code></li>\n<li><code>- 代表范围</code></li>\n<li><code>, 分割数字</code></li>\n</ul>\n<h2 id=\"任务示例\"><a href=\"#任务示例\" class=\"headerlink\" title=\"任务示例\"></a>任务示例</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## 指定具体执行时间</span></div><div class=\"line\">2   *  *  *  * ls    <span class=\"comment\">#每个小时的第2分钟执行一次 ls 命令</span></div><div class=\"line\">30  7  *  *  * ls    <span class=\"comment\">#每天7：30执行一次 ls 命令</span></div><div class=\"line\">30 20  *  *  2 ls    <span class=\"comment\">#每周二，20：30执行一次 ls 命令（0和7表示星期天）</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 指定间隔时间</span></div><div class=\"line\">*/2 *  *  *  * ls    <span class=\"comment\">#每隔2分钟执行一次 ls 命令</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 指定时间段</span></div><div class=\"line\">30  7 3-6 *  * ls    <span class=\"comment\">#每个月的3，4，5，6号的7：30分各执行一次 ls 命令</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 指定多个时间</span></div><div class=\"line\">30  7 3,6 *  * ls    <span class=\"comment\">#每月的3号和6号的7：30分各执行一次 ls 命令</span></div></pre></td></tr></table></figure>\n<p>另外，使用 run-parts 可以运行指定目录下所有的脚本（注意脚本必须加上 “#!/bin/bash”，否则 run-parts 会调用失败）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">30 7 * * * run-parts /home   <span class=\"comment\">#每天7：30运行 /home 目录下的所有脚本</span></div></pre></td></tr></table></figure>\n","excerpt":"<p>Windows 自带定时执行任务的工具叫做“计划任务”，Linux 下我们使用 Cron 实现这一功能。</p>","more":"<h2 id=\"安装-cron-服务\"><a href=\"#安装-cron-服务\" class=\"headerlink\" title=\"安装 cron 服务\"></a>安装 cron 服务</h2><ul>\n<li>通常 ubuntu 下自带 cron，如果没有也可以通过以下命令进行安装：<code>apt-get install cron</code></li>\n<li>若已经安装，输入以下命令判断 cron 服务是否启动：<code>pgrep cron</code></li>\n<li>如果有 pid （一串数字）输出则说明 cron 服务已经启动，没有任何输出说明需要手动启动 cron 服务。</li>\n</ul>\n<h2 id=\"启动-cron-服务\"><a href=\"#启动-cron-服务\" class=\"headerlink\" title=\"启动 cron 服务\"></a>启动 cron 服务</h2><ul>\n<li>启动服务 <code>service cron start</code></li>\n</ul>\n<h2 id=\"编辑计划文件\"><a href=\"#编辑计划文件\" class=\"headerlink\" title=\"编辑计划文件\"></a>编辑计划文件</h2><p><code>crontab -e</code></p>\n<p>来打开你的用户所属的crontab文件。第一次用这个命令，会让你选择文本编辑器，我选的是vim。选定的编辑器也可以使用</p>\n<p>你也可以每次自己更改 <code>select-editor</code></p>\n<h2 id=\"重启-cron-服务\"><a href=\"#重启-cron-服务\" class=\"headerlink\" title=\"重启 cron 服务\"></a>重启 cron 服务</h2><p>每次保存了crontab之后，我们还需要重启cron来应用这个计划任务。使用命令：<code>sudo service cron restart</code></p>\n<h2 id=\"管理任务计划文件\"><a href=\"#管理任务计划文件\" class=\"headerlink\" title=\"管理任务计划文件\"></a>管理任务计划文件</h2><p>cron 的所有任务计划都记录在 crontab 任务计划文件中，通过 crontab 命令对该任务文件进行管理。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ crontab -u root <span class=\"_\">-e</span>     <span class=\"comment\">#编辑用户 root 的计划任务文件</span></div><div class=\"line\"></div><div class=\"line\">$ crontab <span class=\"_\">-e</span>            <span class=\"comment\">#编辑当前用户的计划任务文件</span></div><div class=\"line\"></div><div class=\"line\">$ crontab -u root <span class=\"_\">-l</span>     <span class=\"comment\">#显示用户 root 的计划任务文件</span></div><div class=\"line\"></div><div class=\"line\">$ crontab <span class=\"_\">-l</span>            <span class=\"comment\">#显示当前用户的计划任务文件</span></div><div class=\"line\"></div><div class=\"line\">$ crontab -r            <span class=\"comment\">#删除当前用户的计划任务文件</span></div></pre></td></tr></table></figure>\n<h2 id=\"cron-语法格式\"><a href=\"#cron-语法格式\" class=\"headerlink\" title=\"cron 语法格式\"></a>cron 语法格式</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">m h dom mon dow   <span class=\"built_in\">command</span></div><div class=\"line\">0-59 0-23 1-31 1-12 0-7  <span class=\"built_in\">command</span></div></pre></td></tr></table></figure>\n<ul>\n<li>m: 表示分钟</li>\n<li>h: 表示小时</li>\n<li>dom: 表示日期</li>\n<li>mon: 表示月份</li>\n<li>dow: 表示星期</li>\n<li>command: 预执行的命令</li>\n</ul>\n<p>另外需要使用一些特殊符号实现灵活的配置：</p>\n<ul>\n<li><code>* 代表所有值</code></li>\n<li><code>/ 代表“每”</code></li>\n<li><code>- 代表范围</code></li>\n<li><code>, 分割数字</code></li>\n</ul>\n<h2 id=\"任务示例\"><a href=\"#任务示例\" class=\"headerlink\" title=\"任务示例\"></a>任务示例</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## 指定具体执行时间</span></div><div class=\"line\">2   *  *  *  * ls    <span class=\"comment\">#每个小时的第2分钟执行一次 ls 命令</span></div><div class=\"line\">30  7  *  *  * ls    <span class=\"comment\">#每天7：30执行一次 ls 命令</span></div><div class=\"line\">30 20  *  *  2 ls    <span class=\"comment\">#每周二，20：30执行一次 ls 命令（0和7表示星期天）</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 指定间隔时间</span></div><div class=\"line\">*/2 *  *  *  * ls    <span class=\"comment\">#每隔2分钟执行一次 ls 命令</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 指定时间段</span></div><div class=\"line\">30  7 3-6 *  * ls    <span class=\"comment\">#每个月的3，4，5，6号的7：30分各执行一次 ls 命令</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 指定多个时间</span></div><div class=\"line\">30  7 3,6 *  * ls    <span class=\"comment\">#每月的3号和6号的7：30分各执行一次 ls 命令</span></div></pre></td></tr></table></figure>\n<p>另外，使用 run-parts 可以运行指定目录下所有的脚本（注意脚本必须加上 “#!/bin/bash”，否则 run-parts 会调用失败）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">30 7 * * * run-parts /home   <span class=\"comment\">#每天7：30运行 /home 目录下的所有脚本</span></div></pre></td></tr></table></figure>"},{"title":"JQuery分析及实现part2之css部分功能及实现","date":"2016-11-19T11:02:01.000Z","_content":"\nJQuery模块分析及其实现第二部分css部分功能及实现,接第一部分!\n\n<!-- more -->\n\n## hasClass方法\n\n1. 功能:如果结果集里只要有一个 `dom` 元素,具有指定的样式类,就返回 `true` \n2. 实现思路\n\t* 定义结果变量 `ret` ,默认值为 `false`\n\t* 遍历结果集的每一个 `dom` 元素,如果当前 `dom` 元素具有指定的样式类,将 `ret=true` 结束循环\n\t* 返回 `ret` .\n\n\t* 如何判断 `dom` 元素具有指定的样式类?\n\t在 `dom` 元素所有的样式类的 `首位 + 空格` ;在用户指定的样式类 `首位 + 空格` 调用indexOf方法,如果返回值 = -1,表示没有;否则就具有指定样式类\n\n```js\nhasClass: function(className) {\n\t// 默认结果false\n\tvar ret = false;\n\t// 遍历this上的每一个dom元素\t\t\t\t\t\n\t// for(var i = 0, l = this.length;i < l;i++){\n\t// \t// 如果当前dom元素具有指定的样式类\n\t// \t// 返回值为true，结束循环\n\t// if((' ' + this[i].className + ' ')\n\t// \t.indexOf(' ' + className + ' ') !== -1) {\n\t// \tret = true;\n\t// \tbreak;\n\t// }\n\t// }\n\tthis.each(function(v) {\n\t\tif ((' ' + v.className + ' ')\n\t\t\t.indexOf(' ' + className + ' ') !== -1) {\n\t\t\tret = true;\n\t\t\treturn false;\n\t\t}\n\t});\n\n\treturn ret;\n},\n```\n\n## $.each方法\n\n1. 功能:实现遍历数组或者伪数组,通过第二个参数(回调函数)来处理遍历到的每一个元素\n\t在回调函数中, `this` 是指向当前遍历的元素.\n2. 语法: `$.each([数组/伪数组], callback)` ;\n3. 实现思路\n\t* 声明 `each` 函数,定义两个形参,第一个 遍历的(伪)数组;第二: 回调函数\n\t* 使用 `for` 循环,遍历(伪)数组,再循环体内部执行回调函数. 在执行时,给回调函数传实参\n\t* 实现回调函数内部 `this` 指向,当前遍历到的元素\n\t* 通过回调函数的返回值,判断是否结束循环. 规定:当返回值为 `false` ,结束循环\n```js\neach: function(obj, callback) {\n\tvar i = 0,\n\t\tl = obj.length;\n\t// 遍历数组元素\n\tfor (; i < l; i++) {\n\t\t// 执行用户指定回调函数\n\t\t// 将当前遍历到的元素以及索引传入回调函数\n\t\tif (callback.call(obj[i], obj[i], i) === false) break;\n\t}\n}\n```\n\n## itcast中链式编程的实现\n\n1. 返回当前方法的调用者: `return this;`\n\n## get方法\n\n1. 功能:根据参数 `index` ,获取相应 `dom` 元素\n2. 实现思路\n\t* 将字符串类型转换成数字\n\t*  `index < 0 ==> index +length`\n\t*  `return this[index]`\n\n```js\nget: function(index) {\n\tindex = index - 0;\n\tindex = index < 0 ? index + this.length : index;\n\treturn this[index];\n},\n```\n\n## eq方法\n\n1. 功能:根据参数 `index` ,获取相应 `dom` 元素,转换成 `itcast` 对象,并且返回\n\n```js\neq: function(index) {\n\treturn itcast(this.get(index));\n},\n```\n\n## first方法\n\n```js\nfirst: function() {\n\treturn this.eq(0);\n},\n```\n\n## last方法\n\n```js\nlast: function() {\n\treturn this.eq(-1);\n}\n```\n\n## css方法\n\n1. 功能:\n\t* 获取:如果只传一个参数并且类型不为对象,获取相应的样式属性值\n\t* 设置:a,如果只传一个参数并且类型为对象,设置多个样式值; b,传入两个参数,设置单个样式.\n2. 实现思路\n\t* 给 `itcast` 原型添加 `css` 方法,定义两个参数.\n\t* 如果只传入一个参数\n\t\t* 类型为对象的话,同时设置多个样式属性\n\t\t* 类型不为对象,获取指定的样式值\n\t* 如果只传入两个参数,设置单个样式值\n```js\ncss: function(name, value) {\n\t// 只传入一个参数\n\tif (value == undefined) {\n\t\t// 如果name类型为对象，同时设置多个样式\n\t\tif (typeof name === 'object') {\n\t\t\t// 遍历this上的每一个dom元素\n\t\t\tthis.each(function(v) {\n\t\t\t\t// 枚举name上的每个属性值\n\t\t\t\tfor (var k in name) {\n\t\t\t\t\t// 给当前遍历到的dom元素设置样式\n\t\t\t\t\tv.style[k] = name[k];\n\t\t\t\t}\n\t\t\t});\n\t\t} else { // 如果name不为对象\n\t\t\t// 默认获取this上的第一个dom元素的指定样式值\n\t\t\t// 如果浏览器支持getComputedStyle，使用该方法获取指定样式值\n\t\t\t// if(window.getComputedStyle){\n\t\t\t// \treturn window.getComputedStyle(this[0])[name];\n\t\t\t// } else { //否则使用currentStyle获取\n\t\t\t// \treturn this[0].currentStyle[name];\n\t\t\t// }\n\t\t\t// 如果this上没有任何dom元素， 就返回null\n\t\t\tif (!this[0]) return null;\n\t\t\treturn window.getComputedStyle ?\n\t\t\t\twindow.getComputedStyle(this[0])[name] :\n\t\t\t\tthis[0].currentStyle[name];\n\n\t\t}\n\t} else { // 如果传入两个参数\n\t\tthis.each(function(v) {\n\t\t\tv.style[name] = value;\n\t\t});\n\t}\n\t// 实现链式编程\n\treturn this;\n},\n```\n\t\n## addClass方法\n\n1. 功能:给结果集中的每一个 `dom` 元素添加指定样式类.\n2. 实现思路\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 首先判断当前遍历到的 `dom` 元素是否含有样式类.\n\n```js\naddClass: function(className) {\n\t// 遍历this上的每一个dom元素，并实现链式编程\n\treturn this.each(function(v) {\n\t\t// 判断当前dom元素v是否具有className\n\t\t// 如果不具有，给其添加指定的样式类\n\t\tif(!itcast(v).hasClass(className)){\n\t\t\tv.className += ' ' + className;\n\t\t}\n\t});\n},\n```\n\n## removeClass方法\n\n1. 功能:删除结果集中的每一个 `dom` 元素的指定样式类.\n2. 实现思路\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* `(' ' + v.className + ' ').replace(' ' + className + ' ',' ');`\n```js\nremoveClass:function(className) {\n\t// 遍历this上的每一个dom元素，并实现链式编程\n\treturn this.each(function(v) {\n\t\t// 删除当前dom元素的样式类className\n\t\tv.className = (' ' + v.className + ' ').\n\t\t\treplace(' ' + className + ' ', ' ');\n\t});\n}\n```\n\n## toggleClass方法\n\n1. 功能: 切换指定的样式类,如果有,就删除,没有就添加     \n2. 实现思路\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 判断当前遍历到的 `dom` 元素是否含有指定的样式类\n\t* 如果有,就删除\n\t* 如果没有,就添加\n```js\ntoggleClass: function(className) {\n\t// 遍历this上的每一个dom元素，并实现链式编程\n\treturn this.each(function(v) {\n\t\t// 将当前遍历到的元素转换成itcast对象\n\t\tvar $v = itcast(v);\n\t\t// 如果具有指定的样式类，就删除该样式类\n\t\tif($v.hasClass(className)){\t\t\t\t\t\n\t\t\t$v.removeClass(className);\n\t\t} else { // 如果没有指定的样式类，就添加该样式类\n\t\t\t$v.addClass(className);\n\t\t}\n\t});\n}\n```","source":"_posts/javascript-jquery-part2.md","raw":"---\ntitle: JQuery分析及实现part2之css部分功能及实现\ndate: 2016-11-19 19:02:01\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第二部分css部分功能及实现,接第一部分!\n\n<!-- more -->\n\n## hasClass方法\n\n1. 功能:如果结果集里只要有一个 `dom` 元素,具有指定的样式类,就返回 `true` \n2. 实现思路\n\t* 定义结果变量 `ret` ,默认值为 `false`\n\t* 遍历结果集的每一个 `dom` 元素,如果当前 `dom` 元素具有指定的样式类,将 `ret=true` 结束循环\n\t* 返回 `ret` .\n\n\t* 如何判断 `dom` 元素具有指定的样式类?\n\t在 `dom` 元素所有的样式类的 `首位 + 空格` ;在用户指定的样式类 `首位 + 空格` 调用indexOf方法,如果返回值 = -1,表示没有;否则就具有指定样式类\n\n```js\nhasClass: function(className) {\n\t// 默认结果false\n\tvar ret = false;\n\t// 遍历this上的每一个dom元素\t\t\t\t\t\n\t// for(var i = 0, l = this.length;i < l;i++){\n\t// \t// 如果当前dom元素具有指定的样式类\n\t// \t// 返回值为true，结束循环\n\t// if((' ' + this[i].className + ' ')\n\t// \t.indexOf(' ' + className + ' ') !== -1) {\n\t// \tret = true;\n\t// \tbreak;\n\t// }\n\t// }\n\tthis.each(function(v) {\n\t\tif ((' ' + v.className + ' ')\n\t\t\t.indexOf(' ' + className + ' ') !== -1) {\n\t\t\tret = true;\n\t\t\treturn false;\n\t\t}\n\t});\n\n\treturn ret;\n},\n```\n\n## $.each方法\n\n1. 功能:实现遍历数组或者伪数组,通过第二个参数(回调函数)来处理遍历到的每一个元素\n\t在回调函数中, `this` 是指向当前遍历的元素.\n2. 语法: `$.each([数组/伪数组], callback)` ;\n3. 实现思路\n\t* 声明 `each` 函数,定义两个形参,第一个 遍历的(伪)数组;第二: 回调函数\n\t* 使用 `for` 循环,遍历(伪)数组,再循环体内部执行回调函数. 在执行时,给回调函数传实参\n\t* 实现回调函数内部 `this` 指向,当前遍历到的元素\n\t* 通过回调函数的返回值,判断是否结束循环. 规定:当返回值为 `false` ,结束循环\n```js\neach: function(obj, callback) {\n\tvar i = 0,\n\t\tl = obj.length;\n\t// 遍历数组元素\n\tfor (; i < l; i++) {\n\t\t// 执行用户指定回调函数\n\t\t// 将当前遍历到的元素以及索引传入回调函数\n\t\tif (callback.call(obj[i], obj[i], i) === false) break;\n\t}\n}\n```\n\n## itcast中链式编程的实现\n\n1. 返回当前方法的调用者: `return this;`\n\n## get方法\n\n1. 功能:根据参数 `index` ,获取相应 `dom` 元素\n2. 实现思路\n\t* 将字符串类型转换成数字\n\t*  `index < 0 ==> index +length`\n\t*  `return this[index]`\n\n```js\nget: function(index) {\n\tindex = index - 0;\n\tindex = index < 0 ? index + this.length : index;\n\treturn this[index];\n},\n```\n\n## eq方法\n\n1. 功能:根据参数 `index` ,获取相应 `dom` 元素,转换成 `itcast` 对象,并且返回\n\n```js\neq: function(index) {\n\treturn itcast(this.get(index));\n},\n```\n\n## first方法\n\n```js\nfirst: function() {\n\treturn this.eq(0);\n},\n```\n\n## last方法\n\n```js\nlast: function() {\n\treturn this.eq(-1);\n}\n```\n\n## css方法\n\n1. 功能:\n\t* 获取:如果只传一个参数并且类型不为对象,获取相应的样式属性值\n\t* 设置:a,如果只传一个参数并且类型为对象,设置多个样式值; b,传入两个参数,设置单个样式.\n2. 实现思路\n\t* 给 `itcast` 原型添加 `css` 方法,定义两个参数.\n\t* 如果只传入一个参数\n\t\t* 类型为对象的话,同时设置多个样式属性\n\t\t* 类型不为对象,获取指定的样式值\n\t* 如果只传入两个参数,设置单个样式值\n```js\ncss: function(name, value) {\n\t// 只传入一个参数\n\tif (value == undefined) {\n\t\t// 如果name类型为对象，同时设置多个样式\n\t\tif (typeof name === 'object') {\n\t\t\t// 遍历this上的每一个dom元素\n\t\t\tthis.each(function(v) {\n\t\t\t\t// 枚举name上的每个属性值\n\t\t\t\tfor (var k in name) {\n\t\t\t\t\t// 给当前遍历到的dom元素设置样式\n\t\t\t\t\tv.style[k] = name[k];\n\t\t\t\t}\n\t\t\t});\n\t\t} else { // 如果name不为对象\n\t\t\t// 默认获取this上的第一个dom元素的指定样式值\n\t\t\t// 如果浏览器支持getComputedStyle，使用该方法获取指定样式值\n\t\t\t// if(window.getComputedStyle){\n\t\t\t// \treturn window.getComputedStyle(this[0])[name];\n\t\t\t// } else { //否则使用currentStyle获取\n\t\t\t// \treturn this[0].currentStyle[name];\n\t\t\t// }\n\t\t\t// 如果this上没有任何dom元素， 就返回null\n\t\t\tif (!this[0]) return null;\n\t\t\treturn window.getComputedStyle ?\n\t\t\t\twindow.getComputedStyle(this[0])[name] :\n\t\t\t\tthis[0].currentStyle[name];\n\n\t\t}\n\t} else { // 如果传入两个参数\n\t\tthis.each(function(v) {\n\t\t\tv.style[name] = value;\n\t\t});\n\t}\n\t// 实现链式编程\n\treturn this;\n},\n```\n\t\n## addClass方法\n\n1. 功能:给结果集中的每一个 `dom` 元素添加指定样式类.\n2. 实现思路\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 首先判断当前遍历到的 `dom` 元素是否含有样式类.\n\n```js\naddClass: function(className) {\n\t// 遍历this上的每一个dom元素，并实现链式编程\n\treturn this.each(function(v) {\n\t\t// 判断当前dom元素v是否具有className\n\t\t// 如果不具有，给其添加指定的样式类\n\t\tif(!itcast(v).hasClass(className)){\n\t\t\tv.className += ' ' + className;\n\t\t}\n\t});\n},\n```\n\n## removeClass方法\n\n1. 功能:删除结果集中的每一个 `dom` 元素的指定样式类.\n2. 实现思路\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* `(' ' + v.className + ' ').replace(' ' + className + ' ',' ');`\n```js\nremoveClass:function(className) {\n\t// 遍历this上的每一个dom元素，并实现链式编程\n\treturn this.each(function(v) {\n\t\t// 删除当前dom元素的样式类className\n\t\tv.className = (' ' + v.className + ' ').\n\t\t\treplace(' ' + className + ' ', ' ');\n\t});\n}\n```\n\n## toggleClass方法\n\n1. 功能: 切换指定的样式类,如果有,就删除,没有就添加     \n2. 实现思路\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 判断当前遍历到的 `dom` 元素是否含有指定的样式类\n\t* 如果有,就删除\n\t* 如果没有,就添加\n```js\ntoggleClass: function(className) {\n\t// 遍历this上的每一个dom元素，并实现链式编程\n\treturn this.each(function(v) {\n\t\t// 将当前遍历到的元素转换成itcast对象\n\t\tvar $v = itcast(v);\n\t\t// 如果具有指定的样式类，就删除该样式类\n\t\tif($v.hasClass(className)){\t\t\t\t\t\n\t\t\t$v.removeClass(className);\n\t\t} else { // 如果没有指定的样式类，就添加该样式类\n\t\t\t$v.addClass(className);\n\t\t}\n\t});\n}\n```","slug":"javascript-jquery-part2","published":1,"updated":"2016-11-24T01:36:18.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvod001uuwg72y58qrwr","content":"<p>JQuery模块分析及其实现第二部分css部分功能及实现,接第一部分!</p>\n<a id=\"more\"></a>\n<h2 id=\"hasClass方法\"><a href=\"#hasClass方法\" class=\"headerlink\" title=\"hasClass方法\"></a>hasClass方法</h2><ol>\n<li>功能:如果结果集里只要有一个 <code>dom</code> 元素,具有指定的样式类,就返回 <code>true</code> </li>\n<li><p>实现思路</p>\n<ul>\n<li>定义结果变量 <code>ret</code> ,默认值为 <code>false</code></li>\n<li>遍历结果集的每一个 <code>dom</code> 元素,如果当前 <code>dom</code> 元素具有指定的样式类,将 <code>ret=true</code> 结束循环</li>\n<li><p>返回 <code>ret</code> .</p>\n</li>\n<li><p>如何判断 <code>dom</code> 元素具有指定的样式类?<br>在 <code>dom</code> 元素所有的样式类的 <code>首位 + 空格</code> ;在用户指定的样式类 <code>首位 + 空格</code> 调用indexOf方法,如果返回值 = -1,表示没有;否则就具有指定样式类</p>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">hasClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 默认结果false</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素\t\t\t\t\t</span></div><div class=\"line\">\t<span class=\"comment\">// for(var i = 0, l = this.length;i &lt; l;i++)&#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \t// 如果当前dom元素具有指定的样式类</span></div><div class=\"line\">\t<span class=\"comment\">// \t// 返回值为true，结束循环</span></div><div class=\"line\">\t<span class=\"comment\">// if((' ' + this[i].className + ' ')</span></div><div class=\"line\">\t<span class=\"comment\">// \t.indexOf(' ' + className + ' ') !== -1) &#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \tret = true;</span></div><div class=\"line\">\t<span class=\"comment\">// \tbreak;</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((<span class=\"string\">' '</span> + v.className + <span class=\"string\">' '</span>)</div><div class=\"line\">\t\t\t.indexOf(<span class=\"string\">' '</span> + className + <span class=\"string\">' '</span>) !== <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\tret = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"each方法\"><a href=\"#each方法\" class=\"headerlink\" title=\"$.each方法\"></a>$.each方法</h2><ol>\n<li>功能:实现遍历数组或者伪数组,通过第二个参数(回调函数)来处理遍历到的每一个元素<br> 在回调函数中, <code>this</code> 是指向当前遍历的元素.</li>\n<li>语法: <code>$.each([数组/伪数组], callback)</code> ;</li>\n<li>实现思路<ul>\n<li>声明 <code>each</code> 函数,定义两个形参,第一个 遍历的(伪)数组;第二: 回调函数</li>\n<li>使用 <code>for</code> 循环,遍历(伪)数组,再循环体内部执行回调函数. 在执行时,给回调函数传实参</li>\n<li>实现回调函数内部 <code>this</code> 指向,当前遍历到的元素</li>\n<li>通过回调函数的返回值,判断是否结束循环. 规定:当返回值为 <code>false</code> ,结束循环<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">each: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, callback</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</div><div class=\"line\">\t\tl = obj.length;</div><div class=\"line\">\t<span class=\"comment\">// 遍历数组元素</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (; i &lt; l; i++) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 执行用户指定回调函数</span></div><div class=\"line\">\t\t<span class=\"comment\">// 将当前遍历到的元素以及索引传入回调函数</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (callback.call(obj[i], obj[i], i) === <span class=\"literal\">false</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"itcast中链式编程的实现\"><a href=\"#itcast中链式编程的实现\" class=\"headerlink\" title=\"itcast中链式编程的实现\"></a>itcast中链式编程的实现</h2><ol>\n<li>返回当前方法的调用者: <code>return this;</code></li>\n</ol>\n<h2 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h2><ol>\n<li>功能:根据参数 <code>index</code> ,获取相应 <code>dom</code> 元素</li>\n<li>实现思路<ul>\n<li>将字符串类型转换成数字</li>\n<li><code>index &lt; 0 ==&gt; index +length</code></li>\n<li><code>return this[index]</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">\tindex = index - <span class=\"number\">0</span>;</div><div class=\"line\">\tindex = index &lt; <span class=\"number\">0</span> ? index + <span class=\"keyword\">this</span>.length : index;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[index];</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"eq方法\"><a href=\"#eq方法\" class=\"headerlink\" title=\"eq方法\"></a>eq方法</h2><ol>\n<li>功能:根据参数 <code>index</code> ,获取相应 <code>dom</code> 元素,转换成 <code>itcast</code> 对象,并且返回</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">eq: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(<span class=\"keyword\">this</span>.get(index));</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"first方法\"><a href=\"#first方法\" class=\"headerlink\" title=\"first方法\"></a>first方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">first: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.eq(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"last方法\"><a href=\"#last方法\" class=\"headerlink\" title=\"last方法\"></a>last方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">last: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.eq(<span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"css方法\"><a href=\"#css方法\" class=\"headerlink\" title=\"css方法\"></a>css方法</h2><ol>\n<li>功能:<ul>\n<li>获取:如果只传一个参数并且类型不为对象,获取相应的样式属性值</li>\n<li>设置:a,如果只传一个参数并且类型为对象,设置多个样式值; b,传入两个参数,设置单个样式.</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>给 <code>itcast</code> 原型添加 <code>css</code> 方法,定义两个参数.</li>\n<li>如果只传入一个参数<ul>\n<li>类型为对象的话,同时设置多个样式属性</li>\n<li>类型不为对象,获取指定的样式值</li>\n</ul>\n</li>\n<li>如果只传入两个参数,设置单个样式值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">css: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, value</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 只传入一个参数</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (value == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果name类型为对象，同时设置多个样式</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 遍历this上的每一个dom元素</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 枚举name上的每个属性值</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> name) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 给当前遍历到的dom元素设置样式</span></div><div class=\"line\">\t\t\t\t\tv.style[k] = name[k];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果name不为对象</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 默认获取this上的第一个dom元素的指定样式值</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果浏览器支持getComputedStyle，使用该方法获取指定样式值</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// if(window.getComputedStyle)&#123;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// \treturn window.getComputedStyle(this[0])[name];</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// &#125; else &#123; //否则使用currentStyle获取</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// \treturn this[0].currentStyle[name];</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果this上没有任何dom元素， 就返回null</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.getComputedStyle ?</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">window</span>.getComputedStyle(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>])[name] :</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>[<span class=\"number\">0</span>].currentStyle[name];</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果传入两个参数</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\tv.style[name] = value;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"addClass方法\"><a href=\"#addClass方法\" class=\"headerlink\" title=\"addClass方法\"></a>addClass方法</h2><ol>\n<li>功能:给结果集中的每一个 <code>dom</code> 元素添加指定样式类.</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>首先判断当前遍历到的 <code>dom</code> 元素是否含有样式类.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">addClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 判断当前dom元素v是否具有className</span></div><div class=\"line\">\t\t<span class=\"comment\">// 如果不具有，给其添加指定的样式类</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!itcast(v).hasClass(className))&#123;</div><div class=\"line\">\t\t\tv.className += <span class=\"string\">' '</span> + className;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"removeClass方法\"><a href=\"#removeClass方法\" class=\"headerlink\" title=\"removeClass方法\"></a>removeClass方法</h2><ol>\n<li>功能:删除结果集中的每一个 <code>dom</code> 元素的指定样式类.</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li><code>(&#39; &#39; + v.className + &#39; &#39;).replace(&#39; &#39; + className + &#39; &#39;,&#39; &#39;);</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">removeClass:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 删除当前dom元素的样式类className</span></div><div class=\"line\">\t\tv.className = (<span class=\"string\">' '</span> + v.className + <span class=\"string\">' '</span>).</div><div class=\"line\">\t\t\treplace(<span class=\"string\">' '</span> + className + <span class=\"string\">' '</span>, <span class=\"string\">' '</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"toggleClass方法\"><a href=\"#toggleClass方法\" class=\"headerlink\" title=\"toggleClass方法\"></a>toggleClass方法</h2><ol>\n<li>功能: 切换指定的样式类,如果有,就删除,没有就添加     </li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历到的 <code>dom</code> 元素是否含有指定的样式类</li>\n<li>如果有,就删除</li>\n<li>如果没有,就添加<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">toggleClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 将当前遍历到的元素转换成itcast对象</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> $v = itcast(v);</div><div class=\"line\">\t\t<span class=\"comment\">// 如果具有指定的样式类，就删除该样式类</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>($v.hasClass(className))&#123;\t\t\t\t\t</div><div class=\"line\">\t\t\t$v.removeClass(className);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果没有指定的样式类，就添加该样式类</span></div><div class=\"line\">\t\t\t$v.addClass(className);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n","excerpt":"<p>JQuery模块分析及其实现第二部分css部分功能及实现,接第一部分!</p>","more":"<h2 id=\"hasClass方法\"><a href=\"#hasClass方法\" class=\"headerlink\" title=\"hasClass方法\"></a>hasClass方法</h2><ol>\n<li>功能:如果结果集里只要有一个 <code>dom</code> 元素,具有指定的样式类,就返回 <code>true</code> </li>\n<li><p>实现思路</p>\n<ul>\n<li>定义结果变量 <code>ret</code> ,默认值为 <code>false</code></li>\n<li>遍历结果集的每一个 <code>dom</code> 元素,如果当前 <code>dom</code> 元素具有指定的样式类,将 <code>ret=true</code> 结束循环</li>\n<li><p>返回 <code>ret</code> .</p>\n</li>\n<li><p>如何判断 <code>dom</code> 元素具有指定的样式类?<br>在 <code>dom</code> 元素所有的样式类的 <code>首位 + 空格</code> ;在用户指定的样式类 <code>首位 + 空格</code> 调用indexOf方法,如果返回值 = -1,表示没有;否则就具有指定样式类</p>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">hasClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 默认结果false</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素\t\t\t\t\t</span></div><div class=\"line\">\t<span class=\"comment\">// for(var i = 0, l = this.length;i &lt; l;i++)&#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \t// 如果当前dom元素具有指定的样式类</span></div><div class=\"line\">\t<span class=\"comment\">// \t// 返回值为true，结束循环</span></div><div class=\"line\">\t<span class=\"comment\">// if((' ' + this[i].className + ' ')</span></div><div class=\"line\">\t<span class=\"comment\">// \t.indexOf(' ' + className + ' ') !== -1) &#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \tret = true;</span></div><div class=\"line\">\t<span class=\"comment\">// \tbreak;</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((<span class=\"string\">' '</span> + v.className + <span class=\"string\">' '</span>)</div><div class=\"line\">\t\t\t.indexOf(<span class=\"string\">' '</span> + className + <span class=\"string\">' '</span>) !== <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\tret = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"each方法\"><a href=\"#each方法\" class=\"headerlink\" title=\"$.each方法\"></a>$.each方法</h2><ol>\n<li>功能:实现遍历数组或者伪数组,通过第二个参数(回调函数)来处理遍历到的每一个元素<br> 在回调函数中, <code>this</code> 是指向当前遍历的元素.</li>\n<li>语法: <code>$.each([数组/伪数组], callback)</code> ;</li>\n<li>实现思路<ul>\n<li>声明 <code>each</code> 函数,定义两个形参,第一个 遍历的(伪)数组;第二: 回调函数</li>\n<li>使用 <code>for</code> 循环,遍历(伪)数组,再循环体内部执行回调函数. 在执行时,给回调函数传实参</li>\n<li>实现回调函数内部 <code>this</code> 指向,当前遍历到的元素</li>\n<li>通过回调函数的返回值,判断是否结束循环. 规定:当返回值为 <code>false</code> ,结束循环<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">each: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, callback</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</div><div class=\"line\">\t\tl = obj.length;</div><div class=\"line\">\t<span class=\"comment\">// 遍历数组元素</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (; i &lt; l; i++) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 执行用户指定回调函数</span></div><div class=\"line\">\t\t<span class=\"comment\">// 将当前遍历到的元素以及索引传入回调函数</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (callback.call(obj[i], obj[i], i) === <span class=\"literal\">false</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"itcast中链式编程的实现\"><a href=\"#itcast中链式编程的实现\" class=\"headerlink\" title=\"itcast中链式编程的实现\"></a>itcast中链式编程的实现</h2><ol>\n<li>返回当前方法的调用者: <code>return this;</code></li>\n</ol>\n<h2 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h2><ol>\n<li>功能:根据参数 <code>index</code> ,获取相应 <code>dom</code> 元素</li>\n<li>实现思路<ul>\n<li>将字符串类型转换成数字</li>\n<li><code>index &lt; 0 ==&gt; index +length</code></li>\n<li><code>return this[index]</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">\tindex = index - <span class=\"number\">0</span>;</div><div class=\"line\">\tindex = index &lt; <span class=\"number\">0</span> ? index + <span class=\"keyword\">this</span>.length : index;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[index];</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"eq方法\"><a href=\"#eq方法\" class=\"headerlink\" title=\"eq方法\"></a>eq方法</h2><ol>\n<li>功能:根据参数 <code>index</code> ,获取相应 <code>dom</code> 元素,转换成 <code>itcast</code> 对象,并且返回</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">eq: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(<span class=\"keyword\">this</span>.get(index));</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"first方法\"><a href=\"#first方法\" class=\"headerlink\" title=\"first方法\"></a>first方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">first: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.eq(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"last方法\"><a href=\"#last方法\" class=\"headerlink\" title=\"last方法\"></a>last方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">last: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.eq(<span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"css方法\"><a href=\"#css方法\" class=\"headerlink\" title=\"css方法\"></a>css方法</h2><ol>\n<li>功能:<ul>\n<li>获取:如果只传一个参数并且类型不为对象,获取相应的样式属性值</li>\n<li>设置:a,如果只传一个参数并且类型为对象,设置多个样式值; b,传入两个参数,设置单个样式.</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>给 <code>itcast</code> 原型添加 <code>css</code> 方法,定义两个参数.</li>\n<li>如果只传入一个参数<ul>\n<li>类型为对象的话,同时设置多个样式属性</li>\n<li>类型不为对象,获取指定的样式值</li>\n</ul>\n</li>\n<li>如果只传入两个参数,设置单个样式值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">css: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, value</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 只传入一个参数</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (value == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果name类型为对象，同时设置多个样式</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 遍历this上的每一个dom元素</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 枚举name上的每个属性值</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> name) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 给当前遍历到的dom元素设置样式</span></div><div class=\"line\">\t\t\t\t\tv.style[k] = name[k];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果name不为对象</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 默认获取this上的第一个dom元素的指定样式值</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果浏览器支持getComputedStyle，使用该方法获取指定样式值</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// if(window.getComputedStyle)&#123;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// \treturn window.getComputedStyle(this[0])[name];</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// &#125; else &#123; //否则使用currentStyle获取</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// \treturn this[0].currentStyle[name];</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果this上没有任何dom元素， 就返回null</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.getComputedStyle ?</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">window</span>.getComputedStyle(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>])[name] :</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>[<span class=\"number\">0</span>].currentStyle[name];</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果传入两个参数</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\tv.style[name] = value;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"addClass方法\"><a href=\"#addClass方法\" class=\"headerlink\" title=\"addClass方法\"></a>addClass方法</h2><ol>\n<li>功能:给结果集中的每一个 <code>dom</code> 元素添加指定样式类.</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>首先判断当前遍历到的 <code>dom</code> 元素是否含有样式类.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">addClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 判断当前dom元素v是否具有className</span></div><div class=\"line\">\t\t<span class=\"comment\">// 如果不具有，给其添加指定的样式类</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!itcast(v).hasClass(className))&#123;</div><div class=\"line\">\t\t\tv.className += <span class=\"string\">' '</span> + className;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"removeClass方法\"><a href=\"#removeClass方法\" class=\"headerlink\" title=\"removeClass方法\"></a>removeClass方法</h2><ol>\n<li>功能:删除结果集中的每一个 <code>dom</code> 元素的指定样式类.</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li><code>(&#39; &#39; + v.className + &#39; &#39;).replace(&#39; &#39; + className + &#39; &#39;,&#39; &#39;);</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">removeClass:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 删除当前dom元素的样式类className</span></div><div class=\"line\">\t\tv.className = (<span class=\"string\">' '</span> + v.className + <span class=\"string\">' '</span>).</div><div class=\"line\">\t\t\treplace(<span class=\"string\">' '</span> + className + <span class=\"string\">' '</span>, <span class=\"string\">' '</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"toggleClass方法\"><a href=\"#toggleClass方法\" class=\"headerlink\" title=\"toggleClass方法\"></a>toggleClass方法</h2><ol>\n<li>功能: 切换指定的样式类,如果有,就删除,没有就添加     </li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历到的 <code>dom</code> 元素是否含有指定的样式类</li>\n<li>如果有,就删除</li>\n<li>如果没有,就添加<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">toggleClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 将当前遍历到的元素转换成itcast对象</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> $v = itcast(v);</div><div class=\"line\">\t\t<span class=\"comment\">// 如果具有指定的样式类，就删除该样式类</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>($v.hasClass(className))&#123;\t\t\t\t\t</div><div class=\"line\">\t\t\t$v.removeClass(className);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果没有指定的样式类，就添加该样式类</span></div><div class=\"line\">\t\t\t$v.addClass(className);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>"},{"title":"JQuery分析及实现part3之属性模块功能及实现","date":"2016-11-20T03:51:28.000Z","_content":"\nJQuery模块分析及其实现第三部分属性模块功能及实现,接第二部分!\n\n<!-- more -->\n\n## 知识点复习\n\n1.  `css` 方法\n\t* 如果只传入一个参数\n\t\t* 如果参数类型为对象,表示同时设置多个样式\n\t\t* 如果参数类型为字符串,表示获取指定的样式值\n\t* 如果传入的两个参数,表示设置单个样式值\n\n2.  `itcast.each` 方法: 遍历数组或伪数组\n\t* 第一个参数,指定遍历的对象\n\t* 第二个参数,指定的回调函数,对遍历到的每一个元素,进行相关处理\n\n## attr方法( setAttribute 和 getAttribute )\n\n1. 功能: 获取(设置)属性节点值\n2. 实现思路\n\t* 给原型添加 `attr` 方法,定义两个参数:属性节点名字 `name` 以及属性节点值\n\t* 如果只传入一个参数\n\t\t* 如果参数类型为对象,表示设置多个节点值\n\t\t* 否则获取指定的属性节点值(默认获取第一个 `dom` 元素的属性节点值)\n\t* 如果传入两个参数,表示设置单个属性节点值.\n\n```js\nattr: function(name,value){\n\t//只传入一个参数\n\tif(value == undefined){\n\t\t//如果类型为对象,表示设置多个属性\n\t\tif(typeof name ==='object'){\n\t\t\t//遍历itcast上的每一个dom元素,并设置属性节点值\n\t\t\tthis.each(function(v){\n\t\t\t\t//枚举name对象上的每一个属性\n\t\t\t\tfor(var k in name){\n\t\t\t\t\tv.setAttribute(k, name[k]);\n\t\t\t\t}\n\t\t\t});\n\t\t} else { //如果类型为字符串,获取属性节点值\n\t\t\tif(!this[0]) return null;\n\t\t\treturn this[0].getAttribute(name);\n\t\t}\n\t}else { //传入两个参数,表示设置单个属性节点值\n\t\tthis.each(function(v) {\n\t\t\tv.setAttribute(name, value)\n\t\t});\n\t}\n\treturn this\n},\n```\n\n## html方法\n\n1. 功能: \n\t* 不传参数,表示获取指定 `dom` 元素的 `innerHTML` 属性值\n\t* 否则,表示设置指定 `dom` 元素的 `innerHTML` 属性\n2. 实行思路\n\t* 判断是否传入参数\n\t* 如果没穿,获取 `itcast` 对象上的第一个 `dom` 元素的 `innerHTML` 属性值\n\t* 否则,给 `itcast` 对象上的每一个 `dom` 元素设置 `innerHTML` 属性\n\n```js\nhtml: function(html) {\n\t//如果没有给html传值,表示获取\n\tif(html==undefined){\n\t\t//如果icast没有任何dom元素,就返回一个期望值,即空字符串\n\t\t//如果有的话,就返回一个dom元素的innerHTML属性值\n\t\treturn this[0] ? this[0].innerHTML : '';\n\t}else{//如果给html船只,给itcast对象上的每一个dom元素设置innerHTML属性\n\t\treturn this.each(function(v){\n\t\t\tv.innerHTML = html;\n\t\t});\n\t}\n},\n```\n\n## text方法\n\n1. 功能\n\t* 不传值,表示获取文本节点(返回的是后代中所有文本节点值)\n\t* 传值,设置指定 `dom` 元素文本值\n2. 实现思路\n\t* 如果不传值,优先考虑浏览器是否支持 `textContent` 属性\n\t\t* 如果支持,就使用 `textContent` 返回结果集中每一个 `dom` 元素的文本节点值\n\t\t* 否则,就是用 `innerText` 返回结果集中每一个 `dom` 元素的文本节点值\n\t* 如果传值,给 `itcast` 对象上的每一个 `dom` 元素设置文本节点值.\n\t\t* 如果支持 `textContent` 属性,就是用该属性设置文本\n\t\t* 否则,就是用 `innerText` 来设置文本.\n\n```js\ntext: function(text) {\n\t// 如果没有传值，表示获取文本值\n\tif(text == undefined){\n\t\t// 定义结果变量，存储每个dom元素的文本\n\t\tvar ret = '';\n\t\t// 遍历每一个dom元素\n\t\tthis.each(function(v) {\n\t\t\t// 如果支持textContent，使用其获取文本，累加到ret上\n\t\t\tret += 'textContent' in document ?\n\t\t\t\tv.textContent :\n\t\t\t\tv.innerText.replace(/\\r\\n/g, '');\n\t\t});\n\t\t// 返回所有文本\n\t\treturn ret;\n\t} else { // 如果传值了，表示为每个dom设置文本\n\t\treturn this.each(function(v) {\n\t\t\t// 如果支持textContent，就使用该属性为当前dom元素设置文本节点值\n\t\t\t// 否则，使用innerText设置文本节点值。\n\t\t\tif('textContent' in document){\n\t\t\t\tv.textContent = text;\n\t\t\t} else {\n\t\t\t\tv.innerText = text;\n\t\t\t}\n\t\t});\n\t}\n},\n```\n\n## val方法\n\n1. 功能( `value` 属性)\n\t* 如果不传值,表示获取输入框的文本值\n\t* 如果传值, 表示给输入框 设置文本\n2. 实现思路\n\t* 如果不传值，表示获取输入框的文本值（获取第一个文本框值）\n\t* 如果传值，表示给输入框 设置文本\n\t\t* 遍历每一个输入框，同时给其设置文本\n```js\nval: function(value) {\n\t// 如果没有传值，表示获取第一个dom元素的value属性值\n\t// 如果itcast对象上没有任何dom元素，返回空字符串\n\tif(value == undefined){\n\t\treturn this[0] ? this[0].value : '';\n\t} else {// 否则，为每一个dom元素设置value属性值\n\t\treturn this.each(function() {\n\t\t\tthis.value = value;\n\t\t});\n\t}\n}\n```\n\n## prop方法\n\n1. 功能:和 `attr` 相似\n\t* 注意: 有些属性名称,比如 `for` , `class` 是保留字或关键字不能作为对象属性名称,所以要创建一个对象,需要转换这类的属性\n\t* 定义 `propFix` 对象,存储上述属性到这属性名称的映射关系\n\t* 如果只传入一个参数\n\t\t* 类型为对象,同时给  `dom` 对象添加属性\n\t\t* 类型为字符串,获取 `itcast` 对象上的第一个 `dom` 对象的指定属性值\n\t* 如果传入的参数,给所有的 `dom` 对象添加单个属性\n\t* 细节: 无论是设置还是获取属性,在操作之前,先要从 `propFix` 对象拿到映射后的属性名称\n\t\t* 如果拿到的心的属性名称不为 `undefined` ,就用映射后的属性名来操作 `dom` 对象\n\t\t* 否则,那么久使用旧的属性名称来操作 `dom` 对象.\n\n```js\n// 属性模块\nitcast.propFix = {\n\t'for': 'htmlFor',\n\t'class': 'className'\n};\nitcast.each([\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\titcast.propFix[this.toLowerCase()] = this;\n});\nprop: function(name, value) {\n\t// 如果没有给value传值\n\tvar prop;\n\tif (value == undefined) {\n\t\t// 并且name的类型为 对象，表示给每一个dom对象添加多个属性\n\t\tif (typeof name === 'object') {\n\t\t\tthis.each(function() {\n\t\t\t\tfor (var k in name) {\n\t\t\t\t\t// 首先从propFix对象上获取属性名字\n\t\t\t\t\t// 如果有，就使用新的属性名字\n\t\t\t\t\t// 如果没有，就使用原来的属性名字\n\t\t\t\t\tprop = itcast.propFix[k] ? itcast.propFix[k] : k;\n\t\t\t\t\tthis[prop] = name[k];\n\t\t\t\t}\n\t\t\t});\n\t\t} else { // 如果name的类型 为字符串，表示获取第一个dom对象的指定属性值\n\t\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;\n\t\t\treturn this.length > 0 ? this[0][prop] : null;\n\t\t}\n\t} else { // 如果传入两个参数，表示给每一个dom对象添加单个属性\n\t\t// 遍历itcast上的每一个dom对象，添加属性\n\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;\n\t\tthis.each(function() {\n\t\t\tthis[prop] = value;\n\t\t});\n\t}\n\t// 实现链式编程\n\treturn this;\n}\n```","source":"_posts/javascript-jquery-part3.md","raw":"---\ntitle: JQuery分析及实现part3之属性模块功能及实现\ndate: 2016-11-20 11:51:28\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第三部分属性模块功能及实现,接第二部分!\n\n<!-- more -->\n\n## 知识点复习\n\n1.  `css` 方法\n\t* 如果只传入一个参数\n\t\t* 如果参数类型为对象,表示同时设置多个样式\n\t\t* 如果参数类型为字符串,表示获取指定的样式值\n\t* 如果传入的两个参数,表示设置单个样式值\n\n2.  `itcast.each` 方法: 遍历数组或伪数组\n\t* 第一个参数,指定遍历的对象\n\t* 第二个参数,指定的回调函数,对遍历到的每一个元素,进行相关处理\n\n## attr方法( setAttribute 和 getAttribute )\n\n1. 功能: 获取(设置)属性节点值\n2. 实现思路\n\t* 给原型添加 `attr` 方法,定义两个参数:属性节点名字 `name` 以及属性节点值\n\t* 如果只传入一个参数\n\t\t* 如果参数类型为对象,表示设置多个节点值\n\t\t* 否则获取指定的属性节点值(默认获取第一个 `dom` 元素的属性节点值)\n\t* 如果传入两个参数,表示设置单个属性节点值.\n\n```js\nattr: function(name,value){\n\t//只传入一个参数\n\tif(value == undefined){\n\t\t//如果类型为对象,表示设置多个属性\n\t\tif(typeof name ==='object'){\n\t\t\t//遍历itcast上的每一个dom元素,并设置属性节点值\n\t\t\tthis.each(function(v){\n\t\t\t\t//枚举name对象上的每一个属性\n\t\t\t\tfor(var k in name){\n\t\t\t\t\tv.setAttribute(k, name[k]);\n\t\t\t\t}\n\t\t\t});\n\t\t} else { //如果类型为字符串,获取属性节点值\n\t\t\tif(!this[0]) return null;\n\t\t\treturn this[0].getAttribute(name);\n\t\t}\n\t}else { //传入两个参数,表示设置单个属性节点值\n\t\tthis.each(function(v) {\n\t\t\tv.setAttribute(name, value)\n\t\t});\n\t}\n\treturn this\n},\n```\n\n## html方法\n\n1. 功能: \n\t* 不传参数,表示获取指定 `dom` 元素的 `innerHTML` 属性值\n\t* 否则,表示设置指定 `dom` 元素的 `innerHTML` 属性\n2. 实行思路\n\t* 判断是否传入参数\n\t* 如果没穿,获取 `itcast` 对象上的第一个 `dom` 元素的 `innerHTML` 属性值\n\t* 否则,给 `itcast` 对象上的每一个 `dom` 元素设置 `innerHTML` 属性\n\n```js\nhtml: function(html) {\n\t//如果没有给html传值,表示获取\n\tif(html==undefined){\n\t\t//如果icast没有任何dom元素,就返回一个期望值,即空字符串\n\t\t//如果有的话,就返回一个dom元素的innerHTML属性值\n\t\treturn this[0] ? this[0].innerHTML : '';\n\t}else{//如果给html船只,给itcast对象上的每一个dom元素设置innerHTML属性\n\t\treturn this.each(function(v){\n\t\t\tv.innerHTML = html;\n\t\t});\n\t}\n},\n```\n\n## text方法\n\n1. 功能\n\t* 不传值,表示获取文本节点(返回的是后代中所有文本节点值)\n\t* 传值,设置指定 `dom` 元素文本值\n2. 实现思路\n\t* 如果不传值,优先考虑浏览器是否支持 `textContent` 属性\n\t\t* 如果支持,就使用 `textContent` 返回结果集中每一个 `dom` 元素的文本节点值\n\t\t* 否则,就是用 `innerText` 返回结果集中每一个 `dom` 元素的文本节点值\n\t* 如果传值,给 `itcast` 对象上的每一个 `dom` 元素设置文本节点值.\n\t\t* 如果支持 `textContent` 属性,就是用该属性设置文本\n\t\t* 否则,就是用 `innerText` 来设置文本.\n\n```js\ntext: function(text) {\n\t// 如果没有传值，表示获取文本值\n\tif(text == undefined){\n\t\t// 定义结果变量，存储每个dom元素的文本\n\t\tvar ret = '';\n\t\t// 遍历每一个dom元素\n\t\tthis.each(function(v) {\n\t\t\t// 如果支持textContent，使用其获取文本，累加到ret上\n\t\t\tret += 'textContent' in document ?\n\t\t\t\tv.textContent :\n\t\t\t\tv.innerText.replace(/\\r\\n/g, '');\n\t\t});\n\t\t// 返回所有文本\n\t\treturn ret;\n\t} else { // 如果传值了，表示为每个dom设置文本\n\t\treturn this.each(function(v) {\n\t\t\t// 如果支持textContent，就使用该属性为当前dom元素设置文本节点值\n\t\t\t// 否则，使用innerText设置文本节点值。\n\t\t\tif('textContent' in document){\n\t\t\t\tv.textContent = text;\n\t\t\t} else {\n\t\t\t\tv.innerText = text;\n\t\t\t}\n\t\t});\n\t}\n},\n```\n\n## val方法\n\n1. 功能( `value` 属性)\n\t* 如果不传值,表示获取输入框的文本值\n\t* 如果传值, 表示给输入框 设置文本\n2. 实现思路\n\t* 如果不传值，表示获取输入框的文本值（获取第一个文本框值）\n\t* 如果传值，表示给输入框 设置文本\n\t\t* 遍历每一个输入框，同时给其设置文本\n```js\nval: function(value) {\n\t// 如果没有传值，表示获取第一个dom元素的value属性值\n\t// 如果itcast对象上没有任何dom元素，返回空字符串\n\tif(value == undefined){\n\t\treturn this[0] ? this[0].value : '';\n\t} else {// 否则，为每一个dom元素设置value属性值\n\t\treturn this.each(function() {\n\t\t\tthis.value = value;\n\t\t});\n\t}\n}\n```\n\n## prop方法\n\n1. 功能:和 `attr` 相似\n\t* 注意: 有些属性名称,比如 `for` , `class` 是保留字或关键字不能作为对象属性名称,所以要创建一个对象,需要转换这类的属性\n\t* 定义 `propFix` 对象,存储上述属性到这属性名称的映射关系\n\t* 如果只传入一个参数\n\t\t* 类型为对象,同时给  `dom` 对象添加属性\n\t\t* 类型为字符串,获取 `itcast` 对象上的第一个 `dom` 对象的指定属性值\n\t* 如果传入的参数,给所有的 `dom` 对象添加单个属性\n\t* 细节: 无论是设置还是获取属性,在操作之前,先要从 `propFix` 对象拿到映射后的属性名称\n\t\t* 如果拿到的心的属性名称不为 `undefined` ,就用映射后的属性名来操作 `dom` 对象\n\t\t* 否则,那么久使用旧的属性名称来操作 `dom` 对象.\n\n```js\n// 属性模块\nitcast.propFix = {\n\t'for': 'htmlFor',\n\t'class': 'className'\n};\nitcast.each([\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\titcast.propFix[this.toLowerCase()] = this;\n});\nprop: function(name, value) {\n\t// 如果没有给value传值\n\tvar prop;\n\tif (value == undefined) {\n\t\t// 并且name的类型为 对象，表示给每一个dom对象添加多个属性\n\t\tif (typeof name === 'object') {\n\t\t\tthis.each(function() {\n\t\t\t\tfor (var k in name) {\n\t\t\t\t\t// 首先从propFix对象上获取属性名字\n\t\t\t\t\t// 如果有，就使用新的属性名字\n\t\t\t\t\t// 如果没有，就使用原来的属性名字\n\t\t\t\t\tprop = itcast.propFix[k] ? itcast.propFix[k] : k;\n\t\t\t\t\tthis[prop] = name[k];\n\t\t\t\t}\n\t\t\t});\n\t\t} else { // 如果name的类型 为字符串，表示获取第一个dom对象的指定属性值\n\t\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;\n\t\t\treturn this.length > 0 ? this[0][prop] : null;\n\t\t}\n\t} else { // 如果传入两个参数，表示给每一个dom对象添加单个属性\n\t\t// 遍历itcast上的每一个dom对象，添加属性\n\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;\n\t\tthis.each(function() {\n\t\t\tthis[prop] = value;\n\t\t});\n\t}\n\t// 实现链式编程\n\treturn this;\n}\n```","slug":"javascript-jquery-part3","published":1,"updated":"2016-11-24T01:36:37.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvof001zuwg7gzy62pap","content":"<p>JQuery模块分析及其实现第三部分属性模块功能及实现,接第二部分!</p>\n<a id=\"more\"></a>\n<h2 id=\"知识点复习\"><a href=\"#知识点复习\" class=\"headerlink\" title=\"知识点复习\"></a>知识点复习</h2><ol>\n<li><p><code>css</code> 方法</p>\n<ul>\n<li>如果只传入一个参数<ul>\n<li>如果参数类型为对象,表示同时设置多个样式</li>\n<li>如果参数类型为字符串,表示获取指定的样式值</li>\n</ul>\n</li>\n<li>如果传入的两个参数,表示设置单个样式值</li>\n</ul>\n</li>\n<li><p><code>itcast.each</code> 方法: 遍历数组或伪数组</p>\n<ul>\n<li>第一个参数,指定遍历的对象</li>\n<li>第二个参数,指定的回调函数,对遍历到的每一个元素,进行相关处理</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"attr方法-setAttribute-和-getAttribute\"><a href=\"#attr方法-setAttribute-和-getAttribute\" class=\"headerlink\" title=\"attr方法( setAttribute 和 getAttribute )\"></a>attr方法( setAttribute 和 getAttribute )</h2><ol>\n<li>功能: 获取(设置)属性节点值</li>\n<li>实现思路<ul>\n<li>给原型添加 <code>attr</code> 方法,定义两个参数:属性节点名字 <code>name</code> 以及属性节点值</li>\n<li>如果只传入一个参数<ul>\n<li>如果参数类型为对象,表示设置多个节点值</li>\n<li>否则获取指定的属性节点值(默认获取第一个 <code>dom</code> 元素的属性节点值)</li>\n</ul>\n</li>\n<li>如果传入两个参数,表示设置单个属性节点值.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">attr: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,value</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//只传入一个参数</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(value == <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//如果类型为对象,表示设置多个属性</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> name ===<span class=\"string\">'object'</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//遍历itcast上的每一个dom元素,并设置属性节点值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//枚举name对象上的每一个属性</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> name)&#123;</div><div class=\"line\">\t\t\t\t\tv.setAttribute(k, name[k]);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果类型为字符串,获取属性节点值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].getAttribute(name);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">//传入两个参数,表示设置单个属性节点值</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\tv.setAttribute(name, value)</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"html方法\"><a href=\"#html方法\" class=\"headerlink\" title=\"html方法\"></a>html方法</h2><ol>\n<li>功能: <ul>\n<li>不传参数,表示获取指定 <code>dom</code> 元素的 <code>innerHTML</code> 属性值</li>\n<li>否则,表示设置指定 <code>dom</code> 元素的 <code>innerHTML</code> 属性</li>\n</ul>\n</li>\n<li>实行思路<ul>\n<li>判断是否传入参数</li>\n<li>如果没穿,获取 <code>itcast</code> 对象上的第一个 <code>dom</code> 元素的 <code>innerHTML</code> 属性值</li>\n<li>否则,给 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素设置 <code>innerHTML</code> 属性</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">html: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//如果没有给html传值,表示获取</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(html==<span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//如果icast没有任何dom元素,就返回一个期望值,即空字符串</span></div><div class=\"line\">\t\t<span class=\"comment\">//如果有的话,就返回一个dom元素的innerHTML属性值</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">0</span>] ? <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].innerHTML : <span class=\"string\">''</span>;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//如果给html船只,给itcast对象上的每一个dom元素设置innerHTML属性</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">\t\t\tv.innerHTML = html;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"text方法\"><a href=\"#text方法\" class=\"headerlink\" title=\"text方法\"></a>text方法</h2><ol>\n<li>功能<ul>\n<li>不传值,表示获取文本节点(返回的是后代中所有文本节点值)</li>\n<li>传值,设置指定 <code>dom</code> 元素文本值</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>如果不传值,优先考虑浏览器是否支持 <code>textContent</code> 属性<ul>\n<li>如果支持,就使用 <code>textContent</code> 返回结果集中每一个 <code>dom</code> 元素的文本节点值</li>\n<li>否则,就是用 <code>innerText</code> 返回结果集中每一个 <code>dom</code> 元素的文本节点值</li>\n</ul>\n</li>\n<li>如果传值,给 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素设置文本节点值.<ul>\n<li>如果支持 <code>textContent</code> 属性,就是用该属性设置文本</li>\n<li>否则,就是用 <code>innerText</code> 来设置文本.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">text: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果没有传值，表示获取文本值</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(text == <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 定义结果变量，存储每个dom元素的文本</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ret = <span class=\"string\">''</span>;</div><div class=\"line\">\t\t<span class=\"comment\">// 遍历每一个dom元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果支持textContent，使用其获取文本，累加到ret上</span></div><div class=\"line\">\t\t\tret += <span class=\"string\">'textContent'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span> ?</div><div class=\"line\">\t\t\t\tv.textContent :</div><div class=\"line\">\t\t\t\tv.innerText.replace(<span class=\"regexp\">/\\r\\n/g</span>, <span class=\"string\">''</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"comment\">// 返回所有文本</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果传值了，表示为每个dom设置文本</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果支持textContent，就使用该属性为当前dom元素设置文本节点值</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 否则，使用innerText设置文本节点值。</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"string\">'textContent'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>)&#123;</div><div class=\"line\">\t\t\t\tv.textContent = text;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tv.innerText = text;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"val方法\"><a href=\"#val方法\" class=\"headerlink\" title=\"val方法\"></a>val方法</h2><ol>\n<li>功能( <code>value</code> 属性)<ul>\n<li>如果不传值,表示获取输入框的文本值</li>\n<li>如果传值, 表示给输入框 设置文本</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>如果不传值，表示获取输入框的文本值（获取第一个文本框值）</li>\n<li>如果传值，表示给输入框 设置文本<ul>\n<li>遍历每一个输入框，同时给其设置文本<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">val: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果没有传值，表示获取第一个dom元素的value属性值</span></div><div class=\"line\">\t<span class=\"comment\">// 如果itcast对象上没有任何dom元素，返回空字符串</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(value == <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">0</span>] ? <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].value : <span class=\"string\">''</span>;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 否则，为每一个dom元素设置value属性值</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"prop方法\"><a href=\"#prop方法\" class=\"headerlink\" title=\"prop方法\"></a>prop方法</h2><ol>\n<li>功能:和 <code>attr</code> 相似<ul>\n<li>注意: 有些属性名称,比如 <code>for</code> , <code>class</code> 是保留字或关键字不能作为对象属性名称,所以要创建一个对象,需要转换这类的属性</li>\n<li>定义 <code>propFix</code> 对象,存储上述属性到这属性名称的映射关系</li>\n<li>如果只传入一个参数<ul>\n<li>类型为对象,同时给  <code>dom</code> 对象添加属性</li>\n<li>类型为字符串,获取 <code>itcast</code> 对象上的第一个 <code>dom</code> 对象的指定属性值</li>\n</ul>\n</li>\n<li>如果传入的参数,给所有的 <code>dom</code> 对象添加单个属性</li>\n<li>细节: 无论是设置还是获取属性,在操作之前,先要从 <code>propFix</code> 对象拿到映射后的属性名称<ul>\n<li>如果拿到的心的属性名称不为 <code>undefined</code> ,就用映射后的属性名来操作 <code>dom</code> 对象</li>\n<li>否则,那么久使用旧的属性名称来操作 <code>dom</code> 对象.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 属性模块</span></div><div class=\"line\">itcast.propFix = &#123;</div><div class=\"line\">\t<span class=\"string\">'for'</span>: <span class=\"string\">'htmlFor'</span>,</div><div class=\"line\">\t<span class=\"string\">'class'</span>: <span class=\"string\">'className'</span></div><div class=\"line\">&#125;;</div><div class=\"line\">itcast.each([</div><div class=\"line\">\t<span class=\"string\">\"tabIndex\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"readOnly\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"maxLength\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"cellSpacing\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"cellPadding\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"rowSpan\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"colSpan\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"useMap\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"frameBorder\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"contentEditable\"</span></div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\titcast.propFix[<span class=\"keyword\">this</span>.toLowerCase()] = <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\">prop: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, value</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果没有给value传值</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> prop;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (value == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 并且name的类型为 对象，表示给每一个dom对象添加多个属性</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> name) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 首先从propFix对象上获取属性名字</span></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 如果有，就使用新的属性名字</span></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 如果没有，就使用原来的属性名字</span></div><div class=\"line\">\t\t\t\t\tprop = itcast.propFix[k] ? itcast.propFix[k] : k;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">this</span>[prop] = name[k];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果name的类型 为字符串，表示获取第一个dom对象的指定属性值</span></div><div class=\"line\">\t\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length &gt; <span class=\"number\">0</span> ? <span class=\"keyword\">this</span>[<span class=\"number\">0</span>][prop] : <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果传入两个参数，表示给每一个dom对象添加单个属性</span></div><div class=\"line\">\t\t<span class=\"comment\">// 遍历itcast上的每一个dom对象，添加属性</span></div><div class=\"line\">\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>[prop] = value;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>JQuery模块分析及其实现第三部分属性模块功能及实现,接第二部分!</p>","more":"<h2 id=\"知识点复习\"><a href=\"#知识点复习\" class=\"headerlink\" title=\"知识点复习\"></a>知识点复习</h2><ol>\n<li><p><code>css</code> 方法</p>\n<ul>\n<li>如果只传入一个参数<ul>\n<li>如果参数类型为对象,表示同时设置多个样式</li>\n<li>如果参数类型为字符串,表示获取指定的样式值</li>\n</ul>\n</li>\n<li>如果传入的两个参数,表示设置单个样式值</li>\n</ul>\n</li>\n<li><p><code>itcast.each</code> 方法: 遍历数组或伪数组</p>\n<ul>\n<li>第一个参数,指定遍历的对象</li>\n<li>第二个参数,指定的回调函数,对遍历到的每一个元素,进行相关处理</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"attr方法-setAttribute-和-getAttribute\"><a href=\"#attr方法-setAttribute-和-getAttribute\" class=\"headerlink\" title=\"attr方法( setAttribute 和 getAttribute )\"></a>attr方法( setAttribute 和 getAttribute )</h2><ol>\n<li>功能: 获取(设置)属性节点值</li>\n<li>实现思路<ul>\n<li>给原型添加 <code>attr</code> 方法,定义两个参数:属性节点名字 <code>name</code> 以及属性节点值</li>\n<li>如果只传入一个参数<ul>\n<li>如果参数类型为对象,表示设置多个节点值</li>\n<li>否则获取指定的属性节点值(默认获取第一个 <code>dom</code> 元素的属性节点值)</li>\n</ul>\n</li>\n<li>如果传入两个参数,表示设置单个属性节点值.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">attr: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,value</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//只传入一个参数</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(value == <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//如果类型为对象,表示设置多个属性</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> name ===<span class=\"string\">'object'</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//遍历itcast上的每一个dom元素,并设置属性节点值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//枚举name对象上的每一个属性</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> name)&#123;</div><div class=\"line\">\t\t\t\t\tv.setAttribute(k, name[k]);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果类型为字符串,获取属性节点值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].getAttribute(name);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">//传入两个参数,表示设置单个属性节点值</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\tv.setAttribute(name, value)</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"html方法\"><a href=\"#html方法\" class=\"headerlink\" title=\"html方法\"></a>html方法</h2><ol>\n<li>功能: <ul>\n<li>不传参数,表示获取指定 <code>dom</code> 元素的 <code>innerHTML</code> 属性值</li>\n<li>否则,表示设置指定 <code>dom</code> 元素的 <code>innerHTML</code> 属性</li>\n</ul>\n</li>\n<li>实行思路<ul>\n<li>判断是否传入参数</li>\n<li>如果没穿,获取 <code>itcast</code> 对象上的第一个 <code>dom</code> 元素的 <code>innerHTML</code> 属性值</li>\n<li>否则,给 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素设置 <code>innerHTML</code> 属性</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">html: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//如果没有给html传值,表示获取</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(html==<span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//如果icast没有任何dom元素,就返回一个期望值,即空字符串</span></div><div class=\"line\">\t\t<span class=\"comment\">//如果有的话,就返回一个dom元素的innerHTML属性值</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">0</span>] ? <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].innerHTML : <span class=\"string\">''</span>;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//如果给html船只,给itcast对象上的每一个dom元素设置innerHTML属性</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">\t\t\tv.innerHTML = html;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"text方法\"><a href=\"#text方法\" class=\"headerlink\" title=\"text方法\"></a>text方法</h2><ol>\n<li>功能<ul>\n<li>不传值,表示获取文本节点(返回的是后代中所有文本节点值)</li>\n<li>传值,设置指定 <code>dom</code> 元素文本值</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>如果不传值,优先考虑浏览器是否支持 <code>textContent</code> 属性<ul>\n<li>如果支持,就使用 <code>textContent</code> 返回结果集中每一个 <code>dom</code> 元素的文本节点值</li>\n<li>否则,就是用 <code>innerText</code> 返回结果集中每一个 <code>dom</code> 元素的文本节点值</li>\n</ul>\n</li>\n<li>如果传值,给 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素设置文本节点值.<ul>\n<li>如果支持 <code>textContent</code> 属性,就是用该属性设置文本</li>\n<li>否则,就是用 <code>innerText</code> 来设置文本.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">text: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果没有传值，表示获取文本值</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(text == <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 定义结果变量，存储每个dom元素的文本</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ret = <span class=\"string\">''</span>;</div><div class=\"line\">\t\t<span class=\"comment\">// 遍历每一个dom元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果支持textContent，使用其获取文本，累加到ret上</span></div><div class=\"line\">\t\t\tret += <span class=\"string\">'textContent'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span> ?</div><div class=\"line\">\t\t\t\tv.textContent :</div><div class=\"line\">\t\t\t\tv.innerText.replace(<span class=\"regexp\">/\\r\\n/g</span>, <span class=\"string\">''</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"comment\">// 返回所有文本</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果传值了，表示为每个dom设置文本</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果支持textContent，就使用该属性为当前dom元素设置文本节点值</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 否则，使用innerText设置文本节点值。</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"string\">'textContent'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>)&#123;</div><div class=\"line\">\t\t\t\tv.textContent = text;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tv.innerText = text;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"val方法\"><a href=\"#val方法\" class=\"headerlink\" title=\"val方法\"></a>val方法</h2><ol>\n<li>功能( <code>value</code> 属性)<ul>\n<li>如果不传值,表示获取输入框的文本值</li>\n<li>如果传值, 表示给输入框 设置文本</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>如果不传值，表示获取输入框的文本值（获取第一个文本框值）</li>\n<li>如果传值，表示给输入框 设置文本<ul>\n<li>遍历每一个输入框，同时给其设置文本<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">val: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果没有传值，表示获取第一个dom元素的value属性值</span></div><div class=\"line\">\t<span class=\"comment\">// 如果itcast对象上没有任何dom元素，返回空字符串</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(value == <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">0</span>] ? <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].value : <span class=\"string\">''</span>;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 否则，为每一个dom元素设置value属性值</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"prop方法\"><a href=\"#prop方法\" class=\"headerlink\" title=\"prop方法\"></a>prop方法</h2><ol>\n<li>功能:和 <code>attr</code> 相似<ul>\n<li>注意: 有些属性名称,比如 <code>for</code> , <code>class</code> 是保留字或关键字不能作为对象属性名称,所以要创建一个对象,需要转换这类的属性</li>\n<li>定义 <code>propFix</code> 对象,存储上述属性到这属性名称的映射关系</li>\n<li>如果只传入一个参数<ul>\n<li>类型为对象,同时给  <code>dom</code> 对象添加属性</li>\n<li>类型为字符串,获取 <code>itcast</code> 对象上的第一个 <code>dom</code> 对象的指定属性值</li>\n</ul>\n</li>\n<li>如果传入的参数,给所有的 <code>dom</code> 对象添加单个属性</li>\n<li>细节: 无论是设置还是获取属性,在操作之前,先要从 <code>propFix</code> 对象拿到映射后的属性名称<ul>\n<li>如果拿到的心的属性名称不为 <code>undefined</code> ,就用映射后的属性名来操作 <code>dom</code> 对象</li>\n<li>否则,那么久使用旧的属性名称来操作 <code>dom</code> 对象.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 属性模块</span></div><div class=\"line\">itcast.propFix = &#123;</div><div class=\"line\">\t<span class=\"string\">'for'</span>: <span class=\"string\">'htmlFor'</span>,</div><div class=\"line\">\t<span class=\"string\">'class'</span>: <span class=\"string\">'className'</span></div><div class=\"line\">&#125;;</div><div class=\"line\">itcast.each([</div><div class=\"line\">\t<span class=\"string\">\"tabIndex\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"readOnly\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"maxLength\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"cellSpacing\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"cellPadding\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"rowSpan\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"colSpan\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"useMap\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"frameBorder\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"contentEditable\"</span></div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\titcast.propFix[<span class=\"keyword\">this</span>.toLowerCase()] = <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\">prop: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, value</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果没有给value传值</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> prop;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (value == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 并且name的类型为 对象，表示给每一个dom对象添加多个属性</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> name) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 首先从propFix对象上获取属性名字</span></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 如果有，就使用新的属性名字</span></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 如果没有，就使用原来的属性名字</span></div><div class=\"line\">\t\t\t\t\tprop = itcast.propFix[k] ? itcast.propFix[k] : k;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">this</span>[prop] = name[k];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果name的类型 为字符串，表示获取第一个dom对象的指定属性值</span></div><div class=\"line\">\t\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length &gt; <span class=\"number\">0</span> ? <span class=\"keyword\">this</span>[<span class=\"number\">0</span>][prop] : <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果传入两个参数，表示给每一个dom对象添加单个属性</span></div><div class=\"line\">\t\t<span class=\"comment\">// 遍历itcast上的每一个dom对象，添加属性</span></div><div class=\"line\">\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>[prop] = value;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JQuery分析及实现part5之事件模块功能及实现","date":"2016-11-23T02:27:16.000Z","_content":"\nJQuery模块分析及其实现第五部分事件部分功能及实现,接第四部分!\n\n<!-- more -->\n\n## remove 方法\n\n1. 功能:将筛选出来的所有 `dom` 元素删除掉\n2. 实现思路\n    * 遍历 `this` 上的所有 `dom` 元素;\n    * 获取当前 `dom` 元素的父节点,调用 `removeChild` 方法删除自己;\n    * 循环结束,返回 `this` .\n\n```js\nremove: function() {\n    return this.each(function() {\n        this.parentNode.removeChild(this);\n    });\n},\n```\n\n## empty 方法\n\n1. 功能:将筛选出来的所有 `dom` 元素,清空后代节点\n2. 实现思路\n    * 遍历 `this` 上的所有 `dom` 元素;\n    * 直接给当前 `dom` 元素的 `innerHTML` 属性赋值为空字符串;\n    * 循环结束,返回 `this` ,实现链式编程.\n\n```js\nempty: function() {\n    return this.each(function() {\n        this.innerHTML = '';\n    });\n}\n```\n\n<b>以上接第四部分 `dom` 操作模块</b>\n\n***\n\n<b>事件部分begin</b>\n\n## 事件绑定\n\n1. DOM 0方式\n    * 通过 `dom` 元素的 `on + 事件名` 属性来绑定事件,并且赋值为 一个字符串;\n    * 上述字符串为 执行该事件的代码块(逻辑);\n    * 缺点:可读性以及可维护性不好.\n\n2. DOM 0方式的加强版\n    * 通过 `dom` 元素的 `on + 事件名` 属性来绑定事件,并且赋值为 一个事件处理函数;\n    * 缺点:定义很多的全局函数,容易造成内存过大的损耗,依然没有解决 `js` 代码和 `html` 的耦合度关系;\n\n3. IE标准\n    * 通过 `attachEvent` 来绑定事件;\n    * 语法: `dom.attachEvent(type, callback)`;\n    * 移除事件: `detachEvent(type, callback)`;\n        * 注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的\n\n4. W3C标准\n    * 通过 `addEventListener` 方法来给dom元素绑定事件;\n    * 语法: `dom.addEventListener(type, callback, useCapture默认值为false)`;\n    * 移除事件: `removEventListener(type, callback)`;\n        * 注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的\n\n5. 事件流\n    * 概念: 用户在触发某一动作时,页面所做相关反映的过程\n    * 三个阶段:\n        * 事件捕获阶段\n        * 处于事件源阶段\n        * 冒泡阶段\n    * 事件流种类\n        * 捕获型事件流: 事件处理函数是在事件的捕获阶段执行\n        * 冒泡型事件流: 事件处理函数是在事件的冒泡阶段执行\n\n6. attachEvent 和 addEventListener 区别\n    * 参数个数不同\n    * 事件类型传值不同\n        * `IE` 标准需要加 `on` 前缀\n        * `W3C` 标准不加 `on` 前缀\n    * 在绑定多个事件处理函数时，`IE` 在执行事件处理函数时,顺序不定(根据版本),而 `W3C`按照对垒结构来一次执行事件的处理函数\n    * 在事件处理函数内 `this` 指向不同\n        * IE: `window`\n        * W3C: 返回正在执行事件的处理函数的 `dom` 元素\n\n## addEvent 方法\n\n1. 根据浏览器能力,提前返回事件绑定方法\n2. 如果浏览器符合 `W3C` 标准,使用 `addEventListener` 来绑定事件\n3. 否则就使用 `attachEvent` 来绑定事件\n\n```js\n//提前返回\nvar addEvent = function() {\n    // 如果符合W3C标准，使用addEvnetListener绑定事件\n    if (global.addEventListener) {\n        return function(elem, type, callback, useCapture) {\n            elem.addEventListener(type, callback, useCapture || false);\n        };\n    } else { // 否则就使用IE标准的 attachEvent绑定事件\n        return function(elem, type, callback) {\n            elem.attachEvent('on' + type, callback);\n        };\n    }\n}();\n```\n\n## removeEvent 方法\n\n1. 根据浏览器能力,提前返回事件移除方法\n2. 如果浏览器符合 `W3C` 标准,使用 `removeEventListener` 来移除事件处理函数\n3. 否则就使用 `detachEvent` 来移除事件处理函数\n\n```js\n//提前返回\nvar removeEvent = function() {\n    if (global.removeEventListener) {\n        return function(elem, type, callback) {\n            elem.removeEventListener(type, callback);\n        };\n    } else {\n        return function(elem, type, callback) {\n            elem.detachEvent('on' + type, callback);\n        };\n    }\n}();\n```\n\n## on 方法\n\n1. 功能:给 `itcast` 对象上的所有的 `dom` 元素绑定事件\n2. 实现思路\n    * 遍历 `this` 上所有 `dom` 元素\n    * 调用 `addEvent` 给当前遍历到的 `dom` 元素绑定事件\n    * 返回 `this` ，实现链式编程\n\n```js\non: function(type, callback, capture) {\n    return this.each(function() {\n        addEvent(this, type, callback, capture);\n    });\n},\n```\n\n## off 方法\n\n1.  功能：移除 `itcast` 对象上所有 `dom` 元素的事件处理函数\n2. 实现思路\n    * 遍历 `this` 上所有 `dom` 元素\n    * 调用 `removeEvent` 给当前遍历到的 `dom` 元素移除相应事件的处理函数\n    * 返回 `this` ，实现链式编程\n\n```js\noff: function(type, callback) {\n    return this.each(function() {\n        removeEvent(this, type, callback);\n    });\n}\n```\n\n## click 方法\n\n1. 功能: 给 `itcast` 对象上的所有的 `dom` 元素绑定单击事件处理函数的\n2. 语法: `itcast对象.click(callback)`;\n3. 实现思路\n    * 遍历 `this` 上的所有 `dom` 元素\n    * 调用 `addEventListener` 分别传值即可\n    * `return this` 实现链式编程\n\n```js\nclick: function(callback, capture) {\n    return this.each(function() {\n        addEvent(this, 'click', callback, capture);\n    });\n}\n```\n\n## 快捷绑定事件方法\n\n```js\nitcast.each(['click', 'dblclick', 'keypress', 'keyup', 'keydown', 'mouseover', 'mouseout',\n'mouseenter', 'mouseleave', 'mousemove', 'mouseup', 'mousedown'], function(type) {\n    itcast.fn[type] = function(callback, capture) {\n        return this.on(type, callback, capture);\n    };\n});\n```\n\n","source":"_posts/javascript-jquery-part5.md","raw":"---\ntitle: JQuery分析及实现part5之事件模块功能及实现\ndate: 2016-11-23 10:27:16\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第五部分事件部分功能及实现,接第四部分!\n\n<!-- more -->\n\n## remove 方法\n\n1. 功能:将筛选出来的所有 `dom` 元素删除掉\n2. 实现思路\n    * 遍历 `this` 上的所有 `dom` 元素;\n    * 获取当前 `dom` 元素的父节点,调用 `removeChild` 方法删除自己;\n    * 循环结束,返回 `this` .\n\n```js\nremove: function() {\n    return this.each(function() {\n        this.parentNode.removeChild(this);\n    });\n},\n```\n\n## empty 方法\n\n1. 功能:将筛选出来的所有 `dom` 元素,清空后代节点\n2. 实现思路\n    * 遍历 `this` 上的所有 `dom` 元素;\n    * 直接给当前 `dom` 元素的 `innerHTML` 属性赋值为空字符串;\n    * 循环结束,返回 `this` ,实现链式编程.\n\n```js\nempty: function() {\n    return this.each(function() {\n        this.innerHTML = '';\n    });\n}\n```\n\n<b>以上接第四部分 `dom` 操作模块</b>\n\n***\n\n<b>事件部分begin</b>\n\n## 事件绑定\n\n1. DOM 0方式\n    * 通过 `dom` 元素的 `on + 事件名` 属性来绑定事件,并且赋值为 一个字符串;\n    * 上述字符串为 执行该事件的代码块(逻辑);\n    * 缺点:可读性以及可维护性不好.\n\n2. DOM 0方式的加强版\n    * 通过 `dom` 元素的 `on + 事件名` 属性来绑定事件,并且赋值为 一个事件处理函数;\n    * 缺点:定义很多的全局函数,容易造成内存过大的损耗,依然没有解决 `js` 代码和 `html` 的耦合度关系;\n\n3. IE标准\n    * 通过 `attachEvent` 来绑定事件;\n    * 语法: `dom.attachEvent(type, callback)`;\n    * 移除事件: `detachEvent(type, callback)`;\n        * 注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的\n\n4. W3C标准\n    * 通过 `addEventListener` 方法来给dom元素绑定事件;\n    * 语法: `dom.addEventListener(type, callback, useCapture默认值为false)`;\n    * 移除事件: `removEventListener(type, callback)`;\n        * 注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的\n\n5. 事件流\n    * 概念: 用户在触发某一动作时,页面所做相关反映的过程\n    * 三个阶段:\n        * 事件捕获阶段\n        * 处于事件源阶段\n        * 冒泡阶段\n    * 事件流种类\n        * 捕获型事件流: 事件处理函数是在事件的捕获阶段执行\n        * 冒泡型事件流: 事件处理函数是在事件的冒泡阶段执行\n\n6. attachEvent 和 addEventListener 区别\n    * 参数个数不同\n    * 事件类型传值不同\n        * `IE` 标准需要加 `on` 前缀\n        * `W3C` 标准不加 `on` 前缀\n    * 在绑定多个事件处理函数时，`IE` 在执行事件处理函数时,顺序不定(根据版本),而 `W3C`按照对垒结构来一次执行事件的处理函数\n    * 在事件处理函数内 `this` 指向不同\n        * IE: `window`\n        * W3C: 返回正在执行事件的处理函数的 `dom` 元素\n\n## addEvent 方法\n\n1. 根据浏览器能力,提前返回事件绑定方法\n2. 如果浏览器符合 `W3C` 标准,使用 `addEventListener` 来绑定事件\n3. 否则就使用 `attachEvent` 来绑定事件\n\n```js\n//提前返回\nvar addEvent = function() {\n    // 如果符合W3C标准，使用addEvnetListener绑定事件\n    if (global.addEventListener) {\n        return function(elem, type, callback, useCapture) {\n            elem.addEventListener(type, callback, useCapture || false);\n        };\n    } else { // 否则就使用IE标准的 attachEvent绑定事件\n        return function(elem, type, callback) {\n            elem.attachEvent('on' + type, callback);\n        };\n    }\n}();\n```\n\n## removeEvent 方法\n\n1. 根据浏览器能力,提前返回事件移除方法\n2. 如果浏览器符合 `W3C` 标准,使用 `removeEventListener` 来移除事件处理函数\n3. 否则就使用 `detachEvent` 来移除事件处理函数\n\n```js\n//提前返回\nvar removeEvent = function() {\n    if (global.removeEventListener) {\n        return function(elem, type, callback) {\n            elem.removeEventListener(type, callback);\n        };\n    } else {\n        return function(elem, type, callback) {\n            elem.detachEvent('on' + type, callback);\n        };\n    }\n}();\n```\n\n## on 方法\n\n1. 功能:给 `itcast` 对象上的所有的 `dom` 元素绑定事件\n2. 实现思路\n    * 遍历 `this` 上所有 `dom` 元素\n    * 调用 `addEvent` 给当前遍历到的 `dom` 元素绑定事件\n    * 返回 `this` ，实现链式编程\n\n```js\non: function(type, callback, capture) {\n    return this.each(function() {\n        addEvent(this, type, callback, capture);\n    });\n},\n```\n\n## off 方法\n\n1.  功能：移除 `itcast` 对象上所有 `dom` 元素的事件处理函数\n2. 实现思路\n    * 遍历 `this` 上所有 `dom` 元素\n    * 调用 `removeEvent` 给当前遍历到的 `dom` 元素移除相应事件的处理函数\n    * 返回 `this` ，实现链式编程\n\n```js\noff: function(type, callback) {\n    return this.each(function() {\n        removeEvent(this, type, callback);\n    });\n}\n```\n\n## click 方法\n\n1. 功能: 给 `itcast` 对象上的所有的 `dom` 元素绑定单击事件处理函数的\n2. 语法: `itcast对象.click(callback)`;\n3. 实现思路\n    * 遍历 `this` 上的所有 `dom` 元素\n    * 调用 `addEventListener` 分别传值即可\n    * `return this` 实现链式编程\n\n```js\nclick: function(callback, capture) {\n    return this.each(function() {\n        addEvent(this, 'click', callback, capture);\n    });\n}\n```\n\n## 快捷绑定事件方法\n\n```js\nitcast.each(['click', 'dblclick', 'keypress', 'keyup', 'keydown', 'mouseover', 'mouseout',\n'mouseenter', 'mouseleave', 'mousemove', 'mouseup', 'mousedown'], function(type) {\n    itcast.fn[type] = function(callback, capture) {\n        return this.on(type, callback, capture);\n    };\n});\n```\n\n","slug":"javascript-jquery-part5","published":1,"updated":"2016-11-24T01:37:37.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvoh0022uwg74digicpe","content":"<p>JQuery模块分析及其实现第五部分事件部分功能及实现,接第四部分!</p>\n<a id=\"more\"></a>\n<h2 id=\"remove-方法\"><a href=\"#remove-方法\" class=\"headerlink\" title=\"remove 方法\"></a>remove 方法</h2><ol>\n<li>功能:将筛选出来的所有 <code>dom</code> 元素删除掉</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素;</li>\n<li>获取当前 <code>dom</code> 元素的父节点,调用 <code>removeChild</code> 方法删除自己;</li>\n<li>循环结束,返回 <code>this</code> .</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">remove: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.parentNode.removeChild(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"empty-方法\"><a href=\"#empty-方法\" class=\"headerlink\" title=\"empty 方法\"></a>empty 方法</h2><ol>\n<li>功能:将筛选出来的所有 <code>dom</code> 元素,清空后代节点</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素;</li>\n<li>直接给当前 <code>dom</code> 元素的 <code>innerHTML</code> 属性赋值为空字符串;</li>\n<li>循环结束,返回 <code>this</code> ,实现链式编程.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">empty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.innerHTML = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><b>以上接第四部分 <code>dom</code> 操作模块</b></p>\n<hr>\n<p><b>事件部分begin</b></p>\n<h2 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h2><ol>\n<li><p>DOM 0方式</p>\n<ul>\n<li>通过 <code>dom</code> 元素的 <code>on + 事件名</code> 属性来绑定事件,并且赋值为 一个字符串;</li>\n<li>上述字符串为 执行该事件的代码块(逻辑);</li>\n<li>缺点:可读性以及可维护性不好.</li>\n</ul>\n</li>\n<li><p>DOM 0方式的加强版</p>\n<ul>\n<li>通过 <code>dom</code> 元素的 <code>on + 事件名</code> 属性来绑定事件,并且赋值为 一个事件处理函数;</li>\n<li>缺点:定义很多的全局函数,容易造成内存过大的损耗,依然没有解决 <code>js</code> 代码和 <code>html</code> 的耦合度关系;</li>\n</ul>\n</li>\n<li><p>IE标准</p>\n<ul>\n<li>通过 <code>attachEvent</code> 来绑定事件;</li>\n<li>语法: <code>dom.attachEvent(type, callback)</code>;</li>\n<li>移除事件: <code>detachEvent(type, callback)</code>;<ul>\n<li>注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>W3C标准</p>\n<ul>\n<li>通过 <code>addEventListener</code> 方法来给dom元素绑定事件;</li>\n<li>语法: <code>dom.addEventListener(type, callback, useCapture默认值为false)</code>;</li>\n<li>移除事件: <code>removEventListener(type, callback)</code>;<ul>\n<li>注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>事件流</p>\n<ul>\n<li>概念: 用户在触发某一动作时,页面所做相关反映的过程</li>\n<li>三个阶段:<ul>\n<li>事件捕获阶段</li>\n<li>处于事件源阶段</li>\n<li>冒泡阶段</li>\n</ul>\n</li>\n<li>事件流种类<ul>\n<li>捕获型事件流: 事件处理函数是在事件的捕获阶段执行</li>\n<li>冒泡型事件流: 事件处理函数是在事件的冒泡阶段执行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>attachEvent 和 addEventListener 区别</p>\n<ul>\n<li>参数个数不同</li>\n<li>事件类型传值不同<ul>\n<li><code>IE</code> 标准需要加 <code>on</code> 前缀</li>\n<li><code>W3C</code> 标准不加 <code>on</code> 前缀</li>\n</ul>\n</li>\n<li>在绑定多个事件处理函数时，<code>IE</code> 在执行事件处理函数时,顺序不定(根据版本),而 <code>W3C</code>按照对垒结构来一次执行事件的处理函数</li>\n<li>在事件处理函数内 <code>this</code> 指向不同<ul>\n<li>IE: <code>window</code></li>\n<li>W3C: 返回正在执行事件的处理函数的 <code>dom</code> 元素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"addEvent-方法\"><a href=\"#addEvent-方法\" class=\"headerlink\" title=\"addEvent 方法\"></a>addEvent 方法</h2><ol>\n<li>根据浏览器能力,提前返回事件绑定方法</li>\n<li>如果浏览器符合 <code>W3C</code> 标准,使用 <code>addEventListener</code> 来绑定事件</li>\n<li>否则就使用 <code>attachEvent</code> 来绑定事件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//提前返回</span></div><div class=\"line\"><span class=\"keyword\">var</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 如果符合W3C标准，使用addEvnetListener绑定事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (global.addEventListener) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback, useCapture</span>) </span>&#123;</div><div class=\"line\">            elem.addEventListener(type, callback, useCapture || <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则就使用IE标准的 attachEvent绑定事件</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback</span>) </span>&#123;</div><div class=\"line\">            elem.attachEvent(<span class=\"string\">'on'</span> + type, callback);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<h2 id=\"removeEvent-方法\"><a href=\"#removeEvent-方法\" class=\"headerlink\" title=\"removeEvent 方法\"></a>removeEvent 方法</h2><ol>\n<li>根据浏览器能力,提前返回事件移除方法</li>\n<li>如果浏览器符合 <code>W3C</code> 标准,使用 <code>removeEventListener</code> 来移除事件处理函数</li>\n<li>否则就使用 <code>detachEvent</code> 来移除事件处理函数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//提前返回</span></div><div class=\"line\"><span class=\"keyword\">var</span> removeEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (global.removeEventListener) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback</span>) </span>&#123;</div><div class=\"line\">            elem.removeEventListener(type, callback);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback</span>) </span>&#123;</div><div class=\"line\">            elem.detachEvent(<span class=\"string\">'on'</span> + type, callback);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<h2 id=\"on-方法\"><a href=\"#on-方法\" class=\"headerlink\" title=\"on 方法\"></a>on 方法</h2><ol>\n<li>功能:给 <code>itcast</code> 对象上的所有的 <code>dom</code> 元素绑定事件</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上所有 <code>dom</code> 元素</li>\n<li>调用 <code>addEvent</code> 给当前遍历到的 <code>dom</code> 元素绑定事件</li>\n<li>返回 <code>this</code> ，实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">on: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, callback, capture</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        addEvent(<span class=\"keyword\">this</span>, type, callback, capture);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"off-方法\"><a href=\"#off-方法\" class=\"headerlink\" title=\"off 方法\"></a>off 方法</h2><ol>\n<li>功能：移除 <code>itcast</code> 对象上所有 <code>dom</code> 元素的事件处理函数</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上所有 <code>dom</code> 元素</li>\n<li>调用 <code>removeEvent</code> 给当前遍历到的 <code>dom</code> 元素移除相应事件的处理函数</li>\n<li>返回 <code>this</code> ，实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">off: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        removeEvent(<span class=\"keyword\">this</span>, type, callback);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"click-方法\"><a href=\"#click-方法\" class=\"headerlink\" title=\"click 方法\"></a>click 方法</h2><ol>\n<li>功能: 给 <code>itcast</code> 对象上的所有的 <code>dom</code> 元素绑定单击事件处理函数的</li>\n<li>语法: <code>itcast对象.click(callback)</code>;</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>调用 <code>addEventListener</code> 分别传值即可</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">click: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, capture</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        addEvent(<span class=\"keyword\">this</span>, <span class=\"string\">'click'</span>, callback, capture);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快捷绑定事件方法\"><a href=\"#快捷绑定事件方法\" class=\"headerlink\" title=\"快捷绑定事件方法\"></a>快捷绑定事件方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">itcast.each([<span class=\"string\">'click'</span>, <span class=\"string\">'dblclick'</span>, <span class=\"string\">'keypress'</span>, <span class=\"string\">'keyup'</span>, <span class=\"string\">'keydown'</span>, <span class=\"string\">'mouseover'</span>, <span class=\"string\">'mouseout'</span>,</div><div class=\"line\"><span class=\"string\">'mouseenter'</span>, <span class=\"string\">'mouseleave'</span>, <span class=\"string\">'mousemove'</span>, <span class=\"string\">'mouseup'</span>, <span class=\"string\">'mousedown'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>) </span>&#123;</div><div class=\"line\">    itcast.fn[type] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, capture</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.on(type, callback, capture);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"<p>JQuery模块分析及其实现第五部分事件部分功能及实现,接第四部分!</p>","more":"<h2 id=\"remove-方法\"><a href=\"#remove-方法\" class=\"headerlink\" title=\"remove 方法\"></a>remove 方法</h2><ol>\n<li>功能:将筛选出来的所有 <code>dom</code> 元素删除掉</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素;</li>\n<li>获取当前 <code>dom</code> 元素的父节点,调用 <code>removeChild</code> 方法删除自己;</li>\n<li>循环结束,返回 <code>this</code> .</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">remove: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.parentNode.removeChild(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"empty-方法\"><a href=\"#empty-方法\" class=\"headerlink\" title=\"empty 方法\"></a>empty 方法</h2><ol>\n<li>功能:将筛选出来的所有 <code>dom</code> 元素,清空后代节点</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素;</li>\n<li>直接给当前 <code>dom</code> 元素的 <code>innerHTML</code> 属性赋值为空字符串;</li>\n<li>循环结束,返回 <code>this</code> ,实现链式编程.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">empty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.innerHTML = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><b>以上接第四部分 <code>dom</code> 操作模块</b></p>\n<hr>\n<p><b>事件部分begin</b></p>\n<h2 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h2><ol>\n<li><p>DOM 0方式</p>\n<ul>\n<li>通过 <code>dom</code> 元素的 <code>on + 事件名</code> 属性来绑定事件,并且赋值为 一个字符串;</li>\n<li>上述字符串为 执行该事件的代码块(逻辑);</li>\n<li>缺点:可读性以及可维护性不好.</li>\n</ul>\n</li>\n<li><p>DOM 0方式的加强版</p>\n<ul>\n<li>通过 <code>dom</code> 元素的 <code>on + 事件名</code> 属性来绑定事件,并且赋值为 一个事件处理函数;</li>\n<li>缺点:定义很多的全局函数,容易造成内存过大的损耗,依然没有解决 <code>js</code> 代码和 <code>html</code> 的耦合度关系;</li>\n</ul>\n</li>\n<li><p>IE标准</p>\n<ul>\n<li>通过 <code>attachEvent</code> 来绑定事件;</li>\n<li>语法: <code>dom.attachEvent(type, callback)</code>;</li>\n<li>移除事件: <code>detachEvent(type, callback)</code>;<ul>\n<li>注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>W3C标准</p>\n<ul>\n<li>通过 <code>addEventListener</code> 方法来给dom元素绑定事件;</li>\n<li>语法: <code>dom.addEventListener(type, callback, useCapture默认值为false)</code>;</li>\n<li>移除事件: <code>removEventListener(type, callback)</code>;<ul>\n<li>注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>事件流</p>\n<ul>\n<li>概念: 用户在触发某一动作时,页面所做相关反映的过程</li>\n<li>三个阶段:<ul>\n<li>事件捕获阶段</li>\n<li>处于事件源阶段</li>\n<li>冒泡阶段</li>\n</ul>\n</li>\n<li>事件流种类<ul>\n<li>捕获型事件流: 事件处理函数是在事件的捕获阶段执行</li>\n<li>冒泡型事件流: 事件处理函数是在事件的冒泡阶段执行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>attachEvent 和 addEventListener 区别</p>\n<ul>\n<li>参数个数不同</li>\n<li>事件类型传值不同<ul>\n<li><code>IE</code> 标准需要加 <code>on</code> 前缀</li>\n<li><code>W3C</code> 标准不加 <code>on</code> 前缀</li>\n</ul>\n</li>\n<li>在绑定多个事件处理函数时，<code>IE</code> 在执行事件处理函数时,顺序不定(根据版本),而 <code>W3C</code>按照对垒结构来一次执行事件的处理函数</li>\n<li>在事件处理函数内 <code>this</code> 指向不同<ul>\n<li>IE: <code>window</code></li>\n<li>W3C: 返回正在执行事件的处理函数的 <code>dom</code> 元素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"addEvent-方法\"><a href=\"#addEvent-方法\" class=\"headerlink\" title=\"addEvent 方法\"></a>addEvent 方法</h2><ol>\n<li>根据浏览器能力,提前返回事件绑定方法</li>\n<li>如果浏览器符合 <code>W3C</code> 标准,使用 <code>addEventListener</code> 来绑定事件</li>\n<li>否则就使用 <code>attachEvent</code> 来绑定事件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//提前返回</span></div><div class=\"line\"><span class=\"keyword\">var</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 如果符合W3C标准，使用addEvnetListener绑定事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (global.addEventListener) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback, useCapture</span>) </span>&#123;</div><div class=\"line\">            elem.addEventListener(type, callback, useCapture || <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则就使用IE标准的 attachEvent绑定事件</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback</span>) </span>&#123;</div><div class=\"line\">            elem.attachEvent(<span class=\"string\">'on'</span> + type, callback);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<h2 id=\"removeEvent-方法\"><a href=\"#removeEvent-方法\" class=\"headerlink\" title=\"removeEvent 方法\"></a>removeEvent 方法</h2><ol>\n<li>根据浏览器能力,提前返回事件移除方法</li>\n<li>如果浏览器符合 <code>W3C</code> 标准,使用 <code>removeEventListener</code> 来移除事件处理函数</li>\n<li>否则就使用 <code>detachEvent</code> 来移除事件处理函数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//提前返回</span></div><div class=\"line\"><span class=\"keyword\">var</span> removeEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (global.removeEventListener) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback</span>) </span>&#123;</div><div class=\"line\">            elem.removeEventListener(type, callback);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback</span>) </span>&#123;</div><div class=\"line\">            elem.detachEvent(<span class=\"string\">'on'</span> + type, callback);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<h2 id=\"on-方法\"><a href=\"#on-方法\" class=\"headerlink\" title=\"on 方法\"></a>on 方法</h2><ol>\n<li>功能:给 <code>itcast</code> 对象上的所有的 <code>dom</code> 元素绑定事件</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上所有 <code>dom</code> 元素</li>\n<li>调用 <code>addEvent</code> 给当前遍历到的 <code>dom</code> 元素绑定事件</li>\n<li>返回 <code>this</code> ，实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">on: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, callback, capture</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        addEvent(<span class=\"keyword\">this</span>, type, callback, capture);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"off-方法\"><a href=\"#off-方法\" class=\"headerlink\" title=\"off 方法\"></a>off 方法</h2><ol>\n<li>功能：移除 <code>itcast</code> 对象上所有 <code>dom</code> 元素的事件处理函数</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上所有 <code>dom</code> 元素</li>\n<li>调用 <code>removeEvent</code> 给当前遍历到的 <code>dom</code> 元素移除相应事件的处理函数</li>\n<li>返回 <code>this</code> ，实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">off: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        removeEvent(<span class=\"keyword\">this</span>, type, callback);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"click-方法\"><a href=\"#click-方法\" class=\"headerlink\" title=\"click 方法\"></a>click 方法</h2><ol>\n<li>功能: 给 <code>itcast</code> 对象上的所有的 <code>dom</code> 元素绑定单击事件处理函数的</li>\n<li>语法: <code>itcast对象.click(callback)</code>;</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>调用 <code>addEventListener</code> 分别传值即可</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">click: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, capture</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        addEvent(<span class=\"keyword\">this</span>, <span class=\"string\">'click'</span>, callback, capture);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快捷绑定事件方法\"><a href=\"#快捷绑定事件方法\" class=\"headerlink\" title=\"快捷绑定事件方法\"></a>快捷绑定事件方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">itcast.each([<span class=\"string\">'click'</span>, <span class=\"string\">'dblclick'</span>, <span class=\"string\">'keypress'</span>, <span class=\"string\">'keyup'</span>, <span class=\"string\">'keydown'</span>, <span class=\"string\">'mouseover'</span>, <span class=\"string\">'mouseout'</span>,</div><div class=\"line\"><span class=\"string\">'mouseenter'</span>, <span class=\"string\">'mouseleave'</span>, <span class=\"string\">'mousemove'</span>, <span class=\"string\">'mouseup'</span>, <span class=\"string\">'mousedown'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>) </span>&#123;</div><div class=\"line\">    itcast.fn[type] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, capture</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.on(type, callback, capture);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"JQuery分析及实现part4之DOM操作模块功能及实现","date":"2016-11-21T11:08:10.000Z","_content":"\nJQuery模块分析及其实现第四部分属性部分功能及实现,接第三部分!\n\n<!-- more -->\n\n## appendTo 方法\n\n1. 功能:将结果集中的元素 追加到指定的 `dom` 元素上.\n2. 语法:`<target对象>.appendTo(target)`\n3. 实现思路\n\t* 定义 `appendTo` 方法,声明一个形参 `target` .追加到目标 `dom` 元素\n\t\t* 选择器\n\t\t* `dom` 元素\n\t\t* `dom` 数组\n\t* 为了操作方便,将 `target` 类型统一为 `itcast` 对象,去 `itcast` 函数走一圈,出来就是 `itcast` 对象.\n\t* 遍历 `this` 上的每一个 `dom` 元素,再遍历 `target` 上的每一个 `dom` 元素\n\t* 将 `this` 上的 `dom` 元素追加到 `target` 上\n\t* 注意:\n\t\t在追加节点时,如果遍历的是第一个目标 `dom` 元素,不需要拷贝节点;否则要深拷贝节点,并将上述得到的节点储存到 `ret` 内\n\t* 将 `ret` 数组转换成 `itcast` 对象,作为 `appendTo` 方法的返回值\n\t\t* 如果不这样做的话,就会在添加样式时,只有没拷贝的节点有样式\n\n```js\nappendTo: function(target) {\n\tvar node, \n\t\tret = [];\n\t// 统一target类型 为itcast对象（为了方便操作）\n\ttarget = itcast(target);\n\t// 遍历this上的每一个dom元素\n\tthis.each(function(v) {\n\t\t// 在遍历目标dom元素\n\t\ttarget.each(function(t, i) {\n\t\t\t// 如果当前dom元素为 目标上的第一个.不拷贝节点\n\t\t\t// 否则拷贝节点\n\t\t\tnode = i === 0 ? v : v.cloneNode(true);\n\t\t\t// 将被追加的节点,添加到ret内\n\t\t\tret.push(node);\n\t\t\t// 将节点追加到指定的目标dom元素上.\n\t\t\tt.appendChild(node);\n\t\t});\n\t});\n\t// 将每一个添加的dom元素,转换成itcast对象返回,实现链式编程\n\t// 原因:在添加样式时,如果不这样做的话,只会给没克隆的节点添加样式.\n\treturn itcast(ret);\n}\n```\n\n## append 方法\n\n1. 语法: `<itcast对象>.append(source)` ;\n2. 功能: 将 `source` 上的所有 `dom` 元素,追加到 `itcast` 对象上\n2. 实现思路\n\t* 统一 `source` 类型,为 `itcast` 对象.\n\t* `source.appendTo(this)`\n\t* `return this;`\n\n```js\nappend: function(source) {\n\t//统一source类型,为itcast对象\n\tsource = itcast(source);\n\tsource.appendTo(this);\n\treturn this;\n},\n```\n\n## prependTo 方法\n\n1. 语法: `<itcast对象>.prependTo(target);`\n2. 功能:将 `itcast` 对象上的每一个 `dom` 元素,追加到 `target` 最前边 `insertBefore`\n3. 实现思路\n\t* 统一 `target` 类型,为 `itcast` 对象\n\t* 定义 `node` 变量,临时存储被追加的结点.定义 `ret` 数组,存储所有被追加的节点\n\t* 先遍历 `target` 上的每一个 `dom` 元素\n\t* 定义变量 `firstChild` ,临时存储当前目标 `dom` 元素的第一个子节点,再遍历 `this` 上的每一个 `dom` 元素\n\t* 判断当前遍历的 `dom` 是否为 `target` 上的第一个 `dom` 元素\n\t* 如果为真,此时不需要克隆节点\n\t* 否则,要深克隆节点\n\t* 将上述的到的节点, `push` 到 `ret` 内\n\t* 调用 `insertBefore` 方法追加节点,此时第一个参数为追加新的节点,第二个参数为 `firstChild` ,在 `firstChild` 之前追加新节点.\n\t* 两层循环结束,操作完成\n\t* 将 `ret` 转换成 `itcast` 对象,作为 `prependTo` 方法的返回值,实现链式编程.\n\n```js\nprependTo: function(target) {\n\t//定义变量node,临时存储被追加的节点\n\tvar node,\n\t//定义变量firstChild,临时存储当前dom元素的第一个子节点\n\t\tfirstChild,\n\t\tself = this,\n\t\t//定义ret数组,存储所有被追加的节点\n\t\tret = [];\n   //统一类型为itcast对象\n\ttarget = itcast(target);\n\t//遍历target上的每一个dom元素\n\ttarget.each(function(elem, i) {\n\t\t// 缓存当前目标dom元素的第一个子节点\n\t\tfirstChild = elem.firstChild;\n\t\t//遍历this上的每一个dom元素\n\t\tself.each(function(dom) {\n\t\t\t//判断当前遍历的dom是否为target上的每一个dom元素\n\t\t\t//若为真,则不需要克隆节点,否则,要深克隆节点\n\t\t\t// 将得到的节点赋值给node\n\t\t\tnode = i === 0 ? dom : dom.cloneNode(true);\n\t\t\t//将节点push到ret内\n\t\t\tret.push(node);\n\t\t\t//调用insertBefore方法,追加节点(追加的新节点,firstChild)\n\t\t\telem.insertBefore(node, firstChild);\n\t\t});\n\t});\n    //将ret作为itcast对象,并且返回\n\treturn itcast(ret);\n}\n```\n\n## prepend 方法\n\n1. 语法: `<itcast对象>.prepend(source);`\n2. 功能:把 `source` 上的所有的 `dom` 元素,添加到 `this` 上的最前边\n3. 实现思路: \n\t* 统一 `source` 类型,为 `itcast` 对象\n\t* 通过 `source` 调用 `prependTo` 方法,将 `source` 上的所有 `dom` 添加到 `this` 上的最前边\n\t*  `return this` 实现链式编程\n\n```js\nprepend: function(source) {\n\tsource = itcast(source);\n\tsource.prependTo(this);\n\treturn this;\n}\n```\n\n## next 方法\n\n1. 功能:获取 `itcast` 对象上所有 `dom` 元素的下一个兄弟元素 `(nextSiling)`\n2. 语法: `<itcast对象>.next();` 返回值类型, `itcast` 对象\n3. 实现思路\n\t* 定义 `ret` 数组，存储所有 `dom` 的下一个兄弟元素\n\t* 遍历 `this` 上的所有 `dom` 元素\n\t* 遍历当前 `dom` 元素下面的所有兄弟，如果类型为 元素，将此元素存储 `ret` 内，结束循环。\n\t* 两层循环结束，将 `ret` 转换成 `itcast` 对象，作为 `next` 方法的返回值。\n\n```js\nnext: function() {\n\t// 存储所用dom的下一个兄弟元素\n\tvar ret = [];\n\t// 遍历this上的所有dom元素\n\tthis.each(function() {\n\t\t// 在遍历当前dom元素下面所有的兄弟元素\n\t\tfor(var node = this.nextSibling; node ; node = node.nextSibling){\n\t\t\t// 如果当前兄弟节点,为元素节点\n\t\t\t// 即为结果,将其添加ret内,并结束循环\n\t\t\tif(node.nodeType === 1){\n\t\t\t\tret.push(node);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t// 将ret转换成itcast对象,返回\n\treturn itcast(ret);\n},\n```\n\n## nextAll  \n\n1. 功能:获取 `itcast` 对象上所有 `dom` 元素下面的所有兄弟元素 `(nextSiling)`\n2. 语法: `<itcast对象>.nextAll();` 返回值类型, `itcast` 对象\n3. 实现思路\n\t* 定义 `ret` 数组，存储所有 `dom` 的下一个兄弟元素\n\t* 遍历 `this` 上的所有 `dom` 元素\n\t* 遍历当前 `dom` 元素下面的所有兄弟，如果类型为 元素，将此元素存储 `ret` 内，结束循环。\n\t* 两层循环结束，将 `ret` 转换成 `itcast` 对象，作为 `nextAll` 方法的返回值。\n\n```js\nnextAll: function() {\n\tvar ret = [],\n\t\tnode;\n\tthis.each(function() {\n\t\tfor(node = this.nextSibling; node ; node = node.nextSibling){\n\t\t\tif(node.nodeType === 1) ret.push(node);\n\t\t}\n\t});\n\treturn itcast(itcast.unique(ret));\n}\n```\n\n## before 方法\n\n1. 功能:\n2. 语法: `<itcast对象>.before(source)`\n3. 实现思路\n\t* 统一 `source` 类型为 `itcast` 对象\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 再遍历 `source` 上的每一个 `dom` 元素\n\t* 判断当前遍历 `this`的 `dom` 元素的索引是否为0\n\t* 如果是 `0` ,不需要拷贝节点\n\t* 否则要深拷贝节点\n\t* 先拿到当前遍历 `this` 的 `dom` 元素的父节点,调用 `insertBefore` 方法在其前面添加上面的到的新节点\n\t* 两层循环完毕,操作完成\n\t*  `return this` 实现链式编程\n\n```js\nbefore: function(source) {\n\tvar node;\n\tsource = itcast(source);\n\tthis.each(function(dom, i) {\n\t\tsource.each(function(elem) {\n\t\t\tnode = i === 0 ? elem : elem.cloneNode(true);\n\t\t\t// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node\n\t\t\tdom.parentNode.insertBefore(node, dom);\n\t\t});\n\t});\n\treturn this;\n},\n```\n\n## after 方法\n\n1. 功能:\n2. 语法: `<itcast对象>.after(source)`\n3. 实现思路\n\t* 定义 `nextSiling` 变量,存储 `dom` 元素的下一个兄弟节点\n\t* 统一 `source` 类型为 `itcast` 对象\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 再遍历`source` 上的每一个 `dom` 元素\n\t* 判断当前遍历 `this` 的 `dom` 元素的索引是否为 `0`\n\t* 如果是 `0` ,不需要拷贝节点\n\t* 否则要深拷贝节点\n\t* 先拿到当前遍历 `this` 的 `dom` 元素的父节点,调用 `insertBefore` 方法在其前面添加上面的到的新节点\n\t* 两层循环完毕,操作完成\n\t*  `return this` 实现链式编程\n\n```js\nafter: function(source) {\n\tvar node,\n\t\tnextSibling;\n\tsource = itcast(source);\n\tthis.each(function(dom, i) {\n\t\tnextSibling = dom.nextSibling;\n\t\tsource.each(function(elem) {\n\t\t\tnode = i === 0 ? elem : elem.cloneNode(true);\n\t\t\t// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node\n\t\t\tdom.parentNode.insertBefore(node, nextSibling);\n\t\t});\n\t});\n\treturn this;\n}\n```\n\n## unique 方法\n\n1. 功能:实现数组元素去重\n2. 语法: `var newRet = itcast.unique(arr);`\n3. 实现思路\n\t* 定义空数组对象 `ret` .存储去重后的元素\n\t* 遍历原数组,如果当前遍历到的元素在 `ret` 中不存在,就添加 `ret` 内\n\t* 循环结束, `ret` 存储的就是去重后的元素\n\t* 返回 `ret`\n4. <a href=\"#code\">兼容IE8 indexof 方法</a>\n\t* 首先判断当前浏览器是否支持 `indexof` 方法\n\t* 如果不支持就给数组对象的原型添加 `indexof` 方法\n\t* 遍历 `this` 上的所有元素\n\t* 如果遍历到的当前元素和指定参数值相同就直接返回其索引值.结束循环\n\t* 如果在整个上述循环都没有返回值,那么表示不存在指定参数值就返回 `-1` .\n\n```js\nunique: function(arr) {\n\t// 存储去重后的结果\n\tvar ret = [];\n\t// 遍历原数组arr\n\titcast.each(arr, function() {\n\t\t// 判断ret是否存在当前遍历到的元素\n\t\t// 如果不存在将其添加到ret中\n\t\tif(ret.indexOf(this) === -1) ret.push(this);\n\t});\n\t// 将ret返回\n\treturn ret;\n}\n```\n\n<p id=\"code\">兼容 `IE8` `indexof` 方法</p>\n\n```js\n// 兼容数组对象的indexOf方法\n(function() {\n\t// 如果浏览器不支持indexOf方法\n\t// 那么就给数组对象的原型添加indexOf方法\n\tif(!Array.prototype.indexOf){\n\t\tArray.prototype.indexOf = function(val) {\n\t\t\t// 遍历this\n\t\t\tfor(var i = 0,l = this.length; i < l; i++){\n\t\t\t\t// 如果遍历到的当前元素和val相同，返回其索引值\n\t\t\t\tif(this[i] == val) return i;\n\t\t\t}\n\t\t\t// 那么表示不存在指定参数值就返回 -1 \n\t\t\treturn -1;\n\t\t};\n\t}\n}());\n```\n\n## prev 方法\n\n1. 功能: 获取 `itcast` 对象上所有 `dom` 元素的前一个兄弟元素 `(previousSibling)`\n2. 语法: `<itcast对象>.prev();` 返回值类型: `itcast对象`\n3. 实现思路\n\t* 定义 `ret` 数组,存储所有 `dom` 的前一个兄弟元素\n\t* 遍历 `this` 上的所有 `dom` 元素\n\t* 遍历当前 `dom` 元素之前的所有兄弟,如果类型为元素,将此元素存储 `ret` 内,结束循环\n\t* 两层循环结束,将 `ret` 转换成 `itcast` 对象,作为 `next` 方法的返回值\n\n```js\nprev:function(){\n\t//存储所有dom的前一个兄弟元素\n\tvar ret=[];\n\t//遍历this上的所有dom元素\n\tthis.each(function(){\n\t\t//在遍历当前dom元素之前所有的兄弟元素\n\t\tfor(var node=this.previousSibling;node;node=node.previousSibling){\n\t\t\t//如果当前兄弟节点为元素节点\n\t\t\t//即为结果,将其添加到ret内,并结束循环\n\t\t\tif(node.nodeType===1){\n\t\t\t\tret.push(node);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t//将ret转换成itcast对象,返回\n\treturn itcast(ret);\n},\n```\n\n## prevAll 方法\n\n1. 功能: 获取 `itcast` 对象上所有 `dom` 元素的之前的所有兄弟元素 `(nextSibling)`\n2. 语法: `<itcast对象>.nextAll();` 返回值类型: `itcast对象`\n3. 实现思路\n\t* 定义 `ret数组` ,存储所有 `dom` 之前的所有兄弟元素\n\t* 遍历 `this` 上的所有 `dom元素`\n\t* 遍历当前 `dom` 元素之前的所有兄弟,如果类型为元素,将此元素存储 `ret` 内,结束循环\n\t* 两层循环结束,将 `ret` 转换成 `itcast对象` ,作为 `nextAll` 方法的返回值\n\n```js\nprevAll:function(){\n\tvar ret=[];\n\tthis.each(function() {\n\t\tfor(var node=this.previousSibling;node;node=node.previousSibling){\n\t\t\tif(node.nodeType===1) ret.push(node);\n\t\t}\n\t\t\n\t});\n\treturn itcast(itcast.unique(ret));\n}\n```","source":"_posts/javascript-jquery-part4.md","raw":"---\ntitle: JQuery分析及实现part4之DOM操作模块功能及实现\ndate: 2016-11-21 19:08:10\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第四部分属性部分功能及实现,接第三部分!\n\n<!-- more -->\n\n## appendTo 方法\n\n1. 功能:将结果集中的元素 追加到指定的 `dom` 元素上.\n2. 语法:`<target对象>.appendTo(target)`\n3. 实现思路\n\t* 定义 `appendTo` 方法,声明一个形参 `target` .追加到目标 `dom` 元素\n\t\t* 选择器\n\t\t* `dom` 元素\n\t\t* `dom` 数组\n\t* 为了操作方便,将 `target` 类型统一为 `itcast` 对象,去 `itcast` 函数走一圈,出来就是 `itcast` 对象.\n\t* 遍历 `this` 上的每一个 `dom` 元素,再遍历 `target` 上的每一个 `dom` 元素\n\t* 将 `this` 上的 `dom` 元素追加到 `target` 上\n\t* 注意:\n\t\t在追加节点时,如果遍历的是第一个目标 `dom` 元素,不需要拷贝节点;否则要深拷贝节点,并将上述得到的节点储存到 `ret` 内\n\t* 将 `ret` 数组转换成 `itcast` 对象,作为 `appendTo` 方法的返回值\n\t\t* 如果不这样做的话,就会在添加样式时,只有没拷贝的节点有样式\n\n```js\nappendTo: function(target) {\n\tvar node, \n\t\tret = [];\n\t// 统一target类型 为itcast对象（为了方便操作）\n\ttarget = itcast(target);\n\t// 遍历this上的每一个dom元素\n\tthis.each(function(v) {\n\t\t// 在遍历目标dom元素\n\t\ttarget.each(function(t, i) {\n\t\t\t// 如果当前dom元素为 目标上的第一个.不拷贝节点\n\t\t\t// 否则拷贝节点\n\t\t\tnode = i === 0 ? v : v.cloneNode(true);\n\t\t\t// 将被追加的节点,添加到ret内\n\t\t\tret.push(node);\n\t\t\t// 将节点追加到指定的目标dom元素上.\n\t\t\tt.appendChild(node);\n\t\t});\n\t});\n\t// 将每一个添加的dom元素,转换成itcast对象返回,实现链式编程\n\t// 原因:在添加样式时,如果不这样做的话,只会给没克隆的节点添加样式.\n\treturn itcast(ret);\n}\n```\n\n## append 方法\n\n1. 语法: `<itcast对象>.append(source)` ;\n2. 功能: 将 `source` 上的所有 `dom` 元素,追加到 `itcast` 对象上\n2. 实现思路\n\t* 统一 `source` 类型,为 `itcast` 对象.\n\t* `source.appendTo(this)`\n\t* `return this;`\n\n```js\nappend: function(source) {\n\t//统一source类型,为itcast对象\n\tsource = itcast(source);\n\tsource.appendTo(this);\n\treturn this;\n},\n```\n\n## prependTo 方法\n\n1. 语法: `<itcast对象>.prependTo(target);`\n2. 功能:将 `itcast` 对象上的每一个 `dom` 元素,追加到 `target` 最前边 `insertBefore`\n3. 实现思路\n\t* 统一 `target` 类型,为 `itcast` 对象\n\t* 定义 `node` 变量,临时存储被追加的结点.定义 `ret` 数组,存储所有被追加的节点\n\t* 先遍历 `target` 上的每一个 `dom` 元素\n\t* 定义变量 `firstChild` ,临时存储当前目标 `dom` 元素的第一个子节点,再遍历 `this` 上的每一个 `dom` 元素\n\t* 判断当前遍历的 `dom` 是否为 `target` 上的第一个 `dom` 元素\n\t* 如果为真,此时不需要克隆节点\n\t* 否则,要深克隆节点\n\t* 将上述的到的节点, `push` 到 `ret` 内\n\t* 调用 `insertBefore` 方法追加节点,此时第一个参数为追加新的节点,第二个参数为 `firstChild` ,在 `firstChild` 之前追加新节点.\n\t* 两层循环结束,操作完成\n\t* 将 `ret` 转换成 `itcast` 对象,作为 `prependTo` 方法的返回值,实现链式编程.\n\n```js\nprependTo: function(target) {\n\t//定义变量node,临时存储被追加的节点\n\tvar node,\n\t//定义变量firstChild,临时存储当前dom元素的第一个子节点\n\t\tfirstChild,\n\t\tself = this,\n\t\t//定义ret数组,存储所有被追加的节点\n\t\tret = [];\n   //统一类型为itcast对象\n\ttarget = itcast(target);\n\t//遍历target上的每一个dom元素\n\ttarget.each(function(elem, i) {\n\t\t// 缓存当前目标dom元素的第一个子节点\n\t\tfirstChild = elem.firstChild;\n\t\t//遍历this上的每一个dom元素\n\t\tself.each(function(dom) {\n\t\t\t//判断当前遍历的dom是否为target上的每一个dom元素\n\t\t\t//若为真,则不需要克隆节点,否则,要深克隆节点\n\t\t\t// 将得到的节点赋值给node\n\t\t\tnode = i === 0 ? dom : dom.cloneNode(true);\n\t\t\t//将节点push到ret内\n\t\t\tret.push(node);\n\t\t\t//调用insertBefore方法,追加节点(追加的新节点,firstChild)\n\t\t\telem.insertBefore(node, firstChild);\n\t\t});\n\t});\n    //将ret作为itcast对象,并且返回\n\treturn itcast(ret);\n}\n```\n\n## prepend 方法\n\n1. 语法: `<itcast对象>.prepend(source);`\n2. 功能:把 `source` 上的所有的 `dom` 元素,添加到 `this` 上的最前边\n3. 实现思路: \n\t* 统一 `source` 类型,为 `itcast` 对象\n\t* 通过 `source` 调用 `prependTo` 方法,将 `source` 上的所有 `dom` 添加到 `this` 上的最前边\n\t*  `return this` 实现链式编程\n\n```js\nprepend: function(source) {\n\tsource = itcast(source);\n\tsource.prependTo(this);\n\treturn this;\n}\n```\n\n## next 方法\n\n1. 功能:获取 `itcast` 对象上所有 `dom` 元素的下一个兄弟元素 `(nextSiling)`\n2. 语法: `<itcast对象>.next();` 返回值类型, `itcast` 对象\n3. 实现思路\n\t* 定义 `ret` 数组，存储所有 `dom` 的下一个兄弟元素\n\t* 遍历 `this` 上的所有 `dom` 元素\n\t* 遍历当前 `dom` 元素下面的所有兄弟，如果类型为 元素，将此元素存储 `ret` 内，结束循环。\n\t* 两层循环结束，将 `ret` 转换成 `itcast` 对象，作为 `next` 方法的返回值。\n\n```js\nnext: function() {\n\t// 存储所用dom的下一个兄弟元素\n\tvar ret = [];\n\t// 遍历this上的所有dom元素\n\tthis.each(function() {\n\t\t// 在遍历当前dom元素下面所有的兄弟元素\n\t\tfor(var node = this.nextSibling; node ; node = node.nextSibling){\n\t\t\t// 如果当前兄弟节点,为元素节点\n\t\t\t// 即为结果,将其添加ret内,并结束循环\n\t\t\tif(node.nodeType === 1){\n\t\t\t\tret.push(node);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t// 将ret转换成itcast对象,返回\n\treturn itcast(ret);\n},\n```\n\n## nextAll  \n\n1. 功能:获取 `itcast` 对象上所有 `dom` 元素下面的所有兄弟元素 `(nextSiling)`\n2. 语法: `<itcast对象>.nextAll();` 返回值类型, `itcast` 对象\n3. 实现思路\n\t* 定义 `ret` 数组，存储所有 `dom` 的下一个兄弟元素\n\t* 遍历 `this` 上的所有 `dom` 元素\n\t* 遍历当前 `dom` 元素下面的所有兄弟，如果类型为 元素，将此元素存储 `ret` 内，结束循环。\n\t* 两层循环结束，将 `ret` 转换成 `itcast` 对象，作为 `nextAll` 方法的返回值。\n\n```js\nnextAll: function() {\n\tvar ret = [],\n\t\tnode;\n\tthis.each(function() {\n\t\tfor(node = this.nextSibling; node ; node = node.nextSibling){\n\t\t\tif(node.nodeType === 1) ret.push(node);\n\t\t}\n\t});\n\treturn itcast(itcast.unique(ret));\n}\n```\n\n## before 方法\n\n1. 功能:\n2. 语法: `<itcast对象>.before(source)`\n3. 实现思路\n\t* 统一 `source` 类型为 `itcast` 对象\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 再遍历 `source` 上的每一个 `dom` 元素\n\t* 判断当前遍历 `this`的 `dom` 元素的索引是否为0\n\t* 如果是 `0` ,不需要拷贝节点\n\t* 否则要深拷贝节点\n\t* 先拿到当前遍历 `this` 的 `dom` 元素的父节点,调用 `insertBefore` 方法在其前面添加上面的到的新节点\n\t* 两层循环完毕,操作完成\n\t*  `return this` 实现链式编程\n\n```js\nbefore: function(source) {\n\tvar node;\n\tsource = itcast(source);\n\tthis.each(function(dom, i) {\n\t\tsource.each(function(elem) {\n\t\t\tnode = i === 0 ? elem : elem.cloneNode(true);\n\t\t\t// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node\n\t\t\tdom.parentNode.insertBefore(node, dom);\n\t\t});\n\t});\n\treturn this;\n},\n```\n\n## after 方法\n\n1. 功能:\n2. 语法: `<itcast对象>.after(source)`\n3. 实现思路\n\t* 定义 `nextSiling` 变量,存储 `dom` 元素的下一个兄弟节点\n\t* 统一 `source` 类型为 `itcast` 对象\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 再遍历`source` 上的每一个 `dom` 元素\n\t* 判断当前遍历 `this` 的 `dom` 元素的索引是否为 `0`\n\t* 如果是 `0` ,不需要拷贝节点\n\t* 否则要深拷贝节点\n\t* 先拿到当前遍历 `this` 的 `dom` 元素的父节点,调用 `insertBefore` 方法在其前面添加上面的到的新节点\n\t* 两层循环完毕,操作完成\n\t*  `return this` 实现链式编程\n\n```js\nafter: function(source) {\n\tvar node,\n\t\tnextSibling;\n\tsource = itcast(source);\n\tthis.each(function(dom, i) {\n\t\tnextSibling = dom.nextSibling;\n\t\tsource.each(function(elem) {\n\t\t\tnode = i === 0 ? elem : elem.cloneNode(true);\n\t\t\t// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node\n\t\t\tdom.parentNode.insertBefore(node, nextSibling);\n\t\t});\n\t});\n\treturn this;\n}\n```\n\n## unique 方法\n\n1. 功能:实现数组元素去重\n2. 语法: `var newRet = itcast.unique(arr);`\n3. 实现思路\n\t* 定义空数组对象 `ret` .存储去重后的元素\n\t* 遍历原数组,如果当前遍历到的元素在 `ret` 中不存在,就添加 `ret` 内\n\t* 循环结束, `ret` 存储的就是去重后的元素\n\t* 返回 `ret`\n4. <a href=\"#code\">兼容IE8 indexof 方法</a>\n\t* 首先判断当前浏览器是否支持 `indexof` 方法\n\t* 如果不支持就给数组对象的原型添加 `indexof` 方法\n\t* 遍历 `this` 上的所有元素\n\t* 如果遍历到的当前元素和指定参数值相同就直接返回其索引值.结束循环\n\t* 如果在整个上述循环都没有返回值,那么表示不存在指定参数值就返回 `-1` .\n\n```js\nunique: function(arr) {\n\t// 存储去重后的结果\n\tvar ret = [];\n\t// 遍历原数组arr\n\titcast.each(arr, function() {\n\t\t// 判断ret是否存在当前遍历到的元素\n\t\t// 如果不存在将其添加到ret中\n\t\tif(ret.indexOf(this) === -1) ret.push(this);\n\t});\n\t// 将ret返回\n\treturn ret;\n}\n```\n\n<p id=\"code\">兼容 `IE8` `indexof` 方法</p>\n\n```js\n// 兼容数组对象的indexOf方法\n(function() {\n\t// 如果浏览器不支持indexOf方法\n\t// 那么就给数组对象的原型添加indexOf方法\n\tif(!Array.prototype.indexOf){\n\t\tArray.prototype.indexOf = function(val) {\n\t\t\t// 遍历this\n\t\t\tfor(var i = 0,l = this.length; i < l; i++){\n\t\t\t\t// 如果遍历到的当前元素和val相同，返回其索引值\n\t\t\t\tif(this[i] == val) return i;\n\t\t\t}\n\t\t\t// 那么表示不存在指定参数值就返回 -1 \n\t\t\treturn -1;\n\t\t};\n\t}\n}());\n```\n\n## prev 方法\n\n1. 功能: 获取 `itcast` 对象上所有 `dom` 元素的前一个兄弟元素 `(previousSibling)`\n2. 语法: `<itcast对象>.prev();` 返回值类型: `itcast对象`\n3. 实现思路\n\t* 定义 `ret` 数组,存储所有 `dom` 的前一个兄弟元素\n\t* 遍历 `this` 上的所有 `dom` 元素\n\t* 遍历当前 `dom` 元素之前的所有兄弟,如果类型为元素,将此元素存储 `ret` 内,结束循环\n\t* 两层循环结束,将 `ret` 转换成 `itcast` 对象,作为 `next` 方法的返回值\n\n```js\nprev:function(){\n\t//存储所有dom的前一个兄弟元素\n\tvar ret=[];\n\t//遍历this上的所有dom元素\n\tthis.each(function(){\n\t\t//在遍历当前dom元素之前所有的兄弟元素\n\t\tfor(var node=this.previousSibling;node;node=node.previousSibling){\n\t\t\t//如果当前兄弟节点为元素节点\n\t\t\t//即为结果,将其添加到ret内,并结束循环\n\t\t\tif(node.nodeType===1){\n\t\t\t\tret.push(node);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t//将ret转换成itcast对象,返回\n\treturn itcast(ret);\n},\n```\n\n## prevAll 方法\n\n1. 功能: 获取 `itcast` 对象上所有 `dom` 元素的之前的所有兄弟元素 `(nextSibling)`\n2. 语法: `<itcast对象>.nextAll();` 返回值类型: `itcast对象`\n3. 实现思路\n\t* 定义 `ret数组` ,存储所有 `dom` 之前的所有兄弟元素\n\t* 遍历 `this` 上的所有 `dom元素`\n\t* 遍历当前 `dom` 元素之前的所有兄弟,如果类型为元素,将此元素存储 `ret` 内,结束循环\n\t* 两层循环结束,将 `ret` 转换成 `itcast对象` ,作为 `nextAll` 方法的返回值\n\n```js\nprevAll:function(){\n\tvar ret=[];\n\tthis.each(function() {\n\t\tfor(var node=this.previousSibling;node;node=node.previousSibling){\n\t\t\tif(node.nodeType===1) ret.push(node);\n\t\t}\n\t\t\n\t});\n\treturn itcast(itcast.unique(ret));\n}\n```","slug":"javascript-jquery-part4","published":1,"updated":"2016-11-24T01:37:29.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvoj0027uwg7xx7wcl8j","content":"<p>JQuery模块分析及其实现第四部分属性部分功能及实现,接第三部分!</p>\n<a id=\"more\"></a>\n<h2 id=\"appendTo-方法\"><a href=\"#appendTo-方法\" class=\"headerlink\" title=\"appendTo 方法\"></a>appendTo 方法</h2><ol>\n<li>功能:将结果集中的元素 追加到指定的 <code>dom</code> 元素上.</li>\n<li>语法:<code>&lt;target对象&gt;.appendTo(target)</code></li>\n<li>实现思路<ul>\n<li>定义 <code>appendTo</code> 方法,声明一个形参 <code>target</code> .追加到目标 <code>dom</code> 元素<ul>\n<li>选择器</li>\n<li><code>dom</code> 元素</li>\n<li><code>dom</code> 数组</li>\n</ul>\n</li>\n<li>为了操作方便,将 <code>target</code> 类型统一为 <code>itcast</code> 对象,去 <code>itcast</code> 函数走一圈,出来就是 <code>itcast</code> 对象.</li>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素,再遍历 <code>target</code> 上的每一个 <code>dom</code> 元素</li>\n<li>将 <code>this</code> 上的 <code>dom</code> 元素追加到 <code>target</code> 上</li>\n<li>注意:<br>  在追加节点时,如果遍历的是第一个目标 <code>dom</code> 元素,不需要拷贝节点;否则要深拷贝节点,并将上述得到的节点储存到 <code>ret</code> 内</li>\n<li>将 <code>ret</code> 数组转换成 <code>itcast</code> 对象,作为 <code>appendTo</code> 方法的返回值<ul>\n<li>如果不这样做的话,就会在添加样式时,只有没拷贝的节点有样式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> node, </div><div class=\"line\">\t\tret = [];</div><div class=\"line\">\t<span class=\"comment\">// 统一target类型 为itcast对象（为了方便操作）</span></div><div class=\"line\">\ttarget = itcast(target);</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 在遍历目标dom元素</span></div><div class=\"line\">\t\ttarget.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t, i</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前dom元素为 目标上的第一个.不拷贝节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 否则拷贝节点</span></div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? v : v.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将被追加的节点,添加到ret内</span></div><div class=\"line\">\t\t\tret.push(node);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将节点追加到指定的目标dom元素上.</span></div><div class=\"line\">\t\t\tt.appendChild(node);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 将每一个添加的dom元素,转换成itcast对象返回,实现链式编程</span></div><div class=\"line\">\t<span class=\"comment\">// 原因:在添加样式时,如果不这样做的话,只会给没克隆的节点添加样式.</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"append-方法\"><a href=\"#append-方法\" class=\"headerlink\" title=\"append 方法\"></a>append 方法</h2><ol>\n<li>语法: <code>&lt;itcast对象&gt;.append(source)</code> ;</li>\n<li>功能: 将 <code>source</code> 上的所有 <code>dom</code> 元素,追加到 <code>itcast</code> 对象上</li>\n<li>实现思路<ul>\n<li>统一 <code>source</code> 类型,为 <code>itcast</code> 对象.</li>\n<li><code>source.appendTo(this)</code></li>\n<li><code>return this;</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">append: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//统一source类型,为itcast对象</span></div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\tsource.appendTo(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"prependTo-方法\"><a href=\"#prependTo-方法\" class=\"headerlink\" title=\"prependTo 方法\"></a>prependTo 方法</h2><ol>\n<li>语法: <code>&lt;itcast对象&gt;.prependTo(target);</code></li>\n<li>功能:将 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素,追加到 <code>target</code> 最前边 <code>insertBefore</code></li>\n<li>实现思路<ul>\n<li>统一 <code>target</code> 类型,为 <code>itcast</code> 对象</li>\n<li>定义 <code>node</code> 变量,临时存储被追加的结点.定义 <code>ret</code> 数组,存储所有被追加的节点</li>\n<li>先遍历 <code>target</code> 上的每一个 <code>dom</code> 元素</li>\n<li>定义变量 <code>firstChild</code> ,临时存储当前目标 <code>dom</code> 元素的第一个子节点,再遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历的 <code>dom</code> 是否为 <code>target</code> 上的第一个 <code>dom</code> 元素</li>\n<li>如果为真,此时不需要克隆节点</li>\n<li>否则,要深克隆节点</li>\n<li>将上述的到的节点, <code>push</code> 到 <code>ret</code> 内</li>\n<li>调用 <code>insertBefore</code> 方法追加节点,此时第一个参数为追加新的节点,第二个参数为 <code>firstChild</code> ,在 <code>firstChild</code> 之前追加新节点.</li>\n<li>两层循环结束,操作完成</li>\n<li>将 <code>ret</code> 转换成 <code>itcast</code> 对象,作为 <code>prependTo</code> 方法的返回值,实现链式编程.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">prependTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//定义变量node,临时存储被追加的节点</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> node,</div><div class=\"line\">\t<span class=\"comment\">//定义变量firstChild,临时存储当前dom元素的第一个子节点</span></div><div class=\"line\">\t\tfirstChild,</div><div class=\"line\">\t\tself = <span class=\"keyword\">this</span>,</div><div class=\"line\">\t\t<span class=\"comment\">//定义ret数组,存储所有被追加的节点</span></div><div class=\"line\">\t\tret = [];</div><div class=\"line\">   <span class=\"comment\">//统一类型为itcast对象</span></div><div class=\"line\">\ttarget = itcast(target);</div><div class=\"line\">\t<span class=\"comment\">//遍历target上的每一个dom元素</span></div><div class=\"line\">\ttarget.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, i</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 缓存当前目标dom元素的第一个子节点</span></div><div class=\"line\">\t\tfirstChild = elem.firstChild;</div><div class=\"line\">\t\t<span class=\"comment\">//遍历this上的每一个dom元素</span></div><div class=\"line\">\t\tself.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//判断当前遍历的dom是否为target上的每一个dom元素</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//若为真,则不需要克隆节点,否则,要深克隆节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 将得到的节点赋值给node</span></div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? dom : dom.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">//将节点push到ret内</span></div><div class=\"line\">\t\t\tret.push(node);</div><div class=\"line\">\t\t\t<span class=\"comment\">//调用insertBefore方法,追加节点(追加的新节点,firstChild)</span></div><div class=\"line\">\t\t\telem.insertBefore(node, firstChild);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">    <span class=\"comment\">//将ret作为itcast对象,并且返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"prepend-方法\"><a href=\"#prepend-方法\" class=\"headerlink\" title=\"prepend 方法\"></a>prepend 方法</h2><ol>\n<li>语法: <code>&lt;itcast对象&gt;.prepend(source);</code></li>\n<li>功能:把 <code>source</code> 上的所有的 <code>dom</code> 元素,添加到 <code>this</code> 上的最前边</li>\n<li>实现思路: <ul>\n<li>统一 <code>source</code> 类型,为 <code>itcast</code> 对象</li>\n<li>通过 <code>source</code> 调用 <code>prependTo</code> 方法,将 <code>source</code> 上的所有 <code>dom</code> 添加到 <code>this</code> 上的最前边</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">prepend: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\tsource.prependTo(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"next-方法\"><a href=\"#next-方法\" class=\"headerlink\" title=\"next 方法\"></a>next 方法</h2><ol>\n<li>功能:获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的下一个兄弟元素 <code>(nextSiling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.next();</code> 返回值类型, <code>itcast</code> 对象</li>\n<li>实现思路<ul>\n<li>定义 <code>ret</code> 数组，存储所有 <code>dom</code> 的下一个兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>遍历当前 <code>dom</code> 元素下面的所有兄弟，如果类型为 元素，将此元素存储 <code>ret</code> 内，结束循环。</li>\n<li>两层循环结束，将 <code>ret</code> 转换成 <code>itcast</code> 对象，作为 <code>next</code> 方法的返回值。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 存储所用dom的下一个兄弟元素</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [];</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的所有dom元素</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 在遍历当前dom元素下面所有的兄弟元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> node = <span class=\"keyword\">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前兄弟节点,为元素节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 即为结果,将其添加ret内,并结束循环</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t\tret.push(node);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 将ret转换成itcast对象,返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"nextAll\"><a href=\"#nextAll\" class=\"headerlink\" title=\"nextAll\"></a>nextAll</h2><ol>\n<li>功能:获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素下面的所有兄弟元素 <code>(nextSiling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code> 返回值类型, <code>itcast</code> 对象</li>\n<li>实现思路<ul>\n<li>定义 <code>ret</code> 数组，存储所有 <code>dom</code> 的下一个兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>遍历当前 <code>dom</code> 元素下面的所有兄弟，如果类型为 元素，将此元素存储 <code>ret</code> 内，结束循环。</li>\n<li>两层循环结束，将 <code>ret</code> 转换成 <code>itcast</code> 对象，作为 <code>nextAll</code> 方法的返回值。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">nextAll: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\tnode;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(node = <span class=\"keyword\">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType === <span class=\"number\">1</span>) ret.push(node);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(itcast.unique(ret));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"before-方法\"><a href=\"#before-方法\" class=\"headerlink\" title=\"before 方法\"></a>before 方法</h2><ol>\n<li>功能:</li>\n<li>语法: <code>&lt;itcast对象&gt;.before(source)</code></li>\n<li>实现思路<ul>\n<li>统一 <code>source</code> 类型为 <code>itcast</code> 对象</li>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>再遍历 <code>source</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历 <code>this</code>的 <code>dom</code> 元素的索引是否为0</li>\n<li>如果是 <code>0</code> ,不需要拷贝节点</li>\n<li>否则要深拷贝节点</li>\n<li>先拿到当前遍历 <code>this</code> 的 <code>dom</code> 元素的父节点,调用 <code>insertBefore</code> 方法在其前面添加上面的到的新节点</li>\n<li>两层循环完毕,操作完成</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">before: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> node;</div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom, i</span>) </span>&#123;</div><div class=\"line\">\t\tsource.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? elem : elem.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class=\"line\">\t\t\tdom.parentNode.insertBefore(node, dom);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"after-方法\"><a href=\"#after-方法\" class=\"headerlink\" title=\"after 方法\"></a>after 方法</h2><ol>\n<li>功能:</li>\n<li>语法: <code>&lt;itcast对象&gt;.after(source)</code></li>\n<li>实现思路<ul>\n<li>定义 <code>nextSiling</code> 变量,存储 <code>dom</code> 元素的下一个兄弟节点</li>\n<li>统一 <code>source</code> 类型为 <code>itcast</code> 对象</li>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>再遍历<code>source</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历 <code>this</code> 的 <code>dom</code> 元素的索引是否为 <code>0</code></li>\n<li>如果是 <code>0</code> ,不需要拷贝节点</li>\n<li>否则要深拷贝节点</li>\n<li>先拿到当前遍历 <code>this</code> 的 <code>dom</code> 元素的父节点,调用 <code>insertBefore</code> 方法在其前面添加上面的到的新节点</li>\n<li>两层循环完毕,操作完成</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">after: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> node,</div><div class=\"line\">\t\tnextSibling;</div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom, i</span>) </span>&#123;</div><div class=\"line\">\t\tnextSibling = dom.nextSibling;</div><div class=\"line\">\t\tsource.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? elem : elem.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class=\"line\">\t\t\tdom.parentNode.insertBefore(node, nextSibling);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"unique-方法\"><a href=\"#unique-方法\" class=\"headerlink\" title=\"unique 方法\"></a>unique 方法</h2><ol>\n<li>功能:实现数组元素去重</li>\n<li>语法: <code>var newRet = itcast.unique(arr);</code></li>\n<li>实现思路<ul>\n<li>定义空数组对象 <code>ret</code> .存储去重后的元素</li>\n<li>遍历原数组,如果当前遍历到的元素在 <code>ret</code> 中不存在,就添加 <code>ret</code> 内</li>\n<li>循环结束, <code>ret</code> 存储的就是去重后的元素</li>\n<li>返回 <code>ret</code></li>\n</ul>\n</li>\n<li><a href=\"#code\">兼容IE8 indexof 方法</a><ul>\n<li>首先判断当前浏览器是否支持 <code>indexof</code> 方法</li>\n<li>如果不支持就给数组对象的原型添加 <code>indexof</code> 方法</li>\n<li>遍历 <code>this</code> 上的所有元素</li>\n<li>如果遍历到的当前元素和指定参数值相同就直接返回其索引值.结束循环</li>\n<li>如果在整个上述循环都没有返回值,那么表示不存在指定参数值就返回 <code>-1</code> .</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">unique: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 存储去重后的结果</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [];</div><div class=\"line\">\t<span class=\"comment\">// 遍历原数组arr</span></div><div class=\"line\">\titcast.each(arr, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 判断ret是否存在当前遍历到的元素</span></div><div class=\"line\">\t\t<span class=\"comment\">// 如果不存在将其添加到ret中</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(ret.indexOf(<span class=\"keyword\">this</span>) === <span class=\"number\">-1</span>) ret.push(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 将ret返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p id=\"code\">兼容 <code>IE8</code> <code>indexof</code> 方法</p>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 兼容数组对象的indexOf方法</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果浏览器不支持indexOf方法</span></div><div class=\"line\">\t<span class=\"comment\">// 那么就给数组对象的原型添加indexOf方法</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.prototype.indexOf)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">Array</span>.prototype.indexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 遍历this</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,l = <span class=\"keyword\">this</span>.length; i &lt; l; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 如果遍历到的当前元素和val相同，返回其索引值</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] == val) <span class=\"keyword\">return</span> i;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 那么表示不存在指定参数值就返回 -1 </span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<h2 id=\"prev-方法\"><a href=\"#prev-方法\" class=\"headerlink\" title=\"prev 方法\"></a>prev 方法</h2><ol>\n<li>功能: 获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的前一个兄弟元素 <code>(previousSibling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.prev();</code> 返回值类型: <code>itcast对象</code></li>\n<li>实现思路<ul>\n<li>定义 <code>ret</code> 数组,存储所有 <code>dom</code> 的前一个兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>遍历当前 <code>dom</code> 元素之前的所有兄弟,如果类型为元素,将此元素存储 <code>ret</code> 内,结束循环</li>\n<li>两层循环结束,将 <code>ret</code> 转换成 <code>itcast</code> 对象,作为 <code>next</code> 方法的返回值</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">prev:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//存储所有dom的前一个兄弟元素</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret=[];</div><div class=\"line\">\t<span class=\"comment\">//遍历this上的所有dom元素</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//在遍历当前dom元素之前所有的兄弟元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> node=<span class=\"keyword\">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//如果当前兄弟节点为元素节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//即为结果,将其添加到ret内,并结束循环</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType===<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t\tret.push(node);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">//将ret转换成itcast对象,返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"prevAll-方法\"><a href=\"#prevAll-方法\" class=\"headerlink\" title=\"prevAll 方法\"></a>prevAll 方法</h2><ol>\n<li>功能: 获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的之前的所有兄弟元素 <code>(nextSibling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code> 返回值类型: <code>itcast对象</code></li>\n<li>实现思路<ul>\n<li>定义 <code>ret数组</code> ,存储所有 <code>dom</code> 之前的所有兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom元素</code></li>\n<li>遍历当前 <code>dom</code> 元素之前的所有兄弟,如果类型为元素,将此元素存储 <code>ret</code> 内,结束循环</li>\n<li>两层循环结束,将 <code>ret</code> 转换成 <code>itcast对象</code> ,作为 <code>nextAll</code> 方法的返回值</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">prevAll:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret=[];</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> node=<span class=\"keyword\">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType===<span class=\"number\">1</span>) ret.push(node);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(itcast.unique(ret));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>JQuery模块分析及其实现第四部分属性部分功能及实现,接第三部分!</p>","more":"<h2 id=\"appendTo-方法\"><a href=\"#appendTo-方法\" class=\"headerlink\" title=\"appendTo 方法\"></a>appendTo 方法</h2><ol>\n<li>功能:将结果集中的元素 追加到指定的 <code>dom</code> 元素上.</li>\n<li>语法:<code>&lt;target对象&gt;.appendTo(target)</code></li>\n<li>实现思路<ul>\n<li>定义 <code>appendTo</code> 方法,声明一个形参 <code>target</code> .追加到目标 <code>dom</code> 元素<ul>\n<li>选择器</li>\n<li><code>dom</code> 元素</li>\n<li><code>dom</code> 数组</li>\n</ul>\n</li>\n<li>为了操作方便,将 <code>target</code> 类型统一为 <code>itcast</code> 对象,去 <code>itcast</code> 函数走一圈,出来就是 <code>itcast</code> 对象.</li>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素,再遍历 <code>target</code> 上的每一个 <code>dom</code> 元素</li>\n<li>将 <code>this</code> 上的 <code>dom</code> 元素追加到 <code>target</code> 上</li>\n<li>注意:<br>  在追加节点时,如果遍历的是第一个目标 <code>dom</code> 元素,不需要拷贝节点;否则要深拷贝节点,并将上述得到的节点储存到 <code>ret</code> 内</li>\n<li>将 <code>ret</code> 数组转换成 <code>itcast</code> 对象,作为 <code>appendTo</code> 方法的返回值<ul>\n<li>如果不这样做的话,就会在添加样式时,只有没拷贝的节点有样式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> node, </div><div class=\"line\">\t\tret = [];</div><div class=\"line\">\t<span class=\"comment\">// 统一target类型 为itcast对象（为了方便操作）</span></div><div class=\"line\">\ttarget = itcast(target);</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 在遍历目标dom元素</span></div><div class=\"line\">\t\ttarget.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t, i</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前dom元素为 目标上的第一个.不拷贝节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 否则拷贝节点</span></div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? v : v.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将被追加的节点,添加到ret内</span></div><div class=\"line\">\t\t\tret.push(node);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将节点追加到指定的目标dom元素上.</span></div><div class=\"line\">\t\t\tt.appendChild(node);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 将每一个添加的dom元素,转换成itcast对象返回,实现链式编程</span></div><div class=\"line\">\t<span class=\"comment\">// 原因:在添加样式时,如果不这样做的话,只会给没克隆的节点添加样式.</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"append-方法\"><a href=\"#append-方法\" class=\"headerlink\" title=\"append 方法\"></a>append 方法</h2><ol>\n<li>语法: <code>&lt;itcast对象&gt;.append(source)</code> ;</li>\n<li>功能: 将 <code>source</code> 上的所有 <code>dom</code> 元素,追加到 <code>itcast</code> 对象上</li>\n<li>实现思路<ul>\n<li>统一 <code>source</code> 类型,为 <code>itcast</code> 对象.</li>\n<li><code>source.appendTo(this)</code></li>\n<li><code>return this;</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">append: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//统一source类型,为itcast对象</span></div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\tsource.appendTo(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"prependTo-方法\"><a href=\"#prependTo-方法\" class=\"headerlink\" title=\"prependTo 方法\"></a>prependTo 方法</h2><ol>\n<li>语法: <code>&lt;itcast对象&gt;.prependTo(target);</code></li>\n<li>功能:将 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素,追加到 <code>target</code> 最前边 <code>insertBefore</code></li>\n<li>实现思路<ul>\n<li>统一 <code>target</code> 类型,为 <code>itcast</code> 对象</li>\n<li>定义 <code>node</code> 变量,临时存储被追加的结点.定义 <code>ret</code> 数组,存储所有被追加的节点</li>\n<li>先遍历 <code>target</code> 上的每一个 <code>dom</code> 元素</li>\n<li>定义变量 <code>firstChild</code> ,临时存储当前目标 <code>dom</code> 元素的第一个子节点,再遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历的 <code>dom</code> 是否为 <code>target</code> 上的第一个 <code>dom</code> 元素</li>\n<li>如果为真,此时不需要克隆节点</li>\n<li>否则,要深克隆节点</li>\n<li>将上述的到的节点, <code>push</code> 到 <code>ret</code> 内</li>\n<li>调用 <code>insertBefore</code> 方法追加节点,此时第一个参数为追加新的节点,第二个参数为 <code>firstChild</code> ,在 <code>firstChild</code> 之前追加新节点.</li>\n<li>两层循环结束,操作完成</li>\n<li>将 <code>ret</code> 转换成 <code>itcast</code> 对象,作为 <code>prependTo</code> 方法的返回值,实现链式编程.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">prependTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//定义变量node,临时存储被追加的节点</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> node,</div><div class=\"line\">\t<span class=\"comment\">//定义变量firstChild,临时存储当前dom元素的第一个子节点</span></div><div class=\"line\">\t\tfirstChild,</div><div class=\"line\">\t\tself = <span class=\"keyword\">this</span>,</div><div class=\"line\">\t\t<span class=\"comment\">//定义ret数组,存储所有被追加的节点</span></div><div class=\"line\">\t\tret = [];</div><div class=\"line\">   <span class=\"comment\">//统一类型为itcast对象</span></div><div class=\"line\">\ttarget = itcast(target);</div><div class=\"line\">\t<span class=\"comment\">//遍历target上的每一个dom元素</span></div><div class=\"line\">\ttarget.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, i</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 缓存当前目标dom元素的第一个子节点</span></div><div class=\"line\">\t\tfirstChild = elem.firstChild;</div><div class=\"line\">\t\t<span class=\"comment\">//遍历this上的每一个dom元素</span></div><div class=\"line\">\t\tself.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//判断当前遍历的dom是否为target上的每一个dom元素</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//若为真,则不需要克隆节点,否则,要深克隆节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 将得到的节点赋值给node</span></div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? dom : dom.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">//将节点push到ret内</span></div><div class=\"line\">\t\t\tret.push(node);</div><div class=\"line\">\t\t\t<span class=\"comment\">//调用insertBefore方法,追加节点(追加的新节点,firstChild)</span></div><div class=\"line\">\t\t\telem.insertBefore(node, firstChild);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">    <span class=\"comment\">//将ret作为itcast对象,并且返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"prepend-方法\"><a href=\"#prepend-方法\" class=\"headerlink\" title=\"prepend 方法\"></a>prepend 方法</h2><ol>\n<li>语法: <code>&lt;itcast对象&gt;.prepend(source);</code></li>\n<li>功能:把 <code>source</code> 上的所有的 <code>dom</code> 元素,添加到 <code>this</code> 上的最前边</li>\n<li>实现思路: <ul>\n<li>统一 <code>source</code> 类型,为 <code>itcast</code> 对象</li>\n<li>通过 <code>source</code> 调用 <code>prependTo</code> 方法,将 <code>source</code> 上的所有 <code>dom</code> 添加到 <code>this</code> 上的最前边</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">prepend: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\tsource.prependTo(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"next-方法\"><a href=\"#next-方法\" class=\"headerlink\" title=\"next 方法\"></a>next 方法</h2><ol>\n<li>功能:获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的下一个兄弟元素 <code>(nextSiling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.next();</code> 返回值类型, <code>itcast</code> 对象</li>\n<li>实现思路<ul>\n<li>定义 <code>ret</code> 数组，存储所有 <code>dom</code> 的下一个兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>遍历当前 <code>dom</code> 元素下面的所有兄弟，如果类型为 元素，将此元素存储 <code>ret</code> 内，结束循环。</li>\n<li>两层循环结束，将 <code>ret</code> 转换成 <code>itcast</code> 对象，作为 <code>next</code> 方法的返回值。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 存储所用dom的下一个兄弟元素</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [];</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的所有dom元素</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 在遍历当前dom元素下面所有的兄弟元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> node = <span class=\"keyword\">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前兄弟节点,为元素节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 即为结果,将其添加ret内,并结束循环</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t\tret.push(node);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 将ret转换成itcast对象,返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"nextAll\"><a href=\"#nextAll\" class=\"headerlink\" title=\"nextAll\"></a>nextAll</h2><ol>\n<li>功能:获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素下面的所有兄弟元素 <code>(nextSiling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code> 返回值类型, <code>itcast</code> 对象</li>\n<li>实现思路<ul>\n<li>定义 <code>ret</code> 数组，存储所有 <code>dom</code> 的下一个兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>遍历当前 <code>dom</code> 元素下面的所有兄弟，如果类型为 元素，将此元素存储 <code>ret</code> 内，结束循环。</li>\n<li>两层循环结束，将 <code>ret</code> 转换成 <code>itcast</code> 对象，作为 <code>nextAll</code> 方法的返回值。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">nextAll: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\tnode;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(node = <span class=\"keyword\">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType === <span class=\"number\">1</span>) ret.push(node);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(itcast.unique(ret));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"before-方法\"><a href=\"#before-方法\" class=\"headerlink\" title=\"before 方法\"></a>before 方法</h2><ol>\n<li>功能:</li>\n<li>语法: <code>&lt;itcast对象&gt;.before(source)</code></li>\n<li>实现思路<ul>\n<li>统一 <code>source</code> 类型为 <code>itcast</code> 对象</li>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>再遍历 <code>source</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历 <code>this</code>的 <code>dom</code> 元素的索引是否为0</li>\n<li>如果是 <code>0</code> ,不需要拷贝节点</li>\n<li>否则要深拷贝节点</li>\n<li>先拿到当前遍历 <code>this</code> 的 <code>dom</code> 元素的父节点,调用 <code>insertBefore</code> 方法在其前面添加上面的到的新节点</li>\n<li>两层循环完毕,操作完成</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">before: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> node;</div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom, i</span>) </span>&#123;</div><div class=\"line\">\t\tsource.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? elem : elem.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class=\"line\">\t\t\tdom.parentNode.insertBefore(node, dom);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"after-方法\"><a href=\"#after-方法\" class=\"headerlink\" title=\"after 方法\"></a>after 方法</h2><ol>\n<li>功能:</li>\n<li>语法: <code>&lt;itcast对象&gt;.after(source)</code></li>\n<li>实现思路<ul>\n<li>定义 <code>nextSiling</code> 变量,存储 <code>dom</code> 元素的下一个兄弟节点</li>\n<li>统一 <code>source</code> 类型为 <code>itcast</code> 对象</li>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>再遍历<code>source</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历 <code>this</code> 的 <code>dom</code> 元素的索引是否为 <code>0</code></li>\n<li>如果是 <code>0</code> ,不需要拷贝节点</li>\n<li>否则要深拷贝节点</li>\n<li>先拿到当前遍历 <code>this</code> 的 <code>dom</code> 元素的父节点,调用 <code>insertBefore</code> 方法在其前面添加上面的到的新节点</li>\n<li>两层循环完毕,操作完成</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">after: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> node,</div><div class=\"line\">\t\tnextSibling;</div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom, i</span>) </span>&#123;</div><div class=\"line\">\t\tnextSibling = dom.nextSibling;</div><div class=\"line\">\t\tsource.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? elem : elem.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class=\"line\">\t\t\tdom.parentNode.insertBefore(node, nextSibling);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"unique-方法\"><a href=\"#unique-方法\" class=\"headerlink\" title=\"unique 方法\"></a>unique 方法</h2><ol>\n<li>功能:实现数组元素去重</li>\n<li>语法: <code>var newRet = itcast.unique(arr);</code></li>\n<li>实现思路<ul>\n<li>定义空数组对象 <code>ret</code> .存储去重后的元素</li>\n<li>遍历原数组,如果当前遍历到的元素在 <code>ret</code> 中不存在,就添加 <code>ret</code> 内</li>\n<li>循环结束, <code>ret</code> 存储的就是去重后的元素</li>\n<li>返回 <code>ret</code></li>\n</ul>\n</li>\n<li><a href=\"#code\">兼容IE8 indexof 方法</a><ul>\n<li>首先判断当前浏览器是否支持 <code>indexof</code> 方法</li>\n<li>如果不支持就给数组对象的原型添加 <code>indexof</code> 方法</li>\n<li>遍历 <code>this</code> 上的所有元素</li>\n<li>如果遍历到的当前元素和指定参数值相同就直接返回其索引值.结束循环</li>\n<li>如果在整个上述循环都没有返回值,那么表示不存在指定参数值就返回 <code>-1</code> .</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">unique: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 存储去重后的结果</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [];</div><div class=\"line\">\t<span class=\"comment\">// 遍历原数组arr</span></div><div class=\"line\">\titcast.each(arr, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 判断ret是否存在当前遍历到的元素</span></div><div class=\"line\">\t\t<span class=\"comment\">// 如果不存在将其添加到ret中</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(ret.indexOf(<span class=\"keyword\">this</span>) === <span class=\"number\">-1</span>) ret.push(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 将ret返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p id=\"code\">兼容 <code>IE8</code> <code>indexof</code> 方法</p>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 兼容数组对象的indexOf方法</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果浏览器不支持indexOf方法</span></div><div class=\"line\">\t<span class=\"comment\">// 那么就给数组对象的原型添加indexOf方法</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.prototype.indexOf)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">Array</span>.prototype.indexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 遍历this</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,l = <span class=\"keyword\">this</span>.length; i &lt; l; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 如果遍历到的当前元素和val相同，返回其索引值</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] == val) <span class=\"keyword\">return</span> i;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 那么表示不存在指定参数值就返回 -1 </span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<h2 id=\"prev-方法\"><a href=\"#prev-方法\" class=\"headerlink\" title=\"prev 方法\"></a>prev 方法</h2><ol>\n<li>功能: 获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的前一个兄弟元素 <code>(previousSibling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.prev();</code> 返回值类型: <code>itcast对象</code></li>\n<li>实现思路<ul>\n<li>定义 <code>ret</code> 数组,存储所有 <code>dom</code> 的前一个兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>遍历当前 <code>dom</code> 元素之前的所有兄弟,如果类型为元素,将此元素存储 <code>ret</code> 内,结束循环</li>\n<li>两层循环结束,将 <code>ret</code> 转换成 <code>itcast</code> 对象,作为 <code>next</code> 方法的返回值</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">prev:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//存储所有dom的前一个兄弟元素</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret=[];</div><div class=\"line\">\t<span class=\"comment\">//遍历this上的所有dom元素</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//在遍历当前dom元素之前所有的兄弟元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> node=<span class=\"keyword\">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//如果当前兄弟节点为元素节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//即为结果,将其添加到ret内,并结束循环</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType===<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t\tret.push(node);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">//将ret转换成itcast对象,返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"prevAll-方法\"><a href=\"#prevAll-方法\" class=\"headerlink\" title=\"prevAll 方法\"></a>prevAll 方法</h2><ol>\n<li>功能: 获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的之前的所有兄弟元素 <code>(nextSibling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code> 返回值类型: <code>itcast对象</code></li>\n<li>实现思路<ul>\n<li>定义 <code>ret数组</code> ,存储所有 <code>dom</code> 之前的所有兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom元素</code></li>\n<li>遍历当前 <code>dom</code> 元素之前的所有兄弟,如果类型为元素,将此元素存储 <code>ret</code> 内,结束循环</li>\n<li>两层循环结束,将 <code>ret</code> 转换成 <code>itcast对象</code> ,作为 <code>nextAll</code> 方法的返回值</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">prevAll:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret=[];</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> node=<span class=\"keyword\">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType===<span class=\"number\">1</span>) ret.push(node);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(itcast.unique(ret));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JQuery分析及实现part7之 Ajax 模块功能及实现","date":"2016-11-25T13:31:12.000Z","_content":"\nJQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!\n\n<!-- more -->\n\n## Ajax 请求流程\n\n1. 创建一个请求对象\n\n```js\nfunction createRequest() {\n\treturn window.XMLHttpRequest ? new window.XMLHttpRequest() : \n\t\tnew ActiveXObject('Microsoft.XMLHTTP');\n}\n\nvar xhr = createRequest();\nconsole.log(xhr);\n```\n\n2. 格式化数据\n\t* 将格式化后的数据,参数与值都要重新编码\n\n```js\nfunction formatData(data){\n    var ret = [];\n    for(var k in data){\n        ret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));\n    }\n\t\t// 如果不想从服务器缓存中读取数据\n\tret.push(('_=' + Math.random()).replace('.', ''));\n    return ret.join('&');\n}\nvar data = {name: '梦魇小栈',age: 2,url:'http://blog.ihoey.com'};\nconsole.log(formatData(data));//name=%E6%A2%A6%E9%AD%87%E5%B0%8F%E6%A0%88&age=2&url=http%3A%2F%2Fblog.ihoey.com\n```\n\n3. 与服务器建立连接\n4. 监听请求状态\n5. 发送请求\n6. 封装\n\n```js\n<script>\n\t// 默认配置信息\n\tajaxSetting = {\n\t\turl: '',\n\t\ttype: 'GET',\n\t\tdataType: 'text',\n\t\tcontentType: 'application/x-www-form-urlencoded',\n\t\tdata: null,\n\t\tasync: true,\n\t\tsuccess: null,\n\t\tfail: null\n\t};\n\n\tfunction createRequest() {\n\t\treturn window.XMLHttpRequest ? new window.XMLHttpRequest() : \n\t\t\tnew ActiveXObject('Microsoft.XMLHTTP');\n\t}\n\n\tfunction formatData(data) {\n\t\tvar ret = [];\n\t\tfor(var k in data){\n\t\t\tret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));\n\t\t}\n\t\t// 如果不想从服务器缓存中读取数据\n\t\tret.push(('_=' + Math.random()).replace('.', ''));\n\t\treturn ret.join('&');\n\t}\n\n\tfunction ajax(config) {\n\t\tvar context = {}, \n\t\t\txhr, \n\t\t\tpostData = '';\n\t\t// 过滤无效参数\n\t\tif(!config || !config.url) {\n\t\t\tconsole.warn(\"参数异常\");\n\t\t\treturn;\n\t\t}\n\t\t// debugger;\n\t\t// 获取默认配置信息\n\t\titcast.extend(ajaxSetting, context);\n\t\t// 用户的配置覆盖默认配置\n\t\titcast.extend(config, context);\n\t\t// 1: 创建请求对象\n\t\txhr = createRequest();\n\t\t// 2：格式化数据\n\t\tif(context.data){\n\t\t\tpostData = formatData(context.data);\n\t\t}\n\t\t// 3：与服务器建立连接\n\t\tif(context.type.toUpperCase() === 'GET'){\n\t\t\txhr.open('GET', context.url + '?' + postData, context.async);\n\t\t\tpostData = null;\n\t\t} else {\n\t\t\t// 模拟表单提交，设置请求头信息\n\t\t\txhr.setRequestHeader('Content-Type', context.contentType);\n\t\t\txhr.open('POST', context.url, context.async);\t\t\t\t\n\t\t}\n\t\t// 4：监听请求状态\n\t\txhr.onreadystatechange = function() {\n\t\t\tif(xhr.readyState === 4){\n\t\t\t\tif(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304){\n\t\t\t\t\t// 获取到请求回来的数据\n\t\t\t\t\tvar text = xhr.responseText;\n\t\t\t\t\t// 如果指定的数据格式为 json，那就将其转换为json对象\n\t\t\t\t\ttext = context.dataType.toLowerCase() === 'json' ?\n\t\t\t\t\t\tJSON.parse(text) : text;\n\n\t\t\t\t\tcontext.success && context.success(text);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.fail && context.fail({\"errorCode\": xhr.status, \"message\": \"请求超时.\"});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// 5: 发送请求\n\t\txhr.send(postData);\n\t\t// context.success && context.success(JSON.parse(xhr.responseText));\n\t}\n</script>\n<script>\n\tajax({\n\t\turl: 'data.json',\n\t\tdataType: 'json',\n\t\tasync: false,\n\t\tsuccess: function(data) {\n\t\t\tdocument.getElementById('content').innerHTML= '<p>' + data.username + '</p>' +\n\t\t\t\t\t'<p>' + data.age + '</p>';\n\t\t},\n\t\tfail: function(er) {\n\t\t\tconsole.log(er.errorCode);\n\t\t}\n\t});\n</script>\n```\n## Jsonp 请求\n\n1. 跨域 只能发送 `GET` 请求 . 一种不安全的请求方式\n2. 原理:由于 `dom` 元素的 `src` 属性,具有跨域功能. 在实现跨域请求时,为了方便就使用 `script` 标签来做.\n3. 流程\n\t* 创建请求对象,就是创建一个 `script` 标签\n\t* 将上述创建的 `script` 标签添加到页面的 `head` 标签下\n\t* 格式化数据\n\t* 创建全局回调函数\n\t* 设置超时时间,如果超过此时间,也没有得到数据,表示请求失败.否则,请求成功\n\t* 发送请求: 指定 `script` 标签的 `src` 属性值\n \n\n","source":"_posts/javascript-jquery-part7.md","raw":"---\ntitle: JQuery分析及实现part7之 Ajax 模块功能及实现\ndate: 2016-11-25 21:31:12\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!\n\n<!-- more -->\n\n## Ajax 请求流程\n\n1. 创建一个请求对象\n\n```js\nfunction createRequest() {\n\treturn window.XMLHttpRequest ? new window.XMLHttpRequest() : \n\t\tnew ActiveXObject('Microsoft.XMLHTTP');\n}\n\nvar xhr = createRequest();\nconsole.log(xhr);\n```\n\n2. 格式化数据\n\t* 将格式化后的数据,参数与值都要重新编码\n\n```js\nfunction formatData(data){\n    var ret = [];\n    for(var k in data){\n        ret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));\n    }\n\t\t// 如果不想从服务器缓存中读取数据\n\tret.push(('_=' + Math.random()).replace('.', ''));\n    return ret.join('&');\n}\nvar data = {name: '梦魇小栈',age: 2,url:'http://blog.ihoey.com'};\nconsole.log(formatData(data));//name=%E6%A2%A6%E9%AD%87%E5%B0%8F%E6%A0%88&age=2&url=http%3A%2F%2Fblog.ihoey.com\n```\n\n3. 与服务器建立连接\n4. 监听请求状态\n5. 发送请求\n6. 封装\n\n```js\n<script>\n\t// 默认配置信息\n\tajaxSetting = {\n\t\turl: '',\n\t\ttype: 'GET',\n\t\tdataType: 'text',\n\t\tcontentType: 'application/x-www-form-urlencoded',\n\t\tdata: null,\n\t\tasync: true,\n\t\tsuccess: null,\n\t\tfail: null\n\t};\n\n\tfunction createRequest() {\n\t\treturn window.XMLHttpRequest ? new window.XMLHttpRequest() : \n\t\t\tnew ActiveXObject('Microsoft.XMLHTTP');\n\t}\n\n\tfunction formatData(data) {\n\t\tvar ret = [];\n\t\tfor(var k in data){\n\t\t\tret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));\n\t\t}\n\t\t// 如果不想从服务器缓存中读取数据\n\t\tret.push(('_=' + Math.random()).replace('.', ''));\n\t\treturn ret.join('&');\n\t}\n\n\tfunction ajax(config) {\n\t\tvar context = {}, \n\t\t\txhr, \n\t\t\tpostData = '';\n\t\t// 过滤无效参数\n\t\tif(!config || !config.url) {\n\t\t\tconsole.warn(\"参数异常\");\n\t\t\treturn;\n\t\t}\n\t\t// debugger;\n\t\t// 获取默认配置信息\n\t\titcast.extend(ajaxSetting, context);\n\t\t// 用户的配置覆盖默认配置\n\t\titcast.extend(config, context);\n\t\t// 1: 创建请求对象\n\t\txhr = createRequest();\n\t\t// 2：格式化数据\n\t\tif(context.data){\n\t\t\tpostData = formatData(context.data);\n\t\t}\n\t\t// 3：与服务器建立连接\n\t\tif(context.type.toUpperCase() === 'GET'){\n\t\t\txhr.open('GET', context.url + '?' + postData, context.async);\n\t\t\tpostData = null;\n\t\t} else {\n\t\t\t// 模拟表单提交，设置请求头信息\n\t\t\txhr.setRequestHeader('Content-Type', context.contentType);\n\t\t\txhr.open('POST', context.url, context.async);\t\t\t\t\n\t\t}\n\t\t// 4：监听请求状态\n\t\txhr.onreadystatechange = function() {\n\t\t\tif(xhr.readyState === 4){\n\t\t\t\tif(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304){\n\t\t\t\t\t// 获取到请求回来的数据\n\t\t\t\t\tvar text = xhr.responseText;\n\t\t\t\t\t// 如果指定的数据格式为 json，那就将其转换为json对象\n\t\t\t\t\ttext = context.dataType.toLowerCase() === 'json' ?\n\t\t\t\t\t\tJSON.parse(text) : text;\n\n\t\t\t\t\tcontext.success && context.success(text);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.fail && context.fail({\"errorCode\": xhr.status, \"message\": \"请求超时.\"});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// 5: 发送请求\n\t\txhr.send(postData);\n\t\t// context.success && context.success(JSON.parse(xhr.responseText));\n\t}\n</script>\n<script>\n\tajax({\n\t\turl: 'data.json',\n\t\tdataType: 'json',\n\t\tasync: false,\n\t\tsuccess: function(data) {\n\t\t\tdocument.getElementById('content').innerHTML= '<p>' + data.username + '</p>' +\n\t\t\t\t\t'<p>' + data.age + '</p>';\n\t\t},\n\t\tfail: function(er) {\n\t\t\tconsole.log(er.errorCode);\n\t\t}\n\t});\n</script>\n```\n## Jsonp 请求\n\n1. 跨域 只能发送 `GET` 请求 . 一种不安全的请求方式\n2. 原理:由于 `dom` 元素的 `src` 属性,具有跨域功能. 在实现跨域请求时,为了方便就使用 `script` 标签来做.\n3. 流程\n\t* 创建请求对象,就是创建一个 `script` 标签\n\t* 将上述创建的 `script` 标签添加到页面的 `head` 标签下\n\t* 格式化数据\n\t* 创建全局回调函数\n\t* 设置超时时间,如果超过此时间,也没有得到数据,表示请求失败.否则,请求成功\n\t* 发送请求: 指定 `script` 标签的 `src` 属性值\n \n\n","slug":"javascript-jquery-part7","published":1,"updated":"2016-11-27T02:31:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvom002auwg73fpwgm9a","content":"<p>JQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!</p>\n<a id=\"more\"></a>\n<h2 id=\"Ajax-请求流程\"><a href=\"#Ajax-请求流程\" class=\"headerlink\" title=\"Ajax 请求流程\"></a>Ajax 请求流程</h2><ol>\n<li>创建一个请求对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRequest</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.XMLHttpRequest ? <span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.XMLHttpRequest() : </div><div class=\"line\">\t\t<span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> xhr = createRequest();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(xhr);</div></pre></td></tr></table></figure>\n<ol>\n<li>格式化数据<ul>\n<li>将格式化后的数据,参数与值都要重新编码</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatData</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = [];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> data)&#123;</div><div class=\"line\">        ret.push(<span class=\"built_in\">window</span>.encodeURIComponent(k) + <span class=\"string\">'='</span> + <span class=\"built_in\">window</span>.encodeURIComponent(data[k]));</div><div class=\"line\">    &#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果不想从服务器缓存中读取数据</span></div><div class=\"line\">\tret.push((<span class=\"string\">'_='</span> + <span class=\"built_in\">Math</span>.random()).replace(<span class=\"string\">'.'</span>, <span class=\"string\">''</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> ret.join(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'梦魇小栈'</span>,<span class=\"attr\">age</span>: <span class=\"number\">2</span>,<span class=\"attr\">url</span>:<span class=\"string\">'http://blog.ihoey.com'</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(formatData(data));<span class=\"comment\">//name=%E6%A2%A6%E9%AD%87%E5%B0%8F%E6%A0%88&amp;age=2&amp;url=http%3A%2F%2Fblog.ihoey.com</span></div></pre></td></tr></table></figure>\n<ol>\n<li>与服务器建立连接</li>\n<li>监听请求状态</li>\n<li>发送请求</li>\n<li>封装</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\t// 默认配置信息</div><div class=\"line\">\tajaxSetting = &#123;</div><div class=\"line\">\t\turl: '',</div><div class=\"line\">\t\ttype: 'GET',</div><div class=\"line\">\t\tdataType: 'text',</div><div class=\"line\">\t\tcontentType: 'application/x-www-form-urlencoded',</div><div class=\"line\">\t\tdata: null,</div><div class=\"line\">\t\tasync: true,</div><div class=\"line\">\t\tsuccess: null,</div><div class=\"line\">\t\tfail: null</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\tfunction createRequest() &#123;</div><div class=\"line\">\t\treturn window.XMLHttpRequest ? new window.XMLHttpRequest() : </div><div class=\"line\">\t\t\tnew ActiveXObject('Microsoft.XMLHTTP');</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfunction formatData(data) &#123;</div><div class=\"line\">\t\tvar ret = [];</div><div class=\"line\">\t\tfor(var k in data)&#123;</div><div class=\"line\">\t\t\tret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 如果不想从服务器缓存中读取数据</div><div class=\"line\">\t\tret.push(('_=' + Math.random()).replace('.', ''));</div><div class=\"line\">\t\treturn ret.join('&amp;');</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfunction ajax(config) &#123;</div><div class=\"line\">\t\tvar context = &#123;&#125;, </div><div class=\"line\">\t\t\txhr, </div><div class=\"line\">\t\t\tpostData = '';</div><div class=\"line\">\t\t// 过滤无效参数</div><div class=\"line\">\t\tif(!config || !config.url) &#123;</div><div class=\"line\">\t\t\tconsole.warn(\"参数异常\");</div><div class=\"line\">\t\t\treturn;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// debugger;</div><div class=\"line\">\t\t// 获取默认配置信息</div><div class=\"line\">\t\titcast.extend(ajaxSetting, context);</div><div class=\"line\">\t\t// 用户的配置覆盖默认配置</div><div class=\"line\">\t\titcast.extend(config, context);</div><div class=\"line\">\t\t// 1: 创建请求对象</div><div class=\"line\">\t\txhr = createRequest();</div><div class=\"line\">\t\t// 2：格式化数据</div><div class=\"line\">\t\tif(context.data)&#123;</div><div class=\"line\">\t\t\tpostData = formatData(context.data);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 3：与服务器建立连接</div><div class=\"line\">\t\tif(context.type.toUpperCase() === 'GET')&#123;</div><div class=\"line\">\t\t\txhr.open('GET', context.url + '?' + postData, context.async);</div><div class=\"line\">\t\t\tpostData = null;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t// 模拟表单提交，设置请求头信息</div><div class=\"line\">\t\t\txhr.setRequestHeader('Content-Type', context.contentType);</div><div class=\"line\">\t\t\txhr.open('POST', context.url, context.async);\t\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 4：监听请求状态</div><div class=\"line\">\t\txhr.onreadystatechange = function() &#123;</div><div class=\"line\">\t\t\tif(xhr.readyState === 4)&#123;</div><div class=\"line\">\t\t\t\tif(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status === 304)&#123;</div><div class=\"line\">\t\t\t\t\t// 获取到请求回来的数据</div><div class=\"line\">\t\t\t\t\tvar text = xhr.responseText;</div><div class=\"line\">\t\t\t\t\t// 如果指定的数据格式为 json，那就将其转换为json对象</div><div class=\"line\">\t\t\t\t\ttext = context.dataType.toLowerCase() === 'json' ?</div><div class=\"line\">\t\t\t\t\t\tJSON.parse(text) : text;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\tcontext.success &amp;&amp; context.success(text);</div><div class=\"line\">\t\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\t\tcontext.fail &amp;&amp; context.fail(&#123;\"errorCode\": xhr.status, \"message\": \"请求超时.\"&#125;);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t// 5: 发送请求</div><div class=\"line\">\t\txhr.send(postData);</div><div class=\"line\">\t\t// context.success &amp;&amp; context.success(JSON.parse(xhr.responseText));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\tajax(&#123;</div><div class=\"line\">\t\turl: 'data.json',</div><div class=\"line\">\t\tdataType: 'json',</div><div class=\"line\">\t\tasync: false,</div><div class=\"line\">\t\tsuccess: function(data) &#123;</div><div class=\"line\">\t\t\tdocument.getElementById('content').innerHTML= '&lt;p&gt;' + data.username + '&lt;/p&gt;' +</div><div class=\"line\">\t\t\t\t\t'&lt;p&gt;' + data.age + '&lt;/p&gt;';</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tfail: function(er) &#123;</div><div class=\"line\">\t\t\tconsole.log(er.errorCode);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Jsonp-请求\"><a href=\"#Jsonp-请求\" class=\"headerlink\" title=\"Jsonp 请求\"></a>Jsonp 请求</h2><ol>\n<li>跨域 只能发送 <code>GET</code> 请求 . 一种不安全的请求方式</li>\n<li>原理:由于 <code>dom</code> 元素的 <code>src</code> 属性,具有跨域功能. 在实现跨域请求时,为了方便就使用 <code>script</code> 标签来做.</li>\n<li>流程<ul>\n<li>创建请求对象,就是创建一个 <code>script</code> 标签</li>\n<li>将上述创建的 <code>script</code> 标签添加到页面的 <code>head</code> 标签下</li>\n<li>格式化数据</li>\n<li>创建全局回调函数</li>\n<li>设置超时时间,如果超过此时间,也没有得到数据,表示请求失败.否则,请求成功</li>\n<li>发送请求: 指定 <code>script</code> 标签的 <code>src</code> 属性值</li>\n</ul>\n</li>\n</ol>\n","excerpt":"<p>JQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!</p>","more":"<h2 id=\"Ajax-请求流程\"><a href=\"#Ajax-请求流程\" class=\"headerlink\" title=\"Ajax 请求流程\"></a>Ajax 请求流程</h2><ol>\n<li>创建一个请求对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRequest</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.XMLHttpRequest ? <span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.XMLHttpRequest() : </div><div class=\"line\">\t\t<span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> xhr = createRequest();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(xhr);</div></pre></td></tr></table></figure>\n<ol>\n<li>格式化数据<ul>\n<li>将格式化后的数据,参数与值都要重新编码</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatData</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = [];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> data)&#123;</div><div class=\"line\">        ret.push(<span class=\"built_in\">window</span>.encodeURIComponent(k) + <span class=\"string\">'='</span> + <span class=\"built_in\">window</span>.encodeURIComponent(data[k]));</div><div class=\"line\">    &#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果不想从服务器缓存中读取数据</span></div><div class=\"line\">\tret.push((<span class=\"string\">'_='</span> + <span class=\"built_in\">Math</span>.random()).replace(<span class=\"string\">'.'</span>, <span class=\"string\">''</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> ret.join(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'梦魇小栈'</span>,<span class=\"attr\">age</span>: <span class=\"number\">2</span>,<span class=\"attr\">url</span>:<span class=\"string\">'http://blog.ihoey.com'</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(formatData(data));<span class=\"comment\">//name=%E6%A2%A6%E9%AD%87%E5%B0%8F%E6%A0%88&amp;age=2&amp;url=http%3A%2F%2Fblog.ihoey.com</span></div></pre></td></tr></table></figure>\n<ol>\n<li>与服务器建立连接</li>\n<li>监听请求状态</li>\n<li>发送请求</li>\n<li>封装</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\t// 默认配置信息</div><div class=\"line\">\tajaxSetting = &#123;</div><div class=\"line\">\t\turl: '',</div><div class=\"line\">\t\ttype: 'GET',</div><div class=\"line\">\t\tdataType: 'text',</div><div class=\"line\">\t\tcontentType: 'application/x-www-form-urlencoded',</div><div class=\"line\">\t\tdata: null,</div><div class=\"line\">\t\tasync: true,</div><div class=\"line\">\t\tsuccess: null,</div><div class=\"line\">\t\tfail: null</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\tfunction createRequest() &#123;</div><div class=\"line\">\t\treturn window.XMLHttpRequest ? new window.XMLHttpRequest() : </div><div class=\"line\">\t\t\tnew ActiveXObject('Microsoft.XMLHTTP');</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfunction formatData(data) &#123;</div><div class=\"line\">\t\tvar ret = [];</div><div class=\"line\">\t\tfor(var k in data)&#123;</div><div class=\"line\">\t\t\tret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 如果不想从服务器缓存中读取数据</div><div class=\"line\">\t\tret.push(('_=' + Math.random()).replace('.', ''));</div><div class=\"line\">\t\treturn ret.join('&amp;');</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfunction ajax(config) &#123;</div><div class=\"line\">\t\tvar context = &#123;&#125;, </div><div class=\"line\">\t\t\txhr, </div><div class=\"line\">\t\t\tpostData = '';</div><div class=\"line\">\t\t// 过滤无效参数</div><div class=\"line\">\t\tif(!config || !config.url) &#123;</div><div class=\"line\">\t\t\tconsole.warn(\"参数异常\");</div><div class=\"line\">\t\t\treturn;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// debugger;</div><div class=\"line\">\t\t// 获取默认配置信息</div><div class=\"line\">\t\titcast.extend(ajaxSetting, context);</div><div class=\"line\">\t\t// 用户的配置覆盖默认配置</div><div class=\"line\">\t\titcast.extend(config, context);</div><div class=\"line\">\t\t// 1: 创建请求对象</div><div class=\"line\">\t\txhr = createRequest();</div><div class=\"line\">\t\t// 2：格式化数据</div><div class=\"line\">\t\tif(context.data)&#123;</div><div class=\"line\">\t\t\tpostData = formatData(context.data);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 3：与服务器建立连接</div><div class=\"line\">\t\tif(context.type.toUpperCase() === 'GET')&#123;</div><div class=\"line\">\t\t\txhr.open('GET', context.url + '?' + postData, context.async);</div><div class=\"line\">\t\t\tpostData = null;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t// 模拟表单提交，设置请求头信息</div><div class=\"line\">\t\t\txhr.setRequestHeader('Content-Type', context.contentType);</div><div class=\"line\">\t\t\txhr.open('POST', context.url, context.async);\t\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 4：监听请求状态</div><div class=\"line\">\t\txhr.onreadystatechange = function() &#123;</div><div class=\"line\">\t\t\tif(xhr.readyState === 4)&#123;</div><div class=\"line\">\t\t\t\tif(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status === 304)&#123;</div><div class=\"line\">\t\t\t\t\t// 获取到请求回来的数据</div><div class=\"line\">\t\t\t\t\tvar text = xhr.responseText;</div><div class=\"line\">\t\t\t\t\t// 如果指定的数据格式为 json，那就将其转换为json对象</div><div class=\"line\">\t\t\t\t\ttext = context.dataType.toLowerCase() === 'json' ?</div><div class=\"line\">\t\t\t\t\t\tJSON.parse(text) : text;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\tcontext.success &amp;&amp; context.success(text);</div><div class=\"line\">\t\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\t\tcontext.fail &amp;&amp; context.fail(&#123;\"errorCode\": xhr.status, \"message\": \"请求超时.\"&#125;);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t// 5: 发送请求</div><div class=\"line\">\t\txhr.send(postData);</div><div class=\"line\">\t\t// context.success &amp;&amp; context.success(JSON.parse(xhr.responseText));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\tajax(&#123;</div><div class=\"line\">\t\turl: 'data.json',</div><div class=\"line\">\t\tdataType: 'json',</div><div class=\"line\">\t\tasync: false,</div><div class=\"line\">\t\tsuccess: function(data) &#123;</div><div class=\"line\">\t\t\tdocument.getElementById('content').innerHTML= '&lt;p&gt;' + data.username + '&lt;/p&gt;' +</div><div class=\"line\">\t\t\t\t\t'&lt;p&gt;' + data.age + '&lt;/p&gt;';</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tfail: function(er) &#123;</div><div class=\"line\">\t\t\tconsole.log(er.errorCode);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Jsonp-请求\"><a href=\"#Jsonp-请求\" class=\"headerlink\" title=\"Jsonp 请求\"></a>Jsonp 请求</h2><ol>\n<li>跨域 只能发送 <code>GET</code> 请求 . 一种不安全的请求方式</li>\n<li>原理:由于 <code>dom</code> 元素的 <code>src</code> 属性,具有跨域功能. 在实现跨域请求时,为了方便就使用 <code>script</code> 标签来做.</li>\n<li>流程<ul>\n<li>创建请求对象,就是创建一个 <code>script</code> 标签</li>\n<li>将上述创建的 <code>script</code> 标签添加到页面的 <code>head</code> 标签下</li>\n<li>格式化数据</li>\n<li>创建全局回调函数</li>\n<li>设置超时时间,如果超过此时间,也没有得到数据,表示请求失败.否则,请求成功</li>\n<li>发送请求: 指定 <code>script</code> 标签的 <code>src</code> 属性值</li>\n</ul>\n</li>\n</ol>"},{"title":"JQuery分析及实现part6之动画模块功能及实现","date":"2016-11-24T01:38:13.000Z","_content":"\nJQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!\n\n<!-- more -->\n\n## 动画原理\n\n* 根据人眼具有 `0.1` 秒的视觉残留,只有在一秒切换至少 `24` 个画面就会产生动画\n\n## 动画的基本结构\n\n```js\nfunction animate() {\n\tfunction render() {\n\t\t//动画\n\t}\n\twindow.setInterval(render, time);\n}\n```\n\n## 小动画案例\n\n* 奔跑的小矩形\n\n```html\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>奔跑吧矩形</title>\n\t<script src=\"itcast.js\"></script>\n\t<style>\n\t\tdiv {\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tborder: 5px solid yellowgreen;\n\t\t\tposition: relative;\n\t\t}\n\t</style>\n\t<script>\n\tvar animate = function(elem, step, target) {\n\t\tvar left,//起始位置\n\t\t\ttimer;//定时器id\n\t\tfunction render() {//用来计算动画当前位移，并制定动画元素的位置\n\t\t\tleft = elem.offsetLeft;\n\t\t\tif( left + step >= target ){\n\t\t\t\telem.style.left = target + 'px';\n\t\t\t\twindow.clearInterval(timer);\n\t\t\t} else {\n\t\t\t\telem.style.left = left + step + 'px';\n\t\t\t}\n\t\t}\n\t\t// 启动定时器 开始动画\n\t\ttimer = window.setInterval(render, 1000 / 60);\n\t};\n\t$(function() {\n\t\t$('#start').click(function() {\n\t\t\tanimate(document.getElementById('dv'), 3, 1000);\n\t\t});\n\t});\n\t</script>\n</head>\n<body>\n\t<div id=\"dv\"></div>\n\t<button id=\"start\">开始动画</button>\n</body>\n</html>\n```\n\n## 匀速直线动画\n\n1. 固定时间\n2. 固定距离\n3. 如何判断动画结束的时机?\n\t* 使用时间来判断是否结束动画\n\t* 如果动画时间到达指定时间,那么就结束动画,并让动画元素到达终点\n4. 实现思路\n\t* 定义动画函数, `animate` 函数. 当调用 `animate` 函数时, 即动画开始的时间\n\t* 定义 `render` 函数. 用来给动画元素设置属性值\n\t\t* 计算当前动画元素所在的位置, 然后累计到其对应属性值上.\n\t\t* 首先计算动画的时间间隔\n\t\t* 如果时间间隔大于或等于指定的总时间, 那么就停止动画并设置动画元素到达终点\n\t\t* 否则, 根据速度, 动画时间间隔计算出位移. 再将其于起始位置累加后赋值给 `elem` \n\t* 定义定时器, 开始动画. \n\n```js\nvar animate = function(elem, target, duration) {\n\tvar timer, // 定时器id\n\t\tspeed, // 速度\n\t\tlocation, // 起始位置\n\t\tdistance, // 动画总距离\n\t\tstartTime,// 动画开始时间\n\t\tcurrentTime,// 动画当前时间\n\t\ttime; // 当前动画经过总时间间隔\n\n\tlocation = elem.offsetLeft;\n\tdistance = target - location;\n\tspeed = distance / duration;\n\tstartTime = +new Date;  // 转换毫秒值\n\t// 用来计算动画当前位移，并制定动画元素的位置\n\tvar render = function() {\n\t\tcurrentTime = +new Date;\n\t\ttime = currentTime - startTime;\n\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t// 停止动画,并设置动画元素到达终点\n\t\tif(time >= duration){\n\t\t\t// console.log(time);\n\t\t\t// 1 设置动画元素到达终点\n\t\t\telem.style.left = target + 'px';\n\t\t\t// 2 停止动画，即清楚定时器\n\t\t\twindow.clearInterval(timer);\n\t\t} else { // 否则，根据速度 和 时间间隔求出动画位移\n\t\t\t// 指定动画元素的位置\n\t\t\t// 注意： 要加上 起始位置\n\t\t\telem.style.left = speed * time + location + 'px';\n\t\t}\n\t};\n\t// 启动定时器 开始动画\n\ttimer = window.setInterval(render, 1000 / 60);\n};\n$(function() {\n\t$('#start').click(function() {\n\t\tanimate(document.getElementById('dv'), 1000, 2000);\n\t});\n});\n```\n\n## 匀减速直线动画\n\n1. 物理公式\n\t* a：\t加速度\n\t* t：\t时间间隔\n\t* v0：\t初始速度\n\t* vt：\t末速度\n\t* S：\t位移\n\t* 正方向：\tS = v0 * t + a + t * t / 2;\n2. S ==> target - location <br> t ==> duration <br> v0 = 0\n3. 正方向 <br> a = 2 * ( S - v0 * t) / ( t * t) <br> ==> = 2 * S / ( t * t) <br> ==> = 2 * ( target - location ) / ( duration * duration ) <br> vt = 2 * ( target - location ) / duration \n4. time 时间间隔内的 匀减速位移 <br> tween = v0 * t - a * t * t / 2 <br> ==> tween = 2 * ( target - location ) * time / duration <br> - (target - location ) * time * time / ( duration * duration )\n\n```js\nvar animate = function(elem, target, duration) {\n\tvar timer, // 定时器id\n\t\ttween, // 单位时间间隔的位移\n\t\tlocation, // 起始位置\n\t\tdistance, // 动画总距离\n\t\tstartTime, // 动画开始时间\n\t\tcurrentTime, // 动画当前时间\n\t\ttime; // 当前动画经过总时间间隔\n\n\tlocation = elem.offsetLeft;\n\tdistance = target - location;\n\tstartTime = +new Date; // 转换毫秒值\n\t// 用来计算动画当前位移，并制定动画元素的位置\n\tvar render = function() {\n\t\tcurrentTime = +new Date;\n\t\ttime = currentTime - startTime;\n\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t// 停止动画,并设置动画元素到达终点\n\t\tif (time >= duration) {\n\t\t\t// console.log(time);\n\t\t\t// 1 设置动画元素到达终点\n\t\t\ttween = distance;\n\t\t\t// 2 停止动画，即清楚定时器\n\t\t\twindow.clearInterval(timer);\n\t\t} else { // 否则，根据速度 和 时间间隔求出动画位移\n\t\t\t// 指定动画元素的位置\n\t\t\t// 注意： 要加上 起始位置\n\t\t\ttween = 2 * distance * time / duration - distance * time * time / (duration * duration);\n\t\t}\n\n\t\telem.style.left = tween + location + 'px';\n\t};\n\t// 启动定时器 开始动画\n\ttimer = window.setInterval(render, 1000 / 60);\n};\n$(function() {\n\t$('#start').click(function() {\n\t\tanimate(document.getElementById('dv'), 1000, 1500);\n\t});\n});\n```\n\n## 使用对象封装缓动函数\n\n```js\n/*\n\tx: null,\n\tt: 时间间隔\n\tb: 起始位置\n\tc: 终止位置\n\td: 总时间\n*/\n\nvar easing = {\t\t\n\tlinear: function(x, t, b, c, d) {\n\t\treturn (c - b) * t / d;\n\t},\n\tminusspeed: function(x, t, b, c, d) {\n\t\treturn 2 * (c - b) * t / d - (c - b) * t * t / (d * d);\n\t},\n\teaseInQuad: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t + b;\n\t},\n\teaseOutQuad: function(x, t, b, c, d) {\n\t\treturn -c * (t /= d) * (t - 2) + b;\n\t},\n\teaseInOutQuad: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t + b;\n\t\treturn -c / 2 * ((--t) * (t - 2) - 1) + b;\n\t},\n\teaseInCubic: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t * t + b;\n\t},\n\teaseOutCubic: function(x, t, b, c, d) {\n\t\treturn c * ((t = t / d - 1) * t * t + 1) + b;\n\t},\n\teaseInOutCubic: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t * t + b;\n\t\treturn c / 2 * ((t -= 2) * t * t + 2) + b;\n\t},\n\teaseInQuart: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t * t * t + b;\n\t},\n\teaseOutQuart: function(x, t, b, c, d) {\n\t\treturn -c * ((t = t / d - 1) * t * t * t - 1) + b;\n\t},\n\teaseInOutQuart: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;\n\t\treturn -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n\t},\n\teaseInQuint: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t * t * t * t + b;\n\t},\n\teaseOutQuint: function(x, t, b, c, d) {\n\t\treturn c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n\t},\n\teaseInOutQuint: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;\n\t\treturn c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n\t},\n\teaseInSine: function(x, t, b, c, d) {\n\t\treturn -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n\t},\n\teaseOutSine: function(x, t, b, c, d) {\n\t\treturn c * Math.sin(t / d * (Math.PI / 2)) + b;\n\t},\n\teaseInOutSine: function(x, t, b, c, d) {\n\t\treturn -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n\t},\n\teaseInExpo: function(x, t, b, c, d) {\n\t\treturn (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n\t},\n\teaseOutExpo: function(x, t, b, c, d) {\n\t\treturn (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n\t},\n\teaseInOutExpo: function(x, t, b, c, d) {\n\t\tif (t == 0) return b;\n\t\tif (t == d) return b + c;\n\t\tif ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n\t\treturn c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n\t},\n\teaseInCirc: function(x, t, b, c, d) {\n\t\treturn -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\t},\n\teaseOutCirc: function(x, t, b, c, d) {\n\t\treturn c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\t},\n\teaseInOutCirc: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n\t\treturn c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n\t},\n\teaseInElastic: function(x, t, b, c, d) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = c;\n\t\tif (t == 0) return b;\n\t\tif ((t /= d) == 1) return b + c;\n\t\tif (!p) p = d * .3;\n\t\tif (a < Math.abs(c)) {\n\t\t\ta = c;\n\t\t\tvar s = p / 4;\n\t\t} else var s = p / (2 * Math.PI) * Math.asin(c / a);\n\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n\t},\n\teaseOutElastic: function(x, t, b, c, d) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = c;\n\t\tif (t == 0) return b;\n\t\tif ((t /= d) == 1) return b + c;\n\t\tif (!p) p = d * .3;\n\t\tif (a < Math.abs(c)) {\n\t\t\ta = c;\n\t\t\tvar s = p / 4;\n\t\t} else var s = p / (2 * Math.PI) * Math.asin(c / a);\n\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n\t},\n\teaseInOutElastic: function(x, t, b, c, d) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = c;\n\t\tif (t == 0) return b;\n\t\tif ((t /= d / 2) == 2) return b + c;\n\t\tif (!p) p = d * (.3 * 1.5);\n\t\tif (a < Math.abs(c)) {\n\t\t\ta = c;\n\t\t\tvar s = p / 4;\n\t\t} else var s = p / (2 * Math.PI) * Math.asin(c / a);\n\t\tif (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n\t},\n\teaseInBack: function(x, t, b, c, d, s) {\n\t\tif (s == undefined) s = 1.70158;\n\t\treturn c * (t /= d) * t * ((s + 1) * t - s) + b;\n\t},\n\teaseOutBack: function(x, t, b, c, d, s) {\n\t\tif (s == undefined) s = 1.70158;\n\t\treturn c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\t},\n\teaseInOutBack: function(x, t, b, c, d, s) {\n\t\tif (s == undefined) s = 1.70158;\n\t\tif ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n\t\treturn c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n\t},\n\teaseOutBounce: function(x, t, b, c, d) {\n\t\tif ((t /= d) < (1 / 2.75)) {\n\t\t\treturn c * (7.5625 * t * t) + b;\n\t\t} else if (t < (2 / 2.75)) {\n\t\t\treturn c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;\n\t\t} else if (t < (2.5 / 2.75)) {\n\t\t\treturn c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;\n\t\t} else {\n\t\t\treturn c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;\n\t\t}\n\t}\n};\n```\n\n## 抽取缓动函数\n\n将缓动函数的可变变量抽取出来,以便于封装\n\n```js\nvar animate = function(elem, target, duration, easingName) {\n\t\tvar timer, // 定时器id\n\t\t\ttween, // 单位时间间隔的位移\n\t\t\tlocation, // 起始位置\n\t\t\tdistance, // 动画总距离\n\t\t\tstartTime,// 动画开始时间\n\t\t\tcurrentTime,// 动画当前时间\n\t\t\ttime; // 当前动画经过总时间间隔\n\n\t\tlocation = elem.offsetLeft;\n\t\tdistance = target - location;\t\t\t\t\n\t\tstartTime = +new Date;  // 转换毫秒值\n\t\t// 用来计算动画当前位移，并制定动画元素的位置\n\t\tvar render = function() {\n\t\t\tcurrentTime = +new Date;\n\t\t\ttime = currentTime - startTime;\n\t\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t\t// 停止动画,并设置动画元素到达终点\n\t\t\tif(time >= duration){\n\t\t\t\t// console.log(time);\n\t\t\t\t// 1 设置动画元素到达终点\n\t\t\t\ttween = distance;\n\t\t\t\t// 2 停止动画，即清楚定时器\n\t\t\t\twindow.clearInterval(timer);\n\t\t\t} else { // 否则, 根据匀减速运动公式来求time时间间隔内的位移\n\t\t\t\t// 指定动画元素的位置\n\t\t\t\t// 注意： 要加上 起始位置\n\t\t\t\ttween = easing[easingName](null, time, location, target, duration);\n\t\t\t}\n\n\t\t\telem.style.left = tween + location + 'px';\n\t\t};\n\t\t// 启动定时器 开始动画\n\t\ttimer = window.setInterval(render, 1000 / 60);\n\t};\n$(function() {\n\t$('#start').click(function() {\n\t\tanimate(document.getElementById('dv'), 1000, 1500, 'easeInOutElastic');\n\t});\n});\n\n```\n\n## 多属性动画的实现\n\n到此我们就可以继续进行框架的封装了\n\n```js\n// 获取所有动画属性的起始值\nvar kv = {\n\t'left': 'offsetLeft',\n\t'top': 'offsetTop',\n\t'width': 'offsetWidth',\n\t'height': 'offsetHeight'\n};\n\nfunction getLocation(elem, target) {\n\tvar obj = {};\n\tfor (var k in target) {\n\t\tobj[k] = elem[kv[k]];\n\t}\n\treturn obj;\n}\n\nfunction getDistance(location, target) {\n\tvar obj = {};\n\tfor (var k in target) {\n\t\tobj[k] = parseFloat(target[k]) - location[k];\n\t}\n\treturn obj;\n}\n\nfunction getTween(time, location, target, duration, easingName) {\n\tvar obj = {};\n\tfor (var k in target) {\n\t\tobj[k] = easing[easingName](null, time, location[k], target[k], duration);\n\t}\n\n\treturn obj;\n}\n\nfunction setStyles(elem, location, tween) {\n\tvar k;\n\tfor (k in location) {\n\t\telem.style[k] = location[k] + tween[k] + 'px';\n\t}\n}\nvar animate = function(elem, target, duration, easingName) {\n\tvar timer, // 定时器id\n\t\ttween, // 单位时间间隔的位移{left: 800, top:400}\n\t\tlocation, // 起始位置{left: 8,top: 8}\n\t\tdistance, // 动画总距离{left: 992, top: 792}\n\t\tstartTime, // 动画开始时间\n\t\tcurrentTime, // 动画当前时间\n\t\ttime; // 当前动画经过总时间间隔\n\n\tlocation = getLocation(elem, target);\n\tdistance = getDistance(location, target);\n\tstartTime = +new Date; // 转换毫秒值\n\t// 用来计算动画当前位移，并制定动画元素的位置\n\tvar render = function() {\n\t\tcurrentTime = +new Date;\n\t\ttime = currentTime - startTime;\n\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t// 停止动画,并设置动画元素到达终点\n\t\tif (time >= duration) {\n\t\t\t// console.log(time);\n\t\t\t// 1 设置动画元素到达终点\n\t\t\ttween = distance;\n\t\t\t// 2 停止动画，即清楚定时器\n\t\t\tglobal.clearInterval(timer);\n\t\t\t// 3 删除动画元素的timerId属性\n\t\t\tdelete elem.timerId;\n\t\t} else { // 否则, 根据匀减速运动公式来求time时间间隔内的位移\n\t\t\t// 指定动画元素的位置\n\t\t\t// 注意： 要加上 起始位置\n\t\t\ttween = getTween(time, location, target, duration, easingName);\n\t\t}\n\t\t// 设置动画属性值\n\t\tsetStyles(elem, location, tween);\n\t};\n\t// 启动定时器 开始动画\n\ttimer = global.setInterval(render, 1000 / 60);\n\t// 把定时器id存储在动画元素上（以自定义属性）\n\telem.timerId = timer;\n};\n\n```\n\n## 实现animate和stop方法\n\n```js\nitcast.fn.extend({\n\tanimate: function(target, duration, easingName) {\n\t\teasingName = easingName || 'linear';\n\t\treturn this.each(function() {\n\t\t\tif(!('timerId' in this)){\n\t\t\t\tanimate(this, target, duration, easingName);\n\t\t\t}\n\t\t});\n\t},\n\tstop: function() {\n\t\treturn this.each(function() {\n\t\t\tif('timerId' in this){\n\t\t\t\tglobal.clearInterval(this.timerId);\n\t\t\t\tdelete this.timerId;\n\t\t\t}\n\t\t});\n\t}\n});\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>动画模块的实现</title>\n\t<script src=\"itcast.js\"></script>\n\t<style>\n\t\tdiv {\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tborder: 5px solid yellowgreen;\n\t\t\tposition: relative;\n\t\t}\n\t</style>\n\t<script>\n\t\t$(function() {\n\t\t\t$('#start').click(function() {\n\t\t\t\t$('#dv').animate({left : 1000}, 1500);\n\t\t\t});\n\t\t\t$('#stop').click(function() {\n\t\t\t\t$('#dv').stop();\n\t\t\t});\n\t\t});\n\t</script>\n</head>\n<body>\n\t<div id=\"dv\"></div>\n\t<button id=\"start\">开始\t动画</button>\n\t<button id=\"stop\">停止\t动画</button>\n</body>\n</html>\n```","source":"_posts/javascript-jquery-part6.md","raw":"---\ntitle: JQuery分析及实现part6之动画模块功能及实现\ndate: 2016-11-24 09:38:13\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!\n\n<!-- more -->\n\n## 动画原理\n\n* 根据人眼具有 `0.1` 秒的视觉残留,只有在一秒切换至少 `24` 个画面就会产生动画\n\n## 动画的基本结构\n\n```js\nfunction animate() {\n\tfunction render() {\n\t\t//动画\n\t}\n\twindow.setInterval(render, time);\n}\n```\n\n## 小动画案例\n\n* 奔跑的小矩形\n\n```html\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>奔跑吧矩形</title>\n\t<script src=\"itcast.js\"></script>\n\t<style>\n\t\tdiv {\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tborder: 5px solid yellowgreen;\n\t\t\tposition: relative;\n\t\t}\n\t</style>\n\t<script>\n\tvar animate = function(elem, step, target) {\n\t\tvar left,//起始位置\n\t\t\ttimer;//定时器id\n\t\tfunction render() {//用来计算动画当前位移，并制定动画元素的位置\n\t\t\tleft = elem.offsetLeft;\n\t\t\tif( left + step >= target ){\n\t\t\t\telem.style.left = target + 'px';\n\t\t\t\twindow.clearInterval(timer);\n\t\t\t} else {\n\t\t\t\telem.style.left = left + step + 'px';\n\t\t\t}\n\t\t}\n\t\t// 启动定时器 开始动画\n\t\ttimer = window.setInterval(render, 1000 / 60);\n\t};\n\t$(function() {\n\t\t$('#start').click(function() {\n\t\t\tanimate(document.getElementById('dv'), 3, 1000);\n\t\t});\n\t});\n\t</script>\n</head>\n<body>\n\t<div id=\"dv\"></div>\n\t<button id=\"start\">开始动画</button>\n</body>\n</html>\n```\n\n## 匀速直线动画\n\n1. 固定时间\n2. 固定距离\n3. 如何判断动画结束的时机?\n\t* 使用时间来判断是否结束动画\n\t* 如果动画时间到达指定时间,那么就结束动画,并让动画元素到达终点\n4. 实现思路\n\t* 定义动画函数, `animate` 函数. 当调用 `animate` 函数时, 即动画开始的时间\n\t* 定义 `render` 函数. 用来给动画元素设置属性值\n\t\t* 计算当前动画元素所在的位置, 然后累计到其对应属性值上.\n\t\t* 首先计算动画的时间间隔\n\t\t* 如果时间间隔大于或等于指定的总时间, 那么就停止动画并设置动画元素到达终点\n\t\t* 否则, 根据速度, 动画时间间隔计算出位移. 再将其于起始位置累加后赋值给 `elem` \n\t* 定义定时器, 开始动画. \n\n```js\nvar animate = function(elem, target, duration) {\n\tvar timer, // 定时器id\n\t\tspeed, // 速度\n\t\tlocation, // 起始位置\n\t\tdistance, // 动画总距离\n\t\tstartTime,// 动画开始时间\n\t\tcurrentTime,// 动画当前时间\n\t\ttime; // 当前动画经过总时间间隔\n\n\tlocation = elem.offsetLeft;\n\tdistance = target - location;\n\tspeed = distance / duration;\n\tstartTime = +new Date;  // 转换毫秒值\n\t// 用来计算动画当前位移，并制定动画元素的位置\n\tvar render = function() {\n\t\tcurrentTime = +new Date;\n\t\ttime = currentTime - startTime;\n\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t// 停止动画,并设置动画元素到达终点\n\t\tif(time >= duration){\n\t\t\t// console.log(time);\n\t\t\t// 1 设置动画元素到达终点\n\t\t\telem.style.left = target + 'px';\n\t\t\t// 2 停止动画，即清楚定时器\n\t\t\twindow.clearInterval(timer);\n\t\t} else { // 否则，根据速度 和 时间间隔求出动画位移\n\t\t\t// 指定动画元素的位置\n\t\t\t// 注意： 要加上 起始位置\n\t\t\telem.style.left = speed * time + location + 'px';\n\t\t}\n\t};\n\t// 启动定时器 开始动画\n\ttimer = window.setInterval(render, 1000 / 60);\n};\n$(function() {\n\t$('#start').click(function() {\n\t\tanimate(document.getElementById('dv'), 1000, 2000);\n\t});\n});\n```\n\n## 匀减速直线动画\n\n1. 物理公式\n\t* a：\t加速度\n\t* t：\t时间间隔\n\t* v0：\t初始速度\n\t* vt：\t末速度\n\t* S：\t位移\n\t* 正方向：\tS = v0 * t + a + t * t / 2;\n2. S ==> target - location <br> t ==> duration <br> v0 = 0\n3. 正方向 <br> a = 2 * ( S - v0 * t) / ( t * t) <br> ==> = 2 * S / ( t * t) <br> ==> = 2 * ( target - location ) / ( duration * duration ) <br> vt = 2 * ( target - location ) / duration \n4. time 时间间隔内的 匀减速位移 <br> tween = v0 * t - a * t * t / 2 <br> ==> tween = 2 * ( target - location ) * time / duration <br> - (target - location ) * time * time / ( duration * duration )\n\n```js\nvar animate = function(elem, target, duration) {\n\tvar timer, // 定时器id\n\t\ttween, // 单位时间间隔的位移\n\t\tlocation, // 起始位置\n\t\tdistance, // 动画总距离\n\t\tstartTime, // 动画开始时间\n\t\tcurrentTime, // 动画当前时间\n\t\ttime; // 当前动画经过总时间间隔\n\n\tlocation = elem.offsetLeft;\n\tdistance = target - location;\n\tstartTime = +new Date; // 转换毫秒值\n\t// 用来计算动画当前位移，并制定动画元素的位置\n\tvar render = function() {\n\t\tcurrentTime = +new Date;\n\t\ttime = currentTime - startTime;\n\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t// 停止动画,并设置动画元素到达终点\n\t\tif (time >= duration) {\n\t\t\t// console.log(time);\n\t\t\t// 1 设置动画元素到达终点\n\t\t\ttween = distance;\n\t\t\t// 2 停止动画，即清楚定时器\n\t\t\twindow.clearInterval(timer);\n\t\t} else { // 否则，根据速度 和 时间间隔求出动画位移\n\t\t\t// 指定动画元素的位置\n\t\t\t// 注意： 要加上 起始位置\n\t\t\ttween = 2 * distance * time / duration - distance * time * time / (duration * duration);\n\t\t}\n\n\t\telem.style.left = tween + location + 'px';\n\t};\n\t// 启动定时器 开始动画\n\ttimer = window.setInterval(render, 1000 / 60);\n};\n$(function() {\n\t$('#start').click(function() {\n\t\tanimate(document.getElementById('dv'), 1000, 1500);\n\t});\n});\n```\n\n## 使用对象封装缓动函数\n\n```js\n/*\n\tx: null,\n\tt: 时间间隔\n\tb: 起始位置\n\tc: 终止位置\n\td: 总时间\n*/\n\nvar easing = {\t\t\n\tlinear: function(x, t, b, c, d) {\n\t\treturn (c - b) * t / d;\n\t},\n\tminusspeed: function(x, t, b, c, d) {\n\t\treturn 2 * (c - b) * t / d - (c - b) * t * t / (d * d);\n\t},\n\teaseInQuad: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t + b;\n\t},\n\teaseOutQuad: function(x, t, b, c, d) {\n\t\treturn -c * (t /= d) * (t - 2) + b;\n\t},\n\teaseInOutQuad: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t + b;\n\t\treturn -c / 2 * ((--t) * (t - 2) - 1) + b;\n\t},\n\teaseInCubic: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t * t + b;\n\t},\n\teaseOutCubic: function(x, t, b, c, d) {\n\t\treturn c * ((t = t / d - 1) * t * t + 1) + b;\n\t},\n\teaseInOutCubic: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t * t + b;\n\t\treturn c / 2 * ((t -= 2) * t * t + 2) + b;\n\t},\n\teaseInQuart: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t * t * t + b;\n\t},\n\teaseOutQuart: function(x, t, b, c, d) {\n\t\treturn -c * ((t = t / d - 1) * t * t * t - 1) + b;\n\t},\n\teaseInOutQuart: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;\n\t\treturn -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n\t},\n\teaseInQuint: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t * t * t * t + b;\n\t},\n\teaseOutQuint: function(x, t, b, c, d) {\n\t\treturn c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n\t},\n\teaseInOutQuint: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;\n\t\treturn c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n\t},\n\teaseInSine: function(x, t, b, c, d) {\n\t\treturn -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n\t},\n\teaseOutSine: function(x, t, b, c, d) {\n\t\treturn c * Math.sin(t / d * (Math.PI / 2)) + b;\n\t},\n\teaseInOutSine: function(x, t, b, c, d) {\n\t\treturn -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n\t},\n\teaseInExpo: function(x, t, b, c, d) {\n\t\treturn (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n\t},\n\teaseOutExpo: function(x, t, b, c, d) {\n\t\treturn (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n\t},\n\teaseInOutExpo: function(x, t, b, c, d) {\n\t\tif (t == 0) return b;\n\t\tif (t == d) return b + c;\n\t\tif ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n\t\treturn c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n\t},\n\teaseInCirc: function(x, t, b, c, d) {\n\t\treturn -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\t},\n\teaseOutCirc: function(x, t, b, c, d) {\n\t\treturn c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\t},\n\teaseInOutCirc: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n\t\treturn c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n\t},\n\teaseInElastic: function(x, t, b, c, d) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = c;\n\t\tif (t == 0) return b;\n\t\tif ((t /= d) == 1) return b + c;\n\t\tif (!p) p = d * .3;\n\t\tif (a < Math.abs(c)) {\n\t\t\ta = c;\n\t\t\tvar s = p / 4;\n\t\t} else var s = p / (2 * Math.PI) * Math.asin(c / a);\n\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n\t},\n\teaseOutElastic: function(x, t, b, c, d) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = c;\n\t\tif (t == 0) return b;\n\t\tif ((t /= d) == 1) return b + c;\n\t\tif (!p) p = d * .3;\n\t\tif (a < Math.abs(c)) {\n\t\t\ta = c;\n\t\t\tvar s = p / 4;\n\t\t} else var s = p / (2 * Math.PI) * Math.asin(c / a);\n\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n\t},\n\teaseInOutElastic: function(x, t, b, c, d) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = c;\n\t\tif (t == 0) return b;\n\t\tif ((t /= d / 2) == 2) return b + c;\n\t\tif (!p) p = d * (.3 * 1.5);\n\t\tif (a < Math.abs(c)) {\n\t\t\ta = c;\n\t\t\tvar s = p / 4;\n\t\t} else var s = p / (2 * Math.PI) * Math.asin(c / a);\n\t\tif (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n\t},\n\teaseInBack: function(x, t, b, c, d, s) {\n\t\tif (s == undefined) s = 1.70158;\n\t\treturn c * (t /= d) * t * ((s + 1) * t - s) + b;\n\t},\n\teaseOutBack: function(x, t, b, c, d, s) {\n\t\tif (s == undefined) s = 1.70158;\n\t\treturn c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\t},\n\teaseInOutBack: function(x, t, b, c, d, s) {\n\t\tif (s == undefined) s = 1.70158;\n\t\tif ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n\t\treturn c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n\t},\n\teaseOutBounce: function(x, t, b, c, d) {\n\t\tif ((t /= d) < (1 / 2.75)) {\n\t\t\treturn c * (7.5625 * t * t) + b;\n\t\t} else if (t < (2 / 2.75)) {\n\t\t\treturn c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;\n\t\t} else if (t < (2.5 / 2.75)) {\n\t\t\treturn c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;\n\t\t} else {\n\t\t\treturn c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;\n\t\t}\n\t}\n};\n```\n\n## 抽取缓动函数\n\n将缓动函数的可变变量抽取出来,以便于封装\n\n```js\nvar animate = function(elem, target, duration, easingName) {\n\t\tvar timer, // 定时器id\n\t\t\ttween, // 单位时间间隔的位移\n\t\t\tlocation, // 起始位置\n\t\t\tdistance, // 动画总距离\n\t\t\tstartTime,// 动画开始时间\n\t\t\tcurrentTime,// 动画当前时间\n\t\t\ttime; // 当前动画经过总时间间隔\n\n\t\tlocation = elem.offsetLeft;\n\t\tdistance = target - location;\t\t\t\t\n\t\tstartTime = +new Date;  // 转换毫秒值\n\t\t// 用来计算动画当前位移，并制定动画元素的位置\n\t\tvar render = function() {\n\t\t\tcurrentTime = +new Date;\n\t\t\ttime = currentTime - startTime;\n\t\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t\t// 停止动画,并设置动画元素到达终点\n\t\t\tif(time >= duration){\n\t\t\t\t// console.log(time);\n\t\t\t\t// 1 设置动画元素到达终点\n\t\t\t\ttween = distance;\n\t\t\t\t// 2 停止动画，即清楚定时器\n\t\t\t\twindow.clearInterval(timer);\n\t\t\t} else { // 否则, 根据匀减速运动公式来求time时间间隔内的位移\n\t\t\t\t// 指定动画元素的位置\n\t\t\t\t// 注意： 要加上 起始位置\n\t\t\t\ttween = easing[easingName](null, time, location, target, duration);\n\t\t\t}\n\n\t\t\telem.style.left = tween + location + 'px';\n\t\t};\n\t\t// 启动定时器 开始动画\n\t\ttimer = window.setInterval(render, 1000 / 60);\n\t};\n$(function() {\n\t$('#start').click(function() {\n\t\tanimate(document.getElementById('dv'), 1000, 1500, 'easeInOutElastic');\n\t});\n});\n\n```\n\n## 多属性动画的实现\n\n到此我们就可以继续进行框架的封装了\n\n```js\n// 获取所有动画属性的起始值\nvar kv = {\n\t'left': 'offsetLeft',\n\t'top': 'offsetTop',\n\t'width': 'offsetWidth',\n\t'height': 'offsetHeight'\n};\n\nfunction getLocation(elem, target) {\n\tvar obj = {};\n\tfor (var k in target) {\n\t\tobj[k] = elem[kv[k]];\n\t}\n\treturn obj;\n}\n\nfunction getDistance(location, target) {\n\tvar obj = {};\n\tfor (var k in target) {\n\t\tobj[k] = parseFloat(target[k]) - location[k];\n\t}\n\treturn obj;\n}\n\nfunction getTween(time, location, target, duration, easingName) {\n\tvar obj = {};\n\tfor (var k in target) {\n\t\tobj[k] = easing[easingName](null, time, location[k], target[k], duration);\n\t}\n\n\treturn obj;\n}\n\nfunction setStyles(elem, location, tween) {\n\tvar k;\n\tfor (k in location) {\n\t\telem.style[k] = location[k] + tween[k] + 'px';\n\t}\n}\nvar animate = function(elem, target, duration, easingName) {\n\tvar timer, // 定时器id\n\t\ttween, // 单位时间间隔的位移{left: 800, top:400}\n\t\tlocation, // 起始位置{left: 8,top: 8}\n\t\tdistance, // 动画总距离{left: 992, top: 792}\n\t\tstartTime, // 动画开始时间\n\t\tcurrentTime, // 动画当前时间\n\t\ttime; // 当前动画经过总时间间隔\n\n\tlocation = getLocation(elem, target);\n\tdistance = getDistance(location, target);\n\tstartTime = +new Date; // 转换毫秒值\n\t// 用来计算动画当前位移，并制定动画元素的位置\n\tvar render = function() {\n\t\tcurrentTime = +new Date;\n\t\ttime = currentTime - startTime;\n\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t// 停止动画,并设置动画元素到达终点\n\t\tif (time >= duration) {\n\t\t\t// console.log(time);\n\t\t\t// 1 设置动画元素到达终点\n\t\t\ttween = distance;\n\t\t\t// 2 停止动画，即清楚定时器\n\t\t\tglobal.clearInterval(timer);\n\t\t\t// 3 删除动画元素的timerId属性\n\t\t\tdelete elem.timerId;\n\t\t} else { // 否则, 根据匀减速运动公式来求time时间间隔内的位移\n\t\t\t// 指定动画元素的位置\n\t\t\t// 注意： 要加上 起始位置\n\t\t\ttween = getTween(time, location, target, duration, easingName);\n\t\t}\n\t\t// 设置动画属性值\n\t\tsetStyles(elem, location, tween);\n\t};\n\t// 启动定时器 开始动画\n\ttimer = global.setInterval(render, 1000 / 60);\n\t// 把定时器id存储在动画元素上（以自定义属性）\n\telem.timerId = timer;\n};\n\n```\n\n## 实现animate和stop方法\n\n```js\nitcast.fn.extend({\n\tanimate: function(target, duration, easingName) {\n\t\teasingName = easingName || 'linear';\n\t\treturn this.each(function() {\n\t\t\tif(!('timerId' in this)){\n\t\t\t\tanimate(this, target, duration, easingName);\n\t\t\t}\n\t\t});\n\t},\n\tstop: function() {\n\t\treturn this.each(function() {\n\t\t\tif('timerId' in this){\n\t\t\t\tglobal.clearInterval(this.timerId);\n\t\t\t\tdelete this.timerId;\n\t\t\t}\n\t\t});\n\t}\n});\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>动画模块的实现</title>\n\t<script src=\"itcast.js\"></script>\n\t<style>\n\t\tdiv {\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tborder: 5px solid yellowgreen;\n\t\t\tposition: relative;\n\t\t}\n\t</style>\n\t<script>\n\t\t$(function() {\n\t\t\t$('#start').click(function() {\n\t\t\t\t$('#dv').animate({left : 1000}, 1500);\n\t\t\t});\n\t\t\t$('#stop').click(function() {\n\t\t\t\t$('#dv').stop();\n\t\t\t});\n\t\t});\n\t</script>\n</head>\n<body>\n\t<div id=\"dv\"></div>\n\t<button id=\"start\">开始\t动画</button>\n\t<button id=\"stop\">停止\t动画</button>\n</body>\n</html>\n```","slug":"javascript-jquery-part6","published":1,"updated":"2016-11-24T13:13:53.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvoq002fuwg7anmur8hy","content":"<p>JQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!</p>\n<a id=\"more\"></a>\n<h2 id=\"动画原理\"><a href=\"#动画原理\" class=\"headerlink\" title=\"动画原理\"></a>动画原理</h2><ul>\n<li>根据人眼具有 <code>0.1</code> 秒的视觉残留,只有在一秒切换至少 <code>24</code> 个画面就会产生动画</li>\n</ul>\n<h2 id=\"动画的基本结构\"><a href=\"#动画的基本结构\" class=\"headerlink\" title=\"动画的基本结构\"></a>动画的基本结构</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//动画</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">window</span>.setInterval(render, time);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"小动画案例\"><a href=\"#小动画案例\" class=\"headerlink\" title=\"小动画案例\"></a>小动画案例</h2><ul>\n<li>奔跑的小矩形</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>奔跑吧矩形<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"itcast.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">\t\tdiv &#123;</div><div class=\"line\">\t\t\twidth: 100px;</div><div class=\"line\">\t\t\theight: 100px;</div><div class=\"line\">\t\t\tborder: 5px solid yellowgreen;</div><div class=\"line\">\t\t\tposition: relative;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">\t<span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, step, target</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> left,<span class=\"comment\">//起始位置</span></div><div class=\"line\">\t\t\ttimer;<span class=\"comment\">//定时器id</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">//用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t\t\tleft = elem.offsetLeft;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>( left + step &gt;= target )&#123;</div><div class=\"line\">\t\t\t\telem.style.left = target + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\telem.style.left = left + step + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\t\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">3</span>, <span class=\"number\">1000</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"start\"</span>&gt;</span>开始动画<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"匀速直线动画\"><a href=\"#匀速直线动画\" class=\"headerlink\" title=\"匀速直线动画\"></a>匀速直线动画</h2><ol>\n<li>固定时间</li>\n<li>固定距离</li>\n<li>如何判断动画结束的时机?<ul>\n<li>使用时间来判断是否结束动画</li>\n<li>如果动画时间到达指定时间,那么就结束动画,并让动画元素到达终点</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>定义动画函数, <code>animate</code> 函数. 当调用 <code>animate</code> 函数时, 即动画开始的时间</li>\n<li>定义 <code>render</code> 函数. 用来给动画元素设置属性值<ul>\n<li>计算当前动画元素所在的位置, 然后累计到其对应属性值上.</li>\n<li>首先计算动画的时间间隔</li>\n<li>如果时间间隔大于或等于指定的总时间, 那么就停止动画并设置动画元素到达终点</li>\n<li>否则, 根据速度, 动画时间间隔计算出位移. 再将其于起始位置累加后赋值给 <code>elem</code> </li>\n</ul>\n</li>\n<li>定义定时器, 开始动画. </li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\tspeed, <span class=\"comment\">// 速度</span></div><div class=\"line\">\t\tlocation, <span class=\"comment\">// 起始位置</span></div><div class=\"line\">\t\tdistance, <span class=\"comment\">// 动画总距离</span></div><div class=\"line\">\t\tstartTime,<span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\tcurrentTime,<span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\tlocation = elem.offsetLeft;</div><div class=\"line\">\tdistance = target - location;</div><div class=\"line\">\tspeed = distance / duration;</div><div class=\"line\">\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;  <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(time &gt;= duration)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\telem.style.left = target + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\telem.style.left = speed * time + location + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">1000</span>, <span class=\"number\">2000</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"匀减速直线动画\"><a href=\"#匀减速直线动画\" class=\"headerlink\" title=\"匀减速直线动画\"></a>匀减速直线动画</h2><ol>\n<li>物理公式<ul>\n<li>a：    加速度</li>\n<li>t：    时间间隔</li>\n<li>v0：    初始速度</li>\n<li>vt：    末速度</li>\n<li>S：    位移</li>\n<li>正方向：    S = v0 <em> t + a + t </em> t / 2;</li>\n</ul>\n</li>\n<li>S ==&gt; target - location <br> t ==&gt; duration <br> v0 = 0</li>\n<li>正方向 <br> a = 2 <em> ( S - v0 </em> t) / ( t <em> t) <br> ==&gt; = 2 </em> S / ( t <em> t) <br> ==&gt; = 2 </em> ( target - location ) / ( duration <em> duration ) <br> vt = 2 </em> ( target - location ) / duration </li>\n<li>time 时间间隔内的 匀减速位移 <br> tween = v0 <em> t - a </em> t <em> t / 2 <br> ==&gt; tween = 2 </em> ( target - location ) <em> time / duration <br> - (target - location ) </em> time <em> time / ( duration </em> duration )</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\ttween, <span class=\"comment\">// 单位时间间隔的位移</span></div><div class=\"line\">\t\tlocation, <span class=\"comment\">// 起始位置</span></div><div class=\"line\">\t\tdistance, <span class=\"comment\">// 动画总距离</span></div><div class=\"line\">\t\tstartTime, <span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\tcurrentTime, <span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\tlocation = elem.offsetLeft;</div><div class=\"line\">\tdistance = target - location;</div><div class=\"line\">\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>; <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (time &gt;= duration) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\ttween = distance;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\ttween = <span class=\"number\">2</span> * distance * time / duration - distance * time * time / (duration * duration);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\telem.style.left = tween + location + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">1000</span>, <span class=\"number\">1500</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"使用对象封装缓动函数\"><a href=\"#使用对象封装缓动函数\" class=\"headerlink\" title=\"使用对象封装缓动函数\"></a>使用对象封装缓动函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">\tx: null,</div><div class=\"line\">\tt: 时间间隔</div><div class=\"line\">\tb: 起始位置</div><div class=\"line\">\tc: 终止位置</div><div class=\"line\">\td: 总时间</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> easing = &#123;\t\t</div><div class=\"line\">\t<span class=\"attr\">linear</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (c - b) * t / d;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">minusspeed</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span> * (c - b) * t / d - (c - b) * t * t / (d * d);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInQuad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutQuad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * (t /= d) * (t - <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutQuad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * ((--t) * (t - <span class=\"number\">2</span>) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInCubic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutCubic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * ((t = t / d - <span class=\"number\">1</span>) * t * t + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutCubic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * t + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInQuart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * t * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutQuart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * ((t = t / d - <span class=\"number\">1</span>) * t * t * t - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutQuart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * t * t - <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInQuint</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * t * t * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutQuint</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * ((t = t / d - <span class=\"number\">1</span>) * t * t * t * t + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutQuint</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t * t * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * t * t * t + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInSine</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * <span class=\"built_in\">Math</span>.cos(t / d * (<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>)) + c + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutSine</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * <span class=\"built_in\">Math</span>.sin(t / d * (<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>)) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutSine</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI * t / d) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInExpo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (t == <span class=\"number\">0</span>) ? b : c * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t / d - <span class=\"number\">1</span>)) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutExpo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (t == d) ? b + c : c * (-<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * t / d) + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutExpo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == d) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t - <span class=\"number\">1</span>)) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * (-<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * --t) + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInCirc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * (<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - (t /= d) * t) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutCirc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - (t = t / d - <span class=\"number\">1</span>) * t) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutCirc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - t * t) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - (t -= <span class=\"number\">2</span>) * t) + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInElastic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> a = c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d) == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!p) p = d * <span class=\"number\">.3</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"built_in\">Math</span>.abs(c)) &#123;</div><div class=\"line\">\t\t\ta = c;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s = p / <span class=\"number\">4</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">var</span> s = p / (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) * <span class=\"built_in\">Math</span>.asin(c / a);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -(a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t -= <span class=\"number\">1</span>)) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p)) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutElastic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> a = c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d) == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!p) p = d * <span class=\"number\">.3</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"built_in\">Math</span>.abs(c)) &#123;</div><div class=\"line\">\t\t\ta = c;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s = p / <span class=\"number\">4</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">var</span> s = p / (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) * <span class=\"built_in\">Math</span>.asin(c / a);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * t) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p) + c + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutElastic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> a = c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!p) p = d * (<span class=\"number\">.3</span> * <span class=\"number\">1.5</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"built_in\">Math</span>.abs(c)) &#123;</div><div class=\"line\">\t\t\ta = c;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s = p / <span class=\"number\">4</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">var</span> s = p / (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) * <span class=\"built_in\">Math</span>.asin(c / a);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-.5</span> * (a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t -= <span class=\"number\">1</span>)) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p)) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * (t -= <span class=\"number\">1</span>)) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p) * <span class=\"number\">.5</span> + c + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInBack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d, s</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">undefined</span>) s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * ((s + <span class=\"number\">1</span>) * t - s) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutBack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d, s</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">undefined</span>) s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * ((t = t / d - <span class=\"number\">1</span>) * t * ((s + <span class=\"number\">1</span>) * t + s) + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutBack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d, s</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">undefined</span>) s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * (t * t * (((s *= (<span class=\"number\">1.525</span>)) + <span class=\"number\">1</span>) * t - s)) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * (((s *= (<span class=\"number\">1.525</span>)) + <span class=\"number\">1</span>) * t + s) + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutBounce</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d) &lt; (<span class=\"number\">1</span> / <span class=\"number\">2.75</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * t * t) + b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; (<span class=\"number\">2</span> / <span class=\"number\">2.75</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * (t -= (<span class=\"number\">1.5</span> / <span class=\"number\">2.75</span>)) * t + <span class=\"number\">.75</span>) + b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; (<span class=\"number\">2.5</span> / <span class=\"number\">2.75</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * (t -= (<span class=\"number\">2.25</span> / <span class=\"number\">2.75</span>)) * t + <span class=\"number\">.9375</span>) + b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * (t -= (<span class=\"number\">2.625</span> / <span class=\"number\">2.75</span>)) * t + <span class=\"number\">.984375</span>) + b;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"抽取缓动函数\"><a href=\"#抽取缓动函数\" class=\"headerlink\" title=\"抽取缓动函数\"></a>抽取缓动函数</h2><p>将缓动函数的可变变量抽取出来,以便于封装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\t\ttween, <span class=\"comment\">// 单位时间间隔的位移</span></div><div class=\"line\">\t\t\tlocation, <span class=\"comment\">// 起始位置</span></div><div class=\"line\">\t\t\tdistance, <span class=\"comment\">// 动画总距离</span></div><div class=\"line\">\t\t\tstartTime,<span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\t\tcurrentTime,<span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\t\tlocation = elem.offsetLeft;</div><div class=\"line\">\t\tdistance = target - location;\t\t\t\t</div><div class=\"line\">\t\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;  <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(time &gt;= duration)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\t\ttween = distance;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\t\ttween = easing[easingName](<span class=\"literal\">null</span>, time, location, target, duration);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\telem.style.left = tween + location + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\t\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">1000</span>, <span class=\"number\">1500</span>, <span class=\"string\">'easeInOutElastic'</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"多属性动画的实现\"><a href=\"#多属性动画的实现\" class=\"headerlink\" title=\"多属性动画的实现\"></a>多属性动画的实现</h2><p>到此我们就可以继续进行框架的封装了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取所有动画属性的起始值</span></div><div class=\"line\"><span class=\"keyword\">var</span> kv = &#123;</div><div class=\"line\">\t<span class=\"string\">'left'</span>: <span class=\"string\">'offsetLeft'</span>,</div><div class=\"line\">\t<span class=\"string\">'top'</span>: <span class=\"string\">'offsetTop'</span>,</div><div class=\"line\">\t<span class=\"string\">'width'</span>: <span class=\"string\">'offsetWidth'</span>,</div><div class=\"line\">\t<span class=\"string\">'height'</span>: <span class=\"string\">'offsetHeight'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLocation</span>(<span class=\"params\">elem, target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> target) &#123;</div><div class=\"line\">\t\tobj[k] = elem[kv[k]];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDistance</span>(<span class=\"params\">location, target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> target) &#123;</div><div class=\"line\">\t\tobj[k] = <span class=\"built_in\">parseFloat</span>(target[k]) - location[k];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTween</span>(<span class=\"params\">time, location, target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> target) &#123;</div><div class=\"line\">\t\tobj[k] = easing[easingName](<span class=\"literal\">null</span>, time, location[k], target[k], duration);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setStyles</span>(<span class=\"params\">elem, location, tween</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> k;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (k <span class=\"keyword\">in</span> location) &#123;</div><div class=\"line\">\t\telem.style[k] = location[k] + tween[k] + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\ttween, <span class=\"comment\">// 单位时间间隔的位移&#123;left: 800, top:400&#125;</span></div><div class=\"line\">\t\tlocation, <span class=\"comment\">// 起始位置&#123;left: 8,top: 8&#125;</span></div><div class=\"line\">\t\tdistance, <span class=\"comment\">// 动画总距离&#123;left: 992, top: 792&#125;</span></div><div class=\"line\">\t\tstartTime, <span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\tcurrentTime, <span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\tlocation = getLocation(elem, target);</div><div class=\"line\">\tdistance = getDistance(location, target);</div><div class=\"line\">\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>; <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (time &gt;= duration) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\ttween = distance;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\tglobal.clearInterval(timer);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 3 删除动画元素的timerId属性</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> elem.timerId;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\ttween = getTween(time, location, target, duration, easingName);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 设置动画属性值</span></div><div class=\"line\">\t\tsetStyles(elem, location, tween);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\ttimer = global.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">\t<span class=\"comment\">// 把定时器id存储在动画元素上（以自定义属性）</span></div><div class=\"line\">\telem.timerId = timer;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"实现animate和stop方法\"><a href=\"#实现animate和stop方法\" class=\"headerlink\" title=\"实现animate和stop方法\"></a>实现animate和stop方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">itcast.fn.extend(&#123;</div><div class=\"line\">\t<span class=\"attr\">animate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t\teasingName = easingName || <span class=\"string\">'linear'</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!(<span class=\"string\">'timerId'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>))&#123;</div><div class=\"line\">\t\t\t\tanimate(<span class=\"keyword\">this</span>, target, duration, easingName);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">stop</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"string\">'timerId'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)&#123;</div><div class=\"line\">\t\t\t\tglobal.clearInterval(<span class=\"keyword\">this</span>.timerId);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.timerId;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>动画模块的实现<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"itcast.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">\t\tdiv &#123;</div><div class=\"line\">\t\t\twidth: 100px;</div><div class=\"line\">\t\t\theight: 100px;</div><div class=\"line\">\t\t\tborder: 5px solid yellowgreen;</div><div class=\"line\">\t\t\tposition: relative;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">\t\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t$(<span class=\"string\">'#dv'</span>).animate(&#123;<span class=\"attr\">left</span> : <span class=\"number\">1000</span>&#125;, <span class=\"number\">1500</span>);</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#stop'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t$(<span class=\"string\">'#dv'</span>).stop();</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"start\"</span>&gt;</span>开始\t动画<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"stop\"</span>&gt;</span>停止\t动画<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"<p>JQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!</p>","more":"<h2 id=\"动画原理\"><a href=\"#动画原理\" class=\"headerlink\" title=\"动画原理\"></a>动画原理</h2><ul>\n<li>根据人眼具有 <code>0.1</code> 秒的视觉残留,只有在一秒切换至少 <code>24</code> 个画面就会产生动画</li>\n</ul>\n<h2 id=\"动画的基本结构\"><a href=\"#动画的基本结构\" class=\"headerlink\" title=\"动画的基本结构\"></a>动画的基本结构</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//动画</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">window</span>.setInterval(render, time);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"小动画案例\"><a href=\"#小动画案例\" class=\"headerlink\" title=\"小动画案例\"></a>小动画案例</h2><ul>\n<li>奔跑的小矩形</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>奔跑吧矩形<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"itcast.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">\t\tdiv &#123;</div><div class=\"line\">\t\t\twidth: 100px;</div><div class=\"line\">\t\t\theight: 100px;</div><div class=\"line\">\t\t\tborder: 5px solid yellowgreen;</div><div class=\"line\">\t\t\tposition: relative;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, step, target</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> left,<span class=\"comment\">//起始位置</span></div><div class=\"line\">\t\t\ttimer;<span class=\"comment\">//定时器id</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">//用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t\t\tleft = elem.offsetLeft;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>( left + step &gt;= target )&#123;</div><div class=\"line\">\t\t\t\telem.style.left = target + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\telem.style.left = left + step + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\t\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">3</span>, <span class=\"number\">1000</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"start\"</span>&gt;</span>开始动画<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"匀速直线动画\"><a href=\"#匀速直线动画\" class=\"headerlink\" title=\"匀速直线动画\"></a>匀速直线动画</h2><ol>\n<li>固定时间</li>\n<li>固定距离</li>\n<li>如何判断动画结束的时机?<ul>\n<li>使用时间来判断是否结束动画</li>\n<li>如果动画时间到达指定时间,那么就结束动画,并让动画元素到达终点</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>定义动画函数, <code>animate</code> 函数. 当调用 <code>animate</code> 函数时, 即动画开始的时间</li>\n<li>定义 <code>render</code> 函数. 用来给动画元素设置属性值<ul>\n<li>计算当前动画元素所在的位置, 然后累计到其对应属性值上.</li>\n<li>首先计算动画的时间间隔</li>\n<li>如果时间间隔大于或等于指定的总时间, 那么就停止动画并设置动画元素到达终点</li>\n<li>否则, 根据速度, 动画时间间隔计算出位移. 再将其于起始位置累加后赋值给 <code>elem</code> </li>\n</ul>\n</li>\n<li>定义定时器, 开始动画. </li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\tspeed, <span class=\"comment\">// 速度</span></div><div class=\"line\">\t\tlocation, <span class=\"comment\">// 起始位置</span></div><div class=\"line\">\t\tdistance, <span class=\"comment\">// 动画总距离</span></div><div class=\"line\">\t\tstartTime,<span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\tcurrentTime,<span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\tlocation = elem.offsetLeft;</div><div class=\"line\">\tdistance = target - location;</div><div class=\"line\">\tspeed = distance / duration;</div><div class=\"line\">\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;  <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(time &gt;= duration)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\telem.style.left = target + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\telem.style.left = speed * time + location + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">1000</span>, <span class=\"number\">2000</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"匀减速直线动画\"><a href=\"#匀减速直线动画\" class=\"headerlink\" title=\"匀减速直线动画\"></a>匀减速直线动画</h2><ol>\n<li>物理公式<ul>\n<li>a：    加速度</li>\n<li>t：    时间间隔</li>\n<li>v0：    初始速度</li>\n<li>vt：    末速度</li>\n<li>S：    位移</li>\n<li>正方向：    S = v0 <em> t + a + t </em> t / 2;</li>\n</ul>\n</li>\n<li>S ==&gt; target - location <br> t ==&gt; duration <br> v0 = 0</li>\n<li>正方向 <br> a = 2 <em> ( S - v0 </em> t) / ( t <em> t) <br> ==&gt; = 2 </em> S / ( t <em> t) <br> ==&gt; = 2 </em> ( target - location ) / ( duration <em> duration ) <br> vt = 2 </em> ( target - location ) / duration </li>\n<li>time 时间间隔内的 匀减速位移 <br> tween = v0 <em> t - a </em> t <em> t / 2 <br> ==&gt; tween = 2 </em> ( target - location ) <em> time / duration <br> - (target - location ) </em> time <em> time / ( duration </em> duration )</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\ttween, <span class=\"comment\">// 单位时间间隔的位移</span></div><div class=\"line\">\t\tlocation, <span class=\"comment\">// 起始位置</span></div><div class=\"line\">\t\tdistance, <span class=\"comment\">// 动画总距离</span></div><div class=\"line\">\t\tstartTime, <span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\tcurrentTime, <span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\tlocation = elem.offsetLeft;</div><div class=\"line\">\tdistance = target - location;</div><div class=\"line\">\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>; <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (time &gt;= duration) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\ttween = distance;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\ttween = <span class=\"number\">2</span> * distance * time / duration - distance * time * time / (duration * duration);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\telem.style.left = tween + location + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">1000</span>, <span class=\"number\">1500</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"使用对象封装缓动函数\"><a href=\"#使用对象封装缓动函数\" class=\"headerlink\" title=\"使用对象封装缓动函数\"></a>使用对象封装缓动函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">\tx: null,</div><div class=\"line\">\tt: 时间间隔</div><div class=\"line\">\tb: 起始位置</div><div class=\"line\">\tc: 终止位置</div><div class=\"line\">\td: 总时间</div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> easing = &#123;\t\t</div><div class=\"line\">\t<span class=\"attr\">linear</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (c - b) * t / d;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">minusspeed</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span> * (c - b) * t / d - (c - b) * t * t / (d * d);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInQuad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutQuad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * (t /= d) * (t - <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutQuad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * ((--t) * (t - <span class=\"number\">2</span>) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInCubic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutCubic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * ((t = t / d - <span class=\"number\">1</span>) * t * t + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutCubic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * t + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInQuart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * t * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutQuart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * ((t = t / d - <span class=\"number\">1</span>) * t * t * t - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutQuart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * t * t - <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInQuint</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * t * t * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutQuint</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * ((t = t / d - <span class=\"number\">1</span>) * t * t * t * t + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutQuint</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t * t * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * t * t * t + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInSine</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * <span class=\"built_in\">Math</span>.cos(t / d * (<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>)) + c + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutSine</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * <span class=\"built_in\">Math</span>.sin(t / d * (<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>)) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutSine</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI * t / d) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInExpo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (t == <span class=\"number\">0</span>) ? b : c * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t / d - <span class=\"number\">1</span>)) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutExpo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (t == d) ? b + c : c * (-<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * t / d) + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutExpo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == d) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t - <span class=\"number\">1</span>)) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * (-<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * --t) + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInCirc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * (<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - (t /= d) * t) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutCirc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - (t = t / d - <span class=\"number\">1</span>) * t) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutCirc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - t * t) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - (t -= <span class=\"number\">2</span>) * t) + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInElastic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> a = c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d) == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!p) p = d * <span class=\"number\">.3</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"built_in\">Math</span>.abs(c)) &#123;</div><div class=\"line\">\t\t\ta = c;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s = p / <span class=\"number\">4</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">var</span> s = p / (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) * <span class=\"built_in\">Math</span>.asin(c / a);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -(a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t -= <span class=\"number\">1</span>)) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p)) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutElastic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> a = c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d) == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!p) p = d * <span class=\"number\">.3</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"built_in\">Math</span>.abs(c)) &#123;</div><div class=\"line\">\t\t\ta = c;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s = p / <span class=\"number\">4</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">var</span> s = p / (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) * <span class=\"built_in\">Math</span>.asin(c / a);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * t) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p) + c + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutElastic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> a = c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!p) p = d * (<span class=\"number\">.3</span> * <span class=\"number\">1.5</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"built_in\">Math</span>.abs(c)) &#123;</div><div class=\"line\">\t\t\ta = c;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s = p / <span class=\"number\">4</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">var</span> s = p / (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) * <span class=\"built_in\">Math</span>.asin(c / a);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-.5</span> * (a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t -= <span class=\"number\">1</span>)) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p)) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * (t -= <span class=\"number\">1</span>)) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p) * <span class=\"number\">.5</span> + c + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInBack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d, s</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">undefined</span>) s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * ((s + <span class=\"number\">1</span>) * t - s) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutBack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d, s</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">undefined</span>) s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * ((t = t / d - <span class=\"number\">1</span>) * t * ((s + <span class=\"number\">1</span>) * t + s) + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutBack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d, s</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">undefined</span>) s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * (t * t * (((s *= (<span class=\"number\">1.525</span>)) + <span class=\"number\">1</span>) * t - s)) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * (((s *= (<span class=\"number\">1.525</span>)) + <span class=\"number\">1</span>) * t + s) + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutBounce</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d) &lt; (<span class=\"number\">1</span> / <span class=\"number\">2.75</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * t * t) + b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; (<span class=\"number\">2</span> / <span class=\"number\">2.75</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * (t -= (<span class=\"number\">1.5</span> / <span class=\"number\">2.75</span>)) * t + <span class=\"number\">.75</span>) + b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; (<span class=\"number\">2.5</span> / <span class=\"number\">2.75</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * (t -= (<span class=\"number\">2.25</span> / <span class=\"number\">2.75</span>)) * t + <span class=\"number\">.9375</span>) + b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * (t -= (<span class=\"number\">2.625</span> / <span class=\"number\">2.75</span>)) * t + <span class=\"number\">.984375</span>) + b;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"抽取缓动函数\"><a href=\"#抽取缓动函数\" class=\"headerlink\" title=\"抽取缓动函数\"></a>抽取缓动函数</h2><p>将缓动函数的可变变量抽取出来,以便于封装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\t\ttween, <span class=\"comment\">// 单位时间间隔的位移</span></div><div class=\"line\">\t\t\tlocation, <span class=\"comment\">// 起始位置</span></div><div class=\"line\">\t\t\tdistance, <span class=\"comment\">// 动画总距离</span></div><div class=\"line\">\t\t\tstartTime,<span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\t\tcurrentTime,<span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\t\tlocation = elem.offsetLeft;</div><div class=\"line\">\t\tdistance = target - location;\t\t\t\t</div><div class=\"line\">\t\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;  <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(time &gt;= duration)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\t\ttween = distance;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\t\ttween = easing[easingName](<span class=\"literal\">null</span>, time, location, target, duration);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\telem.style.left = tween + location + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\t\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">1000</span>, <span class=\"number\">1500</span>, <span class=\"string\">'easeInOutElastic'</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"多属性动画的实现\"><a href=\"#多属性动画的实现\" class=\"headerlink\" title=\"多属性动画的实现\"></a>多属性动画的实现</h2><p>到此我们就可以继续进行框架的封装了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取所有动画属性的起始值</span></div><div class=\"line\"><span class=\"keyword\">var</span> kv = &#123;</div><div class=\"line\">\t<span class=\"string\">'left'</span>: <span class=\"string\">'offsetLeft'</span>,</div><div class=\"line\">\t<span class=\"string\">'top'</span>: <span class=\"string\">'offsetTop'</span>,</div><div class=\"line\">\t<span class=\"string\">'width'</span>: <span class=\"string\">'offsetWidth'</span>,</div><div class=\"line\">\t<span class=\"string\">'height'</span>: <span class=\"string\">'offsetHeight'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLocation</span>(<span class=\"params\">elem, target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> target) &#123;</div><div class=\"line\">\t\tobj[k] = elem[kv[k]];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDistance</span>(<span class=\"params\">location, target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> target) &#123;</div><div class=\"line\">\t\tobj[k] = <span class=\"built_in\">parseFloat</span>(target[k]) - location[k];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTween</span>(<span class=\"params\">time, location, target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> target) &#123;</div><div class=\"line\">\t\tobj[k] = easing[easingName](<span class=\"literal\">null</span>, time, location[k], target[k], duration);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setStyles</span>(<span class=\"params\">elem, location, tween</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> k;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (k <span class=\"keyword\">in</span> location) &#123;</div><div class=\"line\">\t\telem.style[k] = location[k] + tween[k] + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\ttween, <span class=\"comment\">// 单位时间间隔的位移&#123;left: 800, top:400&#125;</span></div><div class=\"line\">\t\tlocation, <span class=\"comment\">// 起始位置&#123;left: 8,top: 8&#125;</span></div><div class=\"line\">\t\tdistance, <span class=\"comment\">// 动画总距离&#123;left: 992, top: 792&#125;</span></div><div class=\"line\">\t\tstartTime, <span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\tcurrentTime, <span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\tlocation = getLocation(elem, target);</div><div class=\"line\">\tdistance = getDistance(location, target);</div><div class=\"line\">\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>; <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (time &gt;= duration) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\ttween = distance;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\tglobal.clearInterval(timer);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 3 删除动画元素的timerId属性</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> elem.timerId;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\ttween = getTween(time, location, target, duration, easingName);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 设置动画属性值</span></div><div class=\"line\">\t\tsetStyles(elem, location, tween);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\ttimer = global.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">\t<span class=\"comment\">// 把定时器id存储在动画元素上（以自定义属性）</span></div><div class=\"line\">\telem.timerId = timer;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"实现animate和stop方法\"><a href=\"#实现animate和stop方法\" class=\"headerlink\" title=\"实现animate和stop方法\"></a>实现animate和stop方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">itcast.fn.extend(&#123;</div><div class=\"line\">\t<span class=\"attr\">animate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t\teasingName = easingName || <span class=\"string\">'linear'</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!(<span class=\"string\">'timerId'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>))&#123;</div><div class=\"line\">\t\t\t\tanimate(<span class=\"keyword\">this</span>, target, duration, easingName);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">stop</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"string\">'timerId'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)&#123;</div><div class=\"line\">\t\t\t\tglobal.clearInterval(<span class=\"keyword\">this</span>.timerId);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.timerId;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>动画模块的实现<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"itcast.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">\t\tdiv &#123;</div><div class=\"line\">\t\t\twidth: 100px;</div><div class=\"line\">\t\t\theight: 100px;</div><div class=\"line\">\t\t\tborder: 5px solid yellowgreen;</div><div class=\"line\">\t\t\tposition: relative;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">\t\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t$(<span class=\"string\">'#dv'</span>).animate(&#123;<span class=\"attr\">left</span> : <span class=\"number\">1000</span>&#125;, <span class=\"number\">1500</span>);</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#stop'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t$(<span class=\"string\">'#dv'</span>).stop();</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"start\"</span>&gt;</span>开始\t动画<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"stop\"</span>&gt;</span>停止\t动画<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"JavaScript高级篇之part1","date":"2016-05-08T09:31:48.000Z","_content":"\njavascript高级与面向对象笔记整理，第一篇！！\n\n<!-- more -->\n\n## JavaScript基础知识复习\n\n### JavaScript的基本组成\n\n* `ECMAScript`     规定了 `JavaScript` 的语法规范\n* `DOM`            提供了访问页面元素的 `API`\n* `BOM`            提供了访问浏览器相关信息的 `API`\n\n### JavaScript的数据类型\n\n#### 简单类型\n\n* `string`\n* `number`\n* `boolean`\n* `undefined`\n\n#### 复杂类型\n\n* `Object`\n* `function`\n* `Array`\n* `Date`\n* `RegExp`\n* `Math`（对象）\n* `String`\n* `Number`\n* `Boolean`\n* `null(特殊的)`\n\n#### 获取类型的关键字 `typeof`\n\n```js\ntypeof 变量名（表达式）\n//返回值为字符串类型\n```\n\n#### 引用类型 值类型\n\n##### 引用类型\n\n存储的是数据的地址的数据就是引用类型的数据\n\t\n##### 值类型\n\n存储的数据本身的数据就是值类型的数据\n\n##### 赋值特征\n\n* 值类型进行赋值的时候，直接将数据复制一份赋值给新的变量，两份数据互不影响\n* 引用类型进行赋值的时候，将数据的地址复制一份赋值给新的变量，两个变量指向同一个对象，两个互相影响\n\n### `in` 关键字\n\n#### `for-in`\n\n用来遍历对象的属性的，每次遍历到的属性是字符串类型的\n\t\n```js\n\tfor(var k in obj){\n\t\t//这里的k就是每个键\n\t}\n```\n\n#### `in`\n\n检测对象中是否存在某个属性\n\t\n```js\n属性名 in 对象名\n```\n\n### 逻辑中断\n\n#### ||\n\n `表达式1 || 表达式2`\n如果表达式 `1` 为真，就返回表达式 `1` ，如果表达式 `1` 位假，则返回表达式 `2`\n\t\n#### &&\n\n `表达式1 && 表达式2`\n如果表达式 `1` 为真，就返回表达式 `2` ，如果表达式 `1` 为假，则返回表达式 `1`\n\n### delete关键字\n\n* 删除未使用 `var` 声明的变量\n* 删除对象的属性\n*  `window` 有自带的属性 `name` \n\n### `continue` 和 `break`\n\n*  `continue ` 跳出本次循环，继续下次循环\n*  `break` 跳出整个循环，继续执行循环之后的代码\n\n### 对象的动态特性\n\n对象在创建出来之后，可以随时的新增成员（方法和属性），这就是对象的动态特性\n\n### 调试工具的使用\n\n* 普通断点\n* 条件断点\n* `Elements`  审查元素 做 `css`\n* `Console`  跟页面在同一个 `js` 的运行环境中，可以写任何的 `js` 代码，也可以用 `js` 操作页面元素\n* `Sources`  所有的资源文件都在这里，最重要的就是可以在这里对 `js`代码进行断点调试\n\n### 异常处理\n\n```js\ntry{\n    //可能出现异常的代码\n}catch(e){\n    //e 异常对象，异常信息\n    //捕获异常后的处理代码\n}finally{\n    //不论是否发生异常，都会执行的代码\n}\n```\n\n## 面向对象简单介绍\n\n### 面向对象的基本概念\n\n面向对象是一种思维方式，他是将解决问题的关注点放到了解决问题所需要的一些列对象身上\n\n### 面向过程的基本概念\n\n面向过程是一种思维方式，他是将解决问题的关注点放到了解决问题的每一个详细的步骤上\n\n### 面向对象就是对面向过程的封装","source":"_posts/javascript-part1.md","raw":"---\ntitle: JavaScript高级篇之part1\ndate: 2016-05-08 17:31:48\ntags: javascript\ncategories: javascript\n---\n\njavascript高级与面向对象笔记整理，第一篇！！\n\n<!-- more -->\n\n## JavaScript基础知识复习\n\n### JavaScript的基本组成\n\n* `ECMAScript`     规定了 `JavaScript` 的语法规范\n* `DOM`            提供了访问页面元素的 `API`\n* `BOM`            提供了访问浏览器相关信息的 `API`\n\n### JavaScript的数据类型\n\n#### 简单类型\n\n* `string`\n* `number`\n* `boolean`\n* `undefined`\n\n#### 复杂类型\n\n* `Object`\n* `function`\n* `Array`\n* `Date`\n* `RegExp`\n* `Math`（对象）\n* `String`\n* `Number`\n* `Boolean`\n* `null(特殊的)`\n\n#### 获取类型的关键字 `typeof`\n\n```js\ntypeof 变量名（表达式）\n//返回值为字符串类型\n```\n\n#### 引用类型 值类型\n\n##### 引用类型\n\n存储的是数据的地址的数据就是引用类型的数据\n\t\n##### 值类型\n\n存储的数据本身的数据就是值类型的数据\n\n##### 赋值特征\n\n* 值类型进行赋值的时候，直接将数据复制一份赋值给新的变量，两份数据互不影响\n* 引用类型进行赋值的时候，将数据的地址复制一份赋值给新的变量，两个变量指向同一个对象，两个互相影响\n\n### `in` 关键字\n\n#### `for-in`\n\n用来遍历对象的属性的，每次遍历到的属性是字符串类型的\n\t\n```js\n\tfor(var k in obj){\n\t\t//这里的k就是每个键\n\t}\n```\n\n#### `in`\n\n检测对象中是否存在某个属性\n\t\n```js\n属性名 in 对象名\n```\n\n### 逻辑中断\n\n#### ||\n\n `表达式1 || 表达式2`\n如果表达式 `1` 为真，就返回表达式 `1` ，如果表达式 `1` 位假，则返回表达式 `2`\n\t\n#### &&\n\n `表达式1 && 表达式2`\n如果表达式 `1` 为真，就返回表达式 `2` ，如果表达式 `1` 为假，则返回表达式 `1`\n\n### delete关键字\n\n* 删除未使用 `var` 声明的变量\n* 删除对象的属性\n*  `window` 有自带的属性 `name` \n\n### `continue` 和 `break`\n\n*  `continue ` 跳出本次循环，继续下次循环\n*  `break` 跳出整个循环，继续执行循环之后的代码\n\n### 对象的动态特性\n\n对象在创建出来之后，可以随时的新增成员（方法和属性），这就是对象的动态特性\n\n### 调试工具的使用\n\n* 普通断点\n* 条件断点\n* `Elements`  审查元素 做 `css`\n* `Console`  跟页面在同一个 `js` 的运行环境中，可以写任何的 `js` 代码，也可以用 `js` 操作页面元素\n* `Sources`  所有的资源文件都在这里，最重要的就是可以在这里对 `js`代码进行断点调试\n\n### 异常处理\n\n```js\ntry{\n    //可能出现异常的代码\n}catch(e){\n    //e 异常对象，异常信息\n    //捕获异常后的处理代码\n}finally{\n    //不论是否发生异常，都会执行的代码\n}\n```\n\n## 面向对象简单介绍\n\n### 面向对象的基本概念\n\n面向对象是一种思维方式，他是将解决问题的关注点放到了解决问题所需要的一些列对象身上\n\n### 面向过程的基本概念\n\n面向过程是一种思维方式，他是将解决问题的关注点放到了解决问题的每一个详细的步骤上\n\n### 面向对象就是对面向过程的封装","slug":"javascript-part1","published":1,"updated":"2016-11-24T01:21:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvos002huwg7k63hh1yy","content":"<p>javascript高级与面向对象笔记整理，第一篇！！</p>\n<a id=\"more\"></a>\n<h2 id=\"JavaScript基础知识复习\"><a href=\"#JavaScript基础知识复习\" class=\"headerlink\" title=\"JavaScript基础知识复习\"></a>JavaScript基础知识复习</h2><h3 id=\"JavaScript的基本组成\"><a href=\"#JavaScript的基本组成\" class=\"headerlink\" title=\"JavaScript的基本组成\"></a>JavaScript的基本组成</h3><ul>\n<li><code>ECMAScript</code>     规定了 <code>JavaScript</code> 的语法规范</li>\n<li><code>DOM</code>            提供了访问页面元素的 <code>API</code></li>\n<li><code>BOM</code>            提供了访问浏览器相关信息的 <code>API</code></li>\n</ul>\n<h3 id=\"JavaScript的数据类型\"><a href=\"#JavaScript的数据类型\" class=\"headerlink\" title=\"JavaScript的数据类型\"></a>JavaScript的数据类型</h3><h4 id=\"简单类型\"><a href=\"#简单类型\" class=\"headerlink\" title=\"简单类型\"></a>简单类型</h4><ul>\n<li><code>string</code></li>\n<li><code>number</code></li>\n<li><code>boolean</code></li>\n<li><code>undefined</code></li>\n</ul>\n<h4 id=\"复杂类型\"><a href=\"#复杂类型\" class=\"headerlink\" title=\"复杂类型\"></a>复杂类型</h4><ul>\n<li><code>Object</code></li>\n<li><code>function</code></li>\n<li><code>Array</code></li>\n<li><code>Date</code></li>\n<li><code>RegExp</code></li>\n<li><code>Math</code>（对象）</li>\n<li><code>String</code></li>\n<li><code>Number</code></li>\n<li><code>Boolean</code></li>\n<li><code>null(特殊的)</code></li>\n</ul>\n<h4 id=\"获取类型的关键字-typeof\"><a href=\"#获取类型的关键字-typeof\" class=\"headerlink\" title=\"获取类型的关键字 typeof\"></a>获取类型的关键字 <code>typeof</code></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> 变量名（表达式）</div><div class=\"line\"><span class=\"comment\">//返回值为字符串类型</span></div></pre></td></tr></table></figure>\n<h4 id=\"引用类型-值类型\"><a href=\"#引用类型-值类型\" class=\"headerlink\" title=\"引用类型 值类型\"></a>引用类型 值类型</h4><h5 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h5><p>存储的是数据的地址的数据就是引用类型的数据</p>\n<h5 id=\"值类型\"><a href=\"#值类型\" class=\"headerlink\" title=\"值类型\"></a>值类型</h5><p>存储的数据本身的数据就是值类型的数据</p>\n<h5 id=\"赋值特征\"><a href=\"#赋值特征\" class=\"headerlink\" title=\"赋值特征\"></a>赋值特征</h5><ul>\n<li>值类型进行赋值的时候，直接将数据复制一份赋值给新的变量，两份数据互不影响</li>\n<li>引用类型进行赋值的时候，将数据的地址复制一份赋值给新的变量，两个变量指向同一个对象，两个互相影响</li>\n</ul>\n<h3 id=\"in-关键字\"><a href=\"#in-关键字\" class=\"headerlink\" title=\"in 关键字\"></a><code>in</code> 关键字</h3><h4 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for-in\"></a><code>for-in</code></h4><p>用来遍历对象的属性的，每次遍历到的属性是字符串类型的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj)&#123;</div><div class=\"line\">\t<span class=\"comment\">//这里的k就是每个键</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a><code>in</code></h4><p>检测对象中是否存在某个属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">属性名 <span class=\"keyword\">in</span> 对象名</div></pre></td></tr></table></figure>\n<h3 id=\"逻辑中断\"><a href=\"#逻辑中断\" class=\"headerlink\" title=\"逻辑中断\"></a>逻辑中断</h3><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"||\"></a>||</h4><p> <code>表达式1 || 表达式2</code><br>如果表达式 <code>1</code> 为真，就返回表达式 <code>1</code> ，如果表达式 <code>1</code> 位假，则返回表达式 <code>2</code></p>\n<h4 id=\"amp-amp\"><a href=\"#amp-amp\" class=\"headerlink\" title=\"&amp;&amp;\"></a>&amp;&amp;</h4><p> <code>表达式1 &amp;&amp; 表达式2</code><br>如果表达式 <code>1</code> 为真，就返回表达式 <code>2</code> ，如果表达式 <code>1</code> 为假，则返回表达式 <code>1</code></p>\n<h3 id=\"delete关键字\"><a href=\"#delete关键字\" class=\"headerlink\" title=\"delete关键字\"></a>delete关键字</h3><ul>\n<li>删除未使用 <code>var</code> 声明的变量</li>\n<li>删除对象的属性</li>\n<li><code>window</code> 有自带的属性 <code>name</code> </li>\n</ul>\n<h3 id=\"continue-和-break\"><a href=\"#continue-和-break\" class=\"headerlink\" title=\"continue 和 break\"></a><code>continue</code> 和 <code>break</code></h3><ul>\n<li><code>continue</code> 跳出本次循环，继续下次循环</li>\n<li><code>break</code> 跳出整个循环，继续执行循环之后的代码</li>\n</ul>\n<h3 id=\"对象的动态特性\"><a href=\"#对象的动态特性\" class=\"headerlink\" title=\"对象的动态特性\"></a>对象的动态特性</h3><p>对象在创建出来之后，可以随时的新增成员（方法和属性），这就是对象的动态特性</p>\n<h3 id=\"调试工具的使用\"><a href=\"#调试工具的使用\" class=\"headerlink\" title=\"调试工具的使用\"></a>调试工具的使用</h3><ul>\n<li>普通断点</li>\n<li>条件断点</li>\n<li><code>Elements</code>  审查元素 做 <code>css</code></li>\n<li><code>Console</code>  跟页面在同一个 <code>js</code> 的运行环境中，可以写任何的 <code>js</code> 代码，也可以用 <code>js</code> 操作页面元素</li>\n<li><code>Sources</code>  所有的资源文件都在这里，最重要的就是可以在这里对 <code>js</code>代码进行断点调试</li>\n</ul>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//可能出现异常的代码</span></div><div class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</div><div class=\"line\">    <span class=\"comment\">//e 异常对象，异常信息</span></div><div class=\"line\">    <span class=\"comment\">//捕获异常后的处理代码</span></div><div class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//不论是否发生异常，都会执行的代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"面向对象简单介绍\"><a href=\"#面向对象简单介绍\" class=\"headerlink\" title=\"面向对象简单介绍\"></a>面向对象简单介绍</h2><h3 id=\"面向对象的基本概念\"><a href=\"#面向对象的基本概念\" class=\"headerlink\" title=\"面向对象的基本概念\"></a>面向对象的基本概念</h3><p>面向对象是一种思维方式，他是将解决问题的关注点放到了解决问题所需要的一些列对象身上</p>\n<h3 id=\"面向过程的基本概念\"><a href=\"#面向过程的基本概念\" class=\"headerlink\" title=\"面向过程的基本概念\"></a>面向过程的基本概念</h3><p>面向过程是一种思维方式，他是将解决问题的关注点放到了解决问题的每一个详细的步骤上</p>\n<h3 id=\"面向对象就是对面向过程的封装\"><a href=\"#面向对象就是对面向过程的封装\" class=\"headerlink\" title=\"面向对象就是对面向过程的封装\"></a>面向对象就是对面向过程的封装</h3>","excerpt":"<p>javascript高级与面向对象笔记整理，第一篇！！</p>","more":"<h2 id=\"JavaScript基础知识复习\"><a href=\"#JavaScript基础知识复习\" class=\"headerlink\" title=\"JavaScript基础知识复习\"></a>JavaScript基础知识复习</h2><h3 id=\"JavaScript的基本组成\"><a href=\"#JavaScript的基本组成\" class=\"headerlink\" title=\"JavaScript的基本组成\"></a>JavaScript的基本组成</h3><ul>\n<li><code>ECMAScript</code>     规定了 <code>JavaScript</code> 的语法规范</li>\n<li><code>DOM</code>            提供了访问页面元素的 <code>API</code></li>\n<li><code>BOM</code>            提供了访问浏览器相关信息的 <code>API</code></li>\n</ul>\n<h3 id=\"JavaScript的数据类型\"><a href=\"#JavaScript的数据类型\" class=\"headerlink\" title=\"JavaScript的数据类型\"></a>JavaScript的数据类型</h3><h4 id=\"简单类型\"><a href=\"#简单类型\" class=\"headerlink\" title=\"简单类型\"></a>简单类型</h4><ul>\n<li><code>string</code></li>\n<li><code>number</code></li>\n<li><code>boolean</code></li>\n<li><code>undefined</code></li>\n</ul>\n<h4 id=\"复杂类型\"><a href=\"#复杂类型\" class=\"headerlink\" title=\"复杂类型\"></a>复杂类型</h4><ul>\n<li><code>Object</code></li>\n<li><code>function</code></li>\n<li><code>Array</code></li>\n<li><code>Date</code></li>\n<li><code>RegExp</code></li>\n<li><code>Math</code>（对象）</li>\n<li><code>String</code></li>\n<li><code>Number</code></li>\n<li><code>Boolean</code></li>\n<li><code>null(特殊的)</code></li>\n</ul>\n<h4 id=\"获取类型的关键字-typeof\"><a href=\"#获取类型的关键字-typeof\" class=\"headerlink\" title=\"获取类型的关键字 typeof\"></a>获取类型的关键字 <code>typeof</code></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> 变量名（表达式）</div><div class=\"line\"><span class=\"comment\">//返回值为字符串类型</span></div></pre></td></tr></table></figure>\n<h4 id=\"引用类型-值类型\"><a href=\"#引用类型-值类型\" class=\"headerlink\" title=\"引用类型 值类型\"></a>引用类型 值类型</h4><h5 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h5><p>存储的是数据的地址的数据就是引用类型的数据</p>\n<h5 id=\"值类型\"><a href=\"#值类型\" class=\"headerlink\" title=\"值类型\"></a>值类型</h5><p>存储的数据本身的数据就是值类型的数据</p>\n<h5 id=\"赋值特征\"><a href=\"#赋值特征\" class=\"headerlink\" title=\"赋值特征\"></a>赋值特征</h5><ul>\n<li>值类型进行赋值的时候，直接将数据复制一份赋值给新的变量，两份数据互不影响</li>\n<li>引用类型进行赋值的时候，将数据的地址复制一份赋值给新的变量，两个变量指向同一个对象，两个互相影响</li>\n</ul>\n<h3 id=\"in-关键字\"><a href=\"#in-关键字\" class=\"headerlink\" title=\"in 关键字\"></a><code>in</code> 关键字</h3><h4 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for-in\"></a><code>for-in</code></h4><p>用来遍历对象的属性的，每次遍历到的属性是字符串类型的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj)&#123;</div><div class=\"line\">\t<span class=\"comment\">//这里的k就是每个键</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a><code>in</code></h4><p>检测对象中是否存在某个属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">属性名 <span class=\"keyword\">in</span> 对象名</div></pre></td></tr></table></figure>\n<h3 id=\"逻辑中断\"><a href=\"#逻辑中断\" class=\"headerlink\" title=\"逻辑中断\"></a>逻辑中断</h3><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"||\"></a>||</h4><p> <code>表达式1 || 表达式2</code><br>如果表达式 <code>1</code> 为真，就返回表达式 <code>1</code> ，如果表达式 <code>1</code> 位假，则返回表达式 <code>2</code></p>\n<h4 id=\"amp-amp\"><a href=\"#amp-amp\" class=\"headerlink\" title=\"&amp;&amp;\"></a>&amp;&amp;</h4><p> <code>表达式1 &amp;&amp; 表达式2</code><br>如果表达式 <code>1</code> 为真，就返回表达式 <code>2</code> ，如果表达式 <code>1</code> 为假，则返回表达式 <code>1</code></p>\n<h3 id=\"delete关键字\"><a href=\"#delete关键字\" class=\"headerlink\" title=\"delete关键字\"></a>delete关键字</h3><ul>\n<li>删除未使用 <code>var</code> 声明的变量</li>\n<li>删除对象的属性</li>\n<li><code>window</code> 有自带的属性 <code>name</code> </li>\n</ul>\n<h3 id=\"continue-和-break\"><a href=\"#continue-和-break\" class=\"headerlink\" title=\"continue 和 break\"></a><code>continue</code> 和 <code>break</code></h3><ul>\n<li><code>continue</code> 跳出本次循环，继续下次循环</li>\n<li><code>break</code> 跳出整个循环，继续执行循环之后的代码</li>\n</ul>\n<h3 id=\"对象的动态特性\"><a href=\"#对象的动态特性\" class=\"headerlink\" title=\"对象的动态特性\"></a>对象的动态特性</h3><p>对象在创建出来之后，可以随时的新增成员（方法和属性），这就是对象的动态特性</p>\n<h3 id=\"调试工具的使用\"><a href=\"#调试工具的使用\" class=\"headerlink\" title=\"调试工具的使用\"></a>调试工具的使用</h3><ul>\n<li>普通断点</li>\n<li>条件断点</li>\n<li><code>Elements</code>  审查元素 做 <code>css</code></li>\n<li><code>Console</code>  跟页面在同一个 <code>js</code> 的运行环境中，可以写任何的 <code>js</code> 代码，也可以用 <code>js</code> 操作页面元素</li>\n<li><code>Sources</code>  所有的资源文件都在这里，最重要的就是可以在这里对 <code>js</code>代码进行断点调试</li>\n</ul>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//可能出现异常的代码</span></div><div class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</div><div class=\"line\">    <span class=\"comment\">//e 异常对象，异常信息</span></div><div class=\"line\">    <span class=\"comment\">//捕获异常后的处理代码</span></div><div class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//不论是否发生异常，都会执行的代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"面向对象简单介绍\"><a href=\"#面向对象简单介绍\" class=\"headerlink\" title=\"面向对象简单介绍\"></a>面向对象简单介绍</h2><h3 id=\"面向对象的基本概念\"><a href=\"#面向对象的基本概念\" class=\"headerlink\" title=\"面向对象的基本概念\"></a>面向对象的基本概念</h3><p>面向对象是一种思维方式，他是将解决问题的关注点放到了解决问题所需要的一些列对象身上</p>\n<h3 id=\"面向过程的基本概念\"><a href=\"#面向过程的基本概念\" class=\"headerlink\" title=\"面向过程的基本概念\"></a>面向过程的基本概念</h3><p>面向过程是一种思维方式，他是将解决问题的关注点放到了解决问题的每一个详细的步骤上</p>\n<h3 id=\"面向对象就是对面向过程的封装\"><a href=\"#面向对象就是对面向过程的封装\" class=\"headerlink\" title=\"面向对象就是对面向过程的封装\"></a>面向对象就是对面向过程的封装</h3>"},{"title":"JavaScript高级篇之part2","date":"2016-05-18T10:29:33.000Z","_content":"\njavascript高级与面向对象笔记整理，接part1篇！！\n\n<!-- more -->\n\n## 面向对象编程举例\n\n### 1.面向过程的思维方式\n\n代码重复性太高，几乎没有复用性。\n\t\n### 2.使用函数进行封装\n\n提升的代码的复用性\n全局变量污染\n结构混乱，后期维护不便\n\n### 3.使用对象进行封装\n\n使用对象进行封装，在外界之暴露一个对象名，不会造成全局污染\n在对象内部使用对象的属性，进行模块的划分，让代码的结构更加的清晰，便于维护\n\t\n## 创建对象的三种方式\n\n### 字面量创建对象\n\n```js\nvar obj = {\n    key: value,\n    key: value\n}\n```\n\n只能创建一次对象，复用性太差\n\n### 内置构造函数创建对象\n\n```js\nvar obj = new Object();\n```\n\n每次创建出来的对象都是空对象，需要手动的去添加成员\n\n### 自定义构造函数创建对象\n\n自己创建的构造函数就是自定构造函数\n\n## 自定义构造函数\n\n### 构造函数的特点\n\n* 函数的首字母大写\n* 一般和 `new` 关键字配合使用\n* 没有 `return` 语句，返回值默认为创建出来的对象\n* 手动添加 `return` 语句的时候\n* 如果 `return` 的是基本类型的数据，则不会对默认的返回有任何的影响\n* 如果 `return` 的是对象类型的数据，则会替换掉默认的返回值\n\n### 构造函数的执行步骤\n\n* 使用 `new` 关键字创建对象\n* 调用构造函数，将 `this` 赋值为 `new` 关键字创建出来的对象\n* 在构造函数中，使用 `this` 为新创建的对象新增成员\n* 默认返回新创建的这个对象\n\n## 面向对象的三大特性\n\n### 封装\n\n将数据和方法进行封装，对外界只提供指定的接口，外部使用只要调用相应的接口，而不需要关心内部的具体实现\n\t\n### 继承\n\n一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承\n\t\n### 多态\n\nJS中没有多态\n父类的指针指向子类的对象\n\t\n## 原型\n\n### 构造函数存在的问题\n\n如果将方法的定义写在构造函数中，每次创建对象的时候，都会重新的创建一个新的方法，每个对象独占一个方法，但是所有对象的该方法都是一样的，会造成资源浪费\n\n* 在外部声明函数，每次创建对象的时候，将外部的函数引用赋值给当前对象的方法，这样就能保证所有的对象都指向构造函数外部的这个函数\n* 使用原型\n\n### 原型是什么\n\n在构造函数创建出来的时候，系统会默认的为构造函数创建并关联一个空对象，这个的对象就是原型\n\n### 原型的作用\n\n所用通过构造函数创建出来的对象，都能访问原型中的成员，也就是说原型中的成员被所有的对象共享\n\n### 如何访问原型对象\n\n* 构造函数 `.prototype` \n* 对象 `.__proto__` (不推荐使用，因为有兼容性问题，调试的时候可以使用)\n\n### 原型的使用方式\n\n* 利用对象的动态特性为原型添加成员\n* 直接替换原型对象\n\n### 原型的使用注意事项\n\n* 一般情况只将方法放在原型中，属性放在对象中\n* 对象在获取属性的时候，会现在自身查找，如果找到了直接使用，如果没有找到，就去原型中查找，如果找到了就使用\n* 对象在设置属性的时候，不会去原型中查找了，只在自身进行查找，如果找到了，就修改，如果没有找到，就新增\n* 在替换原型对象的时候，需要注意：替换之前创建的对象和替换之后创建的对象的原型不一致\n\n## 继承的实现方式\n\n### 混入式继承（ `mix-in` ）\n\n```js\nvar obj = {};\nvar obj1 = {name:\"adsf\",age:18};\nfor(var k in obj1){\n    obj[k] = obj1[k];\n}\n```\n\n### 原型继承\n\n#### 1.使用混入的方式为原型对象添加成员、\n\n```js\nvar human = {name:\"\",age:18}\nfunction Person(){};\n\nfor(var k in human){\n    Person.prototype[k] = human[k];\n}\n```\n\n#### 2.直接修改原型对象\n\n```js\nfunction Person(){}\nPerson.prototype.name = \"\";\nPerson.prototype.age = 18;\n```\n\n#### 3.替换原型对象\n\n```js\nvar human = {name:\"\",age:18}\nfunction Person(){};\nPerson.prototype = human;\n```\n\n### 经典继承\n\n```js\nvar obj = Object.create(obj1);\n//创建出来一个新的对象obj继承自obj1\n//原理就是把obj1设置为obj的原型\n```\n\n#### 经典继承的兼容性问题\n\n```js\nfunction myCreate(obj){\n    //判断浏览器有没有Object.create方法\n    if(Object.create){\n        //如果有，直接调用\n        return Object.create(obj);\n    }else{\n        function F(){}\n        F.prototype = obj;\n        return new F();\n    }\n}\n```\n\n##### 为什么不能修改原生对象?\n\n因为原生对象是公用的，在多人开发的时候，可能会出现冲突，你修改了，他也修改了，谁的生效呢？","source":"_posts/javascript-part2.md","raw":"---\ntitle: JavaScript高级篇之part2\ndate: 2016-05-18 18:29:33\ntags: javascript\ncategories: javascript\n---\n\njavascript高级与面向对象笔记整理，接part1篇！！\n\n<!-- more -->\n\n## 面向对象编程举例\n\n### 1.面向过程的思维方式\n\n代码重复性太高，几乎没有复用性。\n\t\n### 2.使用函数进行封装\n\n提升的代码的复用性\n全局变量污染\n结构混乱，后期维护不便\n\n### 3.使用对象进行封装\n\n使用对象进行封装，在外界之暴露一个对象名，不会造成全局污染\n在对象内部使用对象的属性，进行模块的划分，让代码的结构更加的清晰，便于维护\n\t\n## 创建对象的三种方式\n\n### 字面量创建对象\n\n```js\nvar obj = {\n    key: value,\n    key: value\n}\n```\n\n只能创建一次对象，复用性太差\n\n### 内置构造函数创建对象\n\n```js\nvar obj = new Object();\n```\n\n每次创建出来的对象都是空对象，需要手动的去添加成员\n\n### 自定义构造函数创建对象\n\n自己创建的构造函数就是自定构造函数\n\n## 自定义构造函数\n\n### 构造函数的特点\n\n* 函数的首字母大写\n* 一般和 `new` 关键字配合使用\n* 没有 `return` 语句，返回值默认为创建出来的对象\n* 手动添加 `return` 语句的时候\n* 如果 `return` 的是基本类型的数据，则不会对默认的返回有任何的影响\n* 如果 `return` 的是对象类型的数据，则会替换掉默认的返回值\n\n### 构造函数的执行步骤\n\n* 使用 `new` 关键字创建对象\n* 调用构造函数，将 `this` 赋值为 `new` 关键字创建出来的对象\n* 在构造函数中，使用 `this` 为新创建的对象新增成员\n* 默认返回新创建的这个对象\n\n## 面向对象的三大特性\n\n### 封装\n\n将数据和方法进行封装，对外界只提供指定的接口，外部使用只要调用相应的接口，而不需要关心内部的具体实现\n\t\n### 继承\n\n一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承\n\t\n### 多态\n\nJS中没有多态\n父类的指针指向子类的对象\n\t\n## 原型\n\n### 构造函数存在的问题\n\n如果将方法的定义写在构造函数中，每次创建对象的时候，都会重新的创建一个新的方法，每个对象独占一个方法，但是所有对象的该方法都是一样的，会造成资源浪费\n\n* 在外部声明函数，每次创建对象的时候，将外部的函数引用赋值给当前对象的方法，这样就能保证所有的对象都指向构造函数外部的这个函数\n* 使用原型\n\n### 原型是什么\n\n在构造函数创建出来的时候，系统会默认的为构造函数创建并关联一个空对象，这个的对象就是原型\n\n### 原型的作用\n\n所用通过构造函数创建出来的对象，都能访问原型中的成员，也就是说原型中的成员被所有的对象共享\n\n### 如何访问原型对象\n\n* 构造函数 `.prototype` \n* 对象 `.__proto__` (不推荐使用，因为有兼容性问题，调试的时候可以使用)\n\n### 原型的使用方式\n\n* 利用对象的动态特性为原型添加成员\n* 直接替换原型对象\n\n### 原型的使用注意事项\n\n* 一般情况只将方法放在原型中，属性放在对象中\n* 对象在获取属性的时候，会现在自身查找，如果找到了直接使用，如果没有找到，就去原型中查找，如果找到了就使用\n* 对象在设置属性的时候，不会去原型中查找了，只在自身进行查找，如果找到了，就修改，如果没有找到，就新增\n* 在替换原型对象的时候，需要注意：替换之前创建的对象和替换之后创建的对象的原型不一致\n\n## 继承的实现方式\n\n### 混入式继承（ `mix-in` ）\n\n```js\nvar obj = {};\nvar obj1 = {name:\"adsf\",age:18};\nfor(var k in obj1){\n    obj[k] = obj1[k];\n}\n```\n\n### 原型继承\n\n#### 1.使用混入的方式为原型对象添加成员、\n\n```js\nvar human = {name:\"\",age:18}\nfunction Person(){};\n\nfor(var k in human){\n    Person.prototype[k] = human[k];\n}\n```\n\n#### 2.直接修改原型对象\n\n```js\nfunction Person(){}\nPerson.prototype.name = \"\";\nPerson.prototype.age = 18;\n```\n\n#### 3.替换原型对象\n\n```js\nvar human = {name:\"\",age:18}\nfunction Person(){};\nPerson.prototype = human;\n```\n\n### 经典继承\n\n```js\nvar obj = Object.create(obj1);\n//创建出来一个新的对象obj继承自obj1\n//原理就是把obj1设置为obj的原型\n```\n\n#### 经典继承的兼容性问题\n\n```js\nfunction myCreate(obj){\n    //判断浏览器有没有Object.create方法\n    if(Object.create){\n        //如果有，直接调用\n        return Object.create(obj);\n    }else{\n        function F(){}\n        F.prototype = obj;\n        return new F();\n    }\n}\n```\n\n##### 为什么不能修改原生对象?\n\n因为原生对象是公用的，在多人开发的时候，可能会出现冲突，你修改了，他也修改了，谁的生效呢？","slug":"javascript-part2","published":1,"updated":"2016-11-24T01:25:17.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvou002juwg75autl0v1","content":"<p>javascript高级与面向对象笔记整理，接part1篇！！</p>\n<a id=\"more\"></a>\n<h2 id=\"面向对象编程举例\"><a href=\"#面向对象编程举例\" class=\"headerlink\" title=\"面向对象编程举例\"></a>面向对象编程举例</h2><h3 id=\"1-面向过程的思维方式\"><a href=\"#1-面向过程的思维方式\" class=\"headerlink\" title=\"1.面向过程的思维方式\"></a>1.面向过程的思维方式</h3><p>代码重复性太高，几乎没有复用性。</p>\n<h3 id=\"2-使用函数进行封装\"><a href=\"#2-使用函数进行封装\" class=\"headerlink\" title=\"2.使用函数进行封装\"></a>2.使用函数进行封装</h3><p>提升的代码的复用性<br>全局变量污染<br>结构混乱，后期维护不便</p>\n<h3 id=\"3-使用对象进行封装\"><a href=\"#3-使用对象进行封装\" class=\"headerlink\" title=\"3.使用对象进行封装\"></a>3.使用对象进行封装</h3><p>使用对象进行封装，在外界之暴露一个对象名，不会造成全局污染<br>在对象内部使用对象的属性，进行模块的划分，让代码的结构更加的清晰，便于维护</p>\n<h2 id=\"创建对象的三种方式\"><a href=\"#创建对象的三种方式\" class=\"headerlink\" title=\"创建对象的三种方式\"></a>创建对象的三种方式</h2><h3 id=\"字面量创建对象\"><a href=\"#字面量创建对象\" class=\"headerlink\" title=\"字面量创建对象\"></a>字面量创建对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">key</span>: value,</div><div class=\"line\">    <span class=\"attr\">key</span>: value</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>只能创建一次对象，复用性太差</p>\n<h3 id=\"内置构造函数创建对象\"><a href=\"#内置构造函数创建对象\" class=\"headerlink\" title=\"内置构造函数创建对象\"></a>内置构造函数创建对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div></pre></td></tr></table></figure>\n<p>每次创建出来的对象都是空对象，需要手动的去添加成员</p>\n<h3 id=\"自定义构造函数创建对象\"><a href=\"#自定义构造函数创建对象\" class=\"headerlink\" title=\"自定义构造函数创建对象\"></a>自定义构造函数创建对象</h3><p>自己创建的构造函数就是自定构造函数</p>\n<h2 id=\"自定义构造函数\"><a href=\"#自定义构造函数\" class=\"headerlink\" title=\"自定义构造函数\"></a>自定义构造函数</h2><h3 id=\"构造函数的特点\"><a href=\"#构造函数的特点\" class=\"headerlink\" title=\"构造函数的特点\"></a>构造函数的特点</h3><ul>\n<li>函数的首字母大写</li>\n<li>一般和 <code>new</code> 关键字配合使用</li>\n<li>没有 <code>return</code> 语句，返回值默认为创建出来的对象</li>\n<li>手动添加 <code>return</code> 语句的时候</li>\n<li>如果 <code>return</code> 的是基本类型的数据，则不会对默认的返回有任何的影响</li>\n<li>如果 <code>return</code> 的是对象类型的数据，则会替换掉默认的返回值</li>\n</ul>\n<h3 id=\"构造函数的执行步骤\"><a href=\"#构造函数的执行步骤\" class=\"headerlink\" title=\"构造函数的执行步骤\"></a>构造函数的执行步骤</h3><ul>\n<li>使用 <code>new</code> 关键字创建对象</li>\n<li>调用构造函数，将 <code>this</code> 赋值为 <code>new</code> 关键字创建出来的对象</li>\n<li>在构造函数中，使用 <code>this</code> 为新创建的对象新增成员</li>\n<li>默认返回新创建的这个对象</li>\n</ul>\n<h2 id=\"面向对象的三大特性\"><a href=\"#面向对象的三大特性\" class=\"headerlink\" title=\"面向对象的三大特性\"></a>面向对象的三大特性</h2><h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>将数据和方法进行封装，对外界只提供指定的接口，外部使用只要调用相应的接口，而不需要关心内部的具体实现</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承</p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>JS中没有多态<br>父类的指针指向子类的对象</p>\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><h3 id=\"构造函数存在的问题\"><a href=\"#构造函数存在的问题\" class=\"headerlink\" title=\"构造函数存在的问题\"></a>构造函数存在的问题</h3><p>如果将方法的定义写在构造函数中，每次创建对象的时候，都会重新的创建一个新的方法，每个对象独占一个方法，但是所有对象的该方法都是一样的，会造成资源浪费</p>\n<ul>\n<li>在外部声明函数，每次创建对象的时候，将外部的函数引用赋值给当前对象的方法，这样就能保证所有的对象都指向构造函数外部的这个函数</li>\n<li>使用原型</li>\n</ul>\n<h3 id=\"原型是什么\"><a href=\"#原型是什么\" class=\"headerlink\" title=\"原型是什么\"></a>原型是什么</h3><p>在构造函数创建出来的时候，系统会默认的为构造函数创建并关联一个空对象，这个的对象就是原型</p>\n<h3 id=\"原型的作用\"><a href=\"#原型的作用\" class=\"headerlink\" title=\"原型的作用\"></a>原型的作用</h3><p>所用通过构造函数创建出来的对象，都能访问原型中的成员，也就是说原型中的成员被所有的对象共享</p>\n<h3 id=\"如何访问原型对象\"><a href=\"#如何访问原型对象\" class=\"headerlink\" title=\"如何访问原型对象\"></a>如何访问原型对象</h3><ul>\n<li>构造函数 <code>.prototype</code> </li>\n<li>对象 <code>.__proto__</code> (不推荐使用，因为有兼容性问题，调试的时候可以使用)</li>\n</ul>\n<h3 id=\"原型的使用方式\"><a href=\"#原型的使用方式\" class=\"headerlink\" title=\"原型的使用方式\"></a>原型的使用方式</h3><ul>\n<li>利用对象的动态特性为原型添加成员</li>\n<li>直接替换原型对象</li>\n</ul>\n<h3 id=\"原型的使用注意事项\"><a href=\"#原型的使用注意事项\" class=\"headerlink\" title=\"原型的使用注意事项\"></a>原型的使用注意事项</h3><ul>\n<li>一般情况只将方法放在原型中，属性放在对象中</li>\n<li>对象在获取属性的时候，会现在自身查找，如果找到了直接使用，如果没有找到，就去原型中查找，如果找到了就使用</li>\n<li>对象在设置属性的时候，不会去原型中查找了，只在自身进行查找，如果找到了，就修改，如果没有找到，就新增</li>\n<li>在替换原型对象的时候，需要注意：替换之前创建的对象和替换之后创建的对象的原型不一致</li>\n</ul>\n<h2 id=\"继承的实现方式\"><a href=\"#继承的实现方式\" class=\"headerlink\" title=\"继承的实现方式\"></a>继承的实现方式</h2><h3 id=\"混入式继承（-mix-in-）\"><a href=\"#混入式继承（-mix-in-）\" class=\"headerlink\" title=\"混入式继承（ mix-in ）\"></a>混入式继承（ <code>mix-in</code> ）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"adsf\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj1)&#123;</div><div class=\"line\">    obj[k] = obj1[k];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><h4 id=\"1-使用混入的方式为原型对象添加成员、\"><a href=\"#1-使用混入的方式为原型对象添加成员、\" class=\"headerlink\" title=\"1.使用混入的方式为原型对象添加成员、\"></a>1.使用混入的方式为原型对象添加成员、</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> human)&#123;</div><div class=\"line\">    Person.prototype[k] = human[k];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-直接修改原型对象\"><a href=\"#2-直接修改原型对象\" class=\"headerlink\" title=\"2.直接修改原型对象\"></a>2.直接修改原型对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">Person.prototype.age = <span class=\"number\">18</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"3-替换原型对象\"><a href=\"#3-替换原型对象\" class=\"headerlink\" title=\"3.替换原型对象\"></a>3.替换原型对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">Person.prototype = human;</div></pre></td></tr></table></figure>\n<h3 id=\"经典继承\"><a href=\"#经典继承\" class=\"headerlink\" title=\"经典继承\"></a>经典继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(obj1);</div><div class=\"line\"><span class=\"comment\">//创建出来一个新的对象obj继承自obj1</span></div><div class=\"line\"><span class=\"comment\">//原理就是把obj1设置为obj的原型</span></div></pre></td></tr></table></figure>\n<h4 id=\"经典继承的兼容性问题\"><a href=\"#经典继承的兼容性问题\" class=\"headerlink\" title=\"经典继承的兼容性问题\"></a>经典继承的兼容性问题</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myCreate</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//判断浏览器有没有Object.create方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.create)&#123;</div><div class=\"line\">        <span class=\"comment\">//如果有，直接调用</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(obj);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">        F.prototype = obj;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"为什么不能修改原生对象\"><a href=\"#为什么不能修改原生对象\" class=\"headerlink\" title=\"为什么不能修改原生对象?\"></a>为什么不能修改原生对象?</h5><p>因为原生对象是公用的，在多人开发的时候，可能会出现冲突，你修改了，他也修改了，谁的生效呢？</p>\n","excerpt":"<p>javascript高级与面向对象笔记整理，接part1篇！！</p>","more":"<h2 id=\"面向对象编程举例\"><a href=\"#面向对象编程举例\" class=\"headerlink\" title=\"面向对象编程举例\"></a>面向对象编程举例</h2><h3 id=\"1-面向过程的思维方式\"><a href=\"#1-面向过程的思维方式\" class=\"headerlink\" title=\"1.面向过程的思维方式\"></a>1.面向过程的思维方式</h3><p>代码重复性太高，几乎没有复用性。</p>\n<h3 id=\"2-使用函数进行封装\"><a href=\"#2-使用函数进行封装\" class=\"headerlink\" title=\"2.使用函数进行封装\"></a>2.使用函数进行封装</h3><p>提升的代码的复用性<br>全局变量污染<br>结构混乱，后期维护不便</p>\n<h3 id=\"3-使用对象进行封装\"><a href=\"#3-使用对象进行封装\" class=\"headerlink\" title=\"3.使用对象进行封装\"></a>3.使用对象进行封装</h3><p>使用对象进行封装，在外界之暴露一个对象名，不会造成全局污染<br>在对象内部使用对象的属性，进行模块的划分，让代码的结构更加的清晰，便于维护</p>\n<h2 id=\"创建对象的三种方式\"><a href=\"#创建对象的三种方式\" class=\"headerlink\" title=\"创建对象的三种方式\"></a>创建对象的三种方式</h2><h3 id=\"字面量创建对象\"><a href=\"#字面量创建对象\" class=\"headerlink\" title=\"字面量创建对象\"></a>字面量创建对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">key</span>: value,</div><div class=\"line\">    <span class=\"attr\">key</span>: value</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>只能创建一次对象，复用性太差</p>\n<h3 id=\"内置构造函数创建对象\"><a href=\"#内置构造函数创建对象\" class=\"headerlink\" title=\"内置构造函数创建对象\"></a>内置构造函数创建对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div></pre></td></tr></table></figure>\n<p>每次创建出来的对象都是空对象，需要手动的去添加成员</p>\n<h3 id=\"自定义构造函数创建对象\"><a href=\"#自定义构造函数创建对象\" class=\"headerlink\" title=\"自定义构造函数创建对象\"></a>自定义构造函数创建对象</h3><p>自己创建的构造函数就是自定构造函数</p>\n<h2 id=\"自定义构造函数\"><a href=\"#自定义构造函数\" class=\"headerlink\" title=\"自定义构造函数\"></a>自定义构造函数</h2><h3 id=\"构造函数的特点\"><a href=\"#构造函数的特点\" class=\"headerlink\" title=\"构造函数的特点\"></a>构造函数的特点</h3><ul>\n<li>函数的首字母大写</li>\n<li>一般和 <code>new</code> 关键字配合使用</li>\n<li>没有 <code>return</code> 语句，返回值默认为创建出来的对象</li>\n<li>手动添加 <code>return</code> 语句的时候</li>\n<li>如果 <code>return</code> 的是基本类型的数据，则不会对默认的返回有任何的影响</li>\n<li>如果 <code>return</code> 的是对象类型的数据，则会替换掉默认的返回值</li>\n</ul>\n<h3 id=\"构造函数的执行步骤\"><a href=\"#构造函数的执行步骤\" class=\"headerlink\" title=\"构造函数的执行步骤\"></a>构造函数的执行步骤</h3><ul>\n<li>使用 <code>new</code> 关键字创建对象</li>\n<li>调用构造函数，将 <code>this</code> 赋值为 <code>new</code> 关键字创建出来的对象</li>\n<li>在构造函数中，使用 <code>this</code> 为新创建的对象新增成员</li>\n<li>默认返回新创建的这个对象</li>\n</ul>\n<h2 id=\"面向对象的三大特性\"><a href=\"#面向对象的三大特性\" class=\"headerlink\" title=\"面向对象的三大特性\"></a>面向对象的三大特性</h2><h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>将数据和方法进行封装，对外界只提供指定的接口，外部使用只要调用相应的接口，而不需要关心内部的具体实现</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承</p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>JS中没有多态<br>父类的指针指向子类的对象</p>\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><h3 id=\"构造函数存在的问题\"><a href=\"#构造函数存在的问题\" class=\"headerlink\" title=\"构造函数存在的问题\"></a>构造函数存在的问题</h3><p>如果将方法的定义写在构造函数中，每次创建对象的时候，都会重新的创建一个新的方法，每个对象独占一个方法，但是所有对象的该方法都是一样的，会造成资源浪费</p>\n<ul>\n<li>在外部声明函数，每次创建对象的时候，将外部的函数引用赋值给当前对象的方法，这样就能保证所有的对象都指向构造函数外部的这个函数</li>\n<li>使用原型</li>\n</ul>\n<h3 id=\"原型是什么\"><a href=\"#原型是什么\" class=\"headerlink\" title=\"原型是什么\"></a>原型是什么</h3><p>在构造函数创建出来的时候，系统会默认的为构造函数创建并关联一个空对象，这个的对象就是原型</p>\n<h3 id=\"原型的作用\"><a href=\"#原型的作用\" class=\"headerlink\" title=\"原型的作用\"></a>原型的作用</h3><p>所用通过构造函数创建出来的对象，都能访问原型中的成员，也就是说原型中的成员被所有的对象共享</p>\n<h3 id=\"如何访问原型对象\"><a href=\"#如何访问原型对象\" class=\"headerlink\" title=\"如何访问原型对象\"></a>如何访问原型对象</h3><ul>\n<li>构造函数 <code>.prototype</code> </li>\n<li>对象 <code>.__proto__</code> (不推荐使用，因为有兼容性问题，调试的时候可以使用)</li>\n</ul>\n<h3 id=\"原型的使用方式\"><a href=\"#原型的使用方式\" class=\"headerlink\" title=\"原型的使用方式\"></a>原型的使用方式</h3><ul>\n<li>利用对象的动态特性为原型添加成员</li>\n<li>直接替换原型对象</li>\n</ul>\n<h3 id=\"原型的使用注意事项\"><a href=\"#原型的使用注意事项\" class=\"headerlink\" title=\"原型的使用注意事项\"></a>原型的使用注意事项</h3><ul>\n<li>一般情况只将方法放在原型中，属性放在对象中</li>\n<li>对象在获取属性的时候，会现在自身查找，如果找到了直接使用，如果没有找到，就去原型中查找，如果找到了就使用</li>\n<li>对象在设置属性的时候，不会去原型中查找了，只在自身进行查找，如果找到了，就修改，如果没有找到，就新增</li>\n<li>在替换原型对象的时候，需要注意：替换之前创建的对象和替换之后创建的对象的原型不一致</li>\n</ul>\n<h2 id=\"继承的实现方式\"><a href=\"#继承的实现方式\" class=\"headerlink\" title=\"继承的实现方式\"></a>继承的实现方式</h2><h3 id=\"混入式继承（-mix-in-）\"><a href=\"#混入式继承（-mix-in-）\" class=\"headerlink\" title=\"混入式继承（ mix-in ）\"></a>混入式继承（ <code>mix-in</code> ）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"adsf\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj1)&#123;</div><div class=\"line\">    obj[k] = obj1[k];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><h4 id=\"1-使用混入的方式为原型对象添加成员、\"><a href=\"#1-使用混入的方式为原型对象添加成员、\" class=\"headerlink\" title=\"1.使用混入的方式为原型对象添加成员、\"></a>1.使用混入的方式为原型对象添加成员、</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> human)&#123;</div><div class=\"line\">    Person.prototype[k] = human[k];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-直接修改原型对象\"><a href=\"#2-直接修改原型对象\" class=\"headerlink\" title=\"2.直接修改原型对象\"></a>2.直接修改原型对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">Person.prototype.age = <span class=\"number\">18</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"3-替换原型对象\"><a href=\"#3-替换原型对象\" class=\"headerlink\" title=\"3.替换原型对象\"></a>3.替换原型对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">Person.prototype = human;</div></pre></td></tr></table></figure>\n<h3 id=\"经典继承\"><a href=\"#经典继承\" class=\"headerlink\" title=\"经典继承\"></a>经典继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(obj1);</div><div class=\"line\"><span class=\"comment\">//创建出来一个新的对象obj继承自obj1</span></div><div class=\"line\"><span class=\"comment\">//原理就是把obj1设置为obj的原型</span></div></pre></td></tr></table></figure>\n<h4 id=\"经典继承的兼容性问题\"><a href=\"#经典继承的兼容性问题\" class=\"headerlink\" title=\"经典继承的兼容性问题\"></a>经典继承的兼容性问题</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myCreate</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//判断浏览器有没有Object.create方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.create)&#123;</div><div class=\"line\">        <span class=\"comment\">//如果有，直接调用</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(obj);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">        F.prototype = obj;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"为什么不能修改原生对象\"><a href=\"#为什么不能修改原生对象\" class=\"headerlink\" title=\"为什么不能修改原生对象?\"></a>为什么不能修改原生对象?</h5><p>因为原生对象是公用的，在多人开发的时候，可能会出现冲突，你修改了，他也修改了，谁的生效呢？</p>"},{"title":"JavaScript高级篇之part4","date":"2016-11-09T13:19:05.000Z","_content":"javascript高级与面向对象笔记整理，接part3篇！！\n\n<!-- more -->\n\n## 绘制原型三角\n\n## 原型链\n\n## 原型链图\n\n## 属性搜索原则\n\n只有获取属性的时候会遵守这个原则\n\n## `instanceof`\n\n## `Object.prototype` 的成员\n\n* `constructor` 属性\n\t指向原型相关的构造函数\n* `hasOwnProperty` 方法\n\t对象 `.hasOwnProperty`（属性名）\n* `isPrototypeOf` 方法\n\t对象`.isPrototypeOf`（对象1）判断对象是否是对象1的原型\n* `propertyIsEnmerable` 方法\n\t对象`.propertyIsEnmerable`(属性)\n* `toSting`  `toLocaleSting` 方法\n\t转换成字符串，`toLocaleSting`会将对象转换成\n* `valueOf` 方法\n\t胡i去兑现的值，再回去运算的时候先调用`valueOf`方法\n* `__proto__` 属性\n\t指向对象的原型\n* 双下划线开头的属性都是属于非标准属性\n* 单下划线开头 一般框架中的私有属性\n\n## `.Function`\n\n## `eval`\n\n## 静态成员和实例成员\n\n### 静态成员\n\n* 通过构造函数访问成员的就是静态成员\n* 构造函数 `.prototype`\n* 构造函数 `.name`\n* 构造函数 `.length` （形参的个数）\n\n### 实例成员\n\n通过对象访问的成员就是实例成员\n\n* 只要是通过对象访问到的都是实例成员\n* 比如 `p.name`\t`p.age`\t`p.__proto__`……\n\n## `arguments` 对象\n\n只能在函数内部使用\n\n* 当函数调用的时候会将所有的输惨存入 `arguments` 对象\n*  `arguments.length` （实参的个数）\n*  `arguments.callee` 指向函数本身。用在匿名函数递归\n* 构造函数 `.arguments` 和函数里面的 `arguments` 不是一回事儿\n* 构造函数 `.arguments` 已被弃用","source":"_posts/javascript-part4.md","raw":"---\ntitle: JavaScript高级篇之part4\ndate: 2016-11-09 21:19:05\ntags: javascript\ncategories: javascript\n---\njavascript高级与面向对象笔记整理，接part3篇！！\n\n<!-- more -->\n\n## 绘制原型三角\n\n## 原型链\n\n## 原型链图\n\n## 属性搜索原则\n\n只有获取属性的时候会遵守这个原则\n\n## `instanceof`\n\n## `Object.prototype` 的成员\n\n* `constructor` 属性\n\t指向原型相关的构造函数\n* `hasOwnProperty` 方法\n\t对象 `.hasOwnProperty`（属性名）\n* `isPrototypeOf` 方法\n\t对象`.isPrototypeOf`（对象1）判断对象是否是对象1的原型\n* `propertyIsEnmerable` 方法\n\t对象`.propertyIsEnmerable`(属性)\n* `toSting`  `toLocaleSting` 方法\n\t转换成字符串，`toLocaleSting`会将对象转换成\n* `valueOf` 方法\n\t胡i去兑现的值，再回去运算的时候先调用`valueOf`方法\n* `__proto__` 属性\n\t指向对象的原型\n* 双下划线开头的属性都是属于非标准属性\n* 单下划线开头 一般框架中的私有属性\n\n## `.Function`\n\n## `eval`\n\n## 静态成员和实例成员\n\n### 静态成员\n\n* 通过构造函数访问成员的就是静态成员\n* 构造函数 `.prototype`\n* 构造函数 `.name`\n* 构造函数 `.length` （形参的个数）\n\n### 实例成员\n\n通过对象访问的成员就是实例成员\n\n* 只要是通过对象访问到的都是实例成员\n* 比如 `p.name`\t`p.age`\t`p.__proto__`……\n\n## `arguments` 对象\n\n只能在函数内部使用\n\n* 当函数调用的时候会将所有的输惨存入 `arguments` 对象\n*  `arguments.length` （实参的个数）\n*  `arguments.callee` 指向函数本身。用在匿名函数递归\n* 构造函数 `.arguments` 和函数里面的 `arguments` 不是一回事儿\n* 构造函数 `.arguments` 已被弃用","slug":"javascript-part4","published":1,"updated":"2016-11-24T01:30:05.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvow002nuwg72eyxb2ro","content":"<p>javascript高级与面向对象笔记整理，接part3篇！！</p>\n<a id=\"more\"></a>\n<h2 id=\"绘制原型三角\"><a href=\"#绘制原型三角\" class=\"headerlink\" title=\"绘制原型三角\"></a>绘制原型三角</h2><h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><h2 id=\"原型链图\"><a href=\"#原型链图\" class=\"headerlink\" title=\"原型链图\"></a>原型链图</h2><h2 id=\"属性搜索原则\"><a href=\"#属性搜索原则\" class=\"headerlink\" title=\"属性搜索原则\"></a>属性搜索原则</h2><p>只有获取属性的时候会遵守这个原则</p>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a><code>instanceof</code></h2><h2 id=\"Object-prototype-的成员\"><a href=\"#Object-prototype-的成员\" class=\"headerlink\" title=\"Object.prototype 的成员\"></a><code>Object.prototype</code> 的成员</h2><ul>\n<li><code>constructor</code> 属性<br>  指向原型相关的构造函数</li>\n<li><code>hasOwnProperty</code> 方法<br>  对象 <code>.hasOwnProperty</code>（属性名）</li>\n<li><code>isPrototypeOf</code> 方法<br>  对象<code>.isPrototypeOf</code>（对象1）判断对象是否是对象1的原型</li>\n<li><code>propertyIsEnmerable</code> 方法<br>  对象<code>.propertyIsEnmerable</code>(属性)</li>\n<li><code>toSting</code>  <code>toLocaleSting</code> 方法<br>  转换成字符串，<code>toLocaleSting</code>会将对象转换成</li>\n<li><code>valueOf</code> 方法<br>  胡i去兑现的值，再回去运算的时候先调用<code>valueOf</code>方法</li>\n<li><code>__proto__</code> 属性<br>  指向对象的原型</li>\n<li>双下划线开头的属性都是属于非标准属性</li>\n<li>单下划线开头 一般框架中的私有属性</li>\n</ul>\n<h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\".Function\"></a><code>.Function</code></h2><h2 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a><code>eval</code></h2><h2 id=\"静态成员和实例成员\"><a href=\"#静态成员和实例成员\" class=\"headerlink\" title=\"静态成员和实例成员\"></a>静态成员和实例成员</h2><h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><ul>\n<li>通过构造函数访问成员的就是静态成员</li>\n<li>构造函数 <code>.prototype</code></li>\n<li>构造函数 <code>.name</code></li>\n<li>构造函数 <code>.length</code> （形参的个数）</li>\n</ul>\n<h3 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h3><p>通过对象访问的成员就是实例成员</p>\n<ul>\n<li>只要是通过对象访问到的都是实例成员</li>\n<li>比如 <code>p.name</code>    <code>p.age</code>    <code>p.__proto__</code>……</li>\n</ul>\n<h2 id=\"arguments-对象\"><a href=\"#arguments-对象\" class=\"headerlink\" title=\"arguments 对象\"></a><code>arguments</code> 对象</h2><p>只能在函数内部使用</p>\n<ul>\n<li>当函数调用的时候会将所有的输惨存入 <code>arguments</code> 对象</li>\n<li><code>arguments.length</code> （实参的个数）</li>\n<li><code>arguments.callee</code> 指向函数本身。用在匿名函数递归</li>\n<li>构造函数 <code>.arguments</code> 和函数里面的 <code>arguments</code> 不是一回事儿</li>\n<li>构造函数 <code>.arguments</code> 已被弃用</li>\n</ul>\n","excerpt":"<p>javascript高级与面向对象笔记整理，接part3篇！！</p>","more":"<h2 id=\"绘制原型三角\"><a href=\"#绘制原型三角\" class=\"headerlink\" title=\"绘制原型三角\"></a>绘制原型三角</h2><h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><h2 id=\"原型链图\"><a href=\"#原型链图\" class=\"headerlink\" title=\"原型链图\"></a>原型链图</h2><h2 id=\"属性搜索原则\"><a href=\"#属性搜索原则\" class=\"headerlink\" title=\"属性搜索原则\"></a>属性搜索原则</h2><p>只有获取属性的时候会遵守这个原则</p>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a><code>instanceof</code></h2><h2 id=\"Object-prototype-的成员\"><a href=\"#Object-prototype-的成员\" class=\"headerlink\" title=\"Object.prototype 的成员\"></a><code>Object.prototype</code> 的成员</h2><ul>\n<li><code>constructor</code> 属性<br>  指向原型相关的构造函数</li>\n<li><code>hasOwnProperty</code> 方法<br>  对象 <code>.hasOwnProperty</code>（属性名）</li>\n<li><code>isPrototypeOf</code> 方法<br>  对象<code>.isPrototypeOf</code>（对象1）判断对象是否是对象1的原型</li>\n<li><code>propertyIsEnmerable</code> 方法<br>  对象<code>.propertyIsEnmerable</code>(属性)</li>\n<li><code>toSting</code>  <code>toLocaleSting</code> 方法<br>  转换成字符串，<code>toLocaleSting</code>会将对象转换成</li>\n<li><code>valueOf</code> 方法<br>  胡i去兑现的值，再回去运算的时候先调用<code>valueOf</code>方法</li>\n<li><code>__proto__</code> 属性<br>  指向对象的原型</li>\n<li>双下划线开头的属性都是属于非标准属性</li>\n<li>单下划线开头 一般框架中的私有属性</li>\n</ul>\n<h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\".Function\"></a><code>.Function</code></h2><h2 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a><code>eval</code></h2><h2 id=\"静态成员和实例成员\"><a href=\"#静态成员和实例成员\" class=\"headerlink\" title=\"静态成员和实例成员\"></a>静态成员和实例成员</h2><h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><ul>\n<li>通过构造函数访问成员的就是静态成员</li>\n<li>构造函数 <code>.prototype</code></li>\n<li>构造函数 <code>.name</code></li>\n<li>构造函数 <code>.length</code> （形参的个数）</li>\n</ul>\n<h3 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h3><p>通过对象访问的成员就是实例成员</p>\n<ul>\n<li>只要是通过对象访问到的都是实例成员</li>\n<li>比如 <code>p.name</code>    <code>p.age</code>    <code>p.__proto__</code>……</li>\n</ul>\n<h2 id=\"arguments-对象\"><a href=\"#arguments-对象\" class=\"headerlink\" title=\"arguments 对象\"></a><code>arguments</code> 对象</h2><p>只能在函数内部使用</p>\n<ul>\n<li>当函数调用的时候会将所有的输惨存入 <code>arguments</code> 对象</li>\n<li><code>arguments.length</code> （实参的个数）</li>\n<li><code>arguments.callee</code> 指向函数本身。用在匿名函数递归</li>\n<li>构造函数 <code>.arguments</code> 和函数里面的 <code>arguments</code> 不是一回事儿</li>\n<li>构造函数 <code>.arguments</code> 已被弃用</li>\n</ul>"},{"title":"JavaScript高级篇之part3","date":"2016-11-08T11:39:35.000Z","_content":"javascript高级与面向对象笔记整理，接part2篇！！\n\n<!-- more -->\n\n## 绘制原型三角\n\n1. 先画构造函数\n2. 因为有构造函数就有原型，所以画原型\n3. 画构造函数和原型之间的关系\n4. 画实例化出来的对象\n5. 画实例和构造函数以及原型之间的关系\n\n## constructor属性\n\n1. 原型中的属性\n2. 是在构造函数创建出来的时候，系统创建原型的时候，默认的让原型中的 `constructor` 属性指向构造函数本身\n3. 这个属性基本用不到\n\t\n## 原型链\n\n对象都有原型，原型也是对象，所以原型也有原型，所以就形成了一条链式结构，这个结构就叫做原型链\n\t\n### 绘制原型链图\n\n1. 先画构造函数\n2. 因为有构造函数就有原型，所以画原型\n3. 画构造函数和原型之间的关系\n4. 画实例化出来的对象\n5. 画实例和构造函数以及原型之间的关系\n6. 把原型当做对象来对待，找到原型的构造函数，将构造函数画出来\n7. 画出上一步中构造函数的原型\n8. 把第6步和第7不步中的构造函数和原型之间的关系画出来\n9. 把第6步中的原型和其构造函数还有原型之间的关系画出来\n10. 重复 `6-9` 直到画到 `Object.prototype` 让其原型指向 `null` 就结束了\n\t\n### 属性搜索原则\n\n1. 现在对象本身中进行查找，如果找到了就直接使用\n2. 如果没有，就去原型中查找，如果找到了就直接使用\n3. 如果没有找到，就去原型的原型中查找，以此往复，直到找到 `null`\n\n### `Array.prototype` 是一个空数组\n\n```js\n//arr---->Array.prototype----->Object.Prototype----->null\nvar arr = [];\n```\n\n## `instanceof` 关键字\n\n```js\n对象  instanceof 构造函数\n//返回值为boolean类型\n//功能： 判断构造函数的原型是不是在该对象的原型链上\n```\n\n## `Object.prototype` 的成员\n\n* `constructor` 原型中的属性指向和原型相关的构造函数\n* `hasOwnProperty`\n\n```js\n对象.hasOwnProperty(属性名)\n//返回值为boolean类型\n//功能：判断属性是否存在对象本身中\n```\n* `isPrototypeOf`\n\n```js\n对象.isPrototypeof(对象1)\n//返回值为boolean\n//功能：判断对象是否是对象1的原型对象\n```\n\n* `propertyIsEnumerable`\n\n```js\n对象.propertyIsEnumberable(属性名)\n//返回值为boolean\n//功能：判断属性是否属于对象本身并且能够被遍历（`for-in`）\n```\n\n* `toString toLocaleString`\n\n都是将对象转换成字符串类型\n`toLocaleString` 会将字符串转换成本地格式的字符串， 本地格式为系统设置\n\n* `valueOf`\n\n    在对象参与运算的时候，会首先调用 `valueOf` 方法，如果获取到的值能够参与运算就直接使用，\n    如果不能参与运算，就调用 `toString` 方法\n\n```js\n    []==![] true\n    {}==!{} false\n```\n\n## Function\n\n用来创建函数的\n\n* 如果不传参数，创建出来的是空函数\n* 如果传一个参数，创建出来的时候有函数体，但是没有形参的函数\n* 如果传多个参数，最后参数会被作为函数体，之前所有的参数都会被作为形参\n\n可以把字符串转换成代码\n\n## eval\n\n也可以将字符串转换成代码并且执行\n\n### `Function`和`eval`的区别\n\n* `Funtion`创建出来的是函数，函数需要手动调用，里面的代码才会执行\n* `eval`直接回将字符串转换成代码，并且执行\n\n### `Function`和`eval`的共同点\n\n* 都可以将字符串转换成代码\n* 都不安全\n\t\n### `eval`处理`JSON`格式字符串的时候\n\n* 会把JSON格式字符串中的{}当做代码段来处理，所以会报错\n* 处理方式两种\n* 给JSON字符串前后拼接小括号()\n* 将变量的声明以及等号 拼接在JSON格式字符串的前面\n\n## 静态成员和实例成员\n\n* 静态成员：通过构造函数去访问的成员就是静态成员\n* 实例成员：通过实例去访问的成员就是实例成员\n\n## arguments对象\n\n`arguments` 对象是函数中的一个对象，在函数调用的时候，会将所有传入的实参依次存入该对象\n\n* `length`  获取传入实参的个数\n* `callee`  指向函数本身   匿名函数的递归","source":"_posts/javascript-part3.md","raw":"---\ntitle: JavaScript高级篇之part3\ndate: 2016-11-08 19:39:35\ntags: javascript\ncategories: javascript\n---\njavascript高级与面向对象笔记整理，接part2篇！！\n\n<!-- more -->\n\n## 绘制原型三角\n\n1. 先画构造函数\n2. 因为有构造函数就有原型，所以画原型\n3. 画构造函数和原型之间的关系\n4. 画实例化出来的对象\n5. 画实例和构造函数以及原型之间的关系\n\n## constructor属性\n\n1. 原型中的属性\n2. 是在构造函数创建出来的时候，系统创建原型的时候，默认的让原型中的 `constructor` 属性指向构造函数本身\n3. 这个属性基本用不到\n\t\n## 原型链\n\n对象都有原型，原型也是对象，所以原型也有原型，所以就形成了一条链式结构，这个结构就叫做原型链\n\t\n### 绘制原型链图\n\n1. 先画构造函数\n2. 因为有构造函数就有原型，所以画原型\n3. 画构造函数和原型之间的关系\n4. 画实例化出来的对象\n5. 画实例和构造函数以及原型之间的关系\n6. 把原型当做对象来对待，找到原型的构造函数，将构造函数画出来\n7. 画出上一步中构造函数的原型\n8. 把第6步和第7不步中的构造函数和原型之间的关系画出来\n9. 把第6步中的原型和其构造函数还有原型之间的关系画出来\n10. 重复 `6-9` 直到画到 `Object.prototype` 让其原型指向 `null` 就结束了\n\t\n### 属性搜索原则\n\n1. 现在对象本身中进行查找，如果找到了就直接使用\n2. 如果没有，就去原型中查找，如果找到了就直接使用\n3. 如果没有找到，就去原型的原型中查找，以此往复，直到找到 `null`\n\n### `Array.prototype` 是一个空数组\n\n```js\n//arr---->Array.prototype----->Object.Prototype----->null\nvar arr = [];\n```\n\n## `instanceof` 关键字\n\n```js\n对象  instanceof 构造函数\n//返回值为boolean类型\n//功能： 判断构造函数的原型是不是在该对象的原型链上\n```\n\n## `Object.prototype` 的成员\n\n* `constructor` 原型中的属性指向和原型相关的构造函数\n* `hasOwnProperty`\n\n```js\n对象.hasOwnProperty(属性名)\n//返回值为boolean类型\n//功能：判断属性是否存在对象本身中\n```\n* `isPrototypeOf`\n\n```js\n对象.isPrototypeof(对象1)\n//返回值为boolean\n//功能：判断对象是否是对象1的原型对象\n```\n\n* `propertyIsEnumerable`\n\n```js\n对象.propertyIsEnumberable(属性名)\n//返回值为boolean\n//功能：判断属性是否属于对象本身并且能够被遍历（`for-in`）\n```\n\n* `toString toLocaleString`\n\n都是将对象转换成字符串类型\n`toLocaleString` 会将字符串转换成本地格式的字符串， 本地格式为系统设置\n\n* `valueOf`\n\n    在对象参与运算的时候，会首先调用 `valueOf` 方法，如果获取到的值能够参与运算就直接使用，\n    如果不能参与运算，就调用 `toString` 方法\n\n```js\n    []==![] true\n    {}==!{} false\n```\n\n## Function\n\n用来创建函数的\n\n* 如果不传参数，创建出来的是空函数\n* 如果传一个参数，创建出来的时候有函数体，但是没有形参的函数\n* 如果传多个参数，最后参数会被作为函数体，之前所有的参数都会被作为形参\n\n可以把字符串转换成代码\n\n## eval\n\n也可以将字符串转换成代码并且执行\n\n### `Function`和`eval`的区别\n\n* `Funtion`创建出来的是函数，函数需要手动调用，里面的代码才会执行\n* `eval`直接回将字符串转换成代码，并且执行\n\n### `Function`和`eval`的共同点\n\n* 都可以将字符串转换成代码\n* 都不安全\n\t\n### `eval`处理`JSON`格式字符串的时候\n\n* 会把JSON格式字符串中的{}当做代码段来处理，所以会报错\n* 处理方式两种\n* 给JSON字符串前后拼接小括号()\n* 将变量的声明以及等号 拼接在JSON格式字符串的前面\n\n## 静态成员和实例成员\n\n* 静态成员：通过构造函数去访问的成员就是静态成员\n* 实例成员：通过实例去访问的成员就是实例成员\n\n## arguments对象\n\n`arguments` 对象是函数中的一个对象，在函数调用的时候，会将所有传入的实参依次存入该对象\n\n* `length`  获取传入实参的个数\n* `callee`  指向函数本身   匿名函数的递归","slug":"javascript-part3","published":1,"updated":"2016-11-24T01:29:36.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvoy002quwg7l9p4hzxg","content":"<p>javascript高级与面向对象笔记整理，接part2篇！！</p>\n<a id=\"more\"></a>\n<h2 id=\"绘制原型三角\"><a href=\"#绘制原型三角\" class=\"headerlink\" title=\"绘制原型三角\"></a>绘制原型三角</h2><ol>\n<li>先画构造函数</li>\n<li>因为有构造函数就有原型，所以画原型</li>\n<li>画构造函数和原型之间的关系</li>\n<li>画实例化出来的对象</li>\n<li>画实例和构造函数以及原型之间的关系</li>\n</ol>\n<h2 id=\"constructor属性\"><a href=\"#constructor属性\" class=\"headerlink\" title=\"constructor属性\"></a>constructor属性</h2><ol>\n<li>原型中的属性</li>\n<li>是在构造函数创建出来的时候，系统创建原型的时候，默认的让原型中的 <code>constructor</code> 属性指向构造函数本身</li>\n<li>这个属性基本用不到</li>\n</ol>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>对象都有原型，原型也是对象，所以原型也有原型，所以就形成了一条链式结构，这个结构就叫做原型链</p>\n<h3 id=\"绘制原型链图\"><a href=\"#绘制原型链图\" class=\"headerlink\" title=\"绘制原型链图\"></a>绘制原型链图</h3><ol>\n<li>先画构造函数</li>\n<li>因为有构造函数就有原型，所以画原型</li>\n<li>画构造函数和原型之间的关系</li>\n<li>画实例化出来的对象</li>\n<li>画实例和构造函数以及原型之间的关系</li>\n<li>把原型当做对象来对待，找到原型的构造函数，将构造函数画出来</li>\n<li>画出上一步中构造函数的原型</li>\n<li>把第6步和第7不步中的构造函数和原型之间的关系画出来</li>\n<li>把第6步中的原型和其构造函数还有原型之间的关系画出来</li>\n<li>重复 <code>6-9</code> 直到画到 <code>Object.prototype</code> 让其原型指向 <code>null</code> 就结束了</li>\n</ol>\n<h3 id=\"属性搜索原则\"><a href=\"#属性搜索原则\" class=\"headerlink\" title=\"属性搜索原则\"></a>属性搜索原则</h3><ol>\n<li>现在对象本身中进行查找，如果找到了就直接使用</li>\n<li>如果没有，就去原型中查找，如果找到了就直接使用</li>\n<li>如果没有找到，就去原型的原型中查找，以此往复，直到找到 <code>null</code></li>\n</ol>\n<h3 id=\"Array-prototype-是一个空数组\"><a href=\"#Array-prototype-是一个空数组\" class=\"headerlink\" title=\"Array.prototype 是一个空数组\"></a><code>Array.prototype</code> 是一个空数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//arr----&gt;Array.prototype-----&gt;Object.Prototype-----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div></pre></td></tr></table></figure>\n<h2 id=\"instanceof-关键字\"><a href=\"#instanceof-关键字\" class=\"headerlink\" title=\"instanceof 关键字\"></a><code>instanceof</code> 关键字</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象  <span class=\"keyword\">instanceof</span> 构造函数</div><div class=\"line\"><span class=\"comment\">//返回值为boolean类型</span></div><div class=\"line\"><span class=\"comment\">//功能： 判断构造函数的原型是不是在该对象的原型链上</span></div></pre></td></tr></table></figure>\n<h2 id=\"Object-prototype-的成员\"><a href=\"#Object-prototype-的成员\" class=\"headerlink\" title=\"Object.prototype 的成员\"></a><code>Object.prototype</code> 的成员</h2><ul>\n<li><code>constructor</code> 原型中的属性指向和原型相关的构造函数</li>\n<li><code>hasOwnProperty</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象.hasOwnProperty(属性名)</div><div class=\"line\"><span class=\"comment\">//返回值为boolean类型</span></div><div class=\"line\"><span class=\"comment\">//功能：判断属性是否存在对象本身中</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>isPrototypeOf</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象.isPrototypeof(对象<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\">//返回值为boolean</span></div><div class=\"line\"><span class=\"comment\">//功能：判断对象是否是对象1的原型对象</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>propertyIsEnumerable</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象.propertyIsEnumberable(属性名)</div><div class=\"line\"><span class=\"comment\">//返回值为boolean</span></div><div class=\"line\"><span class=\"comment\">//功能：判断属性是否属于对象本身并且能够被遍历（`for-in`）</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>toString toLocaleString</code></li>\n</ul>\n<p>都是将对象转换成字符串类型<br><code>toLocaleString</code> 会将字符串转换成本地格式的字符串， 本地格式为系统设置</p>\n<ul>\n<li><p><code>valueOf</code></p>\n<p>  在对象参与运算的时候，会首先调用 <code>valueOf</code> 方法，如果获取到的值能够参与运算就直接使用，<br>  如果不能参与运算，就调用 <code>toString</code> 方法</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[]==![] <span class=\"literal\">true</span></div><div class=\"line\">&#123;&#125;==!&#123;&#125; <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h2><p>用来创建函数的</p>\n<ul>\n<li>如果不传参数，创建出来的是空函数</li>\n<li>如果传一个参数，创建出来的时候有函数体，但是没有形参的函数</li>\n<li>如果传多个参数，最后参数会被作为函数体，之前所有的参数都会被作为形参</li>\n</ul>\n<p>可以把字符串转换成代码</p>\n<h2 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h2><p>也可以将字符串转换成代码并且执行</p>\n<h3 id=\"Function和eval的区别\"><a href=\"#Function和eval的区别\" class=\"headerlink\" title=\"Function和eval的区别\"></a><code>Function</code>和<code>eval</code>的区别</h3><ul>\n<li><code>Funtion</code>创建出来的是函数，函数需要手动调用，里面的代码才会执行</li>\n<li><code>eval</code>直接回将字符串转换成代码，并且执行</li>\n</ul>\n<h3 id=\"Function和eval的共同点\"><a href=\"#Function和eval的共同点\" class=\"headerlink\" title=\"Function和eval的共同点\"></a><code>Function</code>和<code>eval</code>的共同点</h3><ul>\n<li>都可以将字符串转换成代码</li>\n<li>都不安全</li>\n</ul>\n<h3 id=\"eval处理JSON格式字符串的时候\"><a href=\"#eval处理JSON格式字符串的时候\" class=\"headerlink\" title=\"eval处理JSON格式字符串的时候\"></a><code>eval</code>处理<code>JSON</code>格式字符串的时候</h3><ul>\n<li>会把JSON格式字符串中的{}当做代码段来处理，所以会报错</li>\n<li>处理方式两种</li>\n<li>给JSON字符串前后拼接小括号()</li>\n<li>将变量的声明以及等号 拼接在JSON格式字符串的前面</li>\n</ul>\n<h2 id=\"静态成员和实例成员\"><a href=\"#静态成员和实例成员\" class=\"headerlink\" title=\"静态成员和实例成员\"></a>静态成员和实例成员</h2><ul>\n<li>静态成员：通过构造函数去访问的成员就是静态成员</li>\n<li>实例成员：通过实例去访问的成员就是实例成员</li>\n</ul>\n<h2 id=\"arguments对象\"><a href=\"#arguments对象\" class=\"headerlink\" title=\"arguments对象\"></a>arguments对象</h2><p><code>arguments</code> 对象是函数中的一个对象，在函数调用的时候，会将所有传入的实参依次存入该对象</p>\n<ul>\n<li><code>length</code>  获取传入实参的个数</li>\n<li><code>callee</code>  指向函数本身   匿名函数的递归</li>\n</ul>\n","excerpt":"<p>javascript高级与面向对象笔记整理，接part2篇！！</p>","more":"<h2 id=\"绘制原型三角\"><a href=\"#绘制原型三角\" class=\"headerlink\" title=\"绘制原型三角\"></a>绘制原型三角</h2><ol>\n<li>先画构造函数</li>\n<li>因为有构造函数就有原型，所以画原型</li>\n<li>画构造函数和原型之间的关系</li>\n<li>画实例化出来的对象</li>\n<li>画实例和构造函数以及原型之间的关系</li>\n</ol>\n<h2 id=\"constructor属性\"><a href=\"#constructor属性\" class=\"headerlink\" title=\"constructor属性\"></a>constructor属性</h2><ol>\n<li>原型中的属性</li>\n<li>是在构造函数创建出来的时候，系统创建原型的时候，默认的让原型中的 <code>constructor</code> 属性指向构造函数本身</li>\n<li>这个属性基本用不到</li>\n</ol>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>对象都有原型，原型也是对象，所以原型也有原型，所以就形成了一条链式结构，这个结构就叫做原型链</p>\n<h3 id=\"绘制原型链图\"><a href=\"#绘制原型链图\" class=\"headerlink\" title=\"绘制原型链图\"></a>绘制原型链图</h3><ol>\n<li>先画构造函数</li>\n<li>因为有构造函数就有原型，所以画原型</li>\n<li>画构造函数和原型之间的关系</li>\n<li>画实例化出来的对象</li>\n<li>画实例和构造函数以及原型之间的关系</li>\n<li>把原型当做对象来对待，找到原型的构造函数，将构造函数画出来</li>\n<li>画出上一步中构造函数的原型</li>\n<li>把第6步和第7不步中的构造函数和原型之间的关系画出来</li>\n<li>把第6步中的原型和其构造函数还有原型之间的关系画出来</li>\n<li>重复 <code>6-9</code> 直到画到 <code>Object.prototype</code> 让其原型指向 <code>null</code> 就结束了</li>\n</ol>\n<h3 id=\"属性搜索原则\"><a href=\"#属性搜索原则\" class=\"headerlink\" title=\"属性搜索原则\"></a>属性搜索原则</h3><ol>\n<li>现在对象本身中进行查找，如果找到了就直接使用</li>\n<li>如果没有，就去原型中查找，如果找到了就直接使用</li>\n<li>如果没有找到，就去原型的原型中查找，以此往复，直到找到 <code>null</code></li>\n</ol>\n<h3 id=\"Array-prototype-是一个空数组\"><a href=\"#Array-prototype-是一个空数组\" class=\"headerlink\" title=\"Array.prototype 是一个空数组\"></a><code>Array.prototype</code> 是一个空数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//arr----&gt;Array.prototype-----&gt;Object.Prototype-----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div></pre></td></tr></table></figure>\n<h2 id=\"instanceof-关键字\"><a href=\"#instanceof-关键字\" class=\"headerlink\" title=\"instanceof 关键字\"></a><code>instanceof</code> 关键字</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象  <span class=\"keyword\">instanceof</span> 构造函数</div><div class=\"line\"><span class=\"comment\">//返回值为boolean类型</span></div><div class=\"line\"><span class=\"comment\">//功能： 判断构造函数的原型是不是在该对象的原型链上</span></div></pre></td></tr></table></figure>\n<h2 id=\"Object-prototype-的成员\"><a href=\"#Object-prototype-的成员\" class=\"headerlink\" title=\"Object.prototype 的成员\"></a><code>Object.prototype</code> 的成员</h2><ul>\n<li><code>constructor</code> 原型中的属性指向和原型相关的构造函数</li>\n<li><code>hasOwnProperty</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象.hasOwnProperty(属性名)</div><div class=\"line\"><span class=\"comment\">//返回值为boolean类型</span></div><div class=\"line\"><span class=\"comment\">//功能：判断属性是否存在对象本身中</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>isPrototypeOf</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象.isPrototypeof(对象<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\">//返回值为boolean</span></div><div class=\"line\"><span class=\"comment\">//功能：判断对象是否是对象1的原型对象</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>propertyIsEnumerable</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象.propertyIsEnumberable(属性名)</div><div class=\"line\"><span class=\"comment\">//返回值为boolean</span></div><div class=\"line\"><span class=\"comment\">//功能：判断属性是否属于对象本身并且能够被遍历（`for-in`）</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>toString toLocaleString</code></li>\n</ul>\n<p>都是将对象转换成字符串类型<br><code>toLocaleString</code> 会将字符串转换成本地格式的字符串， 本地格式为系统设置</p>\n<ul>\n<li><p><code>valueOf</code></p>\n<p>  在对象参与运算的时候，会首先调用 <code>valueOf</code> 方法，如果获取到的值能够参与运算就直接使用，<br>  如果不能参与运算，就调用 <code>toString</code> 方法</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[]==![] <span class=\"literal\">true</span></div><div class=\"line\">&#123;&#125;==!&#123;&#125; <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h2><p>用来创建函数的</p>\n<ul>\n<li>如果不传参数，创建出来的是空函数</li>\n<li>如果传一个参数，创建出来的时候有函数体，但是没有形参的函数</li>\n<li>如果传多个参数，最后参数会被作为函数体，之前所有的参数都会被作为形参</li>\n</ul>\n<p>可以把字符串转换成代码</p>\n<h2 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h2><p>也可以将字符串转换成代码并且执行</p>\n<h3 id=\"Function和eval的区别\"><a href=\"#Function和eval的区别\" class=\"headerlink\" title=\"Function和eval的区别\"></a><code>Function</code>和<code>eval</code>的区别</h3><ul>\n<li><code>Funtion</code>创建出来的是函数，函数需要手动调用，里面的代码才会执行</li>\n<li><code>eval</code>直接回将字符串转换成代码，并且执行</li>\n</ul>\n<h3 id=\"Function和eval的共同点\"><a href=\"#Function和eval的共同点\" class=\"headerlink\" title=\"Function和eval的共同点\"></a><code>Function</code>和<code>eval</code>的共同点</h3><ul>\n<li>都可以将字符串转换成代码</li>\n<li>都不安全</li>\n</ul>\n<h3 id=\"eval处理JSON格式字符串的时候\"><a href=\"#eval处理JSON格式字符串的时候\" class=\"headerlink\" title=\"eval处理JSON格式字符串的时候\"></a><code>eval</code>处理<code>JSON</code>格式字符串的时候</h3><ul>\n<li>会把JSON格式字符串中的{}当做代码段来处理，所以会报错</li>\n<li>处理方式两种</li>\n<li>给JSON字符串前后拼接小括号()</li>\n<li>将变量的声明以及等号 拼接在JSON格式字符串的前面</li>\n</ul>\n<h2 id=\"静态成员和实例成员\"><a href=\"#静态成员和实例成员\" class=\"headerlink\" title=\"静态成员和实例成员\"></a>静态成员和实例成员</h2><ul>\n<li>静态成员：通过构造函数去访问的成员就是静态成员</li>\n<li>实例成员：通过实例去访问的成员就是实例成员</li>\n</ul>\n<h2 id=\"arguments对象\"><a href=\"#arguments对象\" class=\"headerlink\" title=\"arguments对象\"></a>arguments对象</h2><p><code>arguments</code> 对象是函数中的一个对象，在函数调用的时候，会将所有传入的实参依次存入该对象</p>\n<ul>\n<li><code>length</code>  获取传入实参的个数</li>\n<li><code>callee</code>  指向函数本身   匿名函数的递归</li>\n</ul>"},{"title":"JavaScript高级篇之part5","date":"2016-11-10T13:43:36.000Z","_content":"javascript高级与面向对象笔记整理，接part4篇！！\n\n<!-- more -->\n\n## 词法作用域\n\n### 词法作用域的概念\n\n变量的作用域在代码写好的时候就已经可以确定，这种作用域就是词法作用域\n\n*  `JavaScript` 中没有动态作用域\n*  `JavaScript` 中没有块级作用域\n\n## 变量提升\n\nJS代码执行分两个阶段，首先进行预解析，再执行\n在预解析阶段，系统会将所有的变量声明以及函数声明提升到当前作用域的最顶上\n\n* 当函数同名的时候，都会提升，但是后面的函数会将前面的函数覆盖\n* 当函数和变量同名的时候，只会提升函数声明，变量声明会被忽略\n* 变量提升是分作用域的\n* 变量提升是分段（ `script` 标签）\n* 函数表达式是不会被提升,提升的只是变量的声明。  `var func= function(){};`\n* 条件式函数声明，根据浏览器不同，提升的情况不同，最新的浏览器中都不会进行提升\n\n## 作用域链\n\n在 `js` 中只有函数可以限定作用域，然后，函数中又可以声明函数，这样就形成了一个由内向外进行访问的链式结构，这个结构就叫做作用域链\n\n### 如何绘制作用域链\n\n1. 先画一条直线，表示0级作用域链，也就是全局作用域\n2. 再在全局作用域中查找变量以及函数的声明，将所有找到的这些成员以小方块的形式放在0级作用域链上\n3. 如果全局作用域中有函数成员，那就从该函数中在引出一条线，表示1级作用域链\n4. 再去1级作用域中进行查找变量以及函数的声明，在把他们画出来，\n5. 如果还有函数，就接着去找。。。。直到没有函数为止\n\n### 变量的搜索原则\n\n1. 首先在当前作用域中进行查找，如果找到了就直接使用\n2. 如果没有找到，就去上一级作用域中进行查找，如果找到了就直接使用\n3. 果没有找到，就继续往上查找，直到找到全局作用域为止\n\n### 如何分析面试题\n\n1. 先进行提升处理（把提升后的代码写出来）\n2. 然后根据作用域及作用域链还有变量搜索原则进行分析\n\n## 闭包\n\n* 语文解释：封闭的包裹结构\n* js的解释：函数就是一个闭包\n\n### 闭包要解决的问题是什么？\n\n函数内部的数据无法被外界直接访问！\n\n### 如何解决？\n\n在函数内部返回一个函数，用来操作该函数内部的数据。\n\n### 闭包的原理（作用域）\n\n函数中的变量无法被上一级作用域访问，但是可以被下一级作用域访问。\n\n### 闭包的基本模型\n\n```js\nfunction func(){\n    var name = \"\";\n    return function(){\n        return name;\n    }\n}\n```\n\n### 如何访问多个数据？\n\n返回一个对象，对象中包含对所有数据的设置和访问的方法，在函数外部接收到该对象之后，就可以操作函数内部的数据\n\n### 点击事件的注册问题\n\n如果在`for`循环中使用循环的控制变量i来处理点击事件中的内容，那么这个 `i` 在点击事件触发的时候，循环已经结束，`i` 已经变成了最后一个值，所以会不准确\n\n#### 如何解决\n\n在点击事件的处理函数内部，访问的时候，不要去使用 `i`，而是使用这个函数自己的一个私有的数据。\n所以需要使用一个拥有自己的变量的函数来做点击事件的处理函数。\n\n\t这个函数需要通过闭包来创建。\n\n```js\nfunction f1(j){\n    return function(){\n        console.log(j);  //这里的j就是只有这个函数可以访问的一个私有的变量\n    }\n}\n\n```\n\n\t上面的函数调用之后的返回值，就拥有了自己独立的变量，我们可以使用它来做点击事件的处理函数\n\n### setTimeout的回调函数执行时间问题\n\n`setTimeout` 和 `setInterval` 中的回调函数，会在所有的主逻辑代码执行完之后，才依次检查执行时间是不是到了，到了就会执行\n\n当把 `setTimeout` 放在一个for循环语句中的时候，如果在回调函数中使用了循环中变量i\n那么，当 `setTimeout` 的回调函数执行的时候， `for` 循环已经执行完毕，i已经是最后一个值\n\n#### 解决办法\n\n回调函数不应该去使用 `for` 循环中的 `i` ，而是使用自己的一个私有变量\n\n```js\nfunction f(j){\n    return fucntion(){\n        console.log(j)\n    }\n}\nsetTimeout(f(i),0);\n```","source":"_posts/javascript-part5.md","raw":"---\ntitle: JavaScript高级篇之part5\ndate: 2016-11-10 21:43:36\ntags: javascript\ncategories: javascript\n---\njavascript高级与面向对象笔记整理，接part4篇！！\n\n<!-- more -->\n\n## 词法作用域\n\n### 词法作用域的概念\n\n变量的作用域在代码写好的时候就已经可以确定，这种作用域就是词法作用域\n\n*  `JavaScript` 中没有动态作用域\n*  `JavaScript` 中没有块级作用域\n\n## 变量提升\n\nJS代码执行分两个阶段，首先进行预解析，再执行\n在预解析阶段，系统会将所有的变量声明以及函数声明提升到当前作用域的最顶上\n\n* 当函数同名的时候，都会提升，但是后面的函数会将前面的函数覆盖\n* 当函数和变量同名的时候，只会提升函数声明，变量声明会被忽略\n* 变量提升是分作用域的\n* 变量提升是分段（ `script` 标签）\n* 函数表达式是不会被提升,提升的只是变量的声明。  `var func= function(){};`\n* 条件式函数声明，根据浏览器不同，提升的情况不同，最新的浏览器中都不会进行提升\n\n## 作用域链\n\n在 `js` 中只有函数可以限定作用域，然后，函数中又可以声明函数，这样就形成了一个由内向外进行访问的链式结构，这个结构就叫做作用域链\n\n### 如何绘制作用域链\n\n1. 先画一条直线，表示0级作用域链，也就是全局作用域\n2. 再在全局作用域中查找变量以及函数的声明，将所有找到的这些成员以小方块的形式放在0级作用域链上\n3. 如果全局作用域中有函数成员，那就从该函数中在引出一条线，表示1级作用域链\n4. 再去1级作用域中进行查找变量以及函数的声明，在把他们画出来，\n5. 如果还有函数，就接着去找。。。。直到没有函数为止\n\n### 变量的搜索原则\n\n1. 首先在当前作用域中进行查找，如果找到了就直接使用\n2. 如果没有找到，就去上一级作用域中进行查找，如果找到了就直接使用\n3. 果没有找到，就继续往上查找，直到找到全局作用域为止\n\n### 如何分析面试题\n\n1. 先进行提升处理（把提升后的代码写出来）\n2. 然后根据作用域及作用域链还有变量搜索原则进行分析\n\n## 闭包\n\n* 语文解释：封闭的包裹结构\n* js的解释：函数就是一个闭包\n\n### 闭包要解决的问题是什么？\n\n函数内部的数据无法被外界直接访问！\n\n### 如何解决？\n\n在函数内部返回一个函数，用来操作该函数内部的数据。\n\n### 闭包的原理（作用域）\n\n函数中的变量无法被上一级作用域访问，但是可以被下一级作用域访问。\n\n### 闭包的基本模型\n\n```js\nfunction func(){\n    var name = \"\";\n    return function(){\n        return name;\n    }\n}\n```\n\n### 如何访问多个数据？\n\n返回一个对象，对象中包含对所有数据的设置和访问的方法，在函数外部接收到该对象之后，就可以操作函数内部的数据\n\n### 点击事件的注册问题\n\n如果在`for`循环中使用循环的控制变量i来处理点击事件中的内容，那么这个 `i` 在点击事件触发的时候，循环已经结束，`i` 已经变成了最后一个值，所以会不准确\n\n#### 如何解决\n\n在点击事件的处理函数内部，访问的时候，不要去使用 `i`，而是使用这个函数自己的一个私有的数据。\n所以需要使用一个拥有自己的变量的函数来做点击事件的处理函数。\n\n\t这个函数需要通过闭包来创建。\n\n```js\nfunction f1(j){\n    return function(){\n        console.log(j);  //这里的j就是只有这个函数可以访问的一个私有的变量\n    }\n}\n\n```\n\n\t上面的函数调用之后的返回值，就拥有了自己独立的变量，我们可以使用它来做点击事件的处理函数\n\n### setTimeout的回调函数执行时间问题\n\n`setTimeout` 和 `setInterval` 中的回调函数，会在所有的主逻辑代码执行完之后，才依次检查执行时间是不是到了，到了就会执行\n\n当把 `setTimeout` 放在一个for循环语句中的时候，如果在回调函数中使用了循环中变量i\n那么，当 `setTimeout` 的回调函数执行的时候， `for` 循环已经执行完毕，i已经是最后一个值\n\n#### 解决办法\n\n回调函数不应该去使用 `for` 循环中的 `i` ，而是使用自己的一个私有变量\n\n```js\nfunction f(j){\n    return fucntion(){\n        console.log(j)\n    }\n}\nsetTimeout(f(i),0);\n```","slug":"javascript-part5","published":1,"updated":"2016-11-24T01:30:21.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvp0002uuwg7v7h4rblr","content":"<p>javascript高级与面向对象笔记整理，接part4篇！！</p>\n<a id=\"more\"></a>\n<h2 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h2><h3 id=\"词法作用域的概念\"><a href=\"#词法作用域的概念\" class=\"headerlink\" title=\"词法作用域的概念\"></a>词法作用域的概念</h3><p>变量的作用域在代码写好的时候就已经可以确定，这种作用域就是词法作用域</p>\n<ul>\n<li><code>JavaScript</code> 中没有动态作用域</li>\n<li><code>JavaScript</code> 中没有块级作用域</li>\n</ul>\n<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><p>JS代码执行分两个阶段，首先进行预解析，再执行<br>在预解析阶段，系统会将所有的变量声明以及函数声明提升到当前作用域的最顶上</p>\n<ul>\n<li>当函数同名的时候，都会提升，但是后面的函数会将前面的函数覆盖</li>\n<li>当函数和变量同名的时候，只会提升函数声明，变量声明会被忽略</li>\n<li>变量提升是分作用域的</li>\n<li>变量提升是分段（ <code>script</code> 标签）</li>\n<li>函数表达式是不会被提升,提升的只是变量的声明。  <code>var func= function(){};</code></li>\n<li>条件式函数声明，根据浏览器不同，提升的情况不同，最新的浏览器中都不会进行提升</li>\n</ul>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p>在 <code>js</code> 中只有函数可以限定作用域，然后，函数中又可以声明函数，这样就形成了一个由内向外进行访问的链式结构，这个结构就叫做作用域链</p>\n<h3 id=\"如何绘制作用域链\"><a href=\"#如何绘制作用域链\" class=\"headerlink\" title=\"如何绘制作用域链\"></a>如何绘制作用域链</h3><ol>\n<li>先画一条直线，表示0级作用域链，也就是全局作用域</li>\n<li>再在全局作用域中查找变量以及函数的声明，将所有找到的这些成员以小方块的形式放在0级作用域链上</li>\n<li>如果全局作用域中有函数成员，那就从该函数中在引出一条线，表示1级作用域链</li>\n<li>再去1级作用域中进行查找变量以及函数的声明，在把他们画出来，</li>\n<li>如果还有函数，就接着去找。。。。直到没有函数为止</li>\n</ol>\n<h3 id=\"变量的搜索原则\"><a href=\"#变量的搜索原则\" class=\"headerlink\" title=\"变量的搜索原则\"></a>变量的搜索原则</h3><ol>\n<li>首先在当前作用域中进行查找，如果找到了就直接使用</li>\n<li>如果没有找到，就去上一级作用域中进行查找，如果找到了就直接使用</li>\n<li>果没有找到，就继续往上查找，直到找到全局作用域为止</li>\n</ol>\n<h3 id=\"如何分析面试题\"><a href=\"#如何分析面试题\" class=\"headerlink\" title=\"如何分析面试题\"></a>如何分析面试题</h3><ol>\n<li>先进行提升处理（把提升后的代码写出来）</li>\n<li>然后根据作用域及作用域链还有变量搜索原则进行分析</li>\n</ol>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><ul>\n<li>语文解释：封闭的包裹结构</li>\n<li>js的解释：函数就是一个闭包</li>\n</ul>\n<h3 id=\"闭包要解决的问题是什么？\"><a href=\"#闭包要解决的问题是什么？\" class=\"headerlink\" title=\"闭包要解决的问题是什么？\"></a>闭包要解决的问题是什么？</h3><p>函数内部的数据无法被外界直接访问！</p>\n<h3 id=\"如何解决？\"><a href=\"#如何解决？\" class=\"headerlink\" title=\"如何解决？\"></a>如何解决？</h3><p>在函数内部返回一个函数，用来操作该函数内部的数据。</p>\n<h3 id=\"闭包的原理（作用域）\"><a href=\"#闭包的原理（作用域）\" class=\"headerlink\" title=\"闭包的原理（作用域）\"></a>闭包的原理（作用域）</h3><p>函数中的变量无法被上一级作用域访问，但是可以被下一级作用域访问。</p>\n<h3 id=\"闭包的基本模型\"><a href=\"#闭包的基本模型\" class=\"headerlink\" title=\"闭包的基本模型\"></a>闭包的基本模型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"如何访问多个数据？\"><a href=\"#如何访问多个数据？\" class=\"headerlink\" title=\"如何访问多个数据？\"></a>如何访问多个数据？</h3><p>返回一个对象，对象中包含对所有数据的设置和访问的方法，在函数外部接收到该对象之后，就可以操作函数内部的数据</p>\n<h3 id=\"点击事件的注册问题\"><a href=\"#点击事件的注册问题\" class=\"headerlink\" title=\"点击事件的注册问题\"></a>点击事件的注册问题</h3><p>如果在<code>for</code>循环中使用循环的控制变量i来处理点击事件中的内容，那么这个 <code>i</code> 在点击事件触发的时候，循环已经结束，<code>i</code> 已经变成了最后一个值，所以会不准确</p>\n<h4 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h4><p>在点击事件的处理函数内部，访问的时候，不要去使用 <code>i</code>，而是使用这个函数自己的一个私有的数据。<br>所以需要使用一个拥有自己的变量的函数来做点击事件的处理函数。</p>\n<pre><code>这个函数需要通过闭包来创建。\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">j</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(j);  <span class=\"comment\">//这里的j就是只有这个函数可以访问的一个私有的变量</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>上面的函数调用之后的返回值，就拥有了自己独立的变量，我们可以使用它来做点击事件的处理函数\n</code></pre><h3 id=\"setTimeout的回调函数执行时间问题\"><a href=\"#setTimeout的回调函数执行时间问题\" class=\"headerlink\" title=\"setTimeout的回调函数执行时间问题\"></a>setTimeout的回调函数执行时间问题</h3><p><code>setTimeout</code> 和 <code>setInterval</code> 中的回调函数，会在所有的主逻辑代码执行完之后，才依次检查执行时间是不是到了，到了就会执行</p>\n<p>当把 <code>setTimeout</code> 放在一个for循环语句中的时候，如果在回调函数中使用了循环中变量i<br>那么，当 <code>setTimeout</code> 的回调函数执行的时候， <code>for</code> 循环已经执行完毕，i已经是最后一个值</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>回调函数不应该去使用 <code>for</code> 循环中的 <code>i</code> ，而是使用自己的一个私有变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">j</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fucntion()&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(j)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">setTimeout(f(i),<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>","excerpt":"<p>javascript高级与面向对象笔记整理，接part4篇！！</p>","more":"<h2 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h2><h3 id=\"词法作用域的概念\"><a href=\"#词法作用域的概念\" class=\"headerlink\" title=\"词法作用域的概念\"></a>词法作用域的概念</h3><p>变量的作用域在代码写好的时候就已经可以确定，这种作用域就是词法作用域</p>\n<ul>\n<li><code>JavaScript</code> 中没有动态作用域</li>\n<li><code>JavaScript</code> 中没有块级作用域</li>\n</ul>\n<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><p>JS代码执行分两个阶段，首先进行预解析，再执行<br>在预解析阶段，系统会将所有的变量声明以及函数声明提升到当前作用域的最顶上</p>\n<ul>\n<li>当函数同名的时候，都会提升，但是后面的函数会将前面的函数覆盖</li>\n<li>当函数和变量同名的时候，只会提升函数声明，变量声明会被忽略</li>\n<li>变量提升是分作用域的</li>\n<li>变量提升是分段（ <code>script</code> 标签）</li>\n<li>函数表达式是不会被提升,提升的只是变量的声明。  <code>var func= function(){};</code></li>\n<li>条件式函数声明，根据浏览器不同，提升的情况不同，最新的浏览器中都不会进行提升</li>\n</ul>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p>在 <code>js</code> 中只有函数可以限定作用域，然后，函数中又可以声明函数，这样就形成了一个由内向外进行访问的链式结构，这个结构就叫做作用域链</p>\n<h3 id=\"如何绘制作用域链\"><a href=\"#如何绘制作用域链\" class=\"headerlink\" title=\"如何绘制作用域链\"></a>如何绘制作用域链</h3><ol>\n<li>先画一条直线，表示0级作用域链，也就是全局作用域</li>\n<li>再在全局作用域中查找变量以及函数的声明，将所有找到的这些成员以小方块的形式放在0级作用域链上</li>\n<li>如果全局作用域中有函数成员，那就从该函数中在引出一条线，表示1级作用域链</li>\n<li>再去1级作用域中进行查找变量以及函数的声明，在把他们画出来，</li>\n<li>如果还有函数，就接着去找。。。。直到没有函数为止</li>\n</ol>\n<h3 id=\"变量的搜索原则\"><a href=\"#变量的搜索原则\" class=\"headerlink\" title=\"变量的搜索原则\"></a>变量的搜索原则</h3><ol>\n<li>首先在当前作用域中进行查找，如果找到了就直接使用</li>\n<li>如果没有找到，就去上一级作用域中进行查找，如果找到了就直接使用</li>\n<li>果没有找到，就继续往上查找，直到找到全局作用域为止</li>\n</ol>\n<h3 id=\"如何分析面试题\"><a href=\"#如何分析面试题\" class=\"headerlink\" title=\"如何分析面试题\"></a>如何分析面试题</h3><ol>\n<li>先进行提升处理（把提升后的代码写出来）</li>\n<li>然后根据作用域及作用域链还有变量搜索原则进行分析</li>\n</ol>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><ul>\n<li>语文解释：封闭的包裹结构</li>\n<li>js的解释：函数就是一个闭包</li>\n</ul>\n<h3 id=\"闭包要解决的问题是什么？\"><a href=\"#闭包要解决的问题是什么？\" class=\"headerlink\" title=\"闭包要解决的问题是什么？\"></a>闭包要解决的问题是什么？</h3><p>函数内部的数据无法被外界直接访问！</p>\n<h3 id=\"如何解决？\"><a href=\"#如何解决？\" class=\"headerlink\" title=\"如何解决？\"></a>如何解决？</h3><p>在函数内部返回一个函数，用来操作该函数内部的数据。</p>\n<h3 id=\"闭包的原理（作用域）\"><a href=\"#闭包的原理（作用域）\" class=\"headerlink\" title=\"闭包的原理（作用域）\"></a>闭包的原理（作用域）</h3><p>函数中的变量无法被上一级作用域访问，但是可以被下一级作用域访问。</p>\n<h3 id=\"闭包的基本模型\"><a href=\"#闭包的基本模型\" class=\"headerlink\" title=\"闭包的基本模型\"></a>闭包的基本模型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"如何访问多个数据？\"><a href=\"#如何访问多个数据？\" class=\"headerlink\" title=\"如何访问多个数据？\"></a>如何访问多个数据？</h3><p>返回一个对象，对象中包含对所有数据的设置和访问的方法，在函数外部接收到该对象之后，就可以操作函数内部的数据</p>\n<h3 id=\"点击事件的注册问题\"><a href=\"#点击事件的注册问题\" class=\"headerlink\" title=\"点击事件的注册问题\"></a>点击事件的注册问题</h3><p>如果在<code>for</code>循环中使用循环的控制变量i来处理点击事件中的内容，那么这个 <code>i</code> 在点击事件触发的时候，循环已经结束，<code>i</code> 已经变成了最后一个值，所以会不准确</p>\n<h4 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h4><p>在点击事件的处理函数内部，访问的时候，不要去使用 <code>i</code>，而是使用这个函数自己的一个私有的数据。<br>所以需要使用一个拥有自己的变量的函数来做点击事件的处理函数。</p>\n<pre><code>这个函数需要通过闭包来创建。\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">j</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(j);  <span class=\"comment\">//这里的j就是只有这个函数可以访问的一个私有的变量</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>上面的函数调用之后的返回值，就拥有了自己独立的变量，我们可以使用它来做点击事件的处理函数\n</code></pre><h3 id=\"setTimeout的回调函数执行时间问题\"><a href=\"#setTimeout的回调函数执行时间问题\" class=\"headerlink\" title=\"setTimeout的回调函数执行时间问题\"></a>setTimeout的回调函数执行时间问题</h3><p><code>setTimeout</code> 和 <code>setInterval</code> 中的回调函数，会在所有的主逻辑代码执行完之后，才依次检查执行时间是不是到了，到了就会执行</p>\n<p>当把 <code>setTimeout</code> 放在一个for循环语句中的时候，如果在回调函数中使用了循环中变量i<br>那么，当 <code>setTimeout</code> 的回调函数执行的时候， <code>for</code> 循环已经执行完毕，i已经是最后一个值</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>回调函数不应该去使用 <code>for</code> 循环中的 <code>i</code> ，而是使用自己的一个私有变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">j</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fucntion()&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(j)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">setTimeout(f(i),<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>"},{"title":"js高级与面向对象之原型链","date":"2016-07-09T11:41:47.000Z","_content":"\n## 原型链是什么？\n\n只要是对象就会有原型，那么所有的原型就会形成一个链式的结构，这个结构就称为原型链\n\n<!-- more -->\n\n```js\nfunction Person(){}\n//p--->Person.prototype----->Object.Prototype----->null\nvar p = new Person();\n\nconsole.log(Person.prototype);\n//原型也是一个对象，是对象，就有构造函数，有构造函数，就有原型\n```\n\n## 修改原型链\n\n* 原型链结构可以进行修改\n* 替换原型对象就可以修改原型链结构\n\n* 原型继承的概念重定义\n* 通过修改原型链的结构实现的继承就是原型继承\n\n* 属性的搜索原则\n* 在对象访问属性的时候，会遵守一个原则\n1. 现在对象本身中进行查找，如果本身中有，就直接使用，\n2. 如果没有，就去原型中查找，如果原型中有，就直接使用\n3. 如果没有，重复步骤2，直到找到 `null`\n\n* 设置属性没有搜索原则，只会在本身中进行搜索\n\n* 由于属性搜索原则的存在，所以对象可以直接访问 `.constructor` 属性找到其构造函数\n\n```js\nfunction Human(){\n\n}\n\nfunction Person(){\n\n}\nPerson.prototype = new Human();\n\n//p---->Person.prototype----->Human.prototype----->Object.prototype----->null\nvar p = new Person();\n```\n\n## 复杂的原型链\n\n```js\nfunction Animal(){\n    this.name = \"123\";\n}\n\nfunction Human(\n\n){}\n\nvar animal = new Animal();\nHuman.prototype = animal;\n\nvar h = new Human();\n//通过h去访问constructor属性的顺序\n//1.现在h自身查找 h中没有\n//2.去Human.prototype 也就是 h.__proto___  也就是animal中去找\n//3.再去anmail这个对象的原型中 也就是 Animal.prototype 也即是 animal.__proto__ 中去找\n//4.找到的就是Animal\nconsole.log(h.constructor);\n\n\nfunction Man(){}\nvar h1 = new Human();\nMan.prototype = h1;\n\nvar m = new Man();\n//1.第一步在m自己中找 没有\n//2.m.__proto__  也就是Man.prototype 也就是 h1中去查找 没有\n//3.h1的原型 也就是 h1.__proto__ 也就是 Human.prototype\n//4.去上面看吧\nconsole.log(m.constructor);\n\n```\n\n## instanceof关键字\n\n* 对象 `instanceof` 构造函数\n* 检测一个对象是不是通过某个构造函数创建出来的(不准确的说法)\n* 检测一个构造函数的原型 `（构造函数.prototype）` 是否在某个对象的原型链上\n\n```js\nfunction Person(){\n\n        }\n//p---->Person.prototype---->Object.prototype---->null\nvar p = new Person();\n\nconsole.log(p instanceof Person);\n\nconsole.log(p instanceof Object);\n```\n\n## Object.prototype成员\n\n1.  `constructor`  指向原型相关的构造函数\n2.  `hasOwnProperty` 判断对象本身是否拥有指定的属性  不包含原型中的成员\n\t`对象.hasOwnProperty(属性名)`\n3.  `isPrototypeOf` 判断一个对象是否某个对象的原型\n\t`对象.isPrototypeOf(另外一个对象)`\n4.  `propertyIsEnumerable`  判断对象自己的属性是不是可以被遍历 `（for-in）` 如果不是自己的或者不能被遍历都会返回 `false`\n\t`对象.propertyIsEnumerable(属性名)`\n\t`Object.defineProperty(对象，属性名，对象（描述信息）)`\n\n5.  `toLocaleString`  `toString`   都是将对象转换为字符串的方法\n\t`tolocalString` 打印本地格式的字符串  本地格式是获取的系统设置\n\t`toString` 直接转换成字符串\n6.  `valueOf` 方法\n\t当对象参与运算的时候，会首先调用对象的 `valuOf` 方法获取对象的值\n\t如果获取到的这个值可以参与运算，就直接拿来使用\n\t如果不能参与运算，就会去调用该对象的 `toString` 方法\n\n```js\nvar obj = {\n    valueOf :function () {\n        return 1;\n    },\n\n    toString:function(){\n        return \"我叫李二狗\";\n    }\n};\n//console.log(obj.valueOf());\nconsole.log(obj.toString());\nconsole.log( obj + 1);\n```\n\n7. __proto__  指向对象的原型  非标准属性\n\n```js\nvar now = new Date();\nconsole.log(now.toString());\nconsole.log(now.toLocaleString());\n\nvar obj = {\n      name:\"\",\n    age:18\n}\n\nconsole.log(obj.toString());\nconsole.log(obj.toLocaleString());\n\nobj.__proto__.name =  \"张三\";\n\nfor(var k in obj){\n    console.log(k);\n}\n\nconsole.log(obj.propertyIsEnumerable(\"name\"));\n\nvar obj = {\n\n}\n\nobj.__proto__ = {\n   beautifulLevel : \"High\"\n}\n\nconsole.log(obj.hasOwnProperty(\"beautifulLevel\"));\nvar obj = {};\n\nvar obj1 = {};\n\nobj.__proto__ = obj1;\nconsole.log(obj1.isPrototypeOf(obj));\n```","source":"_posts/javascript-prototype-chain.md","raw":"---\ntitle: js高级与面向对象之原型链\ndate: 2016-7-09 19:41:47\ntags: \n\t- 原型链\ncategories: javascript\n---\n\n## 原型链是什么？\n\n只要是对象就会有原型，那么所有的原型就会形成一个链式的结构，这个结构就称为原型链\n\n<!-- more -->\n\n```js\nfunction Person(){}\n//p--->Person.prototype----->Object.Prototype----->null\nvar p = new Person();\n\nconsole.log(Person.prototype);\n//原型也是一个对象，是对象，就有构造函数，有构造函数，就有原型\n```\n\n## 修改原型链\n\n* 原型链结构可以进行修改\n* 替换原型对象就可以修改原型链结构\n\n* 原型继承的概念重定义\n* 通过修改原型链的结构实现的继承就是原型继承\n\n* 属性的搜索原则\n* 在对象访问属性的时候，会遵守一个原则\n1. 现在对象本身中进行查找，如果本身中有，就直接使用，\n2. 如果没有，就去原型中查找，如果原型中有，就直接使用\n3. 如果没有，重复步骤2，直到找到 `null`\n\n* 设置属性没有搜索原则，只会在本身中进行搜索\n\n* 由于属性搜索原则的存在，所以对象可以直接访问 `.constructor` 属性找到其构造函数\n\n```js\nfunction Human(){\n\n}\n\nfunction Person(){\n\n}\nPerson.prototype = new Human();\n\n//p---->Person.prototype----->Human.prototype----->Object.prototype----->null\nvar p = new Person();\n```\n\n## 复杂的原型链\n\n```js\nfunction Animal(){\n    this.name = \"123\";\n}\n\nfunction Human(\n\n){}\n\nvar animal = new Animal();\nHuman.prototype = animal;\n\nvar h = new Human();\n//通过h去访问constructor属性的顺序\n//1.现在h自身查找 h中没有\n//2.去Human.prototype 也就是 h.__proto___  也就是animal中去找\n//3.再去anmail这个对象的原型中 也就是 Animal.prototype 也即是 animal.__proto__ 中去找\n//4.找到的就是Animal\nconsole.log(h.constructor);\n\n\nfunction Man(){}\nvar h1 = new Human();\nMan.prototype = h1;\n\nvar m = new Man();\n//1.第一步在m自己中找 没有\n//2.m.__proto__  也就是Man.prototype 也就是 h1中去查找 没有\n//3.h1的原型 也就是 h1.__proto__ 也就是 Human.prototype\n//4.去上面看吧\nconsole.log(m.constructor);\n\n```\n\n## instanceof关键字\n\n* 对象 `instanceof` 构造函数\n* 检测一个对象是不是通过某个构造函数创建出来的(不准确的说法)\n* 检测一个构造函数的原型 `（构造函数.prototype）` 是否在某个对象的原型链上\n\n```js\nfunction Person(){\n\n        }\n//p---->Person.prototype---->Object.prototype---->null\nvar p = new Person();\n\nconsole.log(p instanceof Person);\n\nconsole.log(p instanceof Object);\n```\n\n## Object.prototype成员\n\n1.  `constructor`  指向原型相关的构造函数\n2.  `hasOwnProperty` 判断对象本身是否拥有指定的属性  不包含原型中的成员\n\t`对象.hasOwnProperty(属性名)`\n3.  `isPrototypeOf` 判断一个对象是否某个对象的原型\n\t`对象.isPrototypeOf(另外一个对象)`\n4.  `propertyIsEnumerable`  判断对象自己的属性是不是可以被遍历 `（for-in）` 如果不是自己的或者不能被遍历都会返回 `false`\n\t`对象.propertyIsEnumerable(属性名)`\n\t`Object.defineProperty(对象，属性名，对象（描述信息）)`\n\n5.  `toLocaleString`  `toString`   都是将对象转换为字符串的方法\n\t`tolocalString` 打印本地格式的字符串  本地格式是获取的系统设置\n\t`toString` 直接转换成字符串\n6.  `valueOf` 方法\n\t当对象参与运算的时候，会首先调用对象的 `valuOf` 方法获取对象的值\n\t如果获取到的这个值可以参与运算，就直接拿来使用\n\t如果不能参与运算，就会去调用该对象的 `toString` 方法\n\n```js\nvar obj = {\n    valueOf :function () {\n        return 1;\n    },\n\n    toString:function(){\n        return \"我叫李二狗\";\n    }\n};\n//console.log(obj.valueOf());\nconsole.log(obj.toString());\nconsole.log( obj + 1);\n```\n\n7. __proto__  指向对象的原型  非标准属性\n\n```js\nvar now = new Date();\nconsole.log(now.toString());\nconsole.log(now.toLocaleString());\n\nvar obj = {\n      name:\"\",\n    age:18\n}\n\nconsole.log(obj.toString());\nconsole.log(obj.toLocaleString());\n\nobj.__proto__.name =  \"张三\";\n\nfor(var k in obj){\n    console.log(k);\n}\n\nconsole.log(obj.propertyIsEnumerable(\"name\"));\n\nvar obj = {\n\n}\n\nobj.__proto__ = {\n   beautifulLevel : \"High\"\n}\n\nconsole.log(obj.hasOwnProperty(\"beautifulLevel\"));\nvar obj = {};\n\nvar obj1 = {};\n\nobj.__proto__ = obj1;\nconsole.log(obj1.isPrototypeOf(obj));\n```","slug":"javascript-prototype-chain","published":1,"updated":"2016-11-24T01:28:07.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvp1002xuwg76w1ae30q","content":"<h2 id=\"原型链是什么？\"><a href=\"#原型链是什么？\" class=\"headerlink\" title=\"原型链是什么？\"></a>原型链是什么？</h2><p>只要是对象就会有原型，那么所有的原型就会形成一个链式的结构，这个结构就称为原型链</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//p---&gt;Person.prototype-----&gt;Object.Prototype-----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype);</div><div class=\"line\"><span class=\"comment\">//原型也是一个对象，是对象，就有构造函数，有构造函数，就有原型</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改原型链\"><a href=\"#修改原型链\" class=\"headerlink\" title=\"修改原型链\"></a>修改原型链</h2><ul>\n<li>原型链结构可以进行修改</li>\n<li><p>替换原型对象就可以修改原型链结构</p>\n</li>\n<li><p>原型继承的概念重定义</p>\n</li>\n<li><p>通过修改原型链的结构实现的继承就是原型继承</p>\n</li>\n<li><p>属性的搜索原则</p>\n</li>\n<li>在对象访问属性的时候，会遵守一个原则</li>\n</ul>\n<ol>\n<li>现在对象本身中进行查找，如果本身中有，就直接使用，</li>\n<li>如果没有，就去原型中查找，如果原型中有，就直接使用</li>\n<li>如果没有，重复步骤2，直到找到 <code>null</code></li>\n</ol>\n<ul>\n<li><p>设置属性没有搜索原则，只会在本身中进行搜索</p>\n</li>\n<li><p>由于属性搜索原则的存在，所以对象可以直接访问 <code>.constructor</code> 属性找到其构造函数</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Human</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = <span class=\"keyword\">new</span> Human();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//p----&gt;Person.prototype-----&gt;Human.prototype-----&gt;Object.prototype-----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure>\n<h2 id=\"复杂的原型链\"><a href=\"#复杂的原型链\" class=\"headerlink\" title=\"复杂的原型链\"></a>复杂的原型链</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"123\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Human</span>(<span class=\"params\"></span></span></div><div class=\"line\"></div><div class=\"line\">)&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal();</div><div class=\"line\">Human.prototype = animal;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> h = <span class=\"keyword\">new</span> Human();</div><div class=\"line\"><span class=\"comment\">//通过h去访问constructor属性的顺序</span></div><div class=\"line\"><span class=\"comment\">//1.现在h自身查找 h中没有</span></div><div class=\"line\"><span class=\"comment\">//2.去Human.prototype 也就是 h.__proto___  也就是animal中去找</span></div><div class=\"line\"><span class=\"comment\">//3.再去anmail这个对象的原型中 也就是 Animal.prototype 也即是 animal.__proto__ 中去找</span></div><div class=\"line\"><span class=\"comment\">//4.找到的就是Animal</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(h.constructor);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Man</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> h1 = <span class=\"keyword\">new</span> Human();</div><div class=\"line\">Man.prototype = h1;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"><span class=\"comment\">//1.第一步在m自己中找 没有</span></div><div class=\"line\"><span class=\"comment\">//2.m.__proto__  也就是Man.prototype 也就是 h1中去查找 没有</span></div><div class=\"line\"><span class=\"comment\">//3.h1的原型 也就是 h1.__proto__ 也就是 Human.prototype</span></div><div class=\"line\"><span class=\"comment\">//4.去上面看吧</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(m.constructor);</div></pre></td></tr></table></figure>\n<h2 id=\"instanceof关键字\"><a href=\"#instanceof关键字\" class=\"headerlink\" title=\"instanceof关键字\"></a>instanceof关键字</h2><ul>\n<li>对象 <code>instanceof</code> 构造函数</li>\n<li>检测一个对象是不是通过某个构造函数创建出来的(不准确的说法)</li>\n<li>检测一个构造函数的原型 <code>（构造函数.prototype）</code> 是否在某个对象的原型链上</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"comment\">//p----&gt;Person.prototype----&gt;Object.prototype----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p <span class=\"keyword\">instanceof</span> Person);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Object-prototype成员\"><a href=\"#Object-prototype成员\" class=\"headerlink\" title=\"Object.prototype成员\"></a>Object.prototype成员</h2><ol>\n<li><code>constructor</code>  指向原型相关的构造函数</li>\n<li><code>hasOwnProperty</code> 判断对象本身是否拥有指定的属性  不包含原型中的成员<br><code>对象.hasOwnProperty(属性名)</code></li>\n<li><code>isPrototypeOf</code> 判断一个对象是否某个对象的原型<br><code>对象.isPrototypeOf(另外一个对象)</code></li>\n<li><p><code>propertyIsEnumerable</code>  判断对象自己的属性是不是可以被遍历 <code>（for-in）</code> 如果不是自己的或者不能被遍历都会返回 <code>false</code><br><code>对象.propertyIsEnumerable(属性名)</code><br><code>Object.defineProperty(对象，属性名，对象（描述信息）)</code></p>\n</li>\n<li><p><code>toLocaleString</code>  <code>toString</code>   都是将对象转换为字符串的方法<br><code>tolocalString</code> 打印本地格式的字符串  本地格式是获取的系统设置<br><code>toString</code> 直接转换成字符串</p>\n</li>\n<li><code>valueOf</code> 方法<br>当对象参与运算的时候，会首先调用对象的 <code>valuOf</code> 方法获取对象的值<br>如果获取到的这个值可以参与运算，就直接拿来使用<br>如果不能参与运算，就会去调用该对象的 <code>toString</code> 方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">valueOf</span> :<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">toString</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"我叫李二狗\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//console.log(obj.valueOf());</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log( obj + <span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li><strong>proto</strong>  指向对象的原型  非标准属性</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(now.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(now.toLocaleString());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.toLocaleString());</div><div class=\"line\"></div><div class=\"line\">obj.__proto__.name =  <span class=\"string\">\"张三\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(k);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.propertyIsEnumerable(<span class=\"string\">\"name\"</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.__proto__ = &#123;</div><div class=\"line\">   <span class=\"attr\">beautifulLevel</span> : <span class=\"string\">\"High\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"string\">\"beautifulLevel\"</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">obj.__proto__ = obj1;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.isPrototypeOf(obj));</div></pre></td></tr></table></figure>","excerpt":"<h2 id=\"原型链是什么？\"><a href=\"#原型链是什么？\" class=\"headerlink\" title=\"原型链是什么？\"></a>原型链是什么？</h2><p>只要是对象就会有原型，那么所有的原型就会形成一个链式的结构，这个结构就称为原型链</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//p---&gt;Person.prototype-----&gt;Object.Prototype-----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype);</div><div class=\"line\"><span class=\"comment\">//原型也是一个对象，是对象，就有构造函数，有构造函数，就有原型</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改原型链\"><a href=\"#修改原型链\" class=\"headerlink\" title=\"修改原型链\"></a>修改原型链</h2><ul>\n<li>原型链结构可以进行修改</li>\n<li><p>替换原型对象就可以修改原型链结构</p>\n</li>\n<li><p>原型继承的概念重定义</p>\n</li>\n<li><p>通过修改原型链的结构实现的继承就是原型继承</p>\n</li>\n<li><p>属性的搜索原则</p>\n</li>\n<li>在对象访问属性的时候，会遵守一个原则</li>\n</ul>\n<ol>\n<li>现在对象本身中进行查找，如果本身中有，就直接使用，</li>\n<li>如果没有，就去原型中查找，如果原型中有，就直接使用</li>\n<li>如果没有，重复步骤2，直到找到 <code>null</code></li>\n</ol>\n<ul>\n<li><p>设置属性没有搜索原则，只会在本身中进行搜索</p>\n</li>\n<li><p>由于属性搜索原则的存在，所以对象可以直接访问 <code>.constructor</code> 属性找到其构造函数</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Human</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = <span class=\"keyword\">new</span> Human();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//p----&gt;Person.prototype-----&gt;Human.prototype-----&gt;Object.prototype-----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure>\n<h2 id=\"复杂的原型链\"><a href=\"#复杂的原型链\" class=\"headerlink\" title=\"复杂的原型链\"></a>复杂的原型链</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"123\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Human</span>(<span class=\"params\"></div><div class=\"line\"></div><div class=\"line\"></span>)</span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal();</div><div class=\"line\">Human.prototype = animal;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> h = <span class=\"keyword\">new</span> Human();</div><div class=\"line\"><span class=\"comment\">//通过h去访问constructor属性的顺序</span></div><div class=\"line\"><span class=\"comment\">//1.现在h自身查找 h中没有</span></div><div class=\"line\"><span class=\"comment\">//2.去Human.prototype 也就是 h.__proto___  也就是animal中去找</span></div><div class=\"line\"><span class=\"comment\">//3.再去anmail这个对象的原型中 也就是 Animal.prototype 也即是 animal.__proto__ 中去找</span></div><div class=\"line\"><span class=\"comment\">//4.找到的就是Animal</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(h.constructor);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Man</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> h1 = <span class=\"keyword\">new</span> Human();</div><div class=\"line\">Man.prototype = h1;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"><span class=\"comment\">//1.第一步在m自己中找 没有</span></div><div class=\"line\"><span class=\"comment\">//2.m.__proto__  也就是Man.prototype 也就是 h1中去查找 没有</span></div><div class=\"line\"><span class=\"comment\">//3.h1的原型 也就是 h1.__proto__ 也就是 Human.prototype</span></div><div class=\"line\"><span class=\"comment\">//4.去上面看吧</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(m.constructor);</div></pre></td></tr></table></figure>\n<h2 id=\"instanceof关键字\"><a href=\"#instanceof关键字\" class=\"headerlink\" title=\"instanceof关键字\"></a>instanceof关键字</h2><ul>\n<li>对象 <code>instanceof</code> 构造函数</li>\n<li>检测一个对象是不是通过某个构造函数创建出来的(不准确的说法)</li>\n<li>检测一个构造函数的原型 <code>（构造函数.prototype）</code> 是否在某个对象的原型链上</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"comment\">//p----&gt;Person.prototype----&gt;Object.prototype----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p <span class=\"keyword\">instanceof</span> Person);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Object-prototype成员\"><a href=\"#Object-prototype成员\" class=\"headerlink\" title=\"Object.prototype成员\"></a>Object.prototype成员</h2><ol>\n<li><code>constructor</code>  指向原型相关的构造函数</li>\n<li><code>hasOwnProperty</code> 判断对象本身是否拥有指定的属性  不包含原型中的成员<br><code>对象.hasOwnProperty(属性名)</code></li>\n<li><code>isPrototypeOf</code> 判断一个对象是否某个对象的原型<br><code>对象.isPrototypeOf(另外一个对象)</code></li>\n<li><p><code>propertyIsEnumerable</code>  判断对象自己的属性是不是可以被遍历 <code>（for-in）</code> 如果不是自己的或者不能被遍历都会返回 <code>false</code><br><code>对象.propertyIsEnumerable(属性名)</code><br><code>Object.defineProperty(对象，属性名，对象（描述信息）)</code></p>\n</li>\n<li><p><code>toLocaleString</code>  <code>toString</code>   都是将对象转换为字符串的方法<br><code>tolocalString</code> 打印本地格式的字符串  本地格式是获取的系统设置<br><code>toString</code> 直接转换成字符串</p>\n</li>\n<li><code>valueOf</code> 方法<br>当对象参与运算的时候，会首先调用对象的 <code>valuOf</code> 方法获取对象的值<br>如果获取到的这个值可以参与运算，就直接拿来使用<br>如果不能参与运算，就会去调用该对象的 <code>toString</code> 方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">valueOf</span> :<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">toString</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"我叫李二狗\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//console.log(obj.valueOf());</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log( obj + <span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li><strong>proto</strong>  指向对象的原型  非标准属性</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(now.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(now.toLocaleString());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.toLocaleString());</div><div class=\"line\"></div><div class=\"line\">obj.__proto__.name =  <span class=\"string\">\"张三\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(k);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.propertyIsEnumerable(<span class=\"string\">\"name\"</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.__proto__ = &#123;</div><div class=\"line\">   <span class=\"attr\">beautifulLevel</span> : <span class=\"string\">\"High\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"string\">\"beautifulLevel\"</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">obj.__proto__ = obj1;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.isPrototypeOf(obj));</div></pre></td></tr></table></figure>"},{"title":"JavaScript高级篇之part6","date":"2016-11-11T11:35:55.000Z","_content":"javascript高级与面向对象笔记整理，接part5篇！！\n\n<!-- more -->\n\n## 闭包的练习\n\n### for循环中注册点击事件\n\n### for循环中是用setTimeout\n\n## 缓存\n\n缓存就是将一些数据，剧院，进行临时的存储，以提高访问效率\n\n* 浏览器缓存\n* CDN\n* JS中的缓存\n\n## 使用缓存解决斐波那契数列的性能问题\n\n### 有什么性能问题\n\n使用递归去计算斐波那契数列存在大量的重复的计算，导致计算效率十分底下\n\n### 如何解决性能问题\n\n使用缓存\n\n1. 创建一个数组充当缓存容器\n2. 每次需要计算斐波那契数列的时候，先去缓存中进行查找\n3. 如果有就直接返回\n4. 如果没有，就去计算，算出来结果之后\n5. 将结果存入缓存中\n6. 将结果返回\n\n```js\n//1.创建一个数组充当缓存容器\nvar arr = [];\nfunction fibnacci(n){\n//2.每次需要计算斐波那契数列的时候，先去缓存中进行查找\n\tvar num = arr[n];\n\tif(num){\n\t\t//3.如果有就直接返回\n\t\treturn num;\n\t}else{\n\t\t//4.如果没有，就去计算，算出来结果之后\n\t\tif(n <= 2){\n\t\t\tnum=1;\n\t\t}else{\n\t\tnum = fibnacci(n-1)+fibnacci(n-2);\n\t\t}\n\t\t//5.将结果存入缓存中\n\t\tarr[n] = num;\n\t\t//6.将结果返回\n\t\treturn num;\n\t}\n}\n```\n\n优化后的代码\n\n```js\nfunction createFib(){\n    //1.创建一个数组充当缓存容器\n    var arr = [];\n    function fibnacci(n){\n    //2.每次需要计算斐波那契数字的时候，先去缓存中进行查找\n        var num = arr[n];\n        if(!num){\n            //4.如果没有，就去就算，算出来结果之后，\n            if(n <= 2){\n                num = 1;\n            }else{\n                num = fibnacci(n-1)+fibnacci(n-2);\n            }\n            //5.将结果存入缓存中\n            arr[n] = num;\n        }\n        //6.将结果返回\n        return num;\n    }\n    return fibnacci;\n}\n\n```\n\n## jQuery缓存实现分析\n\n```js\nfunction createCache(){\n\t//需要一个能够存储数据的容器\n\tvar cache = {};\n\t//用来存储 键，并且记录键存入的顺序\n\tvar keys = [];\n\treturn function(key,value){\n\t\tif(value){\n\t\t\tcache[key] = value;\n\t\t\tkeys.push(key);\n\t\t\tif(keys.length > 50){\n\t\t\t\tdelete cache[keys.shift()];\n\t\t\t}\n\t\t}else{\n\t\t\treturn cache[key];\n\t\t}\n\t}\n}\n```\n\n## Jquery缓存源码分析\n\n```js\nfunction createCache(){\n\tvar keys = [];\n\tfunction cache(key,value){\n\t\tif(keys.push(key + \" \") > 10){\n\t\t \tdelete cache[keys.shift()];\n\t\t}\n\t\treturn (cache[key + \" \"] = value);\n\t}\n\treturn cache;\n}\nvar cache = createCache();\ncache(\"name\",\"mengyan\");\ncache[\"name\" + \" \"];\n\n```\n\n## 函数的四种调用形式\n\n### 函数调用模式\n\n形式：函数名（）；\n`this：window`\n\n### 方法调用模式\n\n形式：对项目.方法名（）；\nthis：调用该方法的对象\n\n### 构造函数调用模式\n\n形式 `new` 函数名（）\nthis：new创建出来的对象\n\n#### 工厂模式\n\n```js\nfunction createPerson(){\n    var o = new Object();\n    o.name = \"zs\";\n    o.age = 18;\n    return o;\n}\n\nvar p = createPerson();\n```\n\n#### 寄生模式\n\n```js\nfunction Person(){\n    var o = new Object();\n    o.name = \"zs\";\n    o.age = 18;\n    return o;\n}\n\nvar p = new Person();\n```\n\n### 上下文调用模式\n\n在其他的调用模式中， `this` 不可以赋值，也就不可以改变\n在上下文调用模式中，可以进行手动的设置 `this` 。\n\n#### call\n\n```js\n//函数名.call(对象, 参数1, 参数2, 参数3...)\n```\n\n1. 调用函数\n2. 将函数内的 `this` 指向第一个参数中的对象\n3. 将除第一个参数外的所有参数依次传给函数，做为实参\n\n#### apply\n\n```js\n//函数名.apply(对象, 数组)\n```\n\n1. 调用函数\n2. 将函数内的 `this` 指向第一个参数中的对象\n3. 将第二个参数中的数组拆解开，将数组中的元素依次的传给函数当做实参\n\n#### 借用构造函数继承\n\n```js\nfunction Parent(){\n    this.money = 100000000000000;\n}\n\nfunction Son(){\n    Parent.call(this);\n    this.wife = \"凤姐\";\n}\n\nvar s = new Son();\n```\n\n1. 使用 `new` 关键字创建了一个对象\n2. 调用构造函数 `Son` ，将 `Son` 中的 `this` 指向刚才创建的对象\n3. 在 `Son` 构造函数中，是用上下文调用模式去调用 `Parent` 函数，\n4. 调用 `Person` 函数，将 `Parent` 中的 `this` 指向 `song` 中的 `this` ，也就是用 `new` 创建出来的那个对象\n5.  `Parent` 中会使用 `this` 给对象添加成员\n6.  `Parent` 调用结束， `Son` 中的 `this` 也就有了 `Parent` 中添加的那些个成员\n\n将伪数组转换成数组\n\n```js\nvar fakeArr = {\n    0:\"a\",\n    1:\"b\",\n    2:\"c\",\n    length:3\n}\n\nvar arr = [];\n\nArray.prototype.push.apply(arr, fakeArr);\nArray.prototype.concat.apply(arr, fakeArr);\n\n\narr.concat.apply(arr, fakeArr);\n\n```\n\n求数组的最大值\n\n```js\nvar arr = [1 ,2,3,3,4,4,34,3,43,43,43,4,34,3];\n\nvar max = Math.max.apply(null, arr);\n//Math.max(1,2,3,43,4,3,43,43,43)\n```","source":"_posts/javascript-part6.md","raw":"---\ntitle: JavaScript高级篇之part6\ndate: 2016-11-11 19:35:55\ntags: javascript\ncategories: javascript\n---\njavascript高级与面向对象笔记整理，接part5篇！！\n\n<!-- more -->\n\n## 闭包的练习\n\n### for循环中注册点击事件\n\n### for循环中是用setTimeout\n\n## 缓存\n\n缓存就是将一些数据，剧院，进行临时的存储，以提高访问效率\n\n* 浏览器缓存\n* CDN\n* JS中的缓存\n\n## 使用缓存解决斐波那契数列的性能问题\n\n### 有什么性能问题\n\n使用递归去计算斐波那契数列存在大量的重复的计算，导致计算效率十分底下\n\n### 如何解决性能问题\n\n使用缓存\n\n1. 创建一个数组充当缓存容器\n2. 每次需要计算斐波那契数列的时候，先去缓存中进行查找\n3. 如果有就直接返回\n4. 如果没有，就去计算，算出来结果之后\n5. 将结果存入缓存中\n6. 将结果返回\n\n```js\n//1.创建一个数组充当缓存容器\nvar arr = [];\nfunction fibnacci(n){\n//2.每次需要计算斐波那契数列的时候，先去缓存中进行查找\n\tvar num = arr[n];\n\tif(num){\n\t\t//3.如果有就直接返回\n\t\treturn num;\n\t}else{\n\t\t//4.如果没有，就去计算，算出来结果之后\n\t\tif(n <= 2){\n\t\t\tnum=1;\n\t\t}else{\n\t\tnum = fibnacci(n-1)+fibnacci(n-2);\n\t\t}\n\t\t//5.将结果存入缓存中\n\t\tarr[n] = num;\n\t\t//6.将结果返回\n\t\treturn num;\n\t}\n}\n```\n\n优化后的代码\n\n```js\nfunction createFib(){\n    //1.创建一个数组充当缓存容器\n    var arr = [];\n    function fibnacci(n){\n    //2.每次需要计算斐波那契数字的时候，先去缓存中进行查找\n        var num = arr[n];\n        if(!num){\n            //4.如果没有，就去就算，算出来结果之后，\n            if(n <= 2){\n                num = 1;\n            }else{\n                num = fibnacci(n-1)+fibnacci(n-2);\n            }\n            //5.将结果存入缓存中\n            arr[n] = num;\n        }\n        //6.将结果返回\n        return num;\n    }\n    return fibnacci;\n}\n\n```\n\n## jQuery缓存实现分析\n\n```js\nfunction createCache(){\n\t//需要一个能够存储数据的容器\n\tvar cache = {};\n\t//用来存储 键，并且记录键存入的顺序\n\tvar keys = [];\n\treturn function(key,value){\n\t\tif(value){\n\t\t\tcache[key] = value;\n\t\t\tkeys.push(key);\n\t\t\tif(keys.length > 50){\n\t\t\t\tdelete cache[keys.shift()];\n\t\t\t}\n\t\t}else{\n\t\t\treturn cache[key];\n\t\t}\n\t}\n}\n```\n\n## Jquery缓存源码分析\n\n```js\nfunction createCache(){\n\tvar keys = [];\n\tfunction cache(key,value){\n\t\tif(keys.push(key + \" \") > 10){\n\t\t \tdelete cache[keys.shift()];\n\t\t}\n\t\treturn (cache[key + \" \"] = value);\n\t}\n\treturn cache;\n}\nvar cache = createCache();\ncache(\"name\",\"mengyan\");\ncache[\"name\" + \" \"];\n\n```\n\n## 函数的四种调用形式\n\n### 函数调用模式\n\n形式：函数名（）；\n`this：window`\n\n### 方法调用模式\n\n形式：对项目.方法名（）；\nthis：调用该方法的对象\n\n### 构造函数调用模式\n\n形式 `new` 函数名（）\nthis：new创建出来的对象\n\n#### 工厂模式\n\n```js\nfunction createPerson(){\n    var o = new Object();\n    o.name = \"zs\";\n    o.age = 18;\n    return o;\n}\n\nvar p = createPerson();\n```\n\n#### 寄生模式\n\n```js\nfunction Person(){\n    var o = new Object();\n    o.name = \"zs\";\n    o.age = 18;\n    return o;\n}\n\nvar p = new Person();\n```\n\n### 上下文调用模式\n\n在其他的调用模式中， `this` 不可以赋值，也就不可以改变\n在上下文调用模式中，可以进行手动的设置 `this` 。\n\n#### call\n\n```js\n//函数名.call(对象, 参数1, 参数2, 参数3...)\n```\n\n1. 调用函数\n2. 将函数内的 `this` 指向第一个参数中的对象\n3. 将除第一个参数外的所有参数依次传给函数，做为实参\n\n#### apply\n\n```js\n//函数名.apply(对象, 数组)\n```\n\n1. 调用函数\n2. 将函数内的 `this` 指向第一个参数中的对象\n3. 将第二个参数中的数组拆解开，将数组中的元素依次的传给函数当做实参\n\n#### 借用构造函数继承\n\n```js\nfunction Parent(){\n    this.money = 100000000000000;\n}\n\nfunction Son(){\n    Parent.call(this);\n    this.wife = \"凤姐\";\n}\n\nvar s = new Son();\n```\n\n1. 使用 `new` 关键字创建了一个对象\n2. 调用构造函数 `Son` ，将 `Son` 中的 `this` 指向刚才创建的对象\n3. 在 `Son` 构造函数中，是用上下文调用模式去调用 `Parent` 函数，\n4. 调用 `Person` 函数，将 `Parent` 中的 `this` 指向 `song` 中的 `this` ，也就是用 `new` 创建出来的那个对象\n5.  `Parent` 中会使用 `this` 给对象添加成员\n6.  `Parent` 调用结束， `Son` 中的 `this` 也就有了 `Parent` 中添加的那些个成员\n\n将伪数组转换成数组\n\n```js\nvar fakeArr = {\n    0:\"a\",\n    1:\"b\",\n    2:\"c\",\n    length:3\n}\n\nvar arr = [];\n\nArray.prototype.push.apply(arr, fakeArr);\nArray.prototype.concat.apply(arr, fakeArr);\n\n\narr.concat.apply(arr, fakeArr);\n\n```\n\n求数组的最大值\n\n```js\nvar arr = [1 ,2,3,3,4,4,34,3,43,43,43,4,34,3];\n\nvar max = Math.max.apply(null, arr);\n//Math.max(1,2,3,43,4,3,43,43,43)\n```","slug":"javascript-part6","published":1,"updated":"2016-11-24T01:31:31.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvp20031uwg7zswdpbk3","content":"<p>javascript高级与面向对象笔记整理，接part5篇！！</p>\n<a id=\"more\"></a>\n<h2 id=\"闭包的练习\"><a href=\"#闭包的练习\" class=\"headerlink\" title=\"闭包的练习\"></a>闭包的练习</h2><h3 id=\"for循环中注册点击事件\"><a href=\"#for循环中注册点击事件\" class=\"headerlink\" title=\"for循环中注册点击事件\"></a>for循环中注册点击事件</h3><h3 id=\"for循环中是用setTimeout\"><a href=\"#for循环中是用setTimeout\" class=\"headerlink\" title=\"for循环中是用setTimeout\"></a>for循环中是用setTimeout</h3><h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>缓存就是将一些数据，剧院，进行临时的存储，以提高访问效率</p>\n<ul>\n<li>浏览器缓存</li>\n<li>CDN</li>\n<li>JS中的缓存</li>\n</ul>\n<h2 id=\"使用缓存解决斐波那契数列的性能问题\"><a href=\"#使用缓存解决斐波那契数列的性能问题\" class=\"headerlink\" title=\"使用缓存解决斐波那契数列的性能问题\"></a>使用缓存解决斐波那契数列的性能问题</h2><h3 id=\"有什么性能问题\"><a href=\"#有什么性能问题\" class=\"headerlink\" title=\"有什么性能问题\"></a>有什么性能问题</h3><p>使用递归去计算斐波那契数列存在大量的重复的计算，导致计算效率十分底下</p>\n<h3 id=\"如何解决性能问题\"><a href=\"#如何解决性能问题\" class=\"headerlink\" title=\"如何解决性能问题\"></a>如何解决性能问题</h3><p>使用缓存</p>\n<ol>\n<li>创建一个数组充当缓存容器</li>\n<li>每次需要计算斐波那契数列的时候，先去缓存中进行查找</li>\n<li>如果有就直接返回</li>\n<li>如果没有，就去计算，算出来结果之后</li>\n<li>将结果存入缓存中</li>\n<li>将结果返回</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.创建一个数组充当缓存容器</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibnacci</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\"><span class=\"comment\">//2.每次需要计算斐波那契数列的时候，先去缓存中进行查找</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> num = arr[n];</div><div class=\"line\">\t<span class=\"keyword\">if</span>(num)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//3.如果有就直接返回</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> num;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//4.如果没有，就去计算，算出来结果之后</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t\tnum=<span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\tnum = fibnacci(n<span class=\"number\">-1</span>)+fibnacci(n<span class=\"number\">-2</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//5.将结果存入缓存中</span></div><div class=\"line\">\t\tarr[n] = num;</div><div class=\"line\">\t\t<span class=\"comment\">//6.将结果返回</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> num;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优化后的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFib</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建一个数组充当缓存容器</span></div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibnacci</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//2.每次需要计算斐波那契数字的时候，先去缓存中进行查找</span></div><div class=\"line\">        <span class=\"keyword\">var</span> num = arr[n];</div><div class=\"line\">        <span class=\"keyword\">if</span>(!num)&#123;</div><div class=\"line\">            <span class=\"comment\">//4.如果没有，就去就算，算出来结果之后，</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">                num = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                num = fibnacci(n<span class=\"number\">-1</span>)+fibnacci(n<span class=\"number\">-2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//5.将结果存入缓存中</span></div><div class=\"line\">            arr[n] = num;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//6.将结果返回</span></div><div class=\"line\">        <span class=\"keyword\">return</span> num;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> fibnacci;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"jQuery缓存实现分析\"><a href=\"#jQuery缓存实现分析\" class=\"headerlink\" title=\"jQuery缓存实现分析\"></a>jQuery缓存实现分析</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//需要一个能够存储数据的容器</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\">\t<span class=\"comment\">//用来存储 键，并且记录键存入的顺序</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(value)&#123;</div><div class=\"line\">\t\t\tcache[key] = value;</div><div class=\"line\">\t\t\tkeys.push(key);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(keys.length &gt; <span class=\"number\">50</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">delete</span> cache[keys.shift()];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> cache[key];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery缓存源码分析\"><a href=\"#Jquery缓存源码分析\" class=\"headerlink\" title=\"Jquery缓存源码分析\"></a>Jquery缓存源码分析</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cache</span>(<span class=\"params\">key,value</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(keys.push(key + <span class=\"string\">\" \"</span>) &gt; <span class=\"number\">10</span>)&#123;</div><div class=\"line\">\t\t \t<span class=\"keyword\">delete</span> cache[keys.shift()];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (cache[key + <span class=\"string\">\" \"</span>] = value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> cache;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> cache = createCache();</div><div class=\"line\">cache(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"mengyan\"</span>);</div><div class=\"line\">cache[<span class=\"string\">\"name\"</span> + <span class=\"string\">\" \"</span>];</div></pre></td></tr></table></figure>\n<h2 id=\"函数的四种调用形式\"><a href=\"#函数的四种调用形式\" class=\"headerlink\" title=\"函数的四种调用形式\"></a>函数的四种调用形式</h2><h3 id=\"函数调用模式\"><a href=\"#函数调用模式\" class=\"headerlink\" title=\"函数调用模式\"></a>函数调用模式</h3><p>形式：函数名（）；<br><code>this：window</code></p>\n<h3 id=\"方法调用模式\"><a href=\"#方法调用模式\" class=\"headerlink\" title=\"方法调用模式\"></a>方法调用模式</h3><p>形式：对项目.方法名（）；<br>this：调用该方法的对象</p>\n<h3 id=\"构造函数调用模式\"><a href=\"#构造函数调用模式\" class=\"headerlink\" title=\"构造函数调用模式\"></a>构造函数调用模式</h3><p>形式 <code>new</code> 函数名（）<br>this：new创建出来的对象</p>\n<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.name = <span class=\"string\">\"zs\"</span>;</div><div class=\"line\">    o.age = <span class=\"number\">18</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = createPerson();</div></pre></td></tr></table></figure>\n<h4 id=\"寄生模式\"><a href=\"#寄生模式\" class=\"headerlink\" title=\"寄生模式\"></a>寄生模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.name = <span class=\"string\">\"zs\"</span>;</div><div class=\"line\">    o.age = <span class=\"number\">18</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure>\n<h3 id=\"上下文调用模式\"><a href=\"#上下文调用模式\" class=\"headerlink\" title=\"上下文调用模式\"></a>上下文调用模式</h3><p>在其他的调用模式中， <code>this</code> 不可以赋值，也就不可以改变<br>在上下文调用模式中，可以进行手动的设置 <code>this</code> 。</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数名.call(对象, 参数1, 参数2, 参数3...)</span></div></pre></td></tr></table></figure>\n<ol>\n<li>调用函数</li>\n<li>将函数内的 <code>this</code> 指向第一个参数中的对象</li>\n<li>将除第一个参数外的所有参数依次传给函数，做为实参</li>\n</ol>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数名.apply(对象, 数组)</span></div></pre></td></tr></table></figure>\n<ol>\n<li>调用函数</li>\n<li>将函数内的 <code>this</code> 指向第一个参数中的对象</li>\n<li>将第二个参数中的数组拆解开，将数组中的元素依次的传给函数当做实参</li>\n</ol>\n<h4 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.money = <span class=\"number\">100000000000000</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    Parent.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.wife = <span class=\"string\">\"凤姐\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Son();</div></pre></td></tr></table></figure>\n<ol>\n<li>使用 <code>new</code> 关键字创建了一个对象</li>\n<li>调用构造函数 <code>Son</code> ，将 <code>Son</code> 中的 <code>this</code> 指向刚才创建的对象</li>\n<li>在 <code>Son</code> 构造函数中，是用上下文调用模式去调用 <code>Parent</code> 函数，</li>\n<li>调用 <code>Person</code> 函数，将 <code>Parent</code> 中的 <code>this</code> 指向 <code>song</code> 中的 <code>this</code> ，也就是用 <code>new</code> 创建出来的那个对象</li>\n<li><code>Parent</code> 中会使用 <code>this</code> 给对象添加成员</li>\n<li><code>Parent</code> 调用结束， <code>Son</code> 中的 <code>this</code> 也就有了 <code>Parent</code> 中添加的那些个成员</li>\n</ol>\n<p>将伪数组转换成数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fakeArr = &#123;</div><div class=\"line\">    <span class=\"number\">0</span>:<span class=\"string\">\"a\"</span>,</div><div class=\"line\">    <span class=\"number\">1</span>:<span class=\"string\">\"b\"</span>,</div><div class=\"line\">    <span class=\"number\">2</span>:<span class=\"string\">\"c\"</span>,</div><div class=\"line\">    <span class=\"attr\">length</span>:<span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr, fakeArr);</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.concat.apply(arr, fakeArr);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">arr.concat.apply(arr, fakeArr);</div></pre></td></tr></table></figure>\n<p>求数组的最大值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span> ,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">34</span>,<span class=\"number\">3</span>,<span class=\"number\">43</span>,<span class=\"number\">43</span>,<span class=\"number\">43</span>,<span class=\"number\">4</span>,<span class=\"number\">34</span>,<span class=\"number\">3</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, arr);</div><div class=\"line\"><span class=\"comment\">//Math.max(1,2,3,43,4,3,43,43,43)</span></div></pre></td></tr></table></figure>","excerpt":"<p>javascript高级与面向对象笔记整理，接part5篇！！</p>","more":"<h2 id=\"闭包的练习\"><a href=\"#闭包的练习\" class=\"headerlink\" title=\"闭包的练习\"></a>闭包的练习</h2><h3 id=\"for循环中注册点击事件\"><a href=\"#for循环中注册点击事件\" class=\"headerlink\" title=\"for循环中注册点击事件\"></a>for循环中注册点击事件</h3><h3 id=\"for循环中是用setTimeout\"><a href=\"#for循环中是用setTimeout\" class=\"headerlink\" title=\"for循环中是用setTimeout\"></a>for循环中是用setTimeout</h3><h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>缓存就是将一些数据，剧院，进行临时的存储，以提高访问效率</p>\n<ul>\n<li>浏览器缓存</li>\n<li>CDN</li>\n<li>JS中的缓存</li>\n</ul>\n<h2 id=\"使用缓存解决斐波那契数列的性能问题\"><a href=\"#使用缓存解决斐波那契数列的性能问题\" class=\"headerlink\" title=\"使用缓存解决斐波那契数列的性能问题\"></a>使用缓存解决斐波那契数列的性能问题</h2><h3 id=\"有什么性能问题\"><a href=\"#有什么性能问题\" class=\"headerlink\" title=\"有什么性能问题\"></a>有什么性能问题</h3><p>使用递归去计算斐波那契数列存在大量的重复的计算，导致计算效率十分底下</p>\n<h3 id=\"如何解决性能问题\"><a href=\"#如何解决性能问题\" class=\"headerlink\" title=\"如何解决性能问题\"></a>如何解决性能问题</h3><p>使用缓存</p>\n<ol>\n<li>创建一个数组充当缓存容器</li>\n<li>每次需要计算斐波那契数列的时候，先去缓存中进行查找</li>\n<li>如果有就直接返回</li>\n<li>如果没有，就去计算，算出来结果之后</li>\n<li>将结果存入缓存中</li>\n<li>将结果返回</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.创建一个数组充当缓存容器</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibnacci</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\"><span class=\"comment\">//2.每次需要计算斐波那契数列的时候，先去缓存中进行查找</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> num = arr[n];</div><div class=\"line\">\t<span class=\"keyword\">if</span>(num)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//3.如果有就直接返回</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> num;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//4.如果没有，就去计算，算出来结果之后</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t\tnum=<span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\tnum = fibnacci(n<span class=\"number\">-1</span>)+fibnacci(n<span class=\"number\">-2</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//5.将结果存入缓存中</span></div><div class=\"line\">\t\tarr[n] = num;</div><div class=\"line\">\t\t<span class=\"comment\">//6.将结果返回</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> num;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优化后的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFib</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建一个数组充当缓存容器</span></div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibnacci</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//2.每次需要计算斐波那契数字的时候，先去缓存中进行查找</span></div><div class=\"line\">        <span class=\"keyword\">var</span> num = arr[n];</div><div class=\"line\">        <span class=\"keyword\">if</span>(!num)&#123;</div><div class=\"line\">            <span class=\"comment\">//4.如果没有，就去就算，算出来结果之后，</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">                num = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                num = fibnacci(n<span class=\"number\">-1</span>)+fibnacci(n<span class=\"number\">-2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//5.将结果存入缓存中</span></div><div class=\"line\">            arr[n] = num;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//6.将结果返回</span></div><div class=\"line\">        <span class=\"keyword\">return</span> num;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> fibnacci;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"jQuery缓存实现分析\"><a href=\"#jQuery缓存实现分析\" class=\"headerlink\" title=\"jQuery缓存实现分析\"></a>jQuery缓存实现分析</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//需要一个能够存储数据的容器</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\">\t<span class=\"comment\">//用来存储 键，并且记录键存入的顺序</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(value)&#123;</div><div class=\"line\">\t\t\tcache[key] = value;</div><div class=\"line\">\t\t\tkeys.push(key);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(keys.length &gt; <span class=\"number\">50</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">delete</span> cache[keys.shift()];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> cache[key];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery缓存源码分析\"><a href=\"#Jquery缓存源码分析\" class=\"headerlink\" title=\"Jquery缓存源码分析\"></a>Jquery缓存源码分析</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cache</span>(<span class=\"params\">key,value</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(keys.push(key + <span class=\"string\">\" \"</span>) &gt; <span class=\"number\">10</span>)&#123;</div><div class=\"line\">\t\t \t<span class=\"keyword\">delete</span> cache[keys.shift()];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (cache[key + <span class=\"string\">\" \"</span>] = value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> cache;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> cache = createCache();</div><div class=\"line\">cache(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"mengyan\"</span>);</div><div class=\"line\">cache[<span class=\"string\">\"name\"</span> + <span class=\"string\">\" \"</span>];</div></pre></td></tr></table></figure>\n<h2 id=\"函数的四种调用形式\"><a href=\"#函数的四种调用形式\" class=\"headerlink\" title=\"函数的四种调用形式\"></a>函数的四种调用形式</h2><h3 id=\"函数调用模式\"><a href=\"#函数调用模式\" class=\"headerlink\" title=\"函数调用模式\"></a>函数调用模式</h3><p>形式：函数名（）；<br><code>this：window</code></p>\n<h3 id=\"方法调用模式\"><a href=\"#方法调用模式\" class=\"headerlink\" title=\"方法调用模式\"></a>方法调用模式</h3><p>形式：对项目.方法名（）；<br>this：调用该方法的对象</p>\n<h3 id=\"构造函数调用模式\"><a href=\"#构造函数调用模式\" class=\"headerlink\" title=\"构造函数调用模式\"></a>构造函数调用模式</h3><p>形式 <code>new</code> 函数名（）<br>this：new创建出来的对象</p>\n<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.name = <span class=\"string\">\"zs\"</span>;</div><div class=\"line\">    o.age = <span class=\"number\">18</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = createPerson();</div></pre></td></tr></table></figure>\n<h4 id=\"寄生模式\"><a href=\"#寄生模式\" class=\"headerlink\" title=\"寄生模式\"></a>寄生模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.name = <span class=\"string\">\"zs\"</span>;</div><div class=\"line\">    o.age = <span class=\"number\">18</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure>\n<h3 id=\"上下文调用模式\"><a href=\"#上下文调用模式\" class=\"headerlink\" title=\"上下文调用模式\"></a>上下文调用模式</h3><p>在其他的调用模式中， <code>this</code> 不可以赋值，也就不可以改变<br>在上下文调用模式中，可以进行手动的设置 <code>this</code> 。</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数名.call(对象, 参数1, 参数2, 参数3...)</span></div></pre></td></tr></table></figure>\n<ol>\n<li>调用函数</li>\n<li>将函数内的 <code>this</code> 指向第一个参数中的对象</li>\n<li>将除第一个参数外的所有参数依次传给函数，做为实参</li>\n</ol>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数名.apply(对象, 数组)</span></div></pre></td></tr></table></figure>\n<ol>\n<li>调用函数</li>\n<li>将函数内的 <code>this</code> 指向第一个参数中的对象</li>\n<li>将第二个参数中的数组拆解开，将数组中的元素依次的传给函数当做实参</li>\n</ol>\n<h4 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.money = <span class=\"number\">100000000000000</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    Parent.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.wife = <span class=\"string\">\"凤姐\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Son();</div></pre></td></tr></table></figure>\n<ol>\n<li>使用 <code>new</code> 关键字创建了一个对象</li>\n<li>调用构造函数 <code>Son</code> ，将 <code>Son</code> 中的 <code>this</code> 指向刚才创建的对象</li>\n<li>在 <code>Son</code> 构造函数中，是用上下文调用模式去调用 <code>Parent</code> 函数，</li>\n<li>调用 <code>Person</code> 函数，将 <code>Parent</code> 中的 <code>this</code> 指向 <code>song</code> 中的 <code>this</code> ，也就是用 <code>new</code> 创建出来的那个对象</li>\n<li><code>Parent</code> 中会使用 <code>this</code> 给对象添加成员</li>\n<li><code>Parent</code> 调用结束， <code>Son</code> 中的 <code>this</code> 也就有了 <code>Parent</code> 中添加的那些个成员</li>\n</ol>\n<p>将伪数组转换成数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fakeArr = &#123;</div><div class=\"line\">    <span class=\"number\">0</span>:<span class=\"string\">\"a\"</span>,</div><div class=\"line\">    <span class=\"number\">1</span>:<span class=\"string\">\"b\"</span>,</div><div class=\"line\">    <span class=\"number\">2</span>:<span class=\"string\">\"c\"</span>,</div><div class=\"line\">    <span class=\"attr\">length</span>:<span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr, fakeArr);</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.concat.apply(arr, fakeArr);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">arr.concat.apply(arr, fakeArr);</div></pre></td></tr></table></figure>\n<p>求数组的最大值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span> ,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">34</span>,<span class=\"number\">3</span>,<span class=\"number\">43</span>,<span class=\"number\">43</span>,<span class=\"number\">43</span>,<span class=\"number\">4</span>,<span class=\"number\">34</span>,<span class=\"number\">3</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, arr);</div><div class=\"line\"><span class=\"comment\">//Math.max(1,2,3,43,4,3,43,43,43)</span></div></pre></td></tr></table></figure>"},{"title":"js高级与面向对象之原型","date":"2016-06-04T05:41:47.000Z","_content":"\n## 原型的基本概念\n\n在构造函数创建出来的时候，系统会默认的帮构造函数创建并且关联一个空对象，这个对象就成为原型\n\n<!-- more -->\n\n##原型的作用\n\n原型中的所有成员都可以被和其关联的构造函数创建出来的对象访问\n\n```js\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n}\n```\n\n如何利用原型解决构造函数存在的问题？\n* 利用原型的特性，将方法放到原型中去，供所有的对象访问\n\n## 如何访问原型？\n\n* 构造函数`.prototype`\n\n```js\nconsole.log(typeof Person.prototype);\nconsole.log(Person.prototype);\n```\n\n## 如何使用原型？\n\n* 使用对象的动态特性，为原型对象新增成员\n\n```js\nPerson.prototype.eat = function () {\n    console.log(\"吃个大鸡腿儿\");\n}\n\nvar p  = new Person();\np.eat();\nvar p1 = new Person();\np1.eat();\n\nconsole.log(p.eat == p1.eat);\n```\n\n* 直接替换原型对象\n\n```js\nPerson.prototype = {\n    run:function(){\n        console.log(\"李二狗正在以时速1cm每小时的速度奔向餐厅\");\n    }\n};\n\nconsole.log(Person.prototype);\nvar p2 = new Person();\np2.run();\n```\n\n## 原型使用的注意事项\n\n对象访问属性的时候，会现在自身查找，如果找到了就直接使用如果没有找到，就去构造函数的原型对象中去查找\n\n1. 一般情况下，只会将方法放入原型对象中，属性单独的放在对象中\n2. 在获取对象的属性的时候，会现在对象中进行查找，然后去原型中查找\n3. 在对象进行设置属性的时候，不会去原型中查找属性，而是直接在对象内进行查找，如果找到该属性，就修改，如果没有找到，就新增\n4. 在替换原型对象的时候，要注意：替换之前创建出来的对象的原型和替换之后创建出来的对象的原型会不一致\n\n```js\nfunction Person(){\n\n}\n\n//Person.prototype.name = \"张三\";\nPerson.prototype.sing = function () {\n    console.log(\"Take me to your heart!\");\n}\nvar p = new Person();\n//console.log(p.name);  //张三\np.sing();  //可以\n\n//p.name = \"李四\";\n//console.log(p.name);  //李四\n\nPerson.prototype = {\n\n};\n\nvar p1 = new Person();\n//console.log(p1.name); //张三\np1.sing();//不可以\n\np.sing();//不可以  or  可以\n```\n\n## 原型的访问方式\n\n1. 通过 `构造函数.prototype` 去访问\n2. 通过 `对象.__proto__` 去访问\n\t注：__proto__这个属性 是非标准的！！！ 不推荐在开发过程中使用，只用于调试代码\n\n* __.proto__用法\n\n```js\nfunction Person(){\n}\nPerson.prototype = {\n    name : \"迈克学摇滚\",\n    song : \"Take me to your heart\"\n}\nvar p = new Person();\np.__proto__.count = 100;\nconsole.log(p.__proto__);\n```","source":"_posts/javascript-prototype.md","raw":"---\ntitle: js高级与面向对象之原型\ndate: 2016-06-04 13:41:47\ntags: \n\t- javascript\n\t- 原型\n\t- 原型的基本概念\ncategories: javascript\n---\n\n## 原型的基本概念\n\n在构造函数创建出来的时候，系统会默认的帮构造函数创建并且关联一个空对象，这个对象就成为原型\n\n<!-- more -->\n\n##原型的作用\n\n原型中的所有成员都可以被和其关联的构造函数创建出来的对象访问\n\n```js\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n}\n```\n\n如何利用原型解决构造函数存在的问题？\n* 利用原型的特性，将方法放到原型中去，供所有的对象访问\n\n## 如何访问原型？\n\n* 构造函数`.prototype`\n\n```js\nconsole.log(typeof Person.prototype);\nconsole.log(Person.prototype);\n```\n\n## 如何使用原型？\n\n* 使用对象的动态特性，为原型对象新增成员\n\n```js\nPerson.prototype.eat = function () {\n    console.log(\"吃个大鸡腿儿\");\n}\n\nvar p  = new Person();\np.eat();\nvar p1 = new Person();\np1.eat();\n\nconsole.log(p.eat == p1.eat);\n```\n\n* 直接替换原型对象\n\n```js\nPerson.prototype = {\n    run:function(){\n        console.log(\"李二狗正在以时速1cm每小时的速度奔向餐厅\");\n    }\n};\n\nconsole.log(Person.prototype);\nvar p2 = new Person();\np2.run();\n```\n\n## 原型使用的注意事项\n\n对象访问属性的时候，会现在自身查找，如果找到了就直接使用如果没有找到，就去构造函数的原型对象中去查找\n\n1. 一般情况下，只会将方法放入原型对象中，属性单独的放在对象中\n2. 在获取对象的属性的时候，会现在对象中进行查找，然后去原型中查找\n3. 在对象进行设置属性的时候，不会去原型中查找属性，而是直接在对象内进行查找，如果找到该属性，就修改，如果没有找到，就新增\n4. 在替换原型对象的时候，要注意：替换之前创建出来的对象的原型和替换之后创建出来的对象的原型会不一致\n\n```js\nfunction Person(){\n\n}\n\n//Person.prototype.name = \"张三\";\nPerson.prototype.sing = function () {\n    console.log(\"Take me to your heart!\");\n}\nvar p = new Person();\n//console.log(p.name);  //张三\np.sing();  //可以\n\n//p.name = \"李四\";\n//console.log(p.name);  //李四\n\nPerson.prototype = {\n\n};\n\nvar p1 = new Person();\n//console.log(p1.name); //张三\np1.sing();//不可以\n\np.sing();//不可以  or  可以\n```\n\n## 原型的访问方式\n\n1. 通过 `构造函数.prototype` 去访问\n2. 通过 `对象.__proto__` 去访问\n\t注：__proto__这个属性 是非标准的！！！ 不推荐在开发过程中使用，只用于调试代码\n\n* __.proto__用法\n\n```js\nfunction Person(){\n}\nPerson.prototype = {\n    name : \"迈克学摇滚\",\n    song : \"Take me to your heart\"\n}\nvar p = new Person();\np.__proto__.count = 100;\nconsole.log(p.__proto__);\n```","slug":"javascript-prototype","published":1,"updated":"2016-11-24T01:26:39.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvp40034uwg7fcmwon3m","content":"<h2 id=\"原型的基本概念\"><a href=\"#原型的基本概念\" class=\"headerlink\" title=\"原型的基本概念\"></a>原型的基本概念</h2><p>在构造函数创建出来的时候，系统会默认的帮构造函数创建并且关联一个空对象，这个对象就成为原型</p>\n<a id=\"more\"></a>\n<p>##原型的作用</p>\n<p>原型中的所有成员都可以被和其关联的构造函数创建出来的对象访问</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如何利用原型解决构造函数存在的问题？</p>\n<ul>\n<li>利用原型的特性，将方法放到原型中去，供所有的对象访问</li>\n</ul>\n<h2 id=\"如何访问原型？\"><a href=\"#如何访问原型？\" class=\"headerlink\" title=\"如何访问原型？\"></a>如何访问原型？</h2><ul>\n<li>构造函数<code>.prototype</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> Person.prototype);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype);</div></pre></td></tr></table></figure>\n<h2 id=\"如何使用原型？\"><a href=\"#如何使用原型？\" class=\"headerlink\" title=\"如何使用原型？\"></a>如何使用原型？</h2><ul>\n<li>使用对象的动态特性，为原型对象新增成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"吃个大鸡腿儿\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p  = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p.eat();</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p1.eat();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.eat == p1.eat);</div></pre></td></tr></table></figure>\n<ul>\n<li>直接替换原型对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">run</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"李二狗正在以时速1cm每小时的速度奔向餐厅\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p2.run();</div></pre></td></tr></table></figure>\n<h2 id=\"原型使用的注意事项\"><a href=\"#原型使用的注意事项\" class=\"headerlink\" title=\"原型使用的注意事项\"></a>原型使用的注意事项</h2><p>对象访问属性的时候，会现在自身查找，如果找到了就直接使用如果没有找到，就去构造函数的原型对象中去查找</p>\n<ol>\n<li>一般情况下，只会将方法放入原型对象中，属性单独的放在对象中</li>\n<li>在获取对象的属性的时候，会现在对象中进行查找，然后去原型中查找</li>\n<li>在对象进行设置属性的时候，不会去原型中查找属性，而是直接在对象内进行查找，如果找到该属性，就修改，如果没有找到，就新增</li>\n<li>在替换原型对象的时候，要注意：替换之前创建出来的对象的原型和替换之后创建出来的对象的原型会不一致</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Person.prototype.name = \"张三\";</span></div><div class=\"line\">Person.prototype.sing = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Take me to your heart!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"comment\">//console.log(p.name);  //张三</span></div><div class=\"line\">p.sing();  <span class=\"comment\">//可以</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//p.name = \"李四\";</span></div><div class=\"line\"><span class=\"comment\">//console.log(p.name);  //李四</span></div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"comment\">//console.log(p1.name); //张三</span></div><div class=\"line\">p1.sing();<span class=\"comment\">//不可以</span></div><div class=\"line\"></div><div class=\"line\">p.sing();<span class=\"comment\">//不可以  or  可以</span></div></pre></td></tr></table></figure>\n<h2 id=\"原型的访问方式\"><a href=\"#原型的访问方式\" class=\"headerlink\" title=\"原型的访问方式\"></a>原型的访问方式</h2><ol>\n<li>通过 <code>构造函数.prototype</code> 去访问</li>\n<li>通过 <code>对象.__proto__</code> 去访问<br> 注：<strong>proto</strong>这个属性 是非标准的！！！ 不推荐在开发过程中使用，只用于调试代码</li>\n</ol>\n<ul>\n<li><strong>.proto</strong>用法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">\"迈克学摇滚\"</span>,</div><div class=\"line\">    <span class=\"attr\">song</span> : <span class=\"string\">\"Take me to your heart\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p.__proto__.count = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.__proto__);</div></pre></td></tr></table></figure>","excerpt":"<h2 id=\"原型的基本概念\"><a href=\"#原型的基本概念\" class=\"headerlink\" title=\"原型的基本概念\"></a>原型的基本概念</h2><p>在构造函数创建出来的时候，系统会默认的帮构造函数创建并且关联一个空对象，这个对象就成为原型</p>","more":"<p>##原型的作用</p>\n<p>原型中的所有成员都可以被和其关联的构造函数创建出来的对象访问</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如何利用原型解决构造函数存在的问题？</p>\n<ul>\n<li>利用原型的特性，将方法放到原型中去，供所有的对象访问</li>\n</ul>\n<h2 id=\"如何访问原型？\"><a href=\"#如何访问原型？\" class=\"headerlink\" title=\"如何访问原型？\"></a>如何访问原型？</h2><ul>\n<li>构造函数<code>.prototype</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> Person.prototype);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype);</div></pre></td></tr></table></figure>\n<h2 id=\"如何使用原型？\"><a href=\"#如何使用原型？\" class=\"headerlink\" title=\"如何使用原型？\"></a>如何使用原型？</h2><ul>\n<li>使用对象的动态特性，为原型对象新增成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"吃个大鸡腿儿\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p  = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p.eat();</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p1.eat();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.eat == p1.eat);</div></pre></td></tr></table></figure>\n<ul>\n<li>直接替换原型对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">run</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"李二狗正在以时速1cm每小时的速度奔向餐厅\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p2.run();</div></pre></td></tr></table></figure>\n<h2 id=\"原型使用的注意事项\"><a href=\"#原型使用的注意事项\" class=\"headerlink\" title=\"原型使用的注意事项\"></a>原型使用的注意事项</h2><p>对象访问属性的时候，会现在自身查找，如果找到了就直接使用如果没有找到，就去构造函数的原型对象中去查找</p>\n<ol>\n<li>一般情况下，只会将方法放入原型对象中，属性单独的放在对象中</li>\n<li>在获取对象的属性的时候，会现在对象中进行查找，然后去原型中查找</li>\n<li>在对象进行设置属性的时候，不会去原型中查找属性，而是直接在对象内进行查找，如果找到该属性，就修改，如果没有找到，就新增</li>\n<li>在替换原型对象的时候，要注意：替换之前创建出来的对象的原型和替换之后创建出来的对象的原型会不一致</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Person.prototype.name = \"张三\";</span></div><div class=\"line\">Person.prototype.sing = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Take me to your heart!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"comment\">//console.log(p.name);  //张三</span></div><div class=\"line\">p.sing();  <span class=\"comment\">//可以</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//p.name = \"李四\";</span></div><div class=\"line\"><span class=\"comment\">//console.log(p.name);  //李四</span></div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"comment\">//console.log(p1.name); //张三</span></div><div class=\"line\">p1.sing();<span class=\"comment\">//不可以</span></div><div class=\"line\"></div><div class=\"line\">p.sing();<span class=\"comment\">//不可以  or  可以</span></div></pre></td></tr></table></figure>\n<h2 id=\"原型的访问方式\"><a href=\"#原型的访问方式\" class=\"headerlink\" title=\"原型的访问方式\"></a>原型的访问方式</h2><ol>\n<li>通过 <code>构造函数.prototype</code> 去访问</li>\n<li>通过 <code>对象.__proto__</code> 去访问<br> 注：<strong>proto</strong>这个属性 是非标准的！！！ 不推荐在开发过程中使用，只用于调试代码</li>\n</ol>\n<ul>\n<li><strong>.proto</strong>用法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">\"迈克学摇滚\"</span>,</div><div class=\"line\">    <span class=\"attr\">song</span> : <span class=\"string\">\"Take me to your heart\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p.__proto__.count = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.__proto__);</div></pre></td></tr></table></figure>"},{"title":"Linux常用命令笔记","date":"2017-05-26T13:49:04.000Z","_content":"\n记录使用到的 `Linux` 命令!\n\n<!-- more -->\n\n## 安装 Git\n\n- 安装: `sudo apt-get install git`\n\n## 安装 Nginx\n\n- 安装: `sudo apt-get install nginx`\n- 启动: `sudo /etc/init.d/nginx start`\n- 停止: `sudo /etc/init.d/nginx stop`\n- 重启: `sudo /etc/init.d/nginx restart`\n- 检查配置文件: `sudo service nginx configtest`\n- 重载配置文件: `sudo service nginx reload`\n- 查询nginx进程: `ps -ef | grep nginx`\n\n## Nginx 配置\n\n`sudo vim /etc/nginx/sites-available/default`\n\n```bash\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server ipv6only=on;\n\n    # 如果要支持HTTPS，修改这里\n    # 可以使用 https://letsencrypt.org 的免费SSL证书\n    #listen 443 ssl;\n    #ssl_certificate     www.example.com.crt;\n    #ssl_certificate_key www.example.com.key;\n    #ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;\n    #ssl_ciphers         HIGH:!aNULL:!MD5;\n\n    # 重定向所有HTTP到HTTPS\n    # rewrite ^(.*)$ https://$host$1 permanent;\n\n    # 网站根目录，根据需要修改\n    root /usr/share/nginx/html;\n    # 增加index.php\n    index index.php index.html index.htm;\n\n    # 假设域名是 ssl.mcxiaoke.com\n    server_name ssl.mcxiaoke.com; #绑定域名\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n\n    error_page 404 /404.html;\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n\n    #支持php-fpm的配置\n    location ~ \\.php$ {\n        try_files $uri =404;\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass unix:/var/run/php5-fpm.sock;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n}\n```\n\n## 安装 MySQL\n\n- 安装: `sudo apt-get install mysql-server`\n\n## 安装 php-fpm\n\n- 安装: `sudo apt-get install php5-fpm`\n- 重启: `sudo service php5-fpm restart`\n- 安装PHP常用扩展: `sudo apt-get install php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl php5-xcache`\n\n## 常用linux命令说明\n\n- 查看端口占用: `lsof -i:80`\n- 杀死进程: `kill -9 3274`\n- `tar`\n    + z- 用`gzip`对存档压缩或解压\n    + x-从存档展开文件\n    + v-详细显示处理的文件\n    + f-指定存档或设备\n- `chmod`\n    +\n\n- 更新源: `sudo apt-get update`\n- 更新已安装的包`sudo apt-get upgrade`\n\n## 账号和密码文件\n\n```bash\nls -al /etc/passwd /etc/shadow\n-rw-r–r– 1 root root 1611 2011-12-16 05:30 /etc/passwd # 保存的是账号\n-rw-r—– 1 root shadow 947 2011-12-16 05:30 /etc/shadow # 账号的密码等信息\n```\n\n### /etc/passwd\n\n```bash\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\n```\n\n1. 账号名称\n2. 原先用来保存密码的，现在密码都放在/etc/shadow中，所以这里显示x\n3. UID，也就是使用者ID。默认的系统管理员的UID为0，我们添加用户的时候最好使用1000以上的UID，1-1000范围的UID最好保留给系统用。\n4. GID，也就是群组ID\n5. 关于账号的一些说明信息（暂时可以忽略）\n6. 账号的家目录，家目录就是你登陆系统后默认的那个目录\n7. 账号使用的shell\n\n### /etc/shadow\n\n```bash\nroot:!:15324:0:99999:7:::\ndaemon:*:15259:0:99999:7:::\nbin:*:15259:0:99999:7:::\nletuknowit:$1$cPf/cIvr$sCws95uSip2ljTK052DDB.:15400:5:60:7:2:15490:\n```\n\n1. 账户名称（密码需要与账户对应的嘛）\n2. 加密后的密码（总不能学CSDN放明文密码，是吧），如果这一栏的第一个字符为!或者*的话，说明这是一个不能登录的账户，从上面可以看出，ubuntu默认的就不启用root账户。\n3. 最近改动密码的日期（不是日期吗，咋是一堆数字，别急，这个是从1970年1月1日算起的总的天数）。那怎么才能知道今天距1970年1月1日有多少天呢？很简单，你改下密码，然后看下这个栏目中的数字是多少就可以了！\n4. 密码不可被变更的天数：设置了这个值，则表示从变更密码的日期算起，多少天内无法再次修改密码，如果是0的话，则没有限制\n5. 密码需要重新变更的天数：密码经常更换才能保证安全，为了提醒某些经常不更换密码的用户，可以设置一个天数，强制让用户更换密码，也就是说该用户的密码会在多少天后过期，如果为99999则没有限制\n6. 密码过期预警天数：如果在5中设置了密码需要重新变更的天数，则会在密码过期的前多少天进行提醒，提示用户其密码将在多少天后过期\n7. 密码过期的宽恕时间：如果在5中设置的日期过后，用户仍然没有修改密码，则该用户还可以继续使用的天数\n8. 账号失效日期，过了这个日期账号就不能用了\n9. 保留的\n\n以上面最后用户letuknowit为例（15400对应的日期为2012年3月1日），其保护如下信息：\n3. 用户letuknowit最近一次修改密码的日期是2012年3月1日，\n4. 在2012年3月6日之前不能再改动密码了，\n5. 在2012-3-1到2012-4-29期间letuknowit需要更改密码，\n6. 在2012-4-29之前的7天，letuknowit登陆系统的时候，系统会提示letuknowit其密码即将过期，\n7. 如果letuknowit一直到2012-4-29都没有修改密码，则其仍然可以继续使用该账户2天，2天后该账户将不可用\n8. 无论如何，到了2012年5月29日，该账号都将失效\n\n## 主机名\n\n- 查看主机名: `hostname` 或`uname –n`，均可以查看到当前主机的主机名。\n- 临时修改主机名: `hostname 新主机名`\n- 永久修改主机名: `/etc/hostname`文件中修改\n- `host` 文件: `/etc/hosts` 存放的是域名与ip的对应关系, 添加一个新主机名到`127.0.0.1`.\n\n\n待续中...\n","source":"_posts/liunx-shell.md","raw":"---\ntitle: Linux常用命令笔记\ndate: 2017-05-26 21:49:04\ntags:\n    - Linux\n    - shell\ncategories: Linux\n---\n\n记录使用到的 `Linux` 命令!\n\n<!-- more -->\n\n## 安装 Git\n\n- 安装: `sudo apt-get install git`\n\n## 安装 Nginx\n\n- 安装: `sudo apt-get install nginx`\n- 启动: `sudo /etc/init.d/nginx start`\n- 停止: `sudo /etc/init.d/nginx stop`\n- 重启: `sudo /etc/init.d/nginx restart`\n- 检查配置文件: `sudo service nginx configtest`\n- 重载配置文件: `sudo service nginx reload`\n- 查询nginx进程: `ps -ef | grep nginx`\n\n## Nginx 配置\n\n`sudo vim /etc/nginx/sites-available/default`\n\n```bash\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server ipv6only=on;\n\n    # 如果要支持HTTPS，修改这里\n    # 可以使用 https://letsencrypt.org 的免费SSL证书\n    #listen 443 ssl;\n    #ssl_certificate     www.example.com.crt;\n    #ssl_certificate_key www.example.com.key;\n    #ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;\n    #ssl_ciphers         HIGH:!aNULL:!MD5;\n\n    # 重定向所有HTTP到HTTPS\n    # rewrite ^(.*)$ https://$host$1 permanent;\n\n    # 网站根目录，根据需要修改\n    root /usr/share/nginx/html;\n    # 增加index.php\n    index index.php index.html index.htm;\n\n    # 假设域名是 ssl.mcxiaoke.com\n    server_name ssl.mcxiaoke.com; #绑定域名\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n\n    error_page 404 /404.html;\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n\n    #支持php-fpm的配置\n    location ~ \\.php$ {\n        try_files $uri =404;\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass unix:/var/run/php5-fpm.sock;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n}\n```\n\n## 安装 MySQL\n\n- 安装: `sudo apt-get install mysql-server`\n\n## 安装 php-fpm\n\n- 安装: `sudo apt-get install php5-fpm`\n- 重启: `sudo service php5-fpm restart`\n- 安装PHP常用扩展: `sudo apt-get install php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl php5-xcache`\n\n## 常用linux命令说明\n\n- 查看端口占用: `lsof -i:80`\n- 杀死进程: `kill -9 3274`\n- `tar`\n    + z- 用`gzip`对存档压缩或解压\n    + x-从存档展开文件\n    + v-详细显示处理的文件\n    + f-指定存档或设备\n- `chmod`\n    +\n\n- 更新源: `sudo apt-get update`\n- 更新已安装的包`sudo apt-get upgrade`\n\n## 账号和密码文件\n\n```bash\nls -al /etc/passwd /etc/shadow\n-rw-r–r– 1 root root 1611 2011-12-16 05:30 /etc/passwd # 保存的是账号\n-rw-r—– 1 root shadow 947 2011-12-16 05:30 /etc/shadow # 账号的密码等信息\n```\n\n### /etc/passwd\n\n```bash\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\n```\n\n1. 账号名称\n2. 原先用来保存密码的，现在密码都放在/etc/shadow中，所以这里显示x\n3. UID，也就是使用者ID。默认的系统管理员的UID为0，我们添加用户的时候最好使用1000以上的UID，1-1000范围的UID最好保留给系统用。\n4. GID，也就是群组ID\n5. 关于账号的一些说明信息（暂时可以忽略）\n6. 账号的家目录，家目录就是你登陆系统后默认的那个目录\n7. 账号使用的shell\n\n### /etc/shadow\n\n```bash\nroot:!:15324:0:99999:7:::\ndaemon:*:15259:0:99999:7:::\nbin:*:15259:0:99999:7:::\nletuknowit:$1$cPf/cIvr$sCws95uSip2ljTK052DDB.:15400:5:60:7:2:15490:\n```\n\n1. 账户名称（密码需要与账户对应的嘛）\n2. 加密后的密码（总不能学CSDN放明文密码，是吧），如果这一栏的第一个字符为!或者*的话，说明这是一个不能登录的账户，从上面可以看出，ubuntu默认的就不启用root账户。\n3. 最近改动密码的日期（不是日期吗，咋是一堆数字，别急，这个是从1970年1月1日算起的总的天数）。那怎么才能知道今天距1970年1月1日有多少天呢？很简单，你改下密码，然后看下这个栏目中的数字是多少就可以了！\n4. 密码不可被变更的天数：设置了这个值，则表示从变更密码的日期算起，多少天内无法再次修改密码，如果是0的话，则没有限制\n5. 密码需要重新变更的天数：密码经常更换才能保证安全，为了提醒某些经常不更换密码的用户，可以设置一个天数，强制让用户更换密码，也就是说该用户的密码会在多少天后过期，如果为99999则没有限制\n6. 密码过期预警天数：如果在5中设置了密码需要重新变更的天数，则会在密码过期的前多少天进行提醒，提示用户其密码将在多少天后过期\n7. 密码过期的宽恕时间：如果在5中设置的日期过后，用户仍然没有修改密码，则该用户还可以继续使用的天数\n8. 账号失效日期，过了这个日期账号就不能用了\n9. 保留的\n\n以上面最后用户letuknowit为例（15400对应的日期为2012年3月1日），其保护如下信息：\n3. 用户letuknowit最近一次修改密码的日期是2012年3月1日，\n4. 在2012年3月6日之前不能再改动密码了，\n5. 在2012-3-1到2012-4-29期间letuknowit需要更改密码，\n6. 在2012-4-29之前的7天，letuknowit登陆系统的时候，系统会提示letuknowit其密码即将过期，\n7. 如果letuknowit一直到2012-4-29都没有修改密码，则其仍然可以继续使用该账户2天，2天后该账户将不可用\n8. 无论如何，到了2012年5月29日，该账号都将失效\n\n## 主机名\n\n- 查看主机名: `hostname` 或`uname –n`，均可以查看到当前主机的主机名。\n- 临时修改主机名: `hostname 新主机名`\n- 永久修改主机名: `/etc/hostname`文件中修改\n- `host` 文件: `/etc/hosts` 存放的是域名与ip的对应关系, 添加一个新主机名到`127.0.0.1`.\n\n\n待续中...\n","slug":"liunx-shell","published":1,"updated":"2017-06-04T14:03:35.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvp70038uwg7aub1qx1e","content":"<p>记录使用到的 <code>Linux</code> 命令!</p>\n<a id=\"more\"></a>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><ul>\n<li>安装: <code>sudo apt-get install git</code></li>\n</ul>\n<h2 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h2><ul>\n<li>安装: <code>sudo apt-get install nginx</code></li>\n<li>启动: <code>sudo /etc/init.d/nginx start</code></li>\n<li>停止: <code>sudo /etc/init.d/nginx stop</code></li>\n<li>重启: <code>sudo /etc/init.d/nginx restart</code></li>\n<li>检查配置文件: <code>sudo service nginx configtest</code></li>\n<li>重载配置文件: <code>sudo service nginx reload</code></li>\n<li>查询nginx进程: <code>ps -ef | grep nginx</code></li>\n</ul>\n<h2 id=\"Nginx-配置\"><a href=\"#Nginx-配置\" class=\"headerlink\" title=\"Nginx 配置\"></a>Nginx 配置</h2><p><code>sudo vim /etc/nginx/sites-available/default</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80 default_server;</div><div class=\"line\">    listen [::]:80 default_server ipv6only=on;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 如果要支持HTTPS，修改这里</span></div><div class=\"line\">    <span class=\"comment\"># 可以使用 https://letsencrypt.org 的免费SSL证书</span></div><div class=\"line\">    <span class=\"comment\">#listen 443 ssl;</span></div><div class=\"line\">    <span class=\"comment\">#ssl_certificate     www.example.com.crt;</span></div><div class=\"line\">    <span class=\"comment\">#ssl_certificate_key www.example.com.key;</span></div><div class=\"line\">    <span class=\"comment\">#ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</span></div><div class=\"line\">    <span class=\"comment\">#ssl_ciphers         HIGH:!aNULL:!MD5;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 重定向所有HTTP到HTTPS</span></div><div class=\"line\">    <span class=\"comment\"># rewrite ^(.*)$ https://$host$1 permanent;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 网站根目录，根据需要修改</span></div><div class=\"line\">    root /usr/share/nginx/html;</div><div class=\"line\">    <span class=\"comment\"># 增加index.php</span></div><div class=\"line\">    index index.php index.html index.htm;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 假设域名是 ssl.mcxiaoke.com</span></div><div class=\"line\">    server_name ssl.mcxiaoke.com; <span class=\"comment\">#绑定域名</span></div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error_page 404 /404.html;</div><div class=\"line\">    error_page 500 502 503 504 /50x.html;</div><div class=\"line\">    location = /50x.html &#123;</div><div class=\"line\">        root /usr/share/nginx/html;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#支持php-fpm的配置</span></div><div class=\"line\">    location ~ \\.php$ &#123;</div><div class=\"line\">        try_files <span class=\"variable\">$uri</span> =404;</div><div class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.+)$;</div><div class=\"line\">        fastcgi_pass unix:/var/run/php5-fpm.sock;</div><div class=\"line\">        fastcgi_index index.php;</div><div class=\"line\">        fastcgi_param SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</div><div class=\"line\">        include fastcgi_params;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"安装-MySQL\"><a href=\"#安装-MySQL\" class=\"headerlink\" title=\"安装 MySQL\"></a>安装 MySQL</h2><ul>\n<li>安装: <code>sudo apt-get install mysql-server</code></li>\n</ul>\n<h2 id=\"安装-php-fpm\"><a href=\"#安装-php-fpm\" class=\"headerlink\" title=\"安装 php-fpm\"></a>安装 php-fpm</h2><ul>\n<li>安装: <code>sudo apt-get install php5-fpm</code></li>\n<li>重启: <code>sudo service php5-fpm restart</code></li>\n<li>安装PHP常用扩展: <code>sudo apt-get install php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl php5-xcache</code></li>\n</ul>\n<h2 id=\"常用linux命令说明\"><a href=\"#常用linux命令说明\" class=\"headerlink\" title=\"常用linux命令说明\"></a>常用linux命令说明</h2><ul>\n<li>查看端口占用: <code>lsof -i:80</code></li>\n<li>杀死进程: <code>kill -9 3274</code></li>\n<li><code>tar</code><ul>\n<li>z- 用<code>gzip</code>对存档压缩或解压</li>\n<li>x-从存档展开文件</li>\n<li>v-详细显示处理的文件</li>\n<li>f-指定存档或设备</li>\n</ul>\n</li>\n<li><p><code>chmod</code><br>  +</p>\n</li>\n<li><p>更新源: <code>sudo apt-get update</code></p>\n</li>\n<li>更新已安装的包<code>sudo apt-get upgrade</code></li>\n</ul>\n<h2 id=\"账号和密码文件\"><a href=\"#账号和密码文件\" class=\"headerlink\" title=\"账号和密码文件\"></a>账号和密码文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -al /etc/passwd /etc/shadow</div><div class=\"line\">-rw-r–r– 1 root root 1611 2011-12-16 05:30 /etc/passwd <span class=\"comment\"># 保存的是账号</span></div><div class=\"line\">-rw-r—– 1 root shadow 947 2011-12-16 05:30 /etc/shadow <span class=\"comment\"># 账号的密码等信息</span></div></pre></td></tr></table></figure>\n<h3 id=\"etc-passwd\"><a href=\"#etc-passwd\" class=\"headerlink\" title=\"/etc/passwd\"></a>/etc/passwd</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root:x:0:0:root:/root:/bin/bash</div><div class=\"line\">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class=\"line\">bin:x:2:2:bin:/bin:/bin/sh</div><div class=\"line\">sys:x:3:3:sys:/dev:/bin/sh</div></pre></td></tr></table></figure>\n<ol>\n<li>账号名称</li>\n<li>原先用来保存密码的，现在密码都放在/etc/shadow中，所以这里显示x</li>\n<li>UID，也就是使用者ID。默认的系统管理员的UID为0，我们添加用户的时候最好使用1000以上的UID，1-1000范围的UID最好保留给系统用。</li>\n<li>GID，也就是群组ID</li>\n<li>关于账号的一些说明信息（暂时可以忽略）</li>\n<li>账号的家目录，家目录就是你登陆系统后默认的那个目录</li>\n<li>账号使用的shell</li>\n</ol>\n<h3 id=\"etc-shadow\"><a href=\"#etc-shadow\" class=\"headerlink\" title=\"/etc/shadow\"></a>/etc/shadow</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root:!:15324:0:99999:7:::</div><div class=\"line\">daemon:*:15259:0:99999:7:::</div><div class=\"line\">bin:*:15259:0:99999:7:::</div><div class=\"line\">letuknowit:<span class=\"variable\">$1</span><span class=\"variable\">$cPf</span>/cIvr<span class=\"variable\">$sCws95uSip2ljTK052DDB</span>.:15400:5:60:7:2:15490:</div></pre></td></tr></table></figure>\n<ol>\n<li>账户名称（密码需要与账户对应的嘛）</li>\n<li>加密后的密码（总不能学CSDN放明文密码，是吧），如果这一栏的第一个字符为!或者*的话，说明这是一个不能登录的账户，从上面可以看出，ubuntu默认的就不启用root账户。</li>\n<li>最近改动密码的日期（不是日期吗，咋是一堆数字，别急，这个是从1970年1月1日算起的总的天数）。那怎么才能知道今天距1970年1月1日有多少天呢？很简单，你改下密码，然后看下这个栏目中的数字是多少就可以了！</li>\n<li>密码不可被变更的天数：设置了这个值，则表示从变更密码的日期算起，多少天内无法再次修改密码，如果是0的话，则没有限制</li>\n<li>密码需要重新变更的天数：密码经常更换才能保证安全，为了提醒某些经常不更换密码的用户，可以设置一个天数，强制让用户更换密码，也就是说该用户的密码会在多少天后过期，如果为99999则没有限制</li>\n<li>密码过期预警天数：如果在5中设置了密码需要重新变更的天数，则会在密码过期的前多少天进行提醒，提示用户其密码将在多少天后过期</li>\n<li>密码过期的宽恕时间：如果在5中设置的日期过后，用户仍然没有修改密码，则该用户还可以继续使用的天数</li>\n<li>账号失效日期，过了这个日期账号就不能用了</li>\n<li>保留的</li>\n</ol>\n<p>以上面最后用户letuknowit为例（15400对应的日期为2012年3月1日），其保护如下信息：</p>\n<ol>\n<li>用户letuknowit最近一次修改密码的日期是2012年3月1日，</li>\n<li>在2012年3月6日之前不能再改动密码了，</li>\n<li>在2012-3-1到2012-4-29期间letuknowit需要更改密码，</li>\n<li>在2012-4-29之前的7天，letuknowit登陆系统的时候，系统会提示letuknowit其密码即将过期，</li>\n<li>如果letuknowit一直到2012-4-29都没有修改密码，则其仍然可以继续使用该账户2天，2天后该账户将不可用</li>\n<li>无论如何，到了2012年5月29日，该账号都将失效</li>\n</ol>\n<h2 id=\"主机名\"><a href=\"#主机名\" class=\"headerlink\" title=\"主机名\"></a>主机名</h2><ul>\n<li>查看主机名: <code>hostname</code> 或<code>uname –n</code>，均可以查看到当前主机的主机名。</li>\n<li>临时修改主机名: <code>hostname 新主机名</code></li>\n<li>永久修改主机名: <code>/etc/hostname</code>文件中修改</li>\n<li><code>host</code> 文件: <code>/etc/hosts</code> 存放的是域名与ip的对应关系, 添加一个新主机名到<code>127.0.0.1</code>.</li>\n</ul>\n<p>待续中…</p>\n","excerpt":"<p>记录使用到的 <code>Linux</code> 命令!</p>","more":"<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><ul>\n<li>安装: <code>sudo apt-get install git</code></li>\n</ul>\n<h2 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h2><ul>\n<li>安装: <code>sudo apt-get install nginx</code></li>\n<li>启动: <code>sudo /etc/init.d/nginx start</code></li>\n<li>停止: <code>sudo /etc/init.d/nginx stop</code></li>\n<li>重启: <code>sudo /etc/init.d/nginx restart</code></li>\n<li>检查配置文件: <code>sudo service nginx configtest</code></li>\n<li>重载配置文件: <code>sudo service nginx reload</code></li>\n<li>查询nginx进程: <code>ps -ef | grep nginx</code></li>\n</ul>\n<h2 id=\"Nginx-配置\"><a href=\"#Nginx-配置\" class=\"headerlink\" title=\"Nginx 配置\"></a>Nginx 配置</h2><p><code>sudo vim /etc/nginx/sites-available/default</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80 default_server;</div><div class=\"line\">    listen [::]:80 default_server ipv6only=on;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 如果要支持HTTPS，修改这里</span></div><div class=\"line\">    <span class=\"comment\"># 可以使用 https://letsencrypt.org 的免费SSL证书</span></div><div class=\"line\">    <span class=\"comment\">#listen 443 ssl;</span></div><div class=\"line\">    <span class=\"comment\">#ssl_certificate     www.example.com.crt;</span></div><div class=\"line\">    <span class=\"comment\">#ssl_certificate_key www.example.com.key;</span></div><div class=\"line\">    <span class=\"comment\">#ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</span></div><div class=\"line\">    <span class=\"comment\">#ssl_ciphers         HIGH:!aNULL:!MD5;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 重定向所有HTTP到HTTPS</span></div><div class=\"line\">    <span class=\"comment\"># rewrite ^(.*)$ https://$host$1 permanent;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 网站根目录，根据需要修改</span></div><div class=\"line\">    root /usr/share/nginx/html;</div><div class=\"line\">    <span class=\"comment\"># 增加index.php</span></div><div class=\"line\">    index index.php index.html index.htm;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 假设域名是 ssl.mcxiaoke.com</span></div><div class=\"line\">    server_name ssl.mcxiaoke.com; <span class=\"comment\">#绑定域名</span></div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error_page 404 /404.html;</div><div class=\"line\">    error_page 500 502 503 504 /50x.html;</div><div class=\"line\">    location = /50x.html &#123;</div><div class=\"line\">        root /usr/share/nginx/html;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#支持php-fpm的配置</span></div><div class=\"line\">    location ~ \\.php$ &#123;</div><div class=\"line\">        try_files <span class=\"variable\">$uri</span> =404;</div><div class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.+)$;</div><div class=\"line\">        fastcgi_pass unix:/var/run/php5-fpm.sock;</div><div class=\"line\">        fastcgi_index index.php;</div><div class=\"line\">        fastcgi_param SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</div><div class=\"line\">        include fastcgi_params;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"安装-MySQL\"><a href=\"#安装-MySQL\" class=\"headerlink\" title=\"安装 MySQL\"></a>安装 MySQL</h2><ul>\n<li>安装: <code>sudo apt-get install mysql-server</code></li>\n</ul>\n<h2 id=\"安装-php-fpm\"><a href=\"#安装-php-fpm\" class=\"headerlink\" title=\"安装 php-fpm\"></a>安装 php-fpm</h2><ul>\n<li>安装: <code>sudo apt-get install php5-fpm</code></li>\n<li>重启: <code>sudo service php5-fpm restart</code></li>\n<li>安装PHP常用扩展: <code>sudo apt-get install php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl php5-xcache</code></li>\n</ul>\n<h2 id=\"常用linux命令说明\"><a href=\"#常用linux命令说明\" class=\"headerlink\" title=\"常用linux命令说明\"></a>常用linux命令说明</h2><ul>\n<li>查看端口占用: <code>lsof -i:80</code></li>\n<li>杀死进程: <code>kill -9 3274</code></li>\n<li><code>tar</code><ul>\n<li>z- 用<code>gzip</code>对存档压缩或解压</li>\n<li>x-从存档展开文件</li>\n<li>v-详细显示处理的文件</li>\n<li>f-指定存档或设备</li>\n</ul>\n</li>\n<li><p><code>chmod</code><br>  +</p>\n</li>\n<li><p>更新源: <code>sudo apt-get update</code></p>\n</li>\n<li>更新已安装的包<code>sudo apt-get upgrade</code></li>\n</ul>\n<h2 id=\"账号和密码文件\"><a href=\"#账号和密码文件\" class=\"headerlink\" title=\"账号和密码文件\"></a>账号和密码文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -al /etc/passwd /etc/shadow</div><div class=\"line\">-rw-r–r– 1 root root 1611 2011-12-16 05:30 /etc/passwd <span class=\"comment\"># 保存的是账号</span></div><div class=\"line\">-rw-r—– 1 root shadow 947 2011-12-16 05:30 /etc/shadow <span class=\"comment\"># 账号的密码等信息</span></div></pre></td></tr></table></figure>\n<h3 id=\"etc-passwd\"><a href=\"#etc-passwd\" class=\"headerlink\" title=\"/etc/passwd\"></a>/etc/passwd</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root:x:0:0:root:/root:/bin/bash</div><div class=\"line\">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</div><div class=\"line\">bin:x:2:2:bin:/bin:/bin/sh</div><div class=\"line\">sys:x:3:3:sys:/dev:/bin/sh</div></pre></td></tr></table></figure>\n<ol>\n<li>账号名称</li>\n<li>原先用来保存密码的，现在密码都放在/etc/shadow中，所以这里显示x</li>\n<li>UID，也就是使用者ID。默认的系统管理员的UID为0，我们添加用户的时候最好使用1000以上的UID，1-1000范围的UID最好保留给系统用。</li>\n<li>GID，也就是群组ID</li>\n<li>关于账号的一些说明信息（暂时可以忽略）</li>\n<li>账号的家目录，家目录就是你登陆系统后默认的那个目录</li>\n<li>账号使用的shell</li>\n</ol>\n<h3 id=\"etc-shadow\"><a href=\"#etc-shadow\" class=\"headerlink\" title=\"/etc/shadow\"></a>/etc/shadow</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root:!:15324:0:99999:7:::</div><div class=\"line\">daemon:*:15259:0:99999:7:::</div><div class=\"line\">bin:*:15259:0:99999:7:::</div><div class=\"line\">letuknowit:<span class=\"variable\">$1</span><span class=\"variable\">$cPf</span>/cIvr<span class=\"variable\">$sCws95uSip2ljTK052DDB</span>.:15400:5:60:7:2:15490:</div></pre></td></tr></table></figure>\n<ol>\n<li>账户名称（密码需要与账户对应的嘛）</li>\n<li>加密后的密码（总不能学CSDN放明文密码，是吧），如果这一栏的第一个字符为!或者*的话，说明这是一个不能登录的账户，从上面可以看出，ubuntu默认的就不启用root账户。</li>\n<li>最近改动密码的日期（不是日期吗，咋是一堆数字，别急，这个是从1970年1月1日算起的总的天数）。那怎么才能知道今天距1970年1月1日有多少天呢？很简单，你改下密码，然后看下这个栏目中的数字是多少就可以了！</li>\n<li>密码不可被变更的天数：设置了这个值，则表示从变更密码的日期算起，多少天内无法再次修改密码，如果是0的话，则没有限制</li>\n<li>密码需要重新变更的天数：密码经常更换才能保证安全，为了提醒某些经常不更换密码的用户，可以设置一个天数，强制让用户更换密码，也就是说该用户的密码会在多少天后过期，如果为99999则没有限制</li>\n<li>密码过期预警天数：如果在5中设置了密码需要重新变更的天数，则会在密码过期的前多少天进行提醒，提示用户其密码将在多少天后过期</li>\n<li>密码过期的宽恕时间：如果在5中设置的日期过后，用户仍然没有修改密码，则该用户还可以继续使用的天数</li>\n<li>账号失效日期，过了这个日期账号就不能用了</li>\n<li>保留的</li>\n</ol>\n<p>以上面最后用户letuknowit为例（15400对应的日期为2012年3月1日），其保护如下信息：</p>\n<ol>\n<li>用户letuknowit最近一次修改密码的日期是2012年3月1日，</li>\n<li>在2012年3月6日之前不能再改动密码了，</li>\n<li>在2012-3-1到2012-4-29期间letuknowit需要更改密码，</li>\n<li>在2012-4-29之前的7天，letuknowit登陆系统的时候，系统会提示letuknowit其密码即将过期，</li>\n<li>如果letuknowit一直到2012-4-29都没有修改密码，则其仍然可以继续使用该账户2天，2天后该账户将不可用</li>\n<li>无论如何，到了2012年5月29日，该账号都将失效</li>\n</ol>\n<h2 id=\"主机名\"><a href=\"#主机名\" class=\"headerlink\" title=\"主机名\"></a>主机名</h2><ul>\n<li>查看主机名: <code>hostname</code> 或<code>uname –n</code>，均可以查看到当前主机的主机名。</li>\n<li>临时修改主机名: <code>hostname 新主机名</code></li>\n<li>永久修改主机名: <code>/etc/hostname</code>文件中修改</li>\n<li><code>host</code> 文件: <code>/etc/hosts</code> 存放的是域名与ip的对应关系, 添加一个新主机名到<code>127.0.0.1</code>.</li>\n</ul>\n<p>待续中…</p>"},{"title":"MongoDB学习笔记","date":"2017-03-27T07:07:03.000Z","_content":"\n本篇文章介绍学习MongoDB的一些常用命令,希望能帮助大家.\n\n<!--more-->\n\n## 常用操作\n\n- `Help`查看命令提示\n    + `db.help()`;\n    + `db.yourColl.help()`;\n    + `db.youColl.find().help()`;\n- 切换/创建数据库\n    + `use yourDB`;  当创建一个集合(`table`)的时候会自动创建当前数据库\n- 查询所有数据库\n    + `show dbs`;\n- 删除当前使用数据库\n    + `db.dropDatabase()`;\n- 从指定主机上克隆数据库\n    + 从指定主机上克隆数据库\n- 从指定的机器上复制指定数据库数据到某个数据库\n    + `db.copyDatabase(\"mydb\", \"temp\", \"127.0.0.1\")`;将本机的`mydb`的数据复制到`temp`数据库中\n- 修复当前数据库\n    + `db.repairDatabase()`;\n- 查看当前使用的数据库\n    + `db.getName()`;\n- 显示当前db状态\n    + `db.stats()`;\n- 当前db版本\n    + `db.version()`;\n- 查看当前db的链接机器地址\n    + `db.getMongo()`;\n\n## Collection聚集集合操作\n\n- 创建一个聚集集合（`table`）\n    + `db.createCollection(“collName”, {size: 20, capped: 5, max: 100})`;\n- 得到指定名称的聚集集合（`table`）\n    + `db.getCollection(\"account\")`;\n- 得到当前db的所有聚集集合\n    + `db.getCollectionNames()`;\n- 显示当前db所有聚集索引的状态\n    + `db.printCollectionStats()`;\n\n## 用户相关操作\n\n- 添加一个用户\n    + `db.addUser(\"name\")`;\n    + `db.addUser(\"userName\", \"pwd123\", true)`; 添加用户、设置密码、是否只读\n- 数据库认证、安全模式\n    + `db.auth(\"userName\", \"123123\")`;\n- 显示当前所有用户\n    + `show users`;\n- 删除用户\n    + `db.removeUser(\"userName\")`;\n\n## 聚集集合查询\n\n- 查询所有记录\n    + `db.userInfo.find()`; 相当于：`select* from userInfo`;默认每页显示20条记录，当显示不下的情况下,可以用it迭代命令查询下一页数据。注意：键入it命令不能带“;”但是你可以设置每页显示数据的大小,用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。\n- 查询去掉后的当前聚集集合中的某列的重复数据\n    + `db.userInfo.distinct(\"name\")`;会过滤掉name中的相同数据,相当于：`select distict name from userInfo`;\n- 查询`age = 22`的记录\n    + `db.userInfo.find({\"age\": 22})`; 相当于：`select * from userInfo where age = 22`;\n- 查询`age > 22`的记录\n    + `db.userInfo.find({age: {$gt: 22}})`;\n- 查询`age < 22`的记录\n    + `db.userInfo.find({age: {$lt: 22}})`;\n- 查询`age >= 25`的记录\n    + `db.userInfo.find({age: {$gte: 25}})`;\n- 查询`age >= 23` 并且 `age <= 26`\n    + `db.userInfo.find({age: {$gte: 23, $lte: 26}})`;\n- 查询`name`中包含 `mongo`的数据\n    + `db.userInfo.find({name: /mongo/})`;\n- 查询`name`中以`mongo`开头的\n    + `db.userInfo.find({name: /^mongo/})`;\n- 查询指定列`name`、`age`数据\n    + `db.userInfo.find({}, {name: 1, age: 1})`;当然`name`也可以用`true`或`false`,当用`ture`的情况下河`name:1`效果一样，如果用`false`就是排除`name`，显示`name`以外的列信息。\n- 查询指定列`name`、`age`数据, `age > 25`.\n    + `db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1})`;\n- 按照年龄排序\n    + 升序：`db.userInfo.find().sort({age: 1})`;\n    + 降序：`db.userInfo.find().sort({age: -1})`;\n- 查询`name = zhangsan, age = 22`的数据\n    + `db.userInfo.find({name: 'zhangsan', age: 22})`;\n- 查询前5条数据\n    + `db.userInfo.find().limit(5)`;\n- 查询10条以后的数据\n    + `db.userInfo.find().skip(10)`;\n- 查询在5-10之间的数据\n    + `db.userInfo.find().limit(10).skip(5)`;可用于分页，limit是pageSize，skip是第几页*pageSize\n- or与 查询\n    + `db.userInfo.find({$or: [{age: 22}, {age: 25}]})`;\n- 查询第一条数据\n    + `db.userInfo.findOne()`;\n    + `db.userInfo.find().limit(1)`;\n- 查询某个结果集的记录条数\n    + `db.userInfo.find({age: {$gte: 25}}).count()`;如果要返回限制之后的记录数量，要使用count(true)或者count(非0)\n    + `db.users.find().skip(10).limit(5).count(true)`;\n- 按照某列进行排序\n    + `db.userInfo.find({sex: {$exists: true}}).count()`;\n\n## 索引\n\n- 创建索引\n    + `db.userInfo.ensureIndex({name: 1})`;\n    + `db.userInfo.ensureIndex({name: 1, ts: -1})`;\n- 查询当前聚集集合所有索引\n    + `db.userInfo.getIndexes()`;\n- 查看总索引记录大小\n    + `db.userInfo.totalIndexSize()`;\n- 读取当前集合的所有index信息\n    + `db.users.reIndex()`;\n- 删除指定索引\n    + `db.users.dropIndex(\"name_1\")`;\n- 删除所有索引\n    + `db.users.dropIndexes()`;\n","source":"_posts/mongodb-ues.md","raw":"---\ntitle: MongoDB学习笔记\ndate: 2017-03-27 15:07:03\ntags:\n    - MongoDB\n    - NoSQL\ncategories: MongoDB\n---\n\n本篇文章介绍学习MongoDB的一些常用命令,希望能帮助大家.\n\n<!--more-->\n\n## 常用操作\n\n- `Help`查看命令提示\n    + `db.help()`;\n    + `db.yourColl.help()`;\n    + `db.youColl.find().help()`;\n- 切换/创建数据库\n    + `use yourDB`;  当创建一个集合(`table`)的时候会自动创建当前数据库\n- 查询所有数据库\n    + `show dbs`;\n- 删除当前使用数据库\n    + `db.dropDatabase()`;\n- 从指定主机上克隆数据库\n    + 从指定主机上克隆数据库\n- 从指定的机器上复制指定数据库数据到某个数据库\n    + `db.copyDatabase(\"mydb\", \"temp\", \"127.0.0.1\")`;将本机的`mydb`的数据复制到`temp`数据库中\n- 修复当前数据库\n    + `db.repairDatabase()`;\n- 查看当前使用的数据库\n    + `db.getName()`;\n- 显示当前db状态\n    + `db.stats()`;\n- 当前db版本\n    + `db.version()`;\n- 查看当前db的链接机器地址\n    + `db.getMongo()`;\n\n## Collection聚集集合操作\n\n- 创建一个聚集集合（`table`）\n    + `db.createCollection(“collName”, {size: 20, capped: 5, max: 100})`;\n- 得到指定名称的聚集集合（`table`）\n    + `db.getCollection(\"account\")`;\n- 得到当前db的所有聚集集合\n    + `db.getCollectionNames()`;\n- 显示当前db所有聚集索引的状态\n    + `db.printCollectionStats()`;\n\n## 用户相关操作\n\n- 添加一个用户\n    + `db.addUser(\"name\")`;\n    + `db.addUser(\"userName\", \"pwd123\", true)`; 添加用户、设置密码、是否只读\n- 数据库认证、安全模式\n    + `db.auth(\"userName\", \"123123\")`;\n- 显示当前所有用户\n    + `show users`;\n- 删除用户\n    + `db.removeUser(\"userName\")`;\n\n## 聚集集合查询\n\n- 查询所有记录\n    + `db.userInfo.find()`; 相当于：`select* from userInfo`;默认每页显示20条记录，当显示不下的情况下,可以用it迭代命令查询下一页数据。注意：键入it命令不能带“;”但是你可以设置每页显示数据的大小,用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。\n- 查询去掉后的当前聚集集合中的某列的重复数据\n    + `db.userInfo.distinct(\"name\")`;会过滤掉name中的相同数据,相当于：`select distict name from userInfo`;\n- 查询`age = 22`的记录\n    + `db.userInfo.find({\"age\": 22})`; 相当于：`select * from userInfo where age = 22`;\n- 查询`age > 22`的记录\n    + `db.userInfo.find({age: {$gt: 22}})`;\n- 查询`age < 22`的记录\n    + `db.userInfo.find({age: {$lt: 22}})`;\n- 查询`age >= 25`的记录\n    + `db.userInfo.find({age: {$gte: 25}})`;\n- 查询`age >= 23` 并且 `age <= 26`\n    + `db.userInfo.find({age: {$gte: 23, $lte: 26}})`;\n- 查询`name`中包含 `mongo`的数据\n    + `db.userInfo.find({name: /mongo/})`;\n- 查询`name`中以`mongo`开头的\n    + `db.userInfo.find({name: /^mongo/})`;\n- 查询指定列`name`、`age`数据\n    + `db.userInfo.find({}, {name: 1, age: 1})`;当然`name`也可以用`true`或`false`,当用`ture`的情况下河`name:1`效果一样，如果用`false`就是排除`name`，显示`name`以外的列信息。\n- 查询指定列`name`、`age`数据, `age > 25`.\n    + `db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1})`;\n- 按照年龄排序\n    + 升序：`db.userInfo.find().sort({age: 1})`;\n    + 降序：`db.userInfo.find().sort({age: -1})`;\n- 查询`name = zhangsan, age = 22`的数据\n    + `db.userInfo.find({name: 'zhangsan', age: 22})`;\n- 查询前5条数据\n    + `db.userInfo.find().limit(5)`;\n- 查询10条以后的数据\n    + `db.userInfo.find().skip(10)`;\n- 查询在5-10之间的数据\n    + `db.userInfo.find().limit(10).skip(5)`;可用于分页，limit是pageSize，skip是第几页*pageSize\n- or与 查询\n    + `db.userInfo.find({$or: [{age: 22}, {age: 25}]})`;\n- 查询第一条数据\n    + `db.userInfo.findOne()`;\n    + `db.userInfo.find().limit(1)`;\n- 查询某个结果集的记录条数\n    + `db.userInfo.find({age: {$gte: 25}}).count()`;如果要返回限制之后的记录数量，要使用count(true)或者count(非0)\n    + `db.users.find().skip(10).limit(5).count(true)`;\n- 按照某列进行排序\n    + `db.userInfo.find({sex: {$exists: true}}).count()`;\n\n## 索引\n\n- 创建索引\n    + `db.userInfo.ensureIndex({name: 1})`;\n    + `db.userInfo.ensureIndex({name: 1, ts: -1})`;\n- 查询当前聚集集合所有索引\n    + `db.userInfo.getIndexes()`;\n- 查看总索引记录大小\n    + `db.userInfo.totalIndexSize()`;\n- 读取当前集合的所有index信息\n    + `db.users.reIndex()`;\n- 删除指定索引\n    + `db.users.dropIndex(\"name_1\")`;\n- 删除所有索引\n    + `db.users.dropIndexes()`;\n","slug":"mongodb-ues","published":1,"updated":"2017-04-21T14:09:41.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvpb003buwg7mzb3w7m8","content":"<p>本篇文章介绍学习MongoDB的一些常用命令,希望能帮助大家.</p>\n<a id=\"more\"></a>\n<h2 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h2><ul>\n<li><code>Help</code>查看命令提示<ul>\n<li><code>db.help()</code>;</li>\n<li><code>db.yourColl.help()</code>;</li>\n<li><code>db.youColl.find().help()</code>;</li>\n</ul>\n</li>\n<li>切换/创建数据库<ul>\n<li><code>use yourDB</code>;  当创建一个集合(<code>table</code>)的时候会自动创建当前数据库</li>\n</ul>\n</li>\n<li>查询所有数据库<ul>\n<li><code>show dbs</code>;</li>\n</ul>\n</li>\n<li>删除当前使用数据库<ul>\n<li><code>db.dropDatabase()</code>;</li>\n</ul>\n</li>\n<li>从指定主机上克隆数据库<ul>\n<li>从指定主机上克隆数据库</li>\n</ul>\n</li>\n<li>从指定的机器上复制指定数据库数据到某个数据库<ul>\n<li><code>db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;)</code>;将本机的<code>mydb</code>的数据复制到<code>temp</code>数据库中</li>\n</ul>\n</li>\n<li>修复当前数据库<ul>\n<li><code>db.repairDatabase()</code>;</li>\n</ul>\n</li>\n<li>查看当前使用的数据库<ul>\n<li><code>db.getName()</code>;</li>\n</ul>\n</li>\n<li>显示当前db状态<ul>\n<li><code>db.stats()</code>;</li>\n</ul>\n</li>\n<li>当前db版本<ul>\n<li><code>db.version()</code>;</li>\n</ul>\n</li>\n<li>查看当前db的链接机器地址<ul>\n<li><code>db.getMongo()</code>;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Collection聚集集合操作\"><a href=\"#Collection聚集集合操作\" class=\"headerlink\" title=\"Collection聚集集合操作\"></a>Collection聚集集合操作</h2><ul>\n<li>创建一个聚集集合（<code>table</code>）<ul>\n<li><code>db.createCollection(“collName”, {size: 20, capped: 5, max: 100})</code>;</li>\n</ul>\n</li>\n<li>得到指定名称的聚集集合（<code>table</code>）<ul>\n<li><code>db.getCollection(&quot;account&quot;)</code>;</li>\n</ul>\n</li>\n<li>得到当前db的所有聚集集合<ul>\n<li><code>db.getCollectionNames()</code>;</li>\n</ul>\n</li>\n<li>显示当前db所有聚集索引的状态<ul>\n<li><code>db.printCollectionStats()</code>;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"用户相关操作\"><a href=\"#用户相关操作\" class=\"headerlink\" title=\"用户相关操作\"></a>用户相关操作</h2><ul>\n<li>添加一个用户<ul>\n<li><code>db.addUser(&quot;name&quot;)</code>;</li>\n<li><code>db.addUser(&quot;userName&quot;, &quot;pwd123&quot;, true)</code>; 添加用户、设置密码、是否只读</li>\n</ul>\n</li>\n<li>数据库认证、安全模式<ul>\n<li><code>db.auth(&quot;userName&quot;, &quot;123123&quot;)</code>;</li>\n</ul>\n</li>\n<li>显示当前所有用户<ul>\n<li><code>show users</code>;</li>\n</ul>\n</li>\n<li>删除用户<ul>\n<li><code>db.removeUser(&quot;userName&quot;)</code>;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"聚集集合查询\"><a href=\"#聚集集合查询\" class=\"headerlink\" title=\"聚集集合查询\"></a>聚集集合查询</h2><ul>\n<li>查询所有记录<ul>\n<li><code>db.userInfo.find()</code>; 相当于：<code>select* from userInfo</code>;默认每页显示20条记录，当显示不下的情况下,可以用it迭代命令查询下一页数据。注意：键入it命令不能带“;”但是你可以设置每页显示数据的大小,用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。</li>\n</ul>\n</li>\n<li>查询去掉后的当前聚集集合中的某列的重复数据<ul>\n<li><code>db.userInfo.distinct(&quot;name&quot;)</code>;会过滤掉name中的相同数据,相当于：<code>select distict name from userInfo</code>;</li>\n</ul>\n</li>\n<li>查询<code>age = 22</code>的记录<ul>\n<li><code>db.userInfo.find({&quot;age&quot;: 22})</code>; 相当于：<code>select * from userInfo where age = 22</code>;</li>\n</ul>\n</li>\n<li>查询<code>age &gt; 22</code>的记录<ul>\n<li><code>db.userInfo.find({age: {$gt: 22}})</code>;</li>\n</ul>\n</li>\n<li>查询<code>age &lt; 22</code>的记录<ul>\n<li><code>db.userInfo.find({age: {$lt: 22}})</code>;</li>\n</ul>\n</li>\n<li>查询<code>age &gt;= 25</code>的记录<ul>\n<li><code>db.userInfo.find({age: {$gte: 25}})</code>;</li>\n</ul>\n</li>\n<li>查询<code>age &gt;= 23</code> 并且 <code>age &lt;= 26</code><ul>\n<li><code>db.userInfo.find({age: {$gte: 23, $lte: 26}})</code>;</li>\n</ul>\n</li>\n<li>查询<code>name</code>中包含 <code>mongo</code>的数据<ul>\n<li><code>db.userInfo.find({name: /mongo/})</code>;</li>\n</ul>\n</li>\n<li>查询<code>name</code>中以<code>mongo</code>开头的<ul>\n<li><code>db.userInfo.find({name: /^mongo/})</code>;</li>\n</ul>\n</li>\n<li>查询指定列<code>name</code>、<code>age</code>数据<ul>\n<li><code>db.userInfo.find({}, {name: 1, age: 1})</code>;当然<code>name</code>也可以用<code>true</code>或<code>false</code>,当用<code>ture</code>的情况下河<code>name:1</code>效果一样，如果用<code>false</code>就是排除<code>name</code>，显示<code>name</code>以外的列信息。</li>\n</ul>\n</li>\n<li>查询指定列<code>name</code>、<code>age</code>数据, <code>age &gt; 25</code>.<ul>\n<li><code>db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1})</code>;</li>\n</ul>\n</li>\n<li>按照年龄排序<ul>\n<li>升序：<code>db.userInfo.find().sort({age: 1})</code>;</li>\n<li>降序：<code>db.userInfo.find().sort({age: -1})</code>;</li>\n</ul>\n</li>\n<li>查询<code>name = zhangsan, age = 22</code>的数据<ul>\n<li><code>db.userInfo.find({name: &#39;zhangsan&#39;, age: 22})</code>;</li>\n</ul>\n</li>\n<li>查询前5条数据<ul>\n<li><code>db.userInfo.find().limit(5)</code>;</li>\n</ul>\n</li>\n<li>查询10条以后的数据<ul>\n<li><code>db.userInfo.find().skip(10)</code>;</li>\n</ul>\n</li>\n<li>查询在5-10之间的数据<ul>\n<li><code>db.userInfo.find().limit(10).skip(5)</code>;可用于分页，limit是pageSize，skip是第几页*pageSize</li>\n</ul>\n</li>\n<li>or与 查询<ul>\n<li><code>db.userInfo.find({$or: [{age: 22}, {age: 25}]})</code>;</li>\n</ul>\n</li>\n<li>查询第一条数据<ul>\n<li><code>db.userInfo.findOne()</code>;</li>\n<li><code>db.userInfo.find().limit(1)</code>;</li>\n</ul>\n</li>\n<li>查询某个结果集的记录条数<ul>\n<li><code>db.userInfo.find({age: {$gte: 25}}).count()</code>;如果要返回限制之后的记录数量，要使用count(true)或者count(非0)</li>\n<li><code>db.users.find().skip(10).limit(5).count(true)</code>;</li>\n</ul>\n</li>\n<li>按照某列进行排序<ul>\n<li><code>db.userInfo.find({sex: {$exists: true}}).count()</code>;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>创建索引<ul>\n<li><code>db.userInfo.ensureIndex({name: 1})</code>;</li>\n<li><code>db.userInfo.ensureIndex({name: 1, ts: -1})</code>;</li>\n</ul>\n</li>\n<li>查询当前聚集集合所有索引<ul>\n<li><code>db.userInfo.getIndexes()</code>;</li>\n</ul>\n</li>\n<li>查看总索引记录大小<ul>\n<li><code>db.userInfo.totalIndexSize()</code>;</li>\n</ul>\n</li>\n<li>读取当前集合的所有index信息<ul>\n<li><code>db.users.reIndex()</code>;</li>\n</ul>\n</li>\n<li>删除指定索引<ul>\n<li><code>db.users.dropIndex(&quot;name_1&quot;)</code>;</li>\n</ul>\n</li>\n<li>删除所有索引<ul>\n<li><code>db.users.dropIndexes()</code>;</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<p>本篇文章介绍学习MongoDB的一些常用命令,希望能帮助大家.</p>","more":"<h2 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h2><ul>\n<li><code>Help</code>查看命令提示<ul>\n<li><code>db.help()</code>;</li>\n<li><code>db.yourColl.help()</code>;</li>\n<li><code>db.youColl.find().help()</code>;</li>\n</ul>\n</li>\n<li>切换/创建数据库<ul>\n<li><code>use yourDB</code>;  当创建一个集合(<code>table</code>)的时候会自动创建当前数据库</li>\n</ul>\n</li>\n<li>查询所有数据库<ul>\n<li><code>show dbs</code>;</li>\n</ul>\n</li>\n<li>删除当前使用数据库<ul>\n<li><code>db.dropDatabase()</code>;</li>\n</ul>\n</li>\n<li>从指定主机上克隆数据库<ul>\n<li>从指定主机上克隆数据库</li>\n</ul>\n</li>\n<li>从指定的机器上复制指定数据库数据到某个数据库<ul>\n<li><code>db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;)</code>;将本机的<code>mydb</code>的数据复制到<code>temp</code>数据库中</li>\n</ul>\n</li>\n<li>修复当前数据库<ul>\n<li><code>db.repairDatabase()</code>;</li>\n</ul>\n</li>\n<li>查看当前使用的数据库<ul>\n<li><code>db.getName()</code>;</li>\n</ul>\n</li>\n<li>显示当前db状态<ul>\n<li><code>db.stats()</code>;</li>\n</ul>\n</li>\n<li>当前db版本<ul>\n<li><code>db.version()</code>;</li>\n</ul>\n</li>\n<li>查看当前db的链接机器地址<ul>\n<li><code>db.getMongo()</code>;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Collection聚集集合操作\"><a href=\"#Collection聚集集合操作\" class=\"headerlink\" title=\"Collection聚集集合操作\"></a>Collection聚集集合操作</h2><ul>\n<li>创建一个聚集集合（<code>table</code>）<ul>\n<li><code>db.createCollection(“collName”, {size: 20, capped: 5, max: 100})</code>;</li>\n</ul>\n</li>\n<li>得到指定名称的聚集集合（<code>table</code>）<ul>\n<li><code>db.getCollection(&quot;account&quot;)</code>;</li>\n</ul>\n</li>\n<li>得到当前db的所有聚集集合<ul>\n<li><code>db.getCollectionNames()</code>;</li>\n</ul>\n</li>\n<li>显示当前db所有聚集索引的状态<ul>\n<li><code>db.printCollectionStats()</code>;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"用户相关操作\"><a href=\"#用户相关操作\" class=\"headerlink\" title=\"用户相关操作\"></a>用户相关操作</h2><ul>\n<li>添加一个用户<ul>\n<li><code>db.addUser(&quot;name&quot;)</code>;</li>\n<li><code>db.addUser(&quot;userName&quot;, &quot;pwd123&quot;, true)</code>; 添加用户、设置密码、是否只读</li>\n</ul>\n</li>\n<li>数据库认证、安全模式<ul>\n<li><code>db.auth(&quot;userName&quot;, &quot;123123&quot;)</code>;</li>\n</ul>\n</li>\n<li>显示当前所有用户<ul>\n<li><code>show users</code>;</li>\n</ul>\n</li>\n<li>删除用户<ul>\n<li><code>db.removeUser(&quot;userName&quot;)</code>;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"聚集集合查询\"><a href=\"#聚集集合查询\" class=\"headerlink\" title=\"聚集集合查询\"></a>聚集集合查询</h2><ul>\n<li>查询所有记录<ul>\n<li><code>db.userInfo.find()</code>; 相当于：<code>select* from userInfo</code>;默认每页显示20条记录，当显示不下的情况下,可以用it迭代命令查询下一页数据。注意：键入it命令不能带“;”但是你可以设置每页显示数据的大小,用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。</li>\n</ul>\n</li>\n<li>查询去掉后的当前聚集集合中的某列的重复数据<ul>\n<li><code>db.userInfo.distinct(&quot;name&quot;)</code>;会过滤掉name中的相同数据,相当于：<code>select distict name from userInfo</code>;</li>\n</ul>\n</li>\n<li>查询<code>age = 22</code>的记录<ul>\n<li><code>db.userInfo.find({&quot;age&quot;: 22})</code>; 相当于：<code>select * from userInfo where age = 22</code>;</li>\n</ul>\n</li>\n<li>查询<code>age &gt; 22</code>的记录<ul>\n<li><code>db.userInfo.find({age: {$gt: 22}})</code>;</li>\n</ul>\n</li>\n<li>查询<code>age &lt; 22</code>的记录<ul>\n<li><code>db.userInfo.find({age: {$lt: 22}})</code>;</li>\n</ul>\n</li>\n<li>查询<code>age &gt;= 25</code>的记录<ul>\n<li><code>db.userInfo.find({age: {$gte: 25}})</code>;</li>\n</ul>\n</li>\n<li>查询<code>age &gt;= 23</code> 并且 <code>age &lt;= 26</code><ul>\n<li><code>db.userInfo.find({age: {$gte: 23, $lte: 26}})</code>;</li>\n</ul>\n</li>\n<li>查询<code>name</code>中包含 <code>mongo</code>的数据<ul>\n<li><code>db.userInfo.find({name: /mongo/})</code>;</li>\n</ul>\n</li>\n<li>查询<code>name</code>中以<code>mongo</code>开头的<ul>\n<li><code>db.userInfo.find({name: /^mongo/})</code>;</li>\n</ul>\n</li>\n<li>查询指定列<code>name</code>、<code>age</code>数据<ul>\n<li><code>db.userInfo.find({}, {name: 1, age: 1})</code>;当然<code>name</code>也可以用<code>true</code>或<code>false</code>,当用<code>ture</code>的情况下河<code>name:1</code>效果一样，如果用<code>false</code>就是排除<code>name</code>，显示<code>name</code>以外的列信息。</li>\n</ul>\n</li>\n<li>查询指定列<code>name</code>、<code>age</code>数据, <code>age &gt; 25</code>.<ul>\n<li><code>db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1})</code>;</li>\n</ul>\n</li>\n<li>按照年龄排序<ul>\n<li>升序：<code>db.userInfo.find().sort({age: 1})</code>;</li>\n<li>降序：<code>db.userInfo.find().sort({age: -1})</code>;</li>\n</ul>\n</li>\n<li>查询<code>name = zhangsan, age = 22</code>的数据<ul>\n<li><code>db.userInfo.find({name: &#39;zhangsan&#39;, age: 22})</code>;</li>\n</ul>\n</li>\n<li>查询前5条数据<ul>\n<li><code>db.userInfo.find().limit(5)</code>;</li>\n</ul>\n</li>\n<li>查询10条以后的数据<ul>\n<li><code>db.userInfo.find().skip(10)</code>;</li>\n</ul>\n</li>\n<li>查询在5-10之间的数据<ul>\n<li><code>db.userInfo.find().limit(10).skip(5)</code>;可用于分页，limit是pageSize，skip是第几页*pageSize</li>\n</ul>\n</li>\n<li>or与 查询<ul>\n<li><code>db.userInfo.find({$or: [{age: 22}, {age: 25}]})</code>;</li>\n</ul>\n</li>\n<li>查询第一条数据<ul>\n<li><code>db.userInfo.findOne()</code>;</li>\n<li><code>db.userInfo.find().limit(1)</code>;</li>\n</ul>\n</li>\n<li>查询某个结果集的记录条数<ul>\n<li><code>db.userInfo.find({age: {$gte: 25}}).count()</code>;如果要返回限制之后的记录数量，要使用count(true)或者count(非0)</li>\n<li><code>db.users.find().skip(10).limit(5).count(true)</code>;</li>\n</ul>\n</li>\n<li>按照某列进行排序<ul>\n<li><code>db.userInfo.find({sex: {$exists: true}}).count()</code>;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>创建索引<ul>\n<li><code>db.userInfo.ensureIndex({name: 1})</code>;</li>\n<li><code>db.userInfo.ensureIndex({name: 1, ts: -1})</code>;</li>\n</ul>\n</li>\n<li>查询当前聚集集合所有索引<ul>\n<li><code>db.userInfo.getIndexes()</code>;</li>\n</ul>\n</li>\n<li>查看总索引记录大小<ul>\n<li><code>db.userInfo.totalIndexSize()</code>;</li>\n</ul>\n</li>\n<li>读取当前集合的所有index信息<ul>\n<li><code>db.users.reIndex()</code>;</li>\n</ul>\n</li>\n<li>删除指定索引<ul>\n<li><code>db.users.dropIndex(&quot;name_1&quot;)</code>;</li>\n</ul>\n</li>\n<li>删除所有索引<ul>\n<li><code>db.users.dropIndexes()</code>;</li>\n</ul>\n</li>\n</ul>"},{"title":"工具使用篇之Markdown","date":"2016-11-27T02:35:12.000Z","_content":"\n## Markdown 介绍\n\n- *Markdown* 是一个 **轻量级  高效率** 的标记语言\n- 轻量级标记语言，`2004` 年被 `John Gruber` 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 `HTML` 文档格式， 很多网站目前都使用了 `Markdown` 或者其变种，例如 `Github` 、简书等大型社区。\n\n<!--more-->\n\n## Markdown 使用场景\n\n- 学习笔记\n- 演讲稿\n- 写书（侧重于技术相关的 内容非常适合）\n- 个人笔记\n- 文章博客\n- 教学讲义\n- 说明文档\n- 电子邮件\n\n\n## Markdown 实时预览编辑器\n\n- dillinger\n- 马克飞象\n- 简书\n- MarkdownPad\n- Sublime Text\n    * 配合 Markdown Preview 插件\n- Webstorm\n    * 配合插件\n- gitbook\n\n实时预览工具只是为了达到所见即所得的效果而已， 适合初学者学习 `Markdown` ， 我们真正在进行写作的时候，其实是不需要实时预览的， 因为 Markdown 标记语言本身已经足够清晰了。\n\n## Markdown 安装和配置编写预览环境(sublime)\n\n- 按下键 `Ctrl+Shift+p` 调出命令面板，找到 `Package Control: install Pakage` 这一项。搜索 `markdown preview` ，点击安装。\n- `Markdown Preview` 较常用的功能是 `preview in browser` 和 `Export HTML in Sublime Text` ，前者可以在浏览器看到预览效果，后者可将 `markdown` 保存为 `html` 文件。\n- `preview in browser` 据称是实时的，但是实践上还是需要在 `st` 保存，然后浏览器刷新才能看到新的效果，好在 `markdown` 写得多的话也不需要每敲一行看一次效果。\n\n### Webstorm\n\n- 打开` webstorm` ，`File-->Setting-->输入plugin-->Install JetBrains plugin...-->输入markdown-->`点击右边的 `Install` ,安装完，重启 `webstorm`。\n\n### Visual Studio Code\n\n- `Visual Studio Code` 自带 `markdown` 预览,所以不需要安装插件,不过可以安装语法高亮主题\n\n### Sublime\n\n- MarkdownEditing 主题、自动补齐等功能\n- MarkdownPreview 在浏览器预览\n- MarkdownTOC 自动生成导航\n- Table Editor 自动表格编辑\n- [packagecontrol](https://packagecontrol.io/) Sublime 的插件生态系统网站\n\n只要有写作的地方，都可以使用 `Markdown` 来书写。\n\n## Markdown 标题书写\n\n```Markdown\n# 一级标题\n## 二级标题\n### 三级标题\n...\n###### 六级标签\n一共六级标题\n```\n\n## Markdown 列表书写语法\n\n### 无序列表\n\n- 一级列表建议使用 `-`\n    + 二级列表建议使用 `+`\n        * 三级列表建议使用 `*`\n\n```Markdown\n- 一级标题\n    + 二级标题\n        * 三级列表\n```\n\n### 有序列表\n\n1. 有序列表直接使用序列加一个点开头, 然后加一个\n2. 有序列表嵌套无序列表\n    - 有序列表中嵌套无需列表\n        + 有序列表中嵌套无需列表\n\n```Markdown\n2. 有序列表嵌套无序列表\n    - 有序列表嵌套无序列表\n        + 有序列表嵌套无序列表\n```\n\n3. 有序列表嵌套有序列表\n    1. 有序列表嵌套有序列表\n        1. 有序列表嵌套有序列表\n\n```Markdown\n3. 有序列表嵌套有序列表\n    1. 有序列表嵌套有序列表\n        1. 有序列表嵌套有序列表\n```\n\n#### 使用建议\n\n无论是有序列表还是无序列表,如果就写一级列表不嵌套就可以紧凑写到一起即可,如果嵌套多级列表最好在列表项之间只用空行隔开\n\n## Markdown 图片链接书写语法\n\n### Markdown 图片书写语法\n\n- `![图片](http://blog.ihoey.com/img/img.jpg)`\n\n### Markdown 链接书写语法\n\n- `[链接](http://blog.ihoey.com)`\n\n## 引用\n\n- `> 例如这样`\n\n> 例如这样\n\n## 粗体与斜体\n\n- `Markdown` 的粗体和斜体也非常简单，用两个 `*` 包含一段文本就是粗体的语法，用一个 `*` 包含一段文本就是斜体的语法\n\n```Markdown\n**这里是粗体**\n*这里是斜体*\n```\n\n## 表格\n\n```Markdown\n| 表头           | 表头            | 表头   |\n| :------------- | :-------------: | -----: |\n| 左对齐         | 居中对齐        | 右对齐 |\n| 左对齐         | 居中对齐        | 右对齐 |\n| 左对齐         | 居中对齐        | 右对齐 |\n```\n\n| 表头           | 表头            | 表头   |\n| :------------- | :-------------: | -----: |\n| 左对齐         | 居中对齐        | 右对齐 |\n| 左对齐         | 居中对齐        | 右对齐 |\n| 左对齐         | 居中对齐        | 右对齐 |\n\n## 代码框\n\n由三个 \\` 反引号包裹, 行内代码在代码前后加一个 \\` 反引号\n\n## 锚点\n\n```Markdown\n## 0. 目录{#index}\n跳转到[目录](#index)\n```\n\n## 分隔线\n\n```Markdown\n* * *\n***\n*****\n- - -\n---------------------------------------\n```\n\n显示效果都一样：\n\n***\n","source":"_posts/use-tools-part1-markdown.md","raw":"---\ntitle: 工具使用篇之Markdown\ndate: 2016-11-27 10:35:12\ntags:\n    - Markdown语法规范\n    - tools\ncategories: Markdown\n---\n\n## Markdown 介绍\n\n- *Markdown* 是一个 **轻量级  高效率** 的标记语言\n- 轻量级标记语言，`2004` 年被 `John Gruber` 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 `HTML` 文档格式， 很多网站目前都使用了 `Markdown` 或者其变种，例如 `Github` 、简书等大型社区。\n\n<!--more-->\n\n## Markdown 使用场景\n\n- 学习笔记\n- 演讲稿\n- 写书（侧重于技术相关的 内容非常适合）\n- 个人笔记\n- 文章博客\n- 教学讲义\n- 说明文档\n- 电子邮件\n\n\n## Markdown 实时预览编辑器\n\n- dillinger\n- 马克飞象\n- 简书\n- MarkdownPad\n- Sublime Text\n    * 配合 Markdown Preview 插件\n- Webstorm\n    * 配合插件\n- gitbook\n\n实时预览工具只是为了达到所见即所得的效果而已， 适合初学者学习 `Markdown` ， 我们真正在进行写作的时候，其实是不需要实时预览的， 因为 Markdown 标记语言本身已经足够清晰了。\n\n## Markdown 安装和配置编写预览环境(sublime)\n\n- 按下键 `Ctrl+Shift+p` 调出命令面板，找到 `Package Control: install Pakage` 这一项。搜索 `markdown preview` ，点击安装。\n- `Markdown Preview` 较常用的功能是 `preview in browser` 和 `Export HTML in Sublime Text` ，前者可以在浏览器看到预览效果，后者可将 `markdown` 保存为 `html` 文件。\n- `preview in browser` 据称是实时的，但是实践上还是需要在 `st` 保存，然后浏览器刷新才能看到新的效果，好在 `markdown` 写得多的话也不需要每敲一行看一次效果。\n\n### Webstorm\n\n- 打开` webstorm` ，`File-->Setting-->输入plugin-->Install JetBrains plugin...-->输入markdown-->`点击右边的 `Install` ,安装完，重启 `webstorm`。\n\n### Visual Studio Code\n\n- `Visual Studio Code` 自带 `markdown` 预览,所以不需要安装插件,不过可以安装语法高亮主题\n\n### Sublime\n\n- MarkdownEditing 主题、自动补齐等功能\n- MarkdownPreview 在浏览器预览\n- MarkdownTOC 自动生成导航\n- Table Editor 自动表格编辑\n- [packagecontrol](https://packagecontrol.io/) Sublime 的插件生态系统网站\n\n只要有写作的地方，都可以使用 `Markdown` 来书写。\n\n## Markdown 标题书写\n\n```Markdown\n# 一级标题\n## 二级标题\n### 三级标题\n...\n###### 六级标签\n一共六级标题\n```\n\n## Markdown 列表书写语法\n\n### 无序列表\n\n- 一级列表建议使用 `-`\n    + 二级列表建议使用 `+`\n        * 三级列表建议使用 `*`\n\n```Markdown\n- 一级标题\n    + 二级标题\n        * 三级列表\n```\n\n### 有序列表\n\n1. 有序列表直接使用序列加一个点开头, 然后加一个\n2. 有序列表嵌套无序列表\n    - 有序列表中嵌套无需列表\n        + 有序列表中嵌套无需列表\n\n```Markdown\n2. 有序列表嵌套无序列表\n    - 有序列表嵌套无序列表\n        + 有序列表嵌套无序列表\n```\n\n3. 有序列表嵌套有序列表\n    1. 有序列表嵌套有序列表\n        1. 有序列表嵌套有序列表\n\n```Markdown\n3. 有序列表嵌套有序列表\n    1. 有序列表嵌套有序列表\n        1. 有序列表嵌套有序列表\n```\n\n#### 使用建议\n\n无论是有序列表还是无序列表,如果就写一级列表不嵌套就可以紧凑写到一起即可,如果嵌套多级列表最好在列表项之间只用空行隔开\n\n## Markdown 图片链接书写语法\n\n### Markdown 图片书写语法\n\n- `![图片](http://blog.ihoey.com/img/img.jpg)`\n\n### Markdown 链接书写语法\n\n- `[链接](http://blog.ihoey.com)`\n\n## 引用\n\n- `> 例如这样`\n\n> 例如这样\n\n## 粗体与斜体\n\n- `Markdown` 的粗体和斜体也非常简单，用两个 `*` 包含一段文本就是粗体的语法，用一个 `*` 包含一段文本就是斜体的语法\n\n```Markdown\n**这里是粗体**\n*这里是斜体*\n```\n\n## 表格\n\n```Markdown\n| 表头           | 表头            | 表头   |\n| :------------- | :-------------: | -----: |\n| 左对齐         | 居中对齐        | 右对齐 |\n| 左对齐         | 居中对齐        | 右对齐 |\n| 左对齐         | 居中对齐        | 右对齐 |\n```\n\n| 表头           | 表头            | 表头   |\n| :------------- | :-------------: | -----: |\n| 左对齐         | 居中对齐        | 右对齐 |\n| 左对齐         | 居中对齐        | 右对齐 |\n| 左对齐         | 居中对齐        | 右对齐 |\n\n## 代码框\n\n由三个 \\` 反引号包裹, 行内代码在代码前后加一个 \\` 反引号\n\n## 锚点\n\n```Markdown\n## 0. 目录{#index}\n跳转到[目录](#index)\n```\n\n## 分隔线\n\n```Markdown\n* * *\n***\n*****\n- - -\n---------------------------------------\n```\n\n显示效果都一样：\n\n***\n","slug":"use-tools-part1-markdown","published":1,"updated":"2017-01-11T12:28:08.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvpc003fuwg7029rqi7p","content":"<h2 id=\"Markdown-介绍\"><a href=\"#Markdown-介绍\" class=\"headerlink\" title=\"Markdown 介绍\"></a>Markdown 介绍</h2><ul>\n<li><em>Markdown</em> 是一个 <strong>轻量级  高效率</strong> 的标记语言</li>\n<li>轻量级标记语言，<code>2004</code> 年被 <code>John Gruber</code> 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 <code>HTML</code> 文档格式， 很多网站目前都使用了 <code>Markdown</code> 或者其变种，例如 <code>Github</code> 、简书等大型社区。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Markdown-使用场景\"><a href=\"#Markdown-使用场景\" class=\"headerlink\" title=\"Markdown 使用场景\"></a>Markdown 使用场景</h2><ul>\n<li>学习笔记</li>\n<li>演讲稿</li>\n<li>写书（侧重于技术相关的 内容非常适合）</li>\n<li>个人笔记</li>\n<li>文章博客</li>\n<li>教学讲义</li>\n<li>说明文档</li>\n<li>电子邮件</li>\n</ul>\n<h2 id=\"Markdown-实时预览编辑器\"><a href=\"#Markdown-实时预览编辑器\" class=\"headerlink\" title=\"Markdown 实时预览编辑器\"></a>Markdown 实时预览编辑器</h2><ul>\n<li>dillinger</li>\n<li>马克飞象</li>\n<li>简书</li>\n<li>MarkdownPad</li>\n<li>Sublime Text<ul>\n<li>配合 Markdown Preview 插件</li>\n</ul>\n</li>\n<li>Webstorm<ul>\n<li>配合插件</li>\n</ul>\n</li>\n<li>gitbook</li>\n</ul>\n<p>实时预览工具只是为了达到所见即所得的效果而已， 适合初学者学习 <code>Markdown</code> ， 我们真正在进行写作的时候，其实是不需要实时预览的， 因为 Markdown 标记语言本身已经足够清晰了。</p>\n<h2 id=\"Markdown-安装和配置编写预览环境-sublime\"><a href=\"#Markdown-安装和配置编写预览环境-sublime\" class=\"headerlink\" title=\"Markdown 安装和配置编写预览环境(sublime)\"></a>Markdown 安装和配置编写预览环境(sublime)</h2><ul>\n<li>按下键 <code>Ctrl+Shift+p</code> 调出命令面板，找到 <code>Package Control: install Pakage</code> 这一项。搜索 <code>markdown preview</code> ，点击安装。</li>\n<li><code>Markdown Preview</code> 较常用的功能是 <code>preview in browser</code> 和 <code>Export HTML in Sublime Text</code> ，前者可以在浏览器看到预览效果，后者可将 <code>markdown</code> 保存为 <code>html</code> 文件。</li>\n<li><code>preview in browser</code> 据称是实时的，但是实践上还是需要在 <code>st</code> 保存，然后浏览器刷新才能看到新的效果，好在 <code>markdown</code> 写得多的话也不需要每敲一行看一次效果。</li>\n</ul>\n<h3 id=\"Webstorm\"><a href=\"#Webstorm\" class=\"headerlink\" title=\"Webstorm\"></a>Webstorm</h3><ul>\n<li>打开<code>webstorm</code> ，<code>File--&gt;Setting--&gt;输入plugin--&gt;Install JetBrains plugin...--&gt;输入markdown--&gt;</code>点击右边的 <code>Install</code> ,安装完，重启 <code>webstorm</code>。</li>\n</ul>\n<h3 id=\"Visual-Studio-Code\"><a href=\"#Visual-Studio-Code\" class=\"headerlink\" title=\"Visual Studio Code\"></a>Visual Studio Code</h3><ul>\n<li><code>Visual Studio Code</code> 自带 <code>markdown</code> 预览,所以不需要安装插件,不过可以安装语法高亮主题</li>\n</ul>\n<h3 id=\"Sublime\"><a href=\"#Sublime\" class=\"headerlink\" title=\"Sublime\"></a>Sublime</h3><ul>\n<li>MarkdownEditing 主题、自动补齐等功能</li>\n<li>MarkdownPreview 在浏览器预览</li>\n<li>MarkdownTOC 自动生成导航</li>\n<li>Table Editor 自动表格编辑</li>\n<li><a href=\"https://packagecontrol.io/\" target=\"_blank\" rel=\"external\">packagecontrol</a> Sublime 的插件生态系统网站</li>\n</ul>\n<p>只要有写作的地方，都可以使用 <code>Markdown</code> 来书写。</p>\n<h2 id=\"Markdown-标题书写\"><a href=\"#Markdown-标题书写\" class=\"headerlink\" title=\"Markdown 标题书写\"></a>Markdown 标题书写</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># 一级标题</span></div><div class=\"line\"><span class=\"section\">## 二级标题</span></div><div class=\"line\"><span class=\"section\">### 三级标题</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"section\">###### 六级标签</span></div><div class=\"line\">一共六级标题</div></pre></td></tr></table></figure>\n<h2 id=\"Markdown-列表书写语法\"><a href=\"#Markdown-列表书写语法\" class=\"headerlink\" title=\"Markdown 列表书写语法\"></a>Markdown 列表书写语法</h2><h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><ul>\n<li>一级列表建议使用 <code>-</code><ul>\n<li>二级列表建议使用 <code>+</code><ul>\n<li>三级列表建议使用 <code>*</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">- </span>一级标题</div><div class=\"line\"><span class=\"code\">    + 二级标题</span></div><div class=\"line\"><span class=\"code\">        * 三级列表</span></div></pre></td></tr></table></figure>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><ol>\n<li>有序列表直接使用序列加一个点开头, 然后加一个</li>\n<li>有序列表嵌套无序列表<ul>\n<li>有序列表中嵌套无需列表<ul>\n<li>有序列表中嵌套无需列表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">2. </span>有序列表嵌套无序列表</div><div class=\"line\"><span class=\"code\">    - 有序列表嵌套无序列表</span></div><div class=\"line\"><span class=\"code\">        + 有序列表嵌套无序列表</span></div></pre></td></tr></table></figure>\n<ol>\n<li>有序列表嵌套有序列表<ol>\n<li>有序列表嵌套有序列表<ol>\n<li>有序列表嵌套有序列表</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">3. </span>有序列表嵌套有序列表</div><div class=\"line\"><span class=\"code\">    1. 有序列表嵌套有序列表</span></div><div class=\"line\"><span class=\"code\">        1. 有序列表嵌套有序列表</span></div></pre></td></tr></table></figure>\n<h4 id=\"使用建议\"><a href=\"#使用建议\" class=\"headerlink\" title=\"使用建议\"></a>使用建议</h4><p>无论是有序列表还是无序列表,如果就写一级列表不嵌套就可以紧凑写到一起即可,如果嵌套多级列表最好在列表项之间只用空行隔开</p>\n<h2 id=\"Markdown-图片链接书写语法\"><a href=\"#Markdown-图片链接书写语法\" class=\"headerlink\" title=\"Markdown 图片链接书写语法\"></a>Markdown 图片链接书写语法</h2><h3 id=\"Markdown-图片书写语法\"><a href=\"#Markdown-图片书写语法\" class=\"headerlink\" title=\"Markdown 图片书写语法\"></a>Markdown 图片书写语法</h3><ul>\n<li><code>![图片](http://blog.ihoey.com/img/img.jpg)</code></li>\n</ul>\n<h3 id=\"Markdown-链接书写语法\"><a href=\"#Markdown-链接书写语法\" class=\"headerlink\" title=\"Markdown 链接书写语法\"></a>Markdown 链接书写语法</h3><ul>\n<li><code>[链接](http://blog.ihoey.com)</code></li>\n</ul>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><ul>\n<li><code>&gt; 例如这样</code></li>\n</ul>\n<blockquote>\n<p>例如这样</p>\n</blockquote>\n<h2 id=\"粗体与斜体\"><a href=\"#粗体与斜体\" class=\"headerlink\" title=\"粗体与斜体\"></a>粗体与斜体</h2><ul>\n<li><code>Markdown</code> 的粗体和斜体也非常简单，用两个 <code>*</code> 包含一段文本就是粗体的语法，用一个 <code>*</code> 包含一段文本就是斜体的语法</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"strong\">**这里是粗体**</span></div><div class=\"line\"><span class=\"emphasis\">*这里是斜体*</span></div></pre></td></tr></table></figure>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">| 表头           | 表头            | 表头   |</div><div class=\"line\">| :------------- | :-------------: | -----: |</div><div class=\"line\">| 左对齐         | 居中对齐        | 右对齐 |</div><div class=\"line\">| 左对齐         | 居中对齐        | 右对齐 |</div><div class=\"line\">| 左对齐         | 居中对齐        | 右对齐 |</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">表头</th>\n<th style=\"text-align:center\">表头</th>\n<th style=\"text-align:right\">表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">左对齐</td>\n<td style=\"text-align:center\">居中对齐</td>\n<td style=\"text-align:right\">右对齐</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">左对齐</td>\n<td style=\"text-align:center\">居中对齐</td>\n<td style=\"text-align:right\">右对齐</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">左对齐</td>\n<td style=\"text-align:center\">居中对齐</td>\n<td style=\"text-align:right\">右对齐</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"代码框\"><a href=\"#代码框\" class=\"headerlink\" title=\"代码框\"></a>代码框</h2><p>由三个 ` 反引号包裹, 行内代码在代码前后加一个 ` 反引号</p>\n<h2 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">## 0. 目录&#123;#index&#125;</span></div><div class=\"line\">跳转到[<span class=\"string\">目录</span>](<span class=\"link\">#index</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span></div><div class=\"line\"><span class=\"emphasis\">***</span></div><div class=\"line\"><span class=\"strong\">*****</span></div><div class=\"line\"><span class=\"section\">- - -</span></div><div class=\"line\">---------------------------------------</div></pre></td></tr></table></figure>\n<p>显示效果都一样：</p>\n<hr>\n","excerpt":"<h2 id=\"Markdown-介绍\"><a href=\"#Markdown-介绍\" class=\"headerlink\" title=\"Markdown 介绍\"></a>Markdown 介绍</h2><ul>\n<li><em>Markdown</em> 是一个 <strong>轻量级  高效率</strong> 的标记语言</li>\n<li>轻量级标记语言，<code>2004</code> 年被 <code>John Gruber</code> 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 <code>HTML</code> 文档格式， 很多网站目前都使用了 <code>Markdown</code> 或者其变种，例如 <code>Github</code> 、简书等大型社区。</li>\n</ul>","more":"<h2 id=\"Markdown-使用场景\"><a href=\"#Markdown-使用场景\" class=\"headerlink\" title=\"Markdown 使用场景\"></a>Markdown 使用场景</h2><ul>\n<li>学习笔记</li>\n<li>演讲稿</li>\n<li>写书（侧重于技术相关的 内容非常适合）</li>\n<li>个人笔记</li>\n<li>文章博客</li>\n<li>教学讲义</li>\n<li>说明文档</li>\n<li>电子邮件</li>\n</ul>\n<h2 id=\"Markdown-实时预览编辑器\"><a href=\"#Markdown-实时预览编辑器\" class=\"headerlink\" title=\"Markdown 实时预览编辑器\"></a>Markdown 实时预览编辑器</h2><ul>\n<li>dillinger</li>\n<li>马克飞象</li>\n<li>简书</li>\n<li>MarkdownPad</li>\n<li>Sublime Text<ul>\n<li>配合 Markdown Preview 插件</li>\n</ul>\n</li>\n<li>Webstorm<ul>\n<li>配合插件</li>\n</ul>\n</li>\n<li>gitbook</li>\n</ul>\n<p>实时预览工具只是为了达到所见即所得的效果而已， 适合初学者学习 <code>Markdown</code> ， 我们真正在进行写作的时候，其实是不需要实时预览的， 因为 Markdown 标记语言本身已经足够清晰了。</p>\n<h2 id=\"Markdown-安装和配置编写预览环境-sublime\"><a href=\"#Markdown-安装和配置编写预览环境-sublime\" class=\"headerlink\" title=\"Markdown 安装和配置编写预览环境(sublime)\"></a>Markdown 安装和配置编写预览环境(sublime)</h2><ul>\n<li>按下键 <code>Ctrl+Shift+p</code> 调出命令面板，找到 <code>Package Control: install Pakage</code> 这一项。搜索 <code>markdown preview</code> ，点击安装。</li>\n<li><code>Markdown Preview</code> 较常用的功能是 <code>preview in browser</code> 和 <code>Export HTML in Sublime Text</code> ，前者可以在浏览器看到预览效果，后者可将 <code>markdown</code> 保存为 <code>html</code> 文件。</li>\n<li><code>preview in browser</code> 据称是实时的，但是实践上还是需要在 <code>st</code> 保存，然后浏览器刷新才能看到新的效果，好在 <code>markdown</code> 写得多的话也不需要每敲一行看一次效果。</li>\n</ul>\n<h3 id=\"Webstorm\"><a href=\"#Webstorm\" class=\"headerlink\" title=\"Webstorm\"></a>Webstorm</h3><ul>\n<li>打开<code>webstorm</code> ，<code>File--&gt;Setting--&gt;输入plugin--&gt;Install JetBrains plugin...--&gt;输入markdown--&gt;</code>点击右边的 <code>Install</code> ,安装完，重启 <code>webstorm</code>。</li>\n</ul>\n<h3 id=\"Visual-Studio-Code\"><a href=\"#Visual-Studio-Code\" class=\"headerlink\" title=\"Visual Studio Code\"></a>Visual Studio Code</h3><ul>\n<li><code>Visual Studio Code</code> 自带 <code>markdown</code> 预览,所以不需要安装插件,不过可以安装语法高亮主题</li>\n</ul>\n<h3 id=\"Sublime\"><a href=\"#Sublime\" class=\"headerlink\" title=\"Sublime\"></a>Sublime</h3><ul>\n<li>MarkdownEditing 主题、自动补齐等功能</li>\n<li>MarkdownPreview 在浏览器预览</li>\n<li>MarkdownTOC 自动生成导航</li>\n<li>Table Editor 自动表格编辑</li>\n<li><a href=\"https://packagecontrol.io/\">packagecontrol</a> Sublime 的插件生态系统网站</li>\n</ul>\n<p>只要有写作的地方，都可以使用 <code>Markdown</code> 来书写。</p>\n<h2 id=\"Markdown-标题书写\"><a href=\"#Markdown-标题书写\" class=\"headerlink\" title=\"Markdown 标题书写\"></a>Markdown 标题书写</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># 一级标题</span></div><div class=\"line\"><span class=\"section\">## 二级标题</span></div><div class=\"line\"><span class=\"section\">### 三级标题</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"section\">###### 六级标签</span></div><div class=\"line\">一共六级标题</div></pre></td></tr></table></figure>\n<h2 id=\"Markdown-列表书写语法\"><a href=\"#Markdown-列表书写语法\" class=\"headerlink\" title=\"Markdown 列表书写语法\"></a>Markdown 列表书写语法</h2><h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><ul>\n<li>一级列表建议使用 <code>-</code><ul>\n<li>二级列表建议使用 <code>+</code><ul>\n<li>三级列表建议使用 <code>*</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">- </span>一级标题</div><div class=\"line\"><span class=\"code\">    + 二级标题</span></div><div class=\"line\"><span class=\"code\">        * 三级列表</span></div></pre></td></tr></table></figure>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><ol>\n<li>有序列表直接使用序列加一个点开头, 然后加一个</li>\n<li>有序列表嵌套无序列表<ul>\n<li>有序列表中嵌套无需列表<ul>\n<li>有序列表中嵌套无需列表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">2. </span>有序列表嵌套无序列表</div><div class=\"line\"><span class=\"code\">    - 有序列表嵌套无序列表</span></div><div class=\"line\"><span class=\"code\">        + 有序列表嵌套无序列表</span></div></pre></td></tr></table></figure>\n<ol>\n<li>有序列表嵌套有序列表<ol>\n<li>有序列表嵌套有序列表<ol>\n<li>有序列表嵌套有序列表</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">3. </span>有序列表嵌套有序列表</div><div class=\"line\"><span class=\"code\">    1. 有序列表嵌套有序列表</span></div><div class=\"line\"><span class=\"code\">        1. 有序列表嵌套有序列表</span></div></pre></td></tr></table></figure>\n<h4 id=\"使用建议\"><a href=\"#使用建议\" class=\"headerlink\" title=\"使用建议\"></a>使用建议</h4><p>无论是有序列表还是无序列表,如果就写一级列表不嵌套就可以紧凑写到一起即可,如果嵌套多级列表最好在列表项之间只用空行隔开</p>\n<h2 id=\"Markdown-图片链接书写语法\"><a href=\"#Markdown-图片链接书写语法\" class=\"headerlink\" title=\"Markdown 图片链接书写语法\"></a>Markdown 图片链接书写语法</h2><h3 id=\"Markdown-图片书写语法\"><a href=\"#Markdown-图片书写语法\" class=\"headerlink\" title=\"Markdown 图片书写语法\"></a>Markdown 图片书写语法</h3><ul>\n<li><code>![图片](http://blog.ihoey.com/img/img.jpg)</code></li>\n</ul>\n<h3 id=\"Markdown-链接书写语法\"><a href=\"#Markdown-链接书写语法\" class=\"headerlink\" title=\"Markdown 链接书写语法\"></a>Markdown 链接书写语法</h3><ul>\n<li><code>[链接](http://blog.ihoey.com)</code></li>\n</ul>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><ul>\n<li><code>&gt; 例如这样</code></li>\n</ul>\n<blockquote>\n<p>例如这样</p>\n</blockquote>\n<h2 id=\"粗体与斜体\"><a href=\"#粗体与斜体\" class=\"headerlink\" title=\"粗体与斜体\"></a>粗体与斜体</h2><ul>\n<li><code>Markdown</code> 的粗体和斜体也非常简单，用两个 <code>*</code> 包含一段文本就是粗体的语法，用一个 <code>*</code> 包含一段文本就是斜体的语法</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"strong\">**这里是粗体**</span></div><div class=\"line\"><span class=\"emphasis\">*这里是斜体*</span></div></pre></td></tr></table></figure>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">| 表头           | 表头            | 表头   |</div><div class=\"line\">| :------------- | :-------------: | -----: |</div><div class=\"line\">| 左对齐         | 居中对齐        | 右对齐 |</div><div class=\"line\">| 左对齐         | 居中对齐        | 右对齐 |</div><div class=\"line\">| 左对齐         | 居中对齐        | 右对齐 |</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">表头</th>\n<th style=\"text-align:center\">表头</th>\n<th style=\"text-align:right\">表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">左对齐</td>\n<td style=\"text-align:center\">居中对齐</td>\n<td style=\"text-align:right\">右对齐</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">左对齐</td>\n<td style=\"text-align:center\">居中对齐</td>\n<td style=\"text-align:right\">右对齐</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">左对齐</td>\n<td style=\"text-align:center\">居中对齐</td>\n<td style=\"text-align:right\">右对齐</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"代码框\"><a href=\"#代码框\" class=\"headerlink\" title=\"代码框\"></a>代码框</h2><p>由三个 ` 反引号包裹, 行内代码在代码前后加一个 ` 反引号</p>\n<h2 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">## 0. 目录&#123;#index&#125;</span></div><div class=\"line\">跳转到[<span class=\"string\">目录</span>](<span class=\"link\">#index</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">* </span><span class=\"bullet\">* *</span></div><div class=\"line\"><span class=\"emphasis\">***</span></div><div class=\"line\"><span class=\"strong\">*****</span></div><div class=\"line\"><span class=\"section\">- - -</div><div class=\"line\">---------------------------------------</span></div></pre></td></tr></table></figure>\n<p>显示效果都一样：</p>\n<hr>"},{"title":"MongoDB安装笔记","date":"2017-03-23T08:25:11.000Z","_content":"\n## mongodb概述\n\n- `MongoDB` 是一个跨平台的，面向文档的数据库，提供高性能，高可用性和可扩展性方便. `MongoDB` 将数据存储为一个文档，数据结构由键值 `(key=>value)` 对组成。`MongoDB` 文档类似于 `JSON` 对象。字段值可以包含其他文档，数组及文档数组。\n\n<!--more-->\n\n## mongodb安装\n\n    mongodb下载地址 `https://www.mongodb.com/download-center#community` ,在此选择对应的系统版本进行安装\n\n- `Windows` 系统的安装, 直接下一步即可\n    + 对不知道系统版本和位数的同学这里提供两个命令可查看当前`Windows`系统的版本和位数.\n```sh\n    wmic os get caption\n    wmic os get osarchitecture\n```\n\n- `Linux` 系统的安装:\n    + 导入包管理系统使用的公钥 `sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6`\n    + 为MongoDB创建一个列表文件:\n        * `Ubuntu 12.04` 版本: `echo \"deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list`\n        * `Ubuntu 14.04` 版本: `echo \"deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list`\n        * `Ubuntu 16.04` 版本: `echo \"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list`\n    + 重新加载本地包数据库 `sudo apt-get update`\n    + 安装`MongoDB`包 `sudo apt-get install -y mongodb-org`\n\n- `OS X` 系统的安装\n    + 下载 `curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.2.tgz`\n    + 解压 `tar -zxvf mongodb-osx-x86_64-3.4.2.tgz`\n    + 指定存放文件夹 `mkdir -p mongodb && cp -R -n mongodb-osx-x86_64-3.4.2 / mongodb`\n    + 设置变量添加到`shell`的 `rc`文件中（例如`~/.bashrc`）： `export  PATH = <mongodb-install-directory> / bin：$ PATH`\n\n## 运行\n\n - 创建数据目录(我这里是在`D`盘下) `mkdir -p /Server-related/DB`\n - 设置数据文件路径(在`mongodb`安装目录下运行) `mongod --dbpath=D:\\Server-related\\DB`\n\n## 连接mongodb\n\n- 打开`mongodb`安装目录下的 `mongo.exe`\n","source":"_posts/mongodb.md","raw":"---\ntitle: MongoDB安装笔记\ndate: 2017-03-23 16:25:11\ntags:\n    - MongoDB\n    - NoSQL\ncategories: MongoDB\n---\n\n## mongodb概述\n\n- `MongoDB` 是一个跨平台的，面向文档的数据库，提供高性能，高可用性和可扩展性方便. `MongoDB` 将数据存储为一个文档，数据结构由键值 `(key=>value)` 对组成。`MongoDB` 文档类似于 `JSON` 对象。字段值可以包含其他文档，数组及文档数组。\n\n<!--more-->\n\n## mongodb安装\n\n    mongodb下载地址 `https://www.mongodb.com/download-center#community` ,在此选择对应的系统版本进行安装\n\n- `Windows` 系统的安装, 直接下一步即可\n    + 对不知道系统版本和位数的同学这里提供两个命令可查看当前`Windows`系统的版本和位数.\n```sh\n    wmic os get caption\n    wmic os get osarchitecture\n```\n\n- `Linux` 系统的安装:\n    + 导入包管理系统使用的公钥 `sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6`\n    + 为MongoDB创建一个列表文件:\n        * `Ubuntu 12.04` 版本: `echo \"deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list`\n        * `Ubuntu 14.04` 版本: `echo \"deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list`\n        * `Ubuntu 16.04` 版本: `echo \"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list`\n    + 重新加载本地包数据库 `sudo apt-get update`\n    + 安装`MongoDB`包 `sudo apt-get install -y mongodb-org`\n\n- `OS X` 系统的安装\n    + 下载 `curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.2.tgz`\n    + 解压 `tar -zxvf mongodb-osx-x86_64-3.4.2.tgz`\n    + 指定存放文件夹 `mkdir -p mongodb && cp -R -n mongodb-osx-x86_64-3.4.2 / mongodb`\n    + 设置变量添加到`shell`的 `rc`文件中（例如`~/.bashrc`）： `export  PATH = <mongodb-install-directory> / bin：$ PATH`\n\n## 运行\n\n - 创建数据目录(我这里是在`D`盘下) `mkdir -p /Server-related/DB`\n - 设置数据文件路径(在`mongodb`安装目录下运行) `mongod --dbpath=D:\\Server-related\\DB`\n\n## 连接mongodb\n\n- 打开`mongodb`安装目录下的 `mongo.exe`\n","slug":"mongodb","published":1,"updated":"2017-04-10T03:50:56.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvpe003juwg7q0o8ab7o","content":"<h2 id=\"mongodb概述\"><a href=\"#mongodb概述\" class=\"headerlink\" title=\"mongodb概述\"></a>mongodb概述</h2><ul>\n<li><code>MongoDB</code> 是一个跨平台的，面向文档的数据库，提供高性能，高可用性和可扩展性方便. <code>MongoDB</code> 将数据存储为一个文档，数据结构由键值 <code>(key=&gt;value)</code> 对组成。<code>MongoDB</code> 文档类似于 <code>JSON</code> 对象。字段值可以包含其他文档，数组及文档数组。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"mongodb安装\"><a href=\"#mongodb安装\" class=\"headerlink\" title=\"mongodb安装\"></a>mongodb安装</h2><pre><code>mongodb下载地址 `https://www.mongodb.com/download-center#community` ,在此选择对应的系统版本进行安装\n</code></pre><ul>\n<li><p><code>Windows</code> 系统的安装, 直接下一步即可</p>\n<ul>\n<li>对不知道系统版本和位数的同学这里提供两个命令可查看当前<code>Windows</code>系统的版本和位数.<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wmic os get caption</div><div class=\"line\">wmic os get osarchitecture</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>Linux</code> 系统的安装:</p>\n<ul>\n<li>导入包管理系统使用的公钥 <code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6</code></li>\n<li>为MongoDB创建一个列表文件:<ul>\n<li><code>Ubuntu 12.04</code> 版本: <code>echo &quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></li>\n<li><code>Ubuntu 14.04</code> 版本: <code>echo &quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></li>\n<li><code>Ubuntu 16.04</code> 版本: <code>echo &quot;deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></li>\n</ul>\n</li>\n<li>重新加载本地包数据库 <code>sudo apt-get update</code></li>\n<li>安装<code>MongoDB</code>包 <code>sudo apt-get install -y mongodb-org</code></li>\n</ul>\n</li>\n<li><p><code>OS X</code> 系统的安装</p>\n<ul>\n<li>下载 <code>curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.2.tgz</code></li>\n<li>解压 <code>tar -zxvf mongodb-osx-x86_64-3.4.2.tgz</code></li>\n<li>指定存放文件夹 <code>mkdir -p mongodb &amp;&amp; cp -R -n mongodb-osx-x86_64-3.4.2 / mongodb</code></li>\n<li>设置变量添加到<code>shell</code>的 <code>rc</code>文件中（例如<code>~/.bashrc</code>）： <code>export  PATH = &lt;mongodb-install-directory&gt; / bin：$ PATH</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ul>\n<li>创建数据目录(我这里是在<code>D</code>盘下) <code>mkdir -p /Server-related/DB</code></li>\n<li>设置数据文件路径(在<code>mongodb</code>安装目录下运行) <code>mongod --dbpath=D:\\Server-related\\DB</code></li>\n</ul>\n<h2 id=\"连接mongodb\"><a href=\"#连接mongodb\" class=\"headerlink\" title=\"连接mongodb\"></a>连接mongodb</h2><ul>\n<li>打开<code>mongodb</code>安装目录下的 <code>mongo.exe</code></li>\n</ul>\n","excerpt":"<h2 id=\"mongodb概述\"><a href=\"#mongodb概述\" class=\"headerlink\" title=\"mongodb概述\"></a>mongodb概述</h2><ul>\n<li><code>MongoDB</code> 是一个跨平台的，面向文档的数据库，提供高性能，高可用性和可扩展性方便. <code>MongoDB</code> 将数据存储为一个文档，数据结构由键值 <code>(key=&gt;value)</code> 对组成。<code>MongoDB</code> 文档类似于 <code>JSON</code> 对象。字段值可以包含其他文档，数组及文档数组。</li>\n</ul>","more":"<h2 id=\"mongodb安装\"><a href=\"#mongodb安装\" class=\"headerlink\" title=\"mongodb安装\"></a>mongodb安装</h2><pre><code>mongodb下载地址 `https://www.mongodb.com/download-center#community` ,在此选择对应的系统版本进行安装\n</code></pre><ul>\n<li><p><code>Windows</code> 系统的安装, 直接下一步即可</p>\n<ul>\n<li>对不知道系统版本和位数的同学这里提供两个命令可查看当前<code>Windows</code>系统的版本和位数.<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wmic os get caption</div><div class=\"line\">wmic os get osarchitecture</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>Linux</code> 系统的安装:</p>\n<ul>\n<li>导入包管理系统使用的公钥 <code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6</code></li>\n<li>为MongoDB创建一个列表文件:<ul>\n<li><code>Ubuntu 12.04</code> 版本: <code>echo &quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></li>\n<li><code>Ubuntu 14.04</code> 版本: <code>echo &quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></li>\n<li><code>Ubuntu 16.04</code> 版本: <code>echo &quot;deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></li>\n</ul>\n</li>\n<li>重新加载本地包数据库 <code>sudo apt-get update</code></li>\n<li>安装<code>MongoDB</code>包 <code>sudo apt-get install -y mongodb-org</code></li>\n</ul>\n</li>\n<li><p><code>OS X</code> 系统的安装</p>\n<ul>\n<li>下载 <code>curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.2.tgz</code></li>\n<li>解压 <code>tar -zxvf mongodb-osx-x86_64-3.4.2.tgz</code></li>\n<li>指定存放文件夹 <code>mkdir -p mongodb &amp;&amp; cp -R -n mongodb-osx-x86_64-3.4.2 / mongodb</code></li>\n<li>设置变量添加到<code>shell</code>的 <code>rc</code>文件中（例如<code>~/.bashrc</code>）： <code>export  PATH = &lt;mongodb-install-directory&gt; / bin：$ PATH</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ul>\n<li>创建数据目录(我这里是在<code>D</code>盘下) <code>mkdir -p /Server-related/DB</code></li>\n<li>设置数据文件路径(在<code>mongodb</code>安装目录下运行) <code>mongod --dbpath=D:\\Server-related\\DB</code></li>\n</ul>\n<h2 id=\"连接mongodb\"><a href=\"#连接mongodb\" class=\"headerlink\" title=\"连接mongodb\"></a>连接mongodb</h2><ul>\n<li>打开<code>mongodb</code>安装目录下的 <code>mongo.exe</code></li>\n</ul>"},{"title":"NPM 学习笔记整理","date":"2017-05-09T19:25:24.000Z","_content":"\n# 什么是 NPM\n\n`npm` 之于 `Node` ，就像 `pip` 之于 `Python` , `gem` 之于 `Ruby` , `composer` 之于 `PHP` 。\n\n`npm` 是 `Node` 官方提供的包管理工具，他已经成了 `Node` 包的标准发布平台，用于 `Node` 包的发布、传播、依赖控制。\n`npm` 提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。\n\n<!-- more -->\n\n# 为什么要使用 NPM\n\n`npm` 是随同 `Node` 一起安装的包管理工具，能解决 `Node` 代码部署上的很多问题，常见的场景有以下几种：\n\n- 允许用户从 `npm` 服务器下载别人编写的第三方包到本地使用。\n- 允许用户从 `npm` 服务器下载并安装别人编写的命令行程序到本地使用。\n- 允许用户将自己编写的包或命令行程序上传到 `npm` 服务器供别人使用。\n\n`npm` 的背后，是基于 `CouchDB` 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。\n\n# 如何使用 NPM\n\n## 安装\n\n`npm` 不需要单独安装。在安装 `Node` 的时候，会连带一起安装 `npm` 。但是，`Node` 附带的 `npm` 可能不是最新版本，最后用下面的命令，更新到最新版本。\n\n```bash\n$ sudo npm install npm@latest -g\n```\n\n如果是 Window 系统使用以下命令即可：\n\n```bash\nnpm install npm -g\n```\n\n也就是使用 `npm` 安装自己。之所以可以这样，是因为 `npm` 本身与 `Node` 的其他模块没有区别。\n\n然后，运行下面的命令，查看各种信息。\n\n```bash\n# 查看 npm 命令列表\n$ npm help\n\n# 查看各个命令的简单用法\n$ npm -l\n\n# 查看 npm 的版本\n$ npm -v\n\n# 查看 npm 的配置\n$ npm config list -l\n```\n\n## 使用\n\n### npm init\n\n`npm init` 用来初始化生成一个新的 `package.json` 文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。\n如果使用了 `-f`（代表`force`）、`-y`（代表`yes`），则跳过提问阶段，直接生成一个新的 `package.json` 文件。\n\n``` bash\n$ npm init -y\n```\n\n### npm set\n\n`npm set` 用来设置环境变量\n\n``` bash\n$ npm set init-author-name 'Your name'\n$ npm set init-author-email 'Your email'\n$ npm set init-author-url 'http://yourdomain.com'\n$ npm set init-license 'MIT'\n```\n\n上面命令等于为 `npm init` 设置了默认值，以后执行 `npm init` 的时候，`package.json `的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的 `~/.npmrc`文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行 `npm config`。\n\n### npm info\n\n`npm info` 命令可以查看每个模块的具体信息。比如，查看 `underscore` 模块的信息。\n\n``` bash\n$ npm info underscore\n```\n\n上面命令返回一个 `JavaScript` 对象，包含了 `underscore` 模块的详细信息。这个对象的每个成员，都可以直接从 `info` 命令查询。\n\n``` bash\n$ npm info underscore description\n\n$ npm info underscore homepage\n\n$ npm info underscore version\n```\n\n### npm search\n\n`npm search` 命令用于搜索 `npm` 仓库，它后面可以跟字符串，也可以跟正则表达式。\n\n``` bash\n$ npm search <搜索词>\n```\n\n### npm list\n\n`npm list` 命令以树形结构列出当前项目安装的所有模块，以及它们依赖的模块。\n\n``` bash\n$ npm list\n\n# 加上 global 参数，会列出全局安装的模块\n$ npm list -global\n\n# npm list 命令也可以列出单个模块\n$ npm list underscore\n```\n\n### npm install\n\n使用 `npm` 安装包的命令格式为：`npm [install/i] [package_name]`\n\n#### 本地模式和全局模式\n\n`npm` 在默认情况下会从 [NPM](http://npmjs.org) 搜索或下载包，将包安装到当前目录的 `node_modules` 子目录下。\n\n如果你熟悉 `Ruby` 的 `gem` 或者 `Python` 的 `pip` ，你会发现 `npm` 与它们的行为不同， `gem` 或 `pip` 总是以全局模式安装，使包可以供所有的程序使用，而 `npm` 默认会把包安装到当前目录下。这反映了 `npm` 不同的设计哲学。如果把包安装到全局，可以提供程序的重复利用程度，避免同样的内容的多分副本，但坏处是难以处理不同的版本依赖。如果把包安装到当前目录，或者说本地，则不会有不同程序依赖不同版本的包的冲突问题，同时还减轻了包作者的 `API` 兼容性压力，但缺陷则是同一个包可能会被安装许多次。\n\n我们在使用 `supervisor` 的时候使用了 `npm install -g supervisor` 命令，就是以全局模式安装 `supervisor` 。\n\n这里注意一点的就是， `supervisor` 必须安装到全局，如果你不安装到全局，错误命令会提示你安装到全局。如果不想安装到默认的全局，也可以自己修改全局路径到当前路径 `npm config set prefix \"路径\"` 安装完以后就可以用 `supervisor` 来启动服务了。\n`supervisor` 可以帮助你实现这个功能，它会监视你对代码的驱动，并自动重启 `Node` 。\n\n\n一般来说，全局安装只适用于工具模块，比如 `eslint` 和 `gulp` 。关于使用全局模式，多数时候并不是因为许多程序都有可能用到了它，为了减少多重副本而使用全局模式，而是因为 **本地模式不会注册 `PATH` 环境变量**。\n“本地安装”指的是将一个模块下载到当前项目的 `node_modules` 子目录，然后只有在项目目录之中，才能调用这个模块。\n\n本地模式和全局模式的特点如下：\n\n| 模式     | 可通过 require 使用 | 注册 PATH |\n| :---:    | :---:               | :---:     |\n| 本地模式 | 是                  | 否        |\n| 全局模式 | 否                  | 是        |\n\n<br>\n\n``` bash\n# 本地安装\n$ npm install <package name>\n\n# 全局安装\n$ sudo npm install -global <package name>\n$ sudo npm install -g <package name>\n```\n\n`npm install` 也支持直接输入 `Github` 代码库地址。\n\n``` bash\n$ npm install git://github.com/package/path.git\n$ npm install git://github.com/package/path.git#0.1.0\n```\n\n安装之前，`npm install` 会先检查，`node_modules` 目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。\n\n如果你希望，一个模块不管是否安装过， `npm` 都要强制重新安装，可以使用 `-f` 或 `--force` 参数。\n\n``` bash\n$ npm install <packageName> --force\n```\n\n#### 安装不同版本\n\n`install` 命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上 `@` 和版本号。\n\n``` bash\n$ npm install sax@latest\n$ npm install sax@0.1.1\n$ npm install sax@\">=0.1.0 <0.2.0\"\n```\n\n`install` 命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在 `packages.json` 文件的哪一项中。\n\n> --save：模块名将被添加到 dependencies，可以简化为参数-S。\n> --save-dev：模块名将被添加到 devDependencies，可以简化为参数-D。\n\n``` bash\n$ npm install sax --save\n$ npm install node-tap --save-dev\n# 或者\n$ npm install sax -S\n$ npm install node-tap -D\n```\n\n##### dependencies 依赖\n\n这个可以说是我们 `npm` 核心一项内容，依赖管理，这个对象里面的内容就是我们这个项目所依赖的 `js` 模块包。下面这段代码表示我们依赖了 `markdown-it` 这个包，版本是 `^8.1.0` ，代表最小依赖版本是 `8.1.0` ，如果这个包有更新，那么当我们使用 `npm install` 命令的时候， `npm` 会帮我们下载最新的包。当别人引用我们这个包的时候，包内的依赖包也会被下载下来。\n\n``` javascript\n\"dependencies\": {\n    \"markdown-it\": \"^8.1.0\"\n}\n```\n\n##### devDependencies 开发依赖\n\n在我们开发的时候会用到的一些包，只是在开发环境中需要用到，但是在别人引用我们包的时候，不会用到这些内容，放在 `devDependencies` 的包，在别人引用的时候不会被 `npm` 下载。\n\n``` javascript\n\"devDependencies\": {\n    \"autoprefixer\": \"^6.4.0\",\n    \"babel-preset-es2015\": \"^6.0.0\",\n    \"babel-preset-stage-2\": \"^6.0.0\",\n    \"babel-register\": \"^6.0.0\",\n    \"webpack\": \"^1.13.2\",\n    \"webpack-dev-middleware\": \"^1.8.3\",\n    \"webpack-hot-middleware\": \"^2.12.2\",\n    \"webpack-merge\": \"^0.14.1\",\n    \"highlightjs\": \"^9.8.0\"\n}\n```\n\n当你有了一个完整的 `package.json `文件的时候，就可以让人一眼看出来，这个模块的基本信息，和这个模块所需要依赖的包。我们可以通过 `npm install` 就可以很方便的下载好这个模块所需要的包。\n\n`npm install` 默认会安装 `dependencies` 字段和 `devDependencies` 字段中的所有模块，如果使用 `--production` 参数，可以只安装 `dependencies` 字段的模块。\n\n``` bash\n$ npm install --production\n# 或者\n$ NODE_ENV=production npm install\n```\n\n一旦安装了某个模块，就可以在代码中用 `require` 命令加载这个模块。\n\n``` javascript\nvar backbone = require('backbone')\nconsole.log(backbone.VERSION)\n```\n\n### npm run\n`npm` 不仅可以用于模块管理，还可以用于执行脚本。`package.json` 文件有一个 `scripts` 字段，可以用于指定脚本命令，供 `npm` 直接调用。\n`package.json` 文件内容：\n\n``` javascript\n{\n  \"name\": \"myproject\",\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"browserify\": \"latest\",\n    \"mocha\": \"latest\"\n  },\n  \"scripts\": {\n    \"lint\": \"jshint **.js\",\n    \"test\": \"mocha test/\"\n  }\n}\n```\n\n#### scripts 脚本\n顾名思义，就是一些脚本代码，可以通过 `npm run script-key` 来调用，例如在这个 `package.json` 的文件夹下使用 `npm run dev` 就相当于运行了 `node build/dev-server.js` 这一段代码。使用 `scripts` 的目的就是为了把一些要执行的代码合并到一起，使用 npm run 来快速的运行，方便省事。\n`npm run` 是 `npm run-script` 的缩写，一般都使用前者，但是后者可以更好的反应这个命令的本质。\n\n``` javascript\n// 脚本\n\"scripts\": {\n    \"dev\": \"node build/dev-server.js\",\n    \"build\": \"node build/build.js\",\n    \"docs\": \"node build/docs.js\",\n    \"build-docs\": \"npm run docs & git checkout gh-pages & xcopy /sy dist\\\\* . & git add . & git commit -m 'auto-pages' & git push & git checkout master\",\n    \"build-publish\": \"rmdir /S /Q lib & npm run build &git add . & git commit -m auto-build & npm version patch & npm publish & git push\",\n    \"lint\": \"eslint --ext .js,.vue src\"\n}\n```\n\n`npm run` 如果不加任何参数，直接运行，会列出 `package.json` 里面所有可以执行的脚本命令。\n`npm` 内置了两个命令简写， `npm test` 等同于执行 `npm run test` ，`npm start` 等同于执行 `npm run start`。\n\n``` javascript\n\"build\": \"npm run build-js && npm run build-css\"\n```\n\n上面的写法是先运行 `npm run build-js` ，然后再运行 `npm run build-css` ，两个命令中间用 `&&` 连接。如果希望两个命令同时平行执行，它们中间可以用 `&` 连接。\n\n写在 `scripts` 属性中的命令，也可以在 `node_modules/.bin` 目录中直接写成 `bash` 脚本。下面是一个 `bash` 脚本。\n\n``` bash\n#!/bin/bash\n\ncd site/main\nbrowserify browser/main.js | uglifyjs -mc > static/bundle.js\n```\n\n假定上面的脚本文件名为 `build.sh` ，并且权限为可执行，就可以在 `scripts` 属性中引用该文件。\n\n``` javascript\n\"build-js\": \"bin/build.sh\"\n```\n\n### pre- 和 post- 脚本\n\n`npm run` 为每条命令提供了 `pre-` 和 `post-` 两个钩子（ `hook` ）。以 `npm run lint` 为例，执行这条命令之前， `npm` 会先查看有没有定义 `prelint` 和 `postlint` 两个钩子，如果有的话，就会先执行 `npm run prelint` ，然后执行 `npm run lint` ，最后执行 `npm run postlint` 。\n\n``` javascript\n{\n  \"name\": \"myproject\",\n  \"devDependencies\": {\n    \"eslint\": \"latest\"\n    \"karma\": \"latest\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --ext .js --ext .jsx src\",\n    \"test\": \"karma start --log-leve=error karma.config.js --single-run=true\",\n    \"pretest\": \"npm run lint\",\n    \"posttest\": \"echo 'Finished running tests'\"\n  }\n}\n```\n\n上面代码是一个 `package.json` 文件的例子。如果执行 `npm test`，会按下面的顺序执行相应的命令。\n\n1. `pretest`\n2. `test`\n3. `posttest`\n\n如果执行过程出错，就不会执行排在后面的脚本，即如果 `prelint` 脚本执行出错，就不会接着执行 `lint` 和 `postlint` 脚本。\n\n### npm bin\n\n`npm bin` 命令显示相对于当前目录的，`Node` 模块的可执行脚本所在的目录（即 `.bin` 目录）。\n\n``` bash\n# 项目根目录下执行\n$ npm bin\n./node_modules/.bin\n```\n\n# 创建全局链接\n\n`npm` 提供了一个有趣的命令 `npm link`，它的功能是在本地包和全局包之间创建符号链接。我们说过使用全局模式安装的包不能直接通过 `require` 使用。但通过 `npm link` 命令可以打破这一限制。举个例子，我们已经通过 `npm install -g express` 安装了 `express` ，这时在工程的目录下运行命令：`npm link express ./node_modules/express -> /user/local/lib/node_modules/express`\n我们可以在 `node_modules` 子目录中发现一个指向安装到全局的包的符号链接。通过这种方法，我们就可以把全局包当做本地包来使用了。\n除了将全局的包链接到本地以外，使用 `npm link` 命令还可以将本地的包链接到全局。使用方法是在包目录（`package.json` 所在目录）中运行 `npm link` 命令。如果我们要开发一个包，利用这种方法可以非常方便地在不同的工程间进行测试。\n\n# 创建包\n\n包是在模块基础上更深一步的抽象，`Node` 的包类似于 `C/C++` 的函数库或者 `Java` 、`.Net` 的类库。它将某个独立的功能封装起来，用于发布、更新、依赖管理和版本控制。`Node` 根据 `CommonJS` 规范实现了包机制，开发了 `npm` 来解决包的发布和获取需求。\n`Node` 的包是一个目录，其中包含了一个 `JSON` 格式的包说明文件 `package.json`。严格符合 `CommonJS` 规范的包应该具备以下特征：\n- `package.json` 必须在包的顶层目录下；\n- 二进制文件应该在 `bin` 目录下；\n- `JavaScript` 代码应该在 `lib` 目录下；\n- 文档应该在 `doc` 目录下；\n- 单元测试应该在 `test` 目录下。\n\n`Node` 对包的要求并没有这么严格，只要顶层目录下有 `package.json`，并符合一些规范即可。当然为了提高兼容性，我们还是建议你在制作包的时候，严格遵守 `CommonJS` 规范。\n\n我们也可以把文件夹封装为一个模块，即所谓的包。包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于提供了一些固定接口的函数库。通过定制 `package.json`，我们可以创建更复杂，更完善，更符合规范的包用于发布。\n\n`Node` 在调用某个包时，会首先检查包中 `packgage.json` 文件的 `main` 字段，将其作为包的接口模块，如果 `package.json` 或 `main` 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。\n\n`package.json` 是 `CommonJS` 规定的用来描述包的文件，完全符合规范的 `package.json` 文件应该含有以下字段：\n<span id=\"inline-yellow\">name</span>: 包的名字，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格。\n<span id=\"inline-blue\">description</span>: 包的简要说明。\n<span id=\"inline-green\">version</span>: 符合语义化版本识别规范的版本字符串。\n<span id=\"inline-red\">keywords</span>: 关键字数组，通常用于搜索。\n<span id=\"inline-purple\">maintainers</span>: 维护者数组，每个元素要包含 `name` 、 `email`(可选)、 `web`(可选)字段。\n<span id=\"inline-yellow\">contributors</span>: 贡献者数组，格式与 `maintainers` 相同。包的作者应该是贡献者数组的第一个元素。\n<span id=\"inline-blue\">bugs</span>: 提交 `bug` 的地址，可以是网址或者电子邮件地址。\n<span id=\"inline-green\">licenses</span>: 许可证数组，每个元素要包含 `type` （许可证的名称）和 url（链接到许可证文本的地址）字段。\n<span id=\"inline-red\">repositories</span>: 仓库托管地址数组，每个元素要包含 `type` （仓库的类型，如 git）、URL（仓库的地址）和 path（相对于仓库的路径，可选）字段。\n<span id=\"inline-purple\">dependencies</span>: 包的依赖，一个关联数组，由包名称和版本号组成。\n\n# 包的发布\n\n通过使用 `npm init` 可以根据交互式回答产生一个符合标准的 `package.json`。创建一个 `index.js` 作为包的接口,一个简单的包就制作完成了。\n在发布前,我们还需要获得一个账号用于今后维护自己的包,使用 `npm adduser` 根据提示完成账号的创建\n完成后可以使用 `npm whoami` 检测是否已经取得了账号。\n接下来,在 `package.json` 所在目录下运行 `npm publish`，稍等片刻就可以完成发布了，打开浏览器，访问 [NPM搜索](http://search.npmjs.org/) 就可以找到自己刚刚发布的包了。现在我们可以在世界的任意一台计算机上使用 `npm install neveryumodule` 命令来安装它。\n如果你的包将来有更新,只需要在 `package.json` 文件中修改 `version` 字段,然后重新使用 `npm publish`命令就行了。\n如果你对已发布的包不满意，可以使用 `npm unpublish` 命令来取消发布。\n\n<p id=\"div-border-top-yellow\">*需要说明的是： `json` 文件不能有注释*\n</p>\n\n# 参考链接\n[http://javascript.ruanyifeng.com/nodejs/npm.html](http://javascript.ruanyifeng.com/nodejs/npm.html)\n\n\n\n\n\n","source":"_posts/npm.md","raw":"---\ntitle: NPM 学习笔记整理\ndate: 2017-05-10 03:25:24\ntags:\n  - npm\n  - Node\ncategories: Node\n---\n\n# 什么是 NPM\n\n`npm` 之于 `Node` ，就像 `pip` 之于 `Python` , `gem` 之于 `Ruby` , `composer` 之于 `PHP` 。\n\n`npm` 是 `Node` 官方提供的包管理工具，他已经成了 `Node` 包的标准发布平台，用于 `Node` 包的发布、传播、依赖控制。\n`npm` 提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。\n\n<!-- more -->\n\n# 为什么要使用 NPM\n\n`npm` 是随同 `Node` 一起安装的包管理工具，能解决 `Node` 代码部署上的很多问题，常见的场景有以下几种：\n\n- 允许用户从 `npm` 服务器下载别人编写的第三方包到本地使用。\n- 允许用户从 `npm` 服务器下载并安装别人编写的命令行程序到本地使用。\n- 允许用户将自己编写的包或命令行程序上传到 `npm` 服务器供别人使用。\n\n`npm` 的背后，是基于 `CouchDB` 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。\n\n# 如何使用 NPM\n\n## 安装\n\n`npm` 不需要单独安装。在安装 `Node` 的时候，会连带一起安装 `npm` 。但是，`Node` 附带的 `npm` 可能不是最新版本，最后用下面的命令，更新到最新版本。\n\n```bash\n$ sudo npm install npm@latest -g\n```\n\n如果是 Window 系统使用以下命令即可：\n\n```bash\nnpm install npm -g\n```\n\n也就是使用 `npm` 安装自己。之所以可以这样，是因为 `npm` 本身与 `Node` 的其他模块没有区别。\n\n然后，运行下面的命令，查看各种信息。\n\n```bash\n# 查看 npm 命令列表\n$ npm help\n\n# 查看各个命令的简单用法\n$ npm -l\n\n# 查看 npm 的版本\n$ npm -v\n\n# 查看 npm 的配置\n$ npm config list -l\n```\n\n## 使用\n\n### npm init\n\n`npm init` 用来初始化生成一个新的 `package.json` 文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。\n如果使用了 `-f`（代表`force`）、`-y`（代表`yes`），则跳过提问阶段，直接生成一个新的 `package.json` 文件。\n\n``` bash\n$ npm init -y\n```\n\n### npm set\n\n`npm set` 用来设置环境变量\n\n``` bash\n$ npm set init-author-name 'Your name'\n$ npm set init-author-email 'Your email'\n$ npm set init-author-url 'http://yourdomain.com'\n$ npm set init-license 'MIT'\n```\n\n上面命令等于为 `npm init` 设置了默认值，以后执行 `npm init` 的时候，`package.json `的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的 `~/.npmrc`文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行 `npm config`。\n\n### npm info\n\n`npm info` 命令可以查看每个模块的具体信息。比如，查看 `underscore` 模块的信息。\n\n``` bash\n$ npm info underscore\n```\n\n上面命令返回一个 `JavaScript` 对象，包含了 `underscore` 模块的详细信息。这个对象的每个成员，都可以直接从 `info` 命令查询。\n\n``` bash\n$ npm info underscore description\n\n$ npm info underscore homepage\n\n$ npm info underscore version\n```\n\n### npm search\n\n`npm search` 命令用于搜索 `npm` 仓库，它后面可以跟字符串，也可以跟正则表达式。\n\n``` bash\n$ npm search <搜索词>\n```\n\n### npm list\n\n`npm list` 命令以树形结构列出当前项目安装的所有模块，以及它们依赖的模块。\n\n``` bash\n$ npm list\n\n# 加上 global 参数，会列出全局安装的模块\n$ npm list -global\n\n# npm list 命令也可以列出单个模块\n$ npm list underscore\n```\n\n### npm install\n\n使用 `npm` 安装包的命令格式为：`npm [install/i] [package_name]`\n\n#### 本地模式和全局模式\n\n`npm` 在默认情况下会从 [NPM](http://npmjs.org) 搜索或下载包，将包安装到当前目录的 `node_modules` 子目录下。\n\n如果你熟悉 `Ruby` 的 `gem` 或者 `Python` 的 `pip` ，你会发现 `npm` 与它们的行为不同， `gem` 或 `pip` 总是以全局模式安装，使包可以供所有的程序使用，而 `npm` 默认会把包安装到当前目录下。这反映了 `npm` 不同的设计哲学。如果把包安装到全局，可以提供程序的重复利用程度，避免同样的内容的多分副本，但坏处是难以处理不同的版本依赖。如果把包安装到当前目录，或者说本地，则不会有不同程序依赖不同版本的包的冲突问题，同时还减轻了包作者的 `API` 兼容性压力，但缺陷则是同一个包可能会被安装许多次。\n\n我们在使用 `supervisor` 的时候使用了 `npm install -g supervisor` 命令，就是以全局模式安装 `supervisor` 。\n\n这里注意一点的就是， `supervisor` 必须安装到全局，如果你不安装到全局，错误命令会提示你安装到全局。如果不想安装到默认的全局，也可以自己修改全局路径到当前路径 `npm config set prefix \"路径\"` 安装完以后就可以用 `supervisor` 来启动服务了。\n`supervisor` 可以帮助你实现这个功能，它会监视你对代码的驱动，并自动重启 `Node` 。\n\n\n一般来说，全局安装只适用于工具模块，比如 `eslint` 和 `gulp` 。关于使用全局模式，多数时候并不是因为许多程序都有可能用到了它，为了减少多重副本而使用全局模式，而是因为 **本地模式不会注册 `PATH` 环境变量**。\n“本地安装”指的是将一个模块下载到当前项目的 `node_modules` 子目录，然后只有在项目目录之中，才能调用这个模块。\n\n本地模式和全局模式的特点如下：\n\n| 模式     | 可通过 require 使用 | 注册 PATH |\n| :---:    | :---:               | :---:     |\n| 本地模式 | 是                  | 否        |\n| 全局模式 | 否                  | 是        |\n\n<br>\n\n``` bash\n# 本地安装\n$ npm install <package name>\n\n# 全局安装\n$ sudo npm install -global <package name>\n$ sudo npm install -g <package name>\n```\n\n`npm install` 也支持直接输入 `Github` 代码库地址。\n\n``` bash\n$ npm install git://github.com/package/path.git\n$ npm install git://github.com/package/path.git#0.1.0\n```\n\n安装之前，`npm install` 会先检查，`node_modules` 目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。\n\n如果你希望，一个模块不管是否安装过， `npm` 都要强制重新安装，可以使用 `-f` 或 `--force` 参数。\n\n``` bash\n$ npm install <packageName> --force\n```\n\n#### 安装不同版本\n\n`install` 命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上 `@` 和版本号。\n\n``` bash\n$ npm install sax@latest\n$ npm install sax@0.1.1\n$ npm install sax@\">=0.1.0 <0.2.0\"\n```\n\n`install` 命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在 `packages.json` 文件的哪一项中。\n\n> --save：模块名将被添加到 dependencies，可以简化为参数-S。\n> --save-dev：模块名将被添加到 devDependencies，可以简化为参数-D。\n\n``` bash\n$ npm install sax --save\n$ npm install node-tap --save-dev\n# 或者\n$ npm install sax -S\n$ npm install node-tap -D\n```\n\n##### dependencies 依赖\n\n这个可以说是我们 `npm` 核心一项内容，依赖管理，这个对象里面的内容就是我们这个项目所依赖的 `js` 模块包。下面这段代码表示我们依赖了 `markdown-it` 这个包，版本是 `^8.1.0` ，代表最小依赖版本是 `8.1.0` ，如果这个包有更新，那么当我们使用 `npm install` 命令的时候， `npm` 会帮我们下载最新的包。当别人引用我们这个包的时候，包内的依赖包也会被下载下来。\n\n``` javascript\n\"dependencies\": {\n    \"markdown-it\": \"^8.1.0\"\n}\n```\n\n##### devDependencies 开发依赖\n\n在我们开发的时候会用到的一些包，只是在开发环境中需要用到，但是在别人引用我们包的时候，不会用到这些内容，放在 `devDependencies` 的包，在别人引用的时候不会被 `npm` 下载。\n\n``` javascript\n\"devDependencies\": {\n    \"autoprefixer\": \"^6.4.0\",\n    \"babel-preset-es2015\": \"^6.0.0\",\n    \"babel-preset-stage-2\": \"^6.0.0\",\n    \"babel-register\": \"^6.0.0\",\n    \"webpack\": \"^1.13.2\",\n    \"webpack-dev-middleware\": \"^1.8.3\",\n    \"webpack-hot-middleware\": \"^2.12.2\",\n    \"webpack-merge\": \"^0.14.1\",\n    \"highlightjs\": \"^9.8.0\"\n}\n```\n\n当你有了一个完整的 `package.json `文件的时候，就可以让人一眼看出来，这个模块的基本信息，和这个模块所需要依赖的包。我们可以通过 `npm install` 就可以很方便的下载好这个模块所需要的包。\n\n`npm install` 默认会安装 `dependencies` 字段和 `devDependencies` 字段中的所有模块，如果使用 `--production` 参数，可以只安装 `dependencies` 字段的模块。\n\n``` bash\n$ npm install --production\n# 或者\n$ NODE_ENV=production npm install\n```\n\n一旦安装了某个模块，就可以在代码中用 `require` 命令加载这个模块。\n\n``` javascript\nvar backbone = require('backbone')\nconsole.log(backbone.VERSION)\n```\n\n### npm run\n`npm` 不仅可以用于模块管理，还可以用于执行脚本。`package.json` 文件有一个 `scripts` 字段，可以用于指定脚本命令，供 `npm` 直接调用。\n`package.json` 文件内容：\n\n``` javascript\n{\n  \"name\": \"myproject\",\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"browserify\": \"latest\",\n    \"mocha\": \"latest\"\n  },\n  \"scripts\": {\n    \"lint\": \"jshint **.js\",\n    \"test\": \"mocha test/\"\n  }\n}\n```\n\n#### scripts 脚本\n顾名思义，就是一些脚本代码，可以通过 `npm run script-key` 来调用，例如在这个 `package.json` 的文件夹下使用 `npm run dev` 就相当于运行了 `node build/dev-server.js` 这一段代码。使用 `scripts` 的目的就是为了把一些要执行的代码合并到一起，使用 npm run 来快速的运行，方便省事。\n`npm run` 是 `npm run-script` 的缩写，一般都使用前者，但是后者可以更好的反应这个命令的本质。\n\n``` javascript\n// 脚本\n\"scripts\": {\n    \"dev\": \"node build/dev-server.js\",\n    \"build\": \"node build/build.js\",\n    \"docs\": \"node build/docs.js\",\n    \"build-docs\": \"npm run docs & git checkout gh-pages & xcopy /sy dist\\\\* . & git add . & git commit -m 'auto-pages' & git push & git checkout master\",\n    \"build-publish\": \"rmdir /S /Q lib & npm run build &git add . & git commit -m auto-build & npm version patch & npm publish & git push\",\n    \"lint\": \"eslint --ext .js,.vue src\"\n}\n```\n\n`npm run` 如果不加任何参数，直接运行，会列出 `package.json` 里面所有可以执行的脚本命令。\n`npm` 内置了两个命令简写， `npm test` 等同于执行 `npm run test` ，`npm start` 等同于执行 `npm run start`。\n\n``` javascript\n\"build\": \"npm run build-js && npm run build-css\"\n```\n\n上面的写法是先运行 `npm run build-js` ，然后再运行 `npm run build-css` ，两个命令中间用 `&&` 连接。如果希望两个命令同时平行执行，它们中间可以用 `&` 连接。\n\n写在 `scripts` 属性中的命令，也可以在 `node_modules/.bin` 目录中直接写成 `bash` 脚本。下面是一个 `bash` 脚本。\n\n``` bash\n#!/bin/bash\n\ncd site/main\nbrowserify browser/main.js | uglifyjs -mc > static/bundle.js\n```\n\n假定上面的脚本文件名为 `build.sh` ，并且权限为可执行，就可以在 `scripts` 属性中引用该文件。\n\n``` javascript\n\"build-js\": \"bin/build.sh\"\n```\n\n### pre- 和 post- 脚本\n\n`npm run` 为每条命令提供了 `pre-` 和 `post-` 两个钩子（ `hook` ）。以 `npm run lint` 为例，执行这条命令之前， `npm` 会先查看有没有定义 `prelint` 和 `postlint` 两个钩子，如果有的话，就会先执行 `npm run prelint` ，然后执行 `npm run lint` ，最后执行 `npm run postlint` 。\n\n``` javascript\n{\n  \"name\": \"myproject\",\n  \"devDependencies\": {\n    \"eslint\": \"latest\"\n    \"karma\": \"latest\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --ext .js --ext .jsx src\",\n    \"test\": \"karma start --log-leve=error karma.config.js --single-run=true\",\n    \"pretest\": \"npm run lint\",\n    \"posttest\": \"echo 'Finished running tests'\"\n  }\n}\n```\n\n上面代码是一个 `package.json` 文件的例子。如果执行 `npm test`，会按下面的顺序执行相应的命令。\n\n1. `pretest`\n2. `test`\n3. `posttest`\n\n如果执行过程出错，就不会执行排在后面的脚本，即如果 `prelint` 脚本执行出错，就不会接着执行 `lint` 和 `postlint` 脚本。\n\n### npm bin\n\n`npm bin` 命令显示相对于当前目录的，`Node` 模块的可执行脚本所在的目录（即 `.bin` 目录）。\n\n``` bash\n# 项目根目录下执行\n$ npm bin\n./node_modules/.bin\n```\n\n# 创建全局链接\n\n`npm` 提供了一个有趣的命令 `npm link`，它的功能是在本地包和全局包之间创建符号链接。我们说过使用全局模式安装的包不能直接通过 `require` 使用。但通过 `npm link` 命令可以打破这一限制。举个例子，我们已经通过 `npm install -g express` 安装了 `express` ，这时在工程的目录下运行命令：`npm link express ./node_modules/express -> /user/local/lib/node_modules/express`\n我们可以在 `node_modules` 子目录中发现一个指向安装到全局的包的符号链接。通过这种方法，我们就可以把全局包当做本地包来使用了。\n除了将全局的包链接到本地以外，使用 `npm link` 命令还可以将本地的包链接到全局。使用方法是在包目录（`package.json` 所在目录）中运行 `npm link` 命令。如果我们要开发一个包，利用这种方法可以非常方便地在不同的工程间进行测试。\n\n# 创建包\n\n包是在模块基础上更深一步的抽象，`Node` 的包类似于 `C/C++` 的函数库或者 `Java` 、`.Net` 的类库。它将某个独立的功能封装起来，用于发布、更新、依赖管理和版本控制。`Node` 根据 `CommonJS` 规范实现了包机制，开发了 `npm` 来解决包的发布和获取需求。\n`Node` 的包是一个目录，其中包含了一个 `JSON` 格式的包说明文件 `package.json`。严格符合 `CommonJS` 规范的包应该具备以下特征：\n- `package.json` 必须在包的顶层目录下；\n- 二进制文件应该在 `bin` 目录下；\n- `JavaScript` 代码应该在 `lib` 目录下；\n- 文档应该在 `doc` 目录下；\n- 单元测试应该在 `test` 目录下。\n\n`Node` 对包的要求并没有这么严格，只要顶层目录下有 `package.json`，并符合一些规范即可。当然为了提高兼容性，我们还是建议你在制作包的时候，严格遵守 `CommonJS` 规范。\n\n我们也可以把文件夹封装为一个模块，即所谓的包。包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于提供了一些固定接口的函数库。通过定制 `package.json`，我们可以创建更复杂，更完善，更符合规范的包用于发布。\n\n`Node` 在调用某个包时，会首先检查包中 `packgage.json` 文件的 `main` 字段，将其作为包的接口模块，如果 `package.json` 或 `main` 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。\n\n`package.json` 是 `CommonJS` 规定的用来描述包的文件，完全符合规范的 `package.json` 文件应该含有以下字段：\n<span id=\"inline-yellow\">name</span>: 包的名字，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格。\n<span id=\"inline-blue\">description</span>: 包的简要说明。\n<span id=\"inline-green\">version</span>: 符合语义化版本识别规范的版本字符串。\n<span id=\"inline-red\">keywords</span>: 关键字数组，通常用于搜索。\n<span id=\"inline-purple\">maintainers</span>: 维护者数组，每个元素要包含 `name` 、 `email`(可选)、 `web`(可选)字段。\n<span id=\"inline-yellow\">contributors</span>: 贡献者数组，格式与 `maintainers` 相同。包的作者应该是贡献者数组的第一个元素。\n<span id=\"inline-blue\">bugs</span>: 提交 `bug` 的地址，可以是网址或者电子邮件地址。\n<span id=\"inline-green\">licenses</span>: 许可证数组，每个元素要包含 `type` （许可证的名称）和 url（链接到许可证文本的地址）字段。\n<span id=\"inline-red\">repositories</span>: 仓库托管地址数组，每个元素要包含 `type` （仓库的类型，如 git）、URL（仓库的地址）和 path（相对于仓库的路径，可选）字段。\n<span id=\"inline-purple\">dependencies</span>: 包的依赖，一个关联数组，由包名称和版本号组成。\n\n# 包的发布\n\n通过使用 `npm init` 可以根据交互式回答产生一个符合标准的 `package.json`。创建一个 `index.js` 作为包的接口,一个简单的包就制作完成了。\n在发布前,我们还需要获得一个账号用于今后维护自己的包,使用 `npm adduser` 根据提示完成账号的创建\n完成后可以使用 `npm whoami` 检测是否已经取得了账号。\n接下来,在 `package.json` 所在目录下运行 `npm publish`，稍等片刻就可以完成发布了，打开浏览器，访问 [NPM搜索](http://search.npmjs.org/) 就可以找到自己刚刚发布的包了。现在我们可以在世界的任意一台计算机上使用 `npm install neveryumodule` 命令来安装它。\n如果你的包将来有更新,只需要在 `package.json` 文件中修改 `version` 字段,然后重新使用 `npm publish`命令就行了。\n如果你对已发布的包不满意，可以使用 `npm unpublish` 命令来取消发布。\n\n<p id=\"div-border-top-yellow\">*需要说明的是： `json` 文件不能有注释*\n</p>\n\n# 参考链接\n[http://javascript.ruanyifeng.com/nodejs/npm.html](http://javascript.ruanyifeng.com/nodejs/npm.html)\n\n\n\n\n\n","slug":"npm","published":1,"updated":"2017-06-05T03:16:44.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvpf003luwg7iopeajw2","content":"<h1 id=\"什么是-NPM\"><a href=\"#什么是-NPM\" class=\"headerlink\" title=\"什么是 NPM\"></a>什么是 NPM</h1><p><code>npm</code> 之于 <code>Node</code> ，就像 <code>pip</code> 之于 <code>Python</code> , <code>gem</code> 之于 <code>Ruby</code> , <code>composer</code> 之于 <code>PHP</code> 。</p>\n<p><code>npm</code> 是 <code>Node</code> 官方提供的包管理工具，他已经成了 <code>Node</code> 包的标准发布平台，用于 <code>Node</code> 包的发布、传播、依赖控制。<br><code>npm</code> 提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。</p>\n<a id=\"more\"></a>\n<h1 id=\"为什么要使用-NPM\"><a href=\"#为什么要使用-NPM\" class=\"headerlink\" title=\"为什么要使用 NPM\"></a>为什么要使用 NPM</h1><p><code>npm</code> 是随同 <code>Node</code> 一起安装的包管理工具，能解决 <code>Node</code> 代码部署上的很多问题，常见的场景有以下几种：</p>\n<ul>\n<li>允许用户从 <code>npm</code> 服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从 <code>npm</code> 服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到 <code>npm</code> 服务器供别人使用。</li>\n</ul>\n<p><code>npm</code> 的背后，是基于 <code>CouchDB</code> 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。</p>\n<h1 id=\"如何使用-NPM\"><a href=\"#如何使用-NPM\" class=\"headerlink\" title=\"如何使用 NPM\"></a>如何使用 NPM</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>npm</code> 不需要单独安装。在安装 <code>Node</code> 的时候，会连带一起安装 <code>npm</code> 。但是，<code>Node</code> 附带的 <code>npm</code> 可能不是最新版本，最后用下面的命令，更新到最新版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install npm@latest -g</div></pre></td></tr></table></figure>\n<p>如果是 Window 系统使用以下命令即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install npm -g</div></pre></td></tr></table></figure>\n<p>也就是使用 <code>npm</code> 安装自己。之所以可以这样，是因为 <code>npm</code> 本身与 <code>Node</code> 的其他模块没有区别。</p>\n<p>然后，运行下面的命令，查看各种信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看 npm 命令列表</span></div><div class=\"line\">$ npm <span class=\"built_in\">help</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看各个命令的简单用法</span></div><div class=\"line\">$ npm <span class=\"_\">-l</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看 npm 的版本</span></div><div class=\"line\">$ npm -v</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看 npm 的配置</span></div><div class=\"line\">$ npm config list <span class=\"_\">-l</span></div></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"npm-init\"><a href=\"#npm-init\" class=\"headerlink\" title=\"npm init\"></a>npm init</h3><p><code>npm init</code> 用来初始化生成一个新的 <code>package.json</code> 文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。<br>如果使用了 <code>-f</code>（代表<code>force</code>）、<code>-y</code>（代表<code>yes</code>），则跳过提问阶段，直接生成一个新的 <code>package.json</code> 文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm init -y</div></pre></td></tr></table></figure>\n<h3 id=\"npm-set\"><a href=\"#npm-set\" class=\"headerlink\" title=\"npm set\"></a>npm set</h3><p><code>npm set</code> 用来设置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm <span class=\"built_in\">set</span> init-author-name <span class=\"string\">'Your name'</span></div><div class=\"line\">$ npm <span class=\"built_in\">set</span> init-author-email <span class=\"string\">'Your email'</span></div><div class=\"line\">$ npm <span class=\"built_in\">set</span> init-author-url <span class=\"string\">'http://yourdomain.com'</span></div><div class=\"line\">$ npm <span class=\"built_in\">set</span> init-license <span class=\"string\">'MIT'</span></div></pre></td></tr></table></figure>\n<p>上面命令等于为 <code>npm init</code> 设置了默认值，以后执行 <code>npm init</code> 的时候，<code>package.json</code>的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的 <code>~/.npmrc</code>文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行 <code>npm config</code>。</p>\n<h3 id=\"npm-info\"><a href=\"#npm-info\" class=\"headerlink\" title=\"npm info\"></a>npm info</h3><p><code>npm info</code> 命令可以查看每个模块的具体信息。比如，查看 <code>underscore</code> 模块的信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm info underscore</div></pre></td></tr></table></figure>\n<p>上面命令返回一个 <code>JavaScript</code> 对象，包含了 <code>underscore</code> 模块的详细信息。这个对象的每个成员，都可以直接从 <code>info</code> 命令查询。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm info underscore description</div><div class=\"line\"></div><div class=\"line\">$ npm info underscore homepage</div><div class=\"line\"></div><div class=\"line\">$ npm info underscore version</div></pre></td></tr></table></figure>\n<h3 id=\"npm-search\"><a href=\"#npm-search\" class=\"headerlink\" title=\"npm search\"></a>npm search</h3><p><code>npm search</code> 命令用于搜索 <code>npm</code> 仓库，它后面可以跟字符串，也可以跟正则表达式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm search &lt;搜索词&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"npm-list\"><a href=\"#npm-list\" class=\"headerlink\" title=\"npm list\"></a>npm list</h3><p><code>npm list</code> 命令以树形结构列出当前项目安装的所有模块，以及它们依赖的模块。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm list</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 加上 global 参数，会列出全局安装的模块</span></div><div class=\"line\">$ npm list -global</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># npm list 命令也可以列出单个模块</span></div><div class=\"line\">$ npm list underscore</div></pre></td></tr></table></figure>\n<h3 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h3><p>使用 <code>npm</code> 安装包的命令格式为：<code>npm [install/i] [package_name]</code></p>\n<h4 id=\"本地模式和全局模式\"><a href=\"#本地模式和全局模式\" class=\"headerlink\" title=\"本地模式和全局模式\"></a>本地模式和全局模式</h4><p><code>npm</code> 在默认情况下会从 <a href=\"http://npmjs.org\" target=\"_blank\" rel=\"external\">NPM</a> 搜索或下载包，将包安装到当前目录的 <code>node_modules</code> 子目录下。</p>\n<p>如果你熟悉 <code>Ruby</code> 的 <code>gem</code> 或者 <code>Python</code> 的 <code>pip</code> ，你会发现 <code>npm</code> 与它们的行为不同， <code>gem</code> 或 <code>pip</code> 总是以全局模式安装，使包可以供所有的程序使用，而 <code>npm</code> 默认会把包安装到当前目录下。这反映了 <code>npm</code> 不同的设计哲学。如果把包安装到全局，可以提供程序的重复利用程度，避免同样的内容的多分副本，但坏处是难以处理不同的版本依赖。如果把包安装到当前目录，或者说本地，则不会有不同程序依赖不同版本的包的冲突问题，同时还减轻了包作者的 <code>API</code> 兼容性压力，但缺陷则是同一个包可能会被安装许多次。</p>\n<p>我们在使用 <code>supervisor</code> 的时候使用了 <code>npm install -g supervisor</code> 命令，就是以全局模式安装 <code>supervisor</code> 。</p>\n<p>这里注意一点的就是， <code>supervisor</code> 必须安装到全局，如果你不安装到全局，错误命令会提示你安装到全局。如果不想安装到默认的全局，也可以自己修改全局路径到当前路径 <code>npm config set prefix &quot;路径&quot;</code> 安装完以后就可以用 <code>supervisor</code> 来启动服务了。<br><code>supervisor</code> 可以帮助你实现这个功能，它会监视你对代码的驱动，并自动重启 <code>Node</code> 。</p>\n<p>一般来说，全局安装只适用于工具模块，比如 <code>eslint</code> 和 <code>gulp</code> 。关于使用全局模式，多数时候并不是因为许多程序都有可能用到了它，为了减少多重副本而使用全局模式，而是因为 <strong>本地模式不会注册 <code>PATH</code> 环境变量</strong>。<br>“本地安装”指的是将一个模块下载到当前项目的 <code>node_modules</code> 子目录，然后只有在项目目录之中，才能调用这个模块。</p>\n<p>本地模式和全局模式的特点如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">可通过 require 使用</th>\n<th style=\"text-align:center\">注册 PATH</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">本地模式</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全局模式</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 本地安装</span></div><div class=\"line\">$ npm install &lt;package name&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 全局安装</span></div><div class=\"line\">$ sudo npm install -global &lt;package name&gt;</div><div class=\"line\">$ sudo npm install -g &lt;package name&gt;</div></pre></td></tr></table></figure>\n<p><code>npm install</code> 也支持直接输入 <code>Github</code> 代码库地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install git://github.com/package/path.git</div><div class=\"line\">$ npm install git://github.com/package/path.git<span class=\"comment\">#0.1.0</span></div></pre></td></tr></table></figure>\n<p>安装之前，<code>npm install</code> 会先检查，<code>node_modules</code> 目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p>\n<p>如果你希望，一个模块不管是否安装过， <code>npm</code> 都要强制重新安装，可以使用 <code>-f</code> 或 <code>--force</code> 参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install &lt;packageName&gt; --force</div></pre></td></tr></table></figure>\n<h4 id=\"安装不同版本\"><a href=\"#安装不同版本\" class=\"headerlink\" title=\"安装不同版本\"></a>安装不同版本</h4><p><code>install</code> 命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上 <code>@</code> 和版本号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install sax@latest</div><div class=\"line\">$ npm install sax@0.1.1</div><div class=\"line\">$ npm install sax@<span class=\"string\">\"&gt;=0.1.0 &lt;0.2.0\"</span></div></pre></td></tr></table></figure>\n<p><code>install</code> 命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在 <code>packages.json</code> 文件的哪一项中。</p>\n<blockquote>\n<p>–save：模块名将被添加到 dependencies，可以简化为参数-S。<br>–save-dev：模块名将被添加到 devDependencies，可以简化为参数-D。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install sax --save</div><div class=\"line\">$ npm install node-tap --save-dev</div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">$ npm install sax -S</div><div class=\"line\">$ npm install node-tap -D</div></pre></td></tr></table></figure>\n<h5 id=\"dependencies-依赖\"><a href=\"#dependencies-依赖\" class=\"headerlink\" title=\"dependencies 依赖\"></a>dependencies 依赖</h5><p>这个可以说是我们 <code>npm</code> 核心一项内容，依赖管理，这个对象里面的内容就是我们这个项目所依赖的 <code>js</code> 模块包。下面这段代码表示我们依赖了 <code>markdown-it</code> 这个包，版本是 <code>^8.1.0</code> ，代表最小依赖版本是 <code>8.1.0</code> ，如果这个包有更新，那么当我们使用 <code>npm install</code> 命令的时候， <code>npm</code> 会帮我们下载最新的包。当别人引用我们这个包的时候，包内的依赖包也会被下载下来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"markdown-it\"</span>: <span class=\"string\">\"^8.1.0\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"devDependencies-开发依赖\"><a href=\"#devDependencies-开发依赖\" class=\"headerlink\" title=\"devDependencies 开发依赖\"></a>devDependencies 开发依赖</h5><p>在我们开发的时候会用到的一些包，只是在开发环境中需要用到，但是在别人引用我们包的时候，不会用到这些内容，放在 <code>devDependencies</code> 的包，在别人引用的时候不会被 <code>npm</code> 下载。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"autoprefixer\"</span>: <span class=\"string\">\"^6.4.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-stage-2\"</span>: <span class=\"string\">\"^6.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-register\"</span>: <span class=\"string\">\"^6.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^1.13.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-dev-middleware\"</span>: <span class=\"string\">\"^1.8.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-hot-middleware\"</span>: <span class=\"string\">\"^2.12.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-merge\"</span>: <span class=\"string\">\"^0.14.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"highlightjs\"</span>: <span class=\"string\">\"^9.8.0\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当你有了一个完整的 <code>package.json</code>文件的时候，就可以让人一眼看出来，这个模块的基本信息，和这个模块所需要依赖的包。我们可以通过 <code>npm install</code> 就可以很方便的下载好这个模块所需要的包。</p>\n<p><code>npm install</code> 默认会安装 <code>dependencies</code> 字段和 <code>devDependencies</code> 字段中的所有模块，如果使用 <code>--production</code> 参数，可以只安装 <code>dependencies</code> 字段的模块。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --production</div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">$ NODE_ENV=production npm install</div></pre></td></tr></table></figure>\n<p>一旦安装了某个模块，就可以在代码中用 <code>require</code> 命令加载这个模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> backbone = <span class=\"built_in\">require</span>(<span class=\"string\">'backbone'</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(backbone.VERSION)</div></pre></td></tr></table></figure>\n<h3 id=\"npm-run\"><a href=\"#npm-run\" class=\"headerlink\" title=\"npm run\"></a>npm run</h3><p><code>npm</code> 不仅可以用于模块管理，还可以用于执行脚本。<code>package.json</code> 文件有一个 <code>scripts</code> 字段，可以用于指定脚本命令，供 <code>npm</code> 直接调用。<br><code>package.json</code> 文件内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"myproject\"</span>,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"jshint\"</span>: <span class=\"string\">\"latest\"</span>,</div><div class=\"line\">    <span class=\"string\">\"browserify\"</span>: <span class=\"string\">\"latest\"</span>,</div><div class=\"line\">    <span class=\"string\">\"mocha\"</span>: <span class=\"string\">\"latest\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"jshint **.js\"</span>,</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha test/\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"scripts-脚本\"><a href=\"#scripts-脚本\" class=\"headerlink\" title=\"scripts 脚本\"></a>scripts 脚本</h4><p>顾名思义，就是一些脚本代码，可以通过 <code>npm run script-key</code> 来调用，例如在这个 <code>package.json</code> 的文件夹下使用 <code>npm run dev</code> 就相当于运行了 <code>node build/dev-server.js</code> 这一段代码。使用 <code>scripts</code> 的目的就是为了把一些要执行的代码合并到一起，使用 npm run 来快速的运行，方便省事。<br><code>npm run</code> 是 <code>npm run-script</code> 的缩写，一般都使用前者，但是后者可以更好的反应这个命令的本质。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 脚本</span></div><div class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"node build/dev-server.js\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"node build/build.js\"</span>,</div><div class=\"line\">    <span class=\"string\">\"docs\"</span>: <span class=\"string\">\"node build/docs.js\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build-docs\"</span>: <span class=\"string\">\"npm run docs &amp; git checkout gh-pages &amp; xcopy /sy dist\\\\* . &amp; git add . &amp; git commit -m 'auto-pages' &amp; git push &amp; git checkout master\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build-publish\"</span>: <span class=\"string\">\"rmdir /S /Q lib &amp; npm run build &amp;git add . &amp; git commit -m auto-build &amp; npm version patch &amp; npm publish &amp; git push\"</span>,</div><div class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint --ext .js,.vue src\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>npm run</code> 如果不加任何参数，直接运行，会列出 <code>package.json</code> 里面所有可以执行的脚本命令。<br><code>npm</code> 内置了两个命令简写， <code>npm test</code> 等同于执行 <code>npm run test</code> ，<code>npm start</code> 等同于执行 <code>npm run start</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"build\"</span>: <span class=\"string\">\"npm run build-js &amp;&amp; npm run build-css\"</span></div></pre></td></tr></table></figure>\n<p>上面的写法是先运行 <code>npm run build-js</code> ，然后再运行 <code>npm run build-css</code> ，两个命令中间用 <code>&amp;&amp;</code> 连接。如果希望两个命令同时平行执行，它们中间可以用 <code>&amp;</code> 连接。</p>\n<p>写在 <code>scripts</code> 属性中的命令，也可以在 <code>node_modules/.bin</code> 目录中直接写成 <code>bash</code> 脚本。下面是一个 <code>bash</code> 脚本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> site/main</div><div class=\"line\">browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js</div></pre></td></tr></table></figure>\n<p>假定上面的脚本文件名为 <code>build.sh</code> ，并且权限为可执行，就可以在 <code>scripts</code> 属性中引用该文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"build-js\"</span>: <span class=\"string\">\"bin/build.sh\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"pre-和-post-脚本\"><a href=\"#pre-和-post-脚本\" class=\"headerlink\" title=\"pre- 和 post- 脚本\"></a>pre- 和 post- 脚本</h3><p><code>npm run</code> 为每条命令提供了 <code>pre-</code> 和 <code>post-</code> 两个钩子（ <code>hook</code> ）。以 <code>npm run lint</code> 为例，执行这条命令之前， <code>npm</code> 会先查看有没有定义 <code>prelint</code> 和 <code>postlint</code> 两个钩子，如果有的话，就会先执行 <code>npm run prelint</code> ，然后执行 <code>npm run lint</code> ，最后执行 <code>npm run postlint</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"myproject\"</span>,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"eslint\"</span>: <span class=\"string\">\"latest\"</span></div><div class=\"line\">    <span class=\"string\">\"karma\"</span>: <span class=\"string\">\"latest\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint --cache --ext .js --ext .jsx src\"</span>,</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"karma start --log-leve=error karma.config.js --single-run=true\"</span>,</div><div class=\"line\">    <span class=\"string\">\"pretest\"</span>: <span class=\"string\">\"npm run lint\"</span>,</div><div class=\"line\">    <span class=\"string\">\"posttest\"</span>: <span class=\"string\">\"echo 'Finished running tests'\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码是一个 <code>package.json</code> 文件的例子。如果执行 <code>npm test</code>，会按下面的顺序执行相应的命令。</p>\n<ol>\n<li><code>pretest</code></li>\n<li><code>test</code></li>\n<li><code>posttest</code></li>\n</ol>\n<p>如果执行过程出错，就不会执行排在后面的脚本，即如果 <code>prelint</code> 脚本执行出错，就不会接着执行 <code>lint</code> 和 <code>postlint</code> 脚本。</p>\n<h3 id=\"npm-bin\"><a href=\"#npm-bin\" class=\"headerlink\" title=\"npm bin\"></a>npm bin</h3><p><code>npm bin</code> 命令显示相对于当前目录的，<code>Node</code> 模块的可执行脚本所在的目录（即 <code>.bin</code> 目录）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 项目根目录下执行</span></div><div class=\"line\">$ npm bin</div><div class=\"line\">./node_modules/.bin</div></pre></td></tr></table></figure>\n<h1 id=\"创建全局链接\"><a href=\"#创建全局链接\" class=\"headerlink\" title=\"创建全局链接\"></a>创建全局链接</h1><p><code>npm</code> 提供了一个有趣的命令 <code>npm link</code>，它的功能是在本地包和全局包之间创建符号链接。我们说过使用全局模式安装的包不能直接通过 <code>require</code> 使用。但通过 <code>npm link</code> 命令可以打破这一限制。举个例子，我们已经通过 <code>npm install -g express</code> 安装了 <code>express</code> ，这时在工程的目录下运行命令：<code>npm link express ./node_modules/express -&gt; /user/local/lib/node_modules/express</code><br>我们可以在 <code>node_modules</code> 子目录中发现一个指向安装到全局的包的符号链接。通过这种方法，我们就可以把全局包当做本地包来使用了。<br>除了将全局的包链接到本地以外，使用 <code>npm link</code> 命令还可以将本地的包链接到全局。使用方法是在包目录（<code>package.json</code> 所在目录）中运行 <code>npm link</code> 命令。如果我们要开发一个包，利用这种方法可以非常方便地在不同的工程间进行测试。</p>\n<h1 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h1><p>包是在模块基础上更深一步的抽象，<code>Node</code> 的包类似于 <code>C/C++</code> 的函数库或者 <code>Java</code> 、<code>.Net</code> 的类库。它将某个独立的功能封装起来，用于发布、更新、依赖管理和版本控制。<code>Node</code> 根据 <code>CommonJS</code> 规范实现了包机制，开发了 <code>npm</code> 来解决包的发布和获取需求。<br><code>Node</code> 的包是一个目录，其中包含了一个 <code>JSON</code> 格式的包说明文件 <code>package.json</code>。严格符合 <code>CommonJS</code> 规范的包应该具备以下特征：</p>\n<ul>\n<li><code>package.json</code> 必须在包的顶层目录下；</li>\n<li>二进制文件应该在 <code>bin</code> 目录下；</li>\n<li><code>JavaScript</code> 代码应该在 <code>lib</code> 目录下；</li>\n<li>文档应该在 <code>doc</code> 目录下；</li>\n<li>单元测试应该在 <code>test</code> 目录下。</li>\n</ul>\n<p><code>Node</code> 对包的要求并没有这么严格，只要顶层目录下有 <code>package.json</code>，并符合一些规范即可。当然为了提高兼容性，我们还是建议你在制作包的时候，严格遵守 <code>CommonJS</code> 规范。</p>\n<p>我们也可以把文件夹封装为一个模块，即所谓的包。包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于提供了一些固定接口的函数库。通过定制 <code>package.json</code>，我们可以创建更复杂，更完善，更符合规范的包用于发布。</p>\n<p><code>Node</code> 在调用某个包时，会首先检查包中 <code>packgage.json</code> 文件的 <code>main</code> 字段，将其作为包的接口模块，如果 <code>package.json</code> 或 <code>main</code> 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。</p>\n<p><code>package.json</code> 是 <code>CommonJS</code> 规定的用来描述包的文件，完全符合规范的 <code>package.json</code> 文件应该含有以下字段：<br><span id=\"inline-yellow\">name</span>: 包的名字，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格。<br><span id=\"inline-blue\">description</span>: 包的简要说明。<br><span id=\"inline-green\">version</span>: 符合语义化版本识别规范的版本字符串。<br><span id=\"inline-red\">keywords</span>: 关键字数组，通常用于搜索。<br><span id=\"inline-purple\">maintainers</span>: 维护者数组，每个元素要包含 <code>name</code> 、 <code>email</code>(可选)、 <code>web</code>(可选)字段。<br><span id=\"inline-yellow\">contributors</span>: 贡献者数组，格式与 <code>maintainers</code> 相同。包的作者应该是贡献者数组的第一个元素。<br><span id=\"inline-blue\">bugs</span>: 提交 <code>bug</code> 的地址，可以是网址或者电子邮件地址。<br><span id=\"inline-green\">licenses</span>: 许可证数组，每个元素要包含 <code>type</code> （许可证的名称）和 url（链接到许可证文本的地址）字段。<br><span id=\"inline-red\">repositories</span>: 仓库托管地址数组，每个元素要包含 <code>type</code> （仓库的类型，如 git）、URL（仓库的地址）和 path（相对于仓库的路径，可选）字段。<br><span id=\"inline-purple\">dependencies</span>: 包的依赖，一个关联数组，由包名称和版本号组成。</p>\n<h1 id=\"包的发布\"><a href=\"#包的发布\" class=\"headerlink\" title=\"包的发布\"></a>包的发布</h1><p>通过使用 <code>npm init</code> 可以根据交互式回答产生一个符合标准的 <code>package.json</code>。创建一个 <code>index.js</code> 作为包的接口,一个简单的包就制作完成了。<br>在发布前,我们还需要获得一个账号用于今后维护自己的包,使用 <code>npm adduser</code> 根据提示完成账号的创建<br>完成后可以使用 <code>npm whoami</code> 检测是否已经取得了账号。<br>接下来,在 <code>package.json</code> 所在目录下运行 <code>npm publish</code>，稍等片刻就可以完成发布了，打开浏览器，访问 <a href=\"http://search.npmjs.org/\" target=\"_blank\" rel=\"external\">NPM搜索</a> 就可以找到自己刚刚发布的包了。现在我们可以在世界的任意一台计算机上使用 <code>npm install neveryumodule</code> 命令来安装它。<br>如果你的包将来有更新,只需要在 <code>package.json</code> 文件中修改 <code>version</code> 字段,然后重新使用 <code>npm publish</code>命令就行了。<br>如果你对已发布的包不满意，可以使用 <code>npm unpublish</code> 命令来取消发布。</p>\n<p id=\"div-border-top-yellow\"><em>需要说明的是： <code>json</code> 文件不能有注释</em><br></p>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://javascript.ruanyifeng.com/nodejs/npm.html\" target=\"_blank\" rel=\"external\">http://javascript.ruanyifeng.com/nodejs/npm.html</a></p>\n","excerpt":"<h1 id=\"什么是-NPM\"><a href=\"#什么是-NPM\" class=\"headerlink\" title=\"什么是 NPM\"></a>什么是 NPM</h1><p><code>npm</code> 之于 <code>Node</code> ，就像 <code>pip</code> 之于 <code>Python</code> , <code>gem</code> 之于 <code>Ruby</code> , <code>composer</code> 之于 <code>PHP</code> 。</p>\n<p><code>npm</code> 是 <code>Node</code> 官方提供的包管理工具，他已经成了 <code>Node</code> 包的标准发布平台，用于 <code>Node</code> 包的发布、传播、依赖控制。<br><code>npm</code> 提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。</p>","more":"<h1 id=\"为什么要使用-NPM\"><a href=\"#为什么要使用-NPM\" class=\"headerlink\" title=\"为什么要使用 NPM\"></a>为什么要使用 NPM</h1><p><code>npm</code> 是随同 <code>Node</code> 一起安装的包管理工具，能解决 <code>Node</code> 代码部署上的很多问题，常见的场景有以下几种：</p>\n<ul>\n<li>允许用户从 <code>npm</code> 服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从 <code>npm</code> 服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到 <code>npm</code> 服务器供别人使用。</li>\n</ul>\n<p><code>npm</code> 的背后，是基于 <code>CouchDB</code> 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。</p>\n<h1 id=\"如何使用-NPM\"><a href=\"#如何使用-NPM\" class=\"headerlink\" title=\"如何使用 NPM\"></a>如何使用 NPM</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>npm</code> 不需要单独安装。在安装 <code>Node</code> 的时候，会连带一起安装 <code>npm</code> 。但是，<code>Node</code> 附带的 <code>npm</code> 可能不是最新版本，最后用下面的命令，更新到最新版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install npm@latest -g</div></pre></td></tr></table></figure>\n<p>如果是 Window 系统使用以下命令即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install npm -g</div></pre></td></tr></table></figure>\n<p>也就是使用 <code>npm</code> 安装自己。之所以可以这样，是因为 <code>npm</code> 本身与 <code>Node</code> 的其他模块没有区别。</p>\n<p>然后，运行下面的命令，查看各种信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 查看 npm 命令列表</span></div><div class=\"line\">$ npm <span class=\"built_in\">help</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看各个命令的简单用法</span></div><div class=\"line\">$ npm <span class=\"_\">-l</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看 npm 的版本</span></div><div class=\"line\">$ npm -v</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看 npm 的配置</span></div><div class=\"line\">$ npm config list <span class=\"_\">-l</span></div></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"npm-init\"><a href=\"#npm-init\" class=\"headerlink\" title=\"npm init\"></a>npm init</h3><p><code>npm init</code> 用来初始化生成一个新的 <code>package.json</code> 文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。<br>如果使用了 <code>-f</code>（代表<code>force</code>）、<code>-y</code>（代表<code>yes</code>），则跳过提问阶段，直接生成一个新的 <code>package.json</code> 文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm init -y</div></pre></td></tr></table></figure>\n<h3 id=\"npm-set\"><a href=\"#npm-set\" class=\"headerlink\" title=\"npm set\"></a>npm set</h3><p><code>npm set</code> 用来设置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm <span class=\"built_in\">set</span> init-author-name <span class=\"string\">'Your name'</span></div><div class=\"line\">$ npm <span class=\"built_in\">set</span> init-author-email <span class=\"string\">'Your email'</span></div><div class=\"line\">$ npm <span class=\"built_in\">set</span> init-author-url <span class=\"string\">'http://yourdomain.com'</span></div><div class=\"line\">$ npm <span class=\"built_in\">set</span> init-license <span class=\"string\">'MIT'</span></div></pre></td></tr></table></figure>\n<p>上面命令等于为 <code>npm init</code> 设置了默认值，以后执行 <code>npm init</code> 的时候，<code>package.json</code>的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的 <code>~/.npmrc</code>文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行 <code>npm config</code>。</p>\n<h3 id=\"npm-info\"><a href=\"#npm-info\" class=\"headerlink\" title=\"npm info\"></a>npm info</h3><p><code>npm info</code> 命令可以查看每个模块的具体信息。比如，查看 <code>underscore</code> 模块的信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm info underscore</div></pre></td></tr></table></figure>\n<p>上面命令返回一个 <code>JavaScript</code> 对象，包含了 <code>underscore</code> 模块的详细信息。这个对象的每个成员，都可以直接从 <code>info</code> 命令查询。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm info underscore description</div><div class=\"line\"></div><div class=\"line\">$ npm info underscore homepage</div><div class=\"line\"></div><div class=\"line\">$ npm info underscore version</div></pre></td></tr></table></figure>\n<h3 id=\"npm-search\"><a href=\"#npm-search\" class=\"headerlink\" title=\"npm search\"></a>npm search</h3><p><code>npm search</code> 命令用于搜索 <code>npm</code> 仓库，它后面可以跟字符串，也可以跟正则表达式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm search &lt;搜索词&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"npm-list\"><a href=\"#npm-list\" class=\"headerlink\" title=\"npm list\"></a>npm list</h3><p><code>npm list</code> 命令以树形结构列出当前项目安装的所有模块，以及它们依赖的模块。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm list</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 加上 global 参数，会列出全局安装的模块</span></div><div class=\"line\">$ npm list -global</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># npm list 命令也可以列出单个模块</span></div><div class=\"line\">$ npm list underscore</div></pre></td></tr></table></figure>\n<h3 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h3><p>使用 <code>npm</code> 安装包的命令格式为：<code>npm [install/i] [package_name]</code></p>\n<h4 id=\"本地模式和全局模式\"><a href=\"#本地模式和全局模式\" class=\"headerlink\" title=\"本地模式和全局模式\"></a>本地模式和全局模式</h4><p><code>npm</code> 在默认情况下会从 <a href=\"http://npmjs.org\">NPM</a> 搜索或下载包，将包安装到当前目录的 <code>node_modules</code> 子目录下。</p>\n<p>如果你熟悉 <code>Ruby</code> 的 <code>gem</code> 或者 <code>Python</code> 的 <code>pip</code> ，你会发现 <code>npm</code> 与它们的行为不同， <code>gem</code> 或 <code>pip</code> 总是以全局模式安装，使包可以供所有的程序使用，而 <code>npm</code> 默认会把包安装到当前目录下。这反映了 <code>npm</code> 不同的设计哲学。如果把包安装到全局，可以提供程序的重复利用程度，避免同样的内容的多分副本，但坏处是难以处理不同的版本依赖。如果把包安装到当前目录，或者说本地，则不会有不同程序依赖不同版本的包的冲突问题，同时还减轻了包作者的 <code>API</code> 兼容性压力，但缺陷则是同一个包可能会被安装许多次。</p>\n<p>我们在使用 <code>supervisor</code> 的时候使用了 <code>npm install -g supervisor</code> 命令，就是以全局模式安装 <code>supervisor</code> 。</p>\n<p>这里注意一点的就是， <code>supervisor</code> 必须安装到全局，如果你不安装到全局，错误命令会提示你安装到全局。如果不想安装到默认的全局，也可以自己修改全局路径到当前路径 <code>npm config set prefix &quot;路径&quot;</code> 安装完以后就可以用 <code>supervisor</code> 来启动服务了。<br><code>supervisor</code> 可以帮助你实现这个功能，它会监视你对代码的驱动，并自动重启 <code>Node</code> 。</p>\n<p>一般来说，全局安装只适用于工具模块，比如 <code>eslint</code> 和 <code>gulp</code> 。关于使用全局模式，多数时候并不是因为许多程序都有可能用到了它，为了减少多重副本而使用全局模式，而是因为 <strong>本地模式不会注册 <code>PATH</code> 环境变量</strong>。<br>“本地安装”指的是将一个模块下载到当前项目的 <code>node_modules</code> 子目录，然后只有在项目目录之中，才能调用这个模块。</p>\n<p>本地模式和全局模式的特点如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">可通过 require 使用</th>\n<th style=\"text-align:center\">注册 PATH</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">本地模式</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全局模式</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 本地安装</span></div><div class=\"line\">$ npm install &lt;package name&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 全局安装</span></div><div class=\"line\">$ sudo npm install -global &lt;package name&gt;</div><div class=\"line\">$ sudo npm install -g &lt;package name&gt;</div></pre></td></tr></table></figure>\n<p><code>npm install</code> 也支持直接输入 <code>Github</code> 代码库地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install git://github.com/package/path.git</div><div class=\"line\">$ npm install git://github.com/package/path.git<span class=\"comment\">#0.1.0</span></div></pre></td></tr></table></figure>\n<p>安装之前，<code>npm install</code> 会先检查，<code>node_modules</code> 目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p>\n<p>如果你希望，一个模块不管是否安装过， <code>npm</code> 都要强制重新安装，可以使用 <code>-f</code> 或 <code>--force</code> 参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install &lt;packageName&gt; --force</div></pre></td></tr></table></figure>\n<h4 id=\"安装不同版本\"><a href=\"#安装不同版本\" class=\"headerlink\" title=\"安装不同版本\"></a>安装不同版本</h4><p><code>install</code> 命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上 <code>@</code> 和版本号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install sax@latest</div><div class=\"line\">$ npm install sax@0.1.1</div><div class=\"line\">$ npm install sax@<span class=\"string\">\"&gt;=0.1.0 &lt;0.2.0\"</span></div></pre></td></tr></table></figure>\n<p><code>install</code> 命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在 <code>packages.json</code> 文件的哪一项中。</p>\n<blockquote>\n<p>–save：模块名将被添加到 dependencies，可以简化为参数-S。<br>–save-dev：模块名将被添加到 devDependencies，可以简化为参数-D。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install sax --save</div><div class=\"line\">$ npm install node-tap --save-dev</div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">$ npm install sax -S</div><div class=\"line\">$ npm install node-tap -D</div></pre></td></tr></table></figure>\n<h5 id=\"dependencies-依赖\"><a href=\"#dependencies-依赖\" class=\"headerlink\" title=\"dependencies 依赖\"></a>dependencies 依赖</h5><p>这个可以说是我们 <code>npm</code> 核心一项内容，依赖管理，这个对象里面的内容就是我们这个项目所依赖的 <code>js</code> 模块包。下面这段代码表示我们依赖了 <code>markdown-it</code> 这个包，版本是 <code>^8.1.0</code> ，代表最小依赖版本是 <code>8.1.0</code> ，如果这个包有更新，那么当我们使用 <code>npm install</code> 命令的时候， <code>npm</code> 会帮我们下载最新的包。当别人引用我们这个包的时候，包内的依赖包也会被下载下来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"markdown-it\"</span>: <span class=\"string\">\"^8.1.0\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"devDependencies-开发依赖\"><a href=\"#devDependencies-开发依赖\" class=\"headerlink\" title=\"devDependencies 开发依赖\"></a>devDependencies 开发依赖</h5><p>在我们开发的时候会用到的一些包，只是在开发环境中需要用到，但是在别人引用我们包的时候，不会用到这些内容，放在 <code>devDependencies</code> 的包，在别人引用的时候不会被 <code>npm</code> 下载。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"autoprefixer\"</span>: <span class=\"string\">\"^6.4.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-stage-2\"</span>: <span class=\"string\">\"^6.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-register\"</span>: <span class=\"string\">\"^6.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^1.13.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-dev-middleware\"</span>: <span class=\"string\">\"^1.8.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-hot-middleware\"</span>: <span class=\"string\">\"^2.12.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"webpack-merge\"</span>: <span class=\"string\">\"^0.14.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"highlightjs\"</span>: <span class=\"string\">\"^9.8.0\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当你有了一个完整的 <code>package.json</code>文件的时候，就可以让人一眼看出来，这个模块的基本信息，和这个模块所需要依赖的包。我们可以通过 <code>npm install</code> 就可以很方便的下载好这个模块所需要的包。</p>\n<p><code>npm install</code> 默认会安装 <code>dependencies</code> 字段和 <code>devDependencies</code> 字段中的所有模块，如果使用 <code>--production</code> 参数，可以只安装 <code>dependencies</code> 字段的模块。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --production</div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">$ NODE_ENV=production npm install</div></pre></td></tr></table></figure>\n<p>一旦安装了某个模块，就可以在代码中用 <code>require</code> 命令加载这个模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> backbone = <span class=\"built_in\">require</span>(<span class=\"string\">'backbone'</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(backbone.VERSION)</div></pre></td></tr></table></figure>\n<h3 id=\"npm-run\"><a href=\"#npm-run\" class=\"headerlink\" title=\"npm run\"></a>npm run</h3><p><code>npm</code> 不仅可以用于模块管理，还可以用于执行脚本。<code>package.json</code> 文件有一个 <code>scripts</code> 字段，可以用于指定脚本命令，供 <code>npm</code> 直接调用。<br><code>package.json</code> 文件内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"myproject\"</span>,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"jshint\"</span>: <span class=\"string\">\"latest\"</span>,</div><div class=\"line\">    <span class=\"string\">\"browserify\"</span>: <span class=\"string\">\"latest\"</span>,</div><div class=\"line\">    <span class=\"string\">\"mocha\"</span>: <span class=\"string\">\"latest\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"jshint **.js\"</span>,</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha test/\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"scripts-脚本\"><a href=\"#scripts-脚本\" class=\"headerlink\" title=\"scripts 脚本\"></a>scripts 脚本</h4><p>顾名思义，就是一些脚本代码，可以通过 <code>npm run script-key</code> 来调用，例如在这个 <code>package.json</code> 的文件夹下使用 <code>npm run dev</code> 就相当于运行了 <code>node build/dev-server.js</code> 这一段代码。使用 <code>scripts</code> 的目的就是为了把一些要执行的代码合并到一起，使用 npm run 来快速的运行，方便省事。<br><code>npm run</code> 是 <code>npm run-script</code> 的缩写，一般都使用前者，但是后者可以更好的反应这个命令的本质。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 脚本</span></div><div class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"node build/dev-server.js\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"node build/build.js\"</span>,</div><div class=\"line\">    <span class=\"string\">\"docs\"</span>: <span class=\"string\">\"node build/docs.js\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build-docs\"</span>: <span class=\"string\">\"npm run docs &amp; git checkout gh-pages &amp; xcopy /sy dist\\\\* . &amp; git add . &amp; git commit -m 'auto-pages' &amp; git push &amp; git checkout master\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build-publish\"</span>: <span class=\"string\">\"rmdir /S /Q lib &amp; npm run build &amp;git add . &amp; git commit -m auto-build &amp; npm version patch &amp; npm publish &amp; git push\"</span>,</div><div class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint --ext .js,.vue src\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>npm run</code> 如果不加任何参数，直接运行，会列出 <code>package.json</code> 里面所有可以执行的脚本命令。<br><code>npm</code> 内置了两个命令简写， <code>npm test</code> 等同于执行 <code>npm run test</code> ，<code>npm start</code> 等同于执行 <code>npm run start</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"build\"</span>: <span class=\"string\">\"npm run build-js &amp;&amp; npm run build-css\"</span></div></pre></td></tr></table></figure>\n<p>上面的写法是先运行 <code>npm run build-js</code> ，然后再运行 <code>npm run build-css</code> ，两个命令中间用 <code>&amp;&amp;</code> 连接。如果希望两个命令同时平行执行，它们中间可以用 <code>&amp;</code> 连接。</p>\n<p>写在 <code>scripts</code> 属性中的命令，也可以在 <code>node_modules/.bin</code> 目录中直接写成 <code>bash</code> 脚本。下面是一个 <code>bash</code> 脚本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</div><div class=\"line\"></span></div><div class=\"line\"><span class=\"built_in\">cd</span> site/main</div><div class=\"line\">browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js</div></pre></td></tr></table></figure>\n<p>假定上面的脚本文件名为 <code>build.sh</code> ，并且权限为可执行，就可以在 <code>scripts</code> 属性中引用该文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"build-js\"</span>: <span class=\"string\">\"bin/build.sh\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"pre-和-post-脚本\"><a href=\"#pre-和-post-脚本\" class=\"headerlink\" title=\"pre- 和 post- 脚本\"></a>pre- 和 post- 脚本</h3><p><code>npm run</code> 为每条命令提供了 <code>pre-</code> 和 <code>post-</code> 两个钩子（ <code>hook</code> ）。以 <code>npm run lint</code> 为例，执行这条命令之前， <code>npm</code> 会先查看有没有定义 <code>prelint</code> 和 <code>postlint</code> 两个钩子，如果有的话，就会先执行 <code>npm run prelint</code> ，然后执行 <code>npm run lint</code> ，最后执行 <code>npm run postlint</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"myproject\"</span>,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"eslint\"</span>: <span class=\"string\">\"latest\"</span></div><div class=\"line\">    <span class=\"string\">\"karma\"</span>: <span class=\"string\">\"latest\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint --cache --ext .js --ext .jsx src\"</span>,</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"karma start --log-leve=error karma.config.js --single-run=true\"</span>,</div><div class=\"line\">    <span class=\"string\">\"pretest\"</span>: <span class=\"string\">\"npm run lint\"</span>,</div><div class=\"line\">    <span class=\"string\">\"posttest\"</span>: <span class=\"string\">\"echo 'Finished running tests'\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码是一个 <code>package.json</code> 文件的例子。如果执行 <code>npm test</code>，会按下面的顺序执行相应的命令。</p>\n<ol>\n<li><code>pretest</code></li>\n<li><code>test</code></li>\n<li><code>posttest</code></li>\n</ol>\n<p>如果执行过程出错，就不会执行排在后面的脚本，即如果 <code>prelint</code> 脚本执行出错，就不会接着执行 <code>lint</code> 和 <code>postlint</code> 脚本。</p>\n<h3 id=\"npm-bin\"><a href=\"#npm-bin\" class=\"headerlink\" title=\"npm bin\"></a>npm bin</h3><p><code>npm bin</code> 命令显示相对于当前目录的，<code>Node</code> 模块的可执行脚本所在的目录（即 <code>.bin</code> 目录）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 项目根目录下执行</span></div><div class=\"line\">$ npm bin</div><div class=\"line\">./node_modules/.bin</div></pre></td></tr></table></figure>\n<h1 id=\"创建全局链接\"><a href=\"#创建全局链接\" class=\"headerlink\" title=\"创建全局链接\"></a>创建全局链接</h1><p><code>npm</code> 提供了一个有趣的命令 <code>npm link</code>，它的功能是在本地包和全局包之间创建符号链接。我们说过使用全局模式安装的包不能直接通过 <code>require</code> 使用。但通过 <code>npm link</code> 命令可以打破这一限制。举个例子，我们已经通过 <code>npm install -g express</code> 安装了 <code>express</code> ，这时在工程的目录下运行命令：<code>npm link express ./node_modules/express -&gt; /user/local/lib/node_modules/express</code><br>我们可以在 <code>node_modules</code> 子目录中发现一个指向安装到全局的包的符号链接。通过这种方法，我们就可以把全局包当做本地包来使用了。<br>除了将全局的包链接到本地以外，使用 <code>npm link</code> 命令还可以将本地的包链接到全局。使用方法是在包目录（<code>package.json</code> 所在目录）中运行 <code>npm link</code> 命令。如果我们要开发一个包，利用这种方法可以非常方便地在不同的工程间进行测试。</p>\n<h1 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h1><p>包是在模块基础上更深一步的抽象，<code>Node</code> 的包类似于 <code>C/C++</code> 的函数库或者 <code>Java</code> 、<code>.Net</code> 的类库。它将某个独立的功能封装起来，用于发布、更新、依赖管理和版本控制。<code>Node</code> 根据 <code>CommonJS</code> 规范实现了包机制，开发了 <code>npm</code> 来解决包的发布和获取需求。<br><code>Node</code> 的包是一个目录，其中包含了一个 <code>JSON</code> 格式的包说明文件 <code>package.json</code>。严格符合 <code>CommonJS</code> 规范的包应该具备以下特征：</p>\n<ul>\n<li><code>package.json</code> 必须在包的顶层目录下；</li>\n<li>二进制文件应该在 <code>bin</code> 目录下；</li>\n<li><code>JavaScript</code> 代码应该在 <code>lib</code> 目录下；</li>\n<li>文档应该在 <code>doc</code> 目录下；</li>\n<li>单元测试应该在 <code>test</code> 目录下。</li>\n</ul>\n<p><code>Node</code> 对包的要求并没有这么严格，只要顶层目录下有 <code>package.json</code>，并符合一些规范即可。当然为了提高兼容性，我们还是建议你在制作包的时候，严格遵守 <code>CommonJS</code> 规范。</p>\n<p>我们也可以把文件夹封装为一个模块，即所谓的包。包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于提供了一些固定接口的函数库。通过定制 <code>package.json</code>，我们可以创建更复杂，更完善，更符合规范的包用于发布。</p>\n<p><code>Node</code> 在调用某个包时，会首先检查包中 <code>packgage.json</code> 文件的 <code>main</code> 字段，将其作为包的接口模块，如果 <code>package.json</code> 或 <code>main</code> 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。</p>\n<p><code>package.json</code> 是 <code>CommonJS</code> 规定的用来描述包的文件，完全符合规范的 <code>package.json</code> 文件应该含有以下字段：<br><span id=\"inline-yellow\">name</span>: 包的名字，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格。<br><span id=\"inline-blue\">description</span>: 包的简要说明。<br><span id=\"inline-green\">version</span>: 符合语义化版本识别规范的版本字符串。<br><span id=\"inline-red\">keywords</span>: 关键字数组，通常用于搜索。<br><span id=\"inline-purple\">maintainers</span>: 维护者数组，每个元素要包含 <code>name</code> 、 <code>email</code>(可选)、 <code>web</code>(可选)字段。<br><span id=\"inline-yellow\">contributors</span>: 贡献者数组，格式与 <code>maintainers</code> 相同。包的作者应该是贡献者数组的第一个元素。<br><span id=\"inline-blue\">bugs</span>: 提交 <code>bug</code> 的地址，可以是网址或者电子邮件地址。<br><span id=\"inline-green\">licenses</span>: 许可证数组，每个元素要包含 <code>type</code> （许可证的名称）和 url（链接到许可证文本的地址）字段。<br><span id=\"inline-red\">repositories</span>: 仓库托管地址数组，每个元素要包含 <code>type</code> （仓库的类型，如 git）、URL（仓库的地址）和 path（相对于仓库的路径，可选）字段。<br><span id=\"inline-purple\">dependencies</span>: 包的依赖，一个关联数组，由包名称和版本号组成。</p>\n<h1 id=\"包的发布\"><a href=\"#包的发布\" class=\"headerlink\" title=\"包的发布\"></a>包的发布</h1><p>通过使用 <code>npm init</code> 可以根据交互式回答产生一个符合标准的 <code>package.json</code>。创建一个 <code>index.js</code> 作为包的接口,一个简单的包就制作完成了。<br>在发布前,我们还需要获得一个账号用于今后维护自己的包,使用 <code>npm adduser</code> 根据提示完成账号的创建<br>完成后可以使用 <code>npm whoami</code> 检测是否已经取得了账号。<br>接下来,在 <code>package.json</code> 所在目录下运行 <code>npm publish</code>，稍等片刻就可以完成发布了，打开浏览器，访问 <a href=\"http://search.npmjs.org/\">NPM搜索</a> 就可以找到自己刚刚发布的包了。现在我们可以在世界的任意一台计算机上使用 <code>npm install neveryumodule</code> 命令来安装它。<br>如果你的包将来有更新,只需要在 <code>package.json</code> 文件中修改 <code>version</code> 字段,然后重新使用 <code>npm publish</code>命令就行了。<br>如果你对已发布的包不满意，可以使用 <code>npm unpublish</code> 命令来取消发布。</p>\n<p id=\"div-border-top-yellow\"><em>需要说明的是： <code>json</code> 文件不能有注释</em><br></p>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://javascript.ruanyifeng.com/nodejs/npm.html\">http://javascript.ruanyifeng.com/nodejs/npm.html</a></p>"},{"title":"JavaScript高级篇总结","date":"2016-11-12T11:04:31.000Z","_content":"javascript高级与面向对象笔记总结！！\n\n<!-- more -->\n\n## 递归\n\n递归就是函数自己直接或者间接的调用自己\n\n### 递归的两个要素\n\n* 自己调用自己\n* 递归结束条件\n\n### 化归思想\n\n由难化易，由繁化简，的思想就是化归思想\n\n### 前n项和\n\n```js\nfn(n) = fn(n-1) + n\n```\n\n```js\nfunction sum(n){\n    if(n==1){\n        return 1;\n    }\n    return sum(n - 1) + n;\n}\n```\n\n### 阶乘\n\n```js\nfn(n) = fn(n-1) * n\n```\n\n```js\nfunction sum(n){\n    if(n==1){\n        return 1;\n    }\n    return sum(n - 1) * n;\n}\n```\n\n### 斐波那契数列\n\n```js\nfn(n) = fn(n-1) + fn(n-2)\n```\n```js\nfunction fib(n){\n    if( n <= 2){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n```\n\n### 递归获取指定元素的后代元素\n\n```js\nfunction getChildren(ele){\n    var result = [];\n    var children = ele.children;\n    for(var i = 0; i < children.length; i++){\n        result.push(children[i]);\n        var temp = getChildren(children[i]);\n        result = result.concat(temp);\n    }\n    return result;\n}\n```\n\n## 闭包\n\n一个封闭的包裹结构\n\n一个可以访问独立数据的函数\n\n```js\nfunction outer(){\n    var data = \"\";\n    return function(){\n        //可以操作data数据\n    }\n}\n```\n\n获取和设置数据\n\n```js\nfunction outer(){\n    var data = \"\";\n    return {\n        getData:function(){\n            return data;\n        },\n        setDate:function(value){\n            data = value;\n        }\n    }\n}\n```\n\n### for循环注册点击事件的问题\n\n```js\n\nvar divs = document.getElementsByTagName(\"div\");\nfor(var i = 0; i < divs.length; i++){\n    var div = divs[i];\n    function outer(){\n        var j = i;\n        return function(){\n            console.log(j);\n        }\n    }\n    div.onclick = outer();\n}\n\n```\n\n### for循环中使用setTimeout\n\n```js\nfor( var i = 0; i < 10; i++){\n    setTimeout((function(){\n        var j = i;\n        return function(){\n            console.log(j);\n        }\n    }()),0)\n}\n```\n\n## 缓存\n\n* 硬件缓存\n* 浏览器缓存\n* `CDN`---`Content Delivery Network`  内容分发网络\n\n### 使用缓存解决递归实现的斐波那契数列的性能问题\n\n```js\nfunction createFib(){\n    var arr = [];\n    return function(n){\n        var num = arr[n];\n        if(!num){\n            if(n <= 2){\n                num = 1;\n            }else{\n                num = arguments.callee(n - 1) + arguments.callee(n - 2);\n            }\n            arr[n] = num;\n        }\n        return num;\n    }\n}\n```\n\n### jQuery缓存实现分析\n\n```js\nfunction createCache(){\n    var cache = {};\n    var arr = [];\n    return function(key, value){\n        if(value){\n            cache[key] = value;\n            arr.push(key);\n            if(arr.length > 50){\n                delete cache[arr.shift()];\n            }\n        }else{\n            return cache[key];\n        }\n    }\n}\n```\n\n## 函数的四种调用模式\n\n### 函数调用模式\n\n形式: 函数名();\n`this: window`\n\n### 方法调用模式\n\n形式: 对象名.方法名();\nthis: 调用该方法的对象\n\n### 构造函数调用模式\n\n形式: `new` .构造函数名()\n`this: new`创建出来的对象\n\n#### 工厂模式\n\n```js\nfunction createObject(){\n    var o = new Object();\n    o.xxx = \"xxx\";\n    o.yyy = \"yy\";\n    return o;\n}\n\nvar p  = createObject();\n```\n\n#### 寄生模式\n\n```js\nfunction CObject(){\n    var o = new Object();\n    o.xxx = \"xxx\";\n    o.yyy = \"yy\";\n    return o;\n}\n\nvar p = new CObject();\n```\n\n### 上下文调用模式\n\n#### call\n\n```js\n函数名.call(对象,参数1,参数2,参数3...)\n```\n1. 调用该函数\n2. 将函数内部的`this`赋值为`call`的第一个参数\n3. 将第一个参数之后的所有参数，当做实参传递给函数\n\n#### apply\n\n```js\n函数名.apply(对象,数组)\n```\n1. 调用该函数\n2. 将函数内部的`this`赋值为`apply`的第一个参数\n3. 将第二个参数的数组，依次拆解开，将每一个元素挨个传递给函数做为实参\n\n##### 伪数组转换成数组\n\n```js\nvar arrFake = {\n    0:1,\n    1:2,\n    2:3,\n    length:3\n}\n\nvar arrReal = [];\n\narrReal.push.apply(arrReal, arrFake);\n//arrReal.push(arrFake[0] , arrFake[1], arrFake[2])   相当于这句代码\n\n```\n\n##### 求数组最大值\n\n```js\nvar arr = [1,23,4,4,3,3,34,3,2];\nvar maxNum = Math.max.apply(null, arr);\n```\n\n#### 借用构造函数继承\n\n```js\nfunction Father(){\n    this.name = \"\";\n    this.money = 99999999999999;\n}\n\nfunction Son(){\n    Father.call(this);\n}\n\nvar s = new Son();\n```\n\n## 沙箱模式\n\n一个隔离的安全的环境\n\n```js\n(function(w){\n    //需要隔离的代码\n    //最顶上写 变量函数之类的申明\n    //逻辑代码\n    //如果需要，使用window对象向外界暴露接口\n})(window)\n```\n\n为什么要将 `window` 作为参数传递\n1. 外面无法访问里面，里面也不要去访问外面的东西\n2. 在代码压缩的时候，内置的对象名称无法被压缩，如果使用自己的变量，是可以压缩的\n\n## forEach 和　map\n\n```js\nvar arr = [1, 2, 3, 4, 5 ,6];\n//currentEle 当前正在遍历的元素,\n//currentIndex 当前遍历的元素的索引,\n//currentArray 当前正在被遍历的数组\narr.forEach(function(currentEle, currentIndex, currentArray){\n    currentArray[currentIndex] = currentEle * 2;\n})\n\n//currentEle 当前正在遍历的元素,\n//currentIndex 当前遍历的元素的索引,\n//currentArray 当前正在被遍历的数组\n//map如果回调函数内有返回值，会将所有调用的返回值重新组合成一个数组，作为map方法的返回值\narr.map(function(currentEle, currentIndex, currentArray){\n    return currentEle * 2;\n})\n```\n\n## 严格模式\n\n```js\n\"use strict\"\n```\n* 变量不使用`var`声明会报错\n* 不能删除不允许删除的属性\n* 对象的属性不可以重名\n* 函数的形参不可以重名\n* 不允许使用八进制数据\n\n## 事件兼容性处理\n\n```js\nfunction createRegister(){\n    if(window.addEventListener){\n        return function(target, type, handler){\n            target.addEventListener(type, handler);\n        }\n    }else if(window.attachEvent){\n        return function(target, type, handler){\n            target.attachEvent(\"on\" + type, function(){\n                handler.call(target, window.event);\n            })\n        }\n    }else{\n        return function(target, type, handler){\n            target[\"on\"+type] = handler;\n        }\n    }\n}\n```","source":"_posts/javascript-summary.md","raw":"---\ntitle: JavaScript高级篇总结\ndate: 2016-11-12 19:04:31\ntags: javascript\ncategories: javascript\n---\njavascript高级与面向对象笔记总结！！\n\n<!-- more -->\n\n## 递归\n\n递归就是函数自己直接或者间接的调用自己\n\n### 递归的两个要素\n\n* 自己调用自己\n* 递归结束条件\n\n### 化归思想\n\n由难化易，由繁化简，的思想就是化归思想\n\n### 前n项和\n\n```js\nfn(n) = fn(n-1) + n\n```\n\n```js\nfunction sum(n){\n    if(n==1){\n        return 1;\n    }\n    return sum(n - 1) + n;\n}\n```\n\n### 阶乘\n\n```js\nfn(n) = fn(n-1) * n\n```\n\n```js\nfunction sum(n){\n    if(n==1){\n        return 1;\n    }\n    return sum(n - 1) * n;\n}\n```\n\n### 斐波那契数列\n\n```js\nfn(n) = fn(n-1) + fn(n-2)\n```\n```js\nfunction fib(n){\n    if( n <= 2){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n```\n\n### 递归获取指定元素的后代元素\n\n```js\nfunction getChildren(ele){\n    var result = [];\n    var children = ele.children;\n    for(var i = 0; i < children.length; i++){\n        result.push(children[i]);\n        var temp = getChildren(children[i]);\n        result = result.concat(temp);\n    }\n    return result;\n}\n```\n\n## 闭包\n\n一个封闭的包裹结构\n\n一个可以访问独立数据的函数\n\n```js\nfunction outer(){\n    var data = \"\";\n    return function(){\n        //可以操作data数据\n    }\n}\n```\n\n获取和设置数据\n\n```js\nfunction outer(){\n    var data = \"\";\n    return {\n        getData:function(){\n            return data;\n        },\n        setDate:function(value){\n            data = value;\n        }\n    }\n}\n```\n\n### for循环注册点击事件的问题\n\n```js\n\nvar divs = document.getElementsByTagName(\"div\");\nfor(var i = 0; i < divs.length; i++){\n    var div = divs[i];\n    function outer(){\n        var j = i;\n        return function(){\n            console.log(j);\n        }\n    }\n    div.onclick = outer();\n}\n\n```\n\n### for循环中使用setTimeout\n\n```js\nfor( var i = 0; i < 10; i++){\n    setTimeout((function(){\n        var j = i;\n        return function(){\n            console.log(j);\n        }\n    }()),0)\n}\n```\n\n## 缓存\n\n* 硬件缓存\n* 浏览器缓存\n* `CDN`---`Content Delivery Network`  内容分发网络\n\n### 使用缓存解决递归实现的斐波那契数列的性能问题\n\n```js\nfunction createFib(){\n    var arr = [];\n    return function(n){\n        var num = arr[n];\n        if(!num){\n            if(n <= 2){\n                num = 1;\n            }else{\n                num = arguments.callee(n - 1) + arguments.callee(n - 2);\n            }\n            arr[n] = num;\n        }\n        return num;\n    }\n}\n```\n\n### jQuery缓存实现分析\n\n```js\nfunction createCache(){\n    var cache = {};\n    var arr = [];\n    return function(key, value){\n        if(value){\n            cache[key] = value;\n            arr.push(key);\n            if(arr.length > 50){\n                delete cache[arr.shift()];\n            }\n        }else{\n            return cache[key];\n        }\n    }\n}\n```\n\n## 函数的四种调用模式\n\n### 函数调用模式\n\n形式: 函数名();\n`this: window`\n\n### 方法调用模式\n\n形式: 对象名.方法名();\nthis: 调用该方法的对象\n\n### 构造函数调用模式\n\n形式: `new` .构造函数名()\n`this: new`创建出来的对象\n\n#### 工厂模式\n\n```js\nfunction createObject(){\n    var o = new Object();\n    o.xxx = \"xxx\";\n    o.yyy = \"yy\";\n    return o;\n}\n\nvar p  = createObject();\n```\n\n#### 寄生模式\n\n```js\nfunction CObject(){\n    var o = new Object();\n    o.xxx = \"xxx\";\n    o.yyy = \"yy\";\n    return o;\n}\n\nvar p = new CObject();\n```\n\n### 上下文调用模式\n\n#### call\n\n```js\n函数名.call(对象,参数1,参数2,参数3...)\n```\n1. 调用该函数\n2. 将函数内部的`this`赋值为`call`的第一个参数\n3. 将第一个参数之后的所有参数，当做实参传递给函数\n\n#### apply\n\n```js\n函数名.apply(对象,数组)\n```\n1. 调用该函数\n2. 将函数内部的`this`赋值为`apply`的第一个参数\n3. 将第二个参数的数组，依次拆解开，将每一个元素挨个传递给函数做为实参\n\n##### 伪数组转换成数组\n\n```js\nvar arrFake = {\n    0:1,\n    1:2,\n    2:3,\n    length:3\n}\n\nvar arrReal = [];\n\narrReal.push.apply(arrReal, arrFake);\n//arrReal.push(arrFake[0] , arrFake[1], arrFake[2])   相当于这句代码\n\n```\n\n##### 求数组最大值\n\n```js\nvar arr = [1,23,4,4,3,3,34,3,2];\nvar maxNum = Math.max.apply(null, arr);\n```\n\n#### 借用构造函数继承\n\n```js\nfunction Father(){\n    this.name = \"\";\n    this.money = 99999999999999;\n}\n\nfunction Son(){\n    Father.call(this);\n}\n\nvar s = new Son();\n```\n\n## 沙箱模式\n\n一个隔离的安全的环境\n\n```js\n(function(w){\n    //需要隔离的代码\n    //最顶上写 变量函数之类的申明\n    //逻辑代码\n    //如果需要，使用window对象向外界暴露接口\n})(window)\n```\n\n为什么要将 `window` 作为参数传递\n1. 外面无法访问里面，里面也不要去访问外面的东西\n2. 在代码压缩的时候，内置的对象名称无法被压缩，如果使用自己的变量，是可以压缩的\n\n## forEach 和　map\n\n```js\nvar arr = [1, 2, 3, 4, 5 ,6];\n//currentEle 当前正在遍历的元素,\n//currentIndex 当前遍历的元素的索引,\n//currentArray 当前正在被遍历的数组\narr.forEach(function(currentEle, currentIndex, currentArray){\n    currentArray[currentIndex] = currentEle * 2;\n})\n\n//currentEle 当前正在遍历的元素,\n//currentIndex 当前遍历的元素的索引,\n//currentArray 当前正在被遍历的数组\n//map如果回调函数内有返回值，会将所有调用的返回值重新组合成一个数组，作为map方法的返回值\narr.map(function(currentEle, currentIndex, currentArray){\n    return currentEle * 2;\n})\n```\n\n## 严格模式\n\n```js\n\"use strict\"\n```\n* 变量不使用`var`声明会报错\n* 不能删除不允许删除的属性\n* 对象的属性不可以重名\n* 函数的形参不可以重名\n* 不允许使用八进制数据\n\n## 事件兼容性处理\n\n```js\nfunction createRegister(){\n    if(window.addEventListener){\n        return function(target, type, handler){\n            target.addEventListener(type, handler);\n        }\n    }else if(window.attachEvent){\n        return function(target, type, handler){\n            target.attachEvent(\"on\" + type, function(){\n                handler.call(target, window.event);\n            })\n        }\n    }else{\n        return function(target, type, handler){\n            target[\"on\"+type] = handler;\n        }\n    }\n}\n```","slug":"javascript-summary","published":1,"updated":"2016-11-24T01:32:28.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvpi003puwg7q0jesakj","content":"<p>javascript高级与面向对象笔记总结！！</p>\n<a id=\"more\"></a>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>递归就是函数自己直接或者间接的调用自己</p>\n<h3 id=\"递归的两个要素\"><a href=\"#递归的两个要素\" class=\"headerlink\" title=\"递归的两个要素\"></a>递归的两个要素</h3><ul>\n<li>自己调用自己</li>\n<li>递归结束条件</li>\n</ul>\n<h3 id=\"化归思想\"><a href=\"#化归思想\" class=\"headerlink\" title=\"化归思想\"></a>化归思想</h3><p>由难化易，由繁化简，的思想就是化归思想</p>\n<h3 id=\"前n项和\"><a href=\"#前n项和\" class=\"headerlink\" title=\"前n项和\"></a>前n项和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fn(n) = fn(n<span class=\"number\">-1</span>) + n</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum(n - <span class=\"number\">1</span>) + n;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"阶乘\"><a href=\"#阶乘\" class=\"headerlink\" title=\"阶乘\"></a>阶乘</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fn(n) = fn(n<span class=\"number\">-1</span>) * n</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum(n - <span class=\"number\">1</span>) * n;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fn(n) = fn(n<span class=\"number\">-1</span>) + fn(n<span class=\"number\">-2</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>) + fib(n<span class=\"number\">-2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"递归获取指定元素的后代元素\"><a href=\"#递归获取指定元素的后代元素\" class=\"headerlink\" title=\"递归获取指定元素的后代元素\"></a>递归获取指定元素的后代元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">ele</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> children = ele.children;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; children.length; i++)&#123;</div><div class=\"line\">        result.push(children[i]);</div><div class=\"line\">        <span class=\"keyword\">var</span> temp = getChildren(children[i]);</div><div class=\"line\">        result = result.concat(temp);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>一个封闭的包裹结构</p>\n<p>一个可以访问独立数据的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//可以操作data数据</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>获取和设置数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">getData</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> data;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">setDate</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">            data = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"for循环注册点击事件的问题\"><a href=\"#for循环注册点击事件的问题\" class=\"headerlink\" title=\"for循环注册点击事件的问题\"></a>for循环注册点击事件的问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; divs.length; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> div = divs[i];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> j = i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(j);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    div.onclick = outer();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"for循环中使用setTimeout\"><a href=\"#for循环中使用setTimeout\" class=\"headerlink\" title=\"for循环中使用setTimeout\"></a>for循环中使用setTimeout</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">    setTimeout((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> j = i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(j);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;()),<span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><ul>\n<li>硬件缓存</li>\n<li>浏览器缓存</li>\n<li><code>CDN</code>—<code>Content Delivery Network</code>  内容分发网络</li>\n</ul>\n<h3 id=\"使用缓存解决递归实现的斐波那契数列的性能问题\"><a href=\"#使用缓存解决递归实现的斐波那契数列的性能问题\" class=\"headerlink\" title=\"使用缓存解决递归实现的斐波那契数列的性能问题\"></a>使用缓存解决递归实现的斐波那契数列的性能问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFib</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> num = arr[n];</div><div class=\"line\">        <span class=\"keyword\">if</span>(!num)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">                num = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                num = <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">1</span>) + <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            arr[n] = num;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> num;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"jQuery缓存实现分析\"><a href=\"#jQuery缓存实现分析\" class=\"headerlink\" title=\"jQuery缓存实现分析\"></a>jQuery缓存实现分析</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(value)&#123;</div><div class=\"line\">            cache[key] = value;</div><div class=\"line\">            arr.push(key);</div><div class=\"line\">            <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">50</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">delete</span> cache[arr.shift()];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cache[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数的四种调用模式\"><a href=\"#函数的四种调用模式\" class=\"headerlink\" title=\"函数的四种调用模式\"></a>函数的四种调用模式</h2><h3 id=\"函数调用模式\"><a href=\"#函数调用模式\" class=\"headerlink\" title=\"函数调用模式\"></a>函数调用模式</h3><p>形式: 函数名();<br><code>this: window</code></p>\n<h3 id=\"方法调用模式\"><a href=\"#方法调用模式\" class=\"headerlink\" title=\"方法调用模式\"></a>方法调用模式</h3><p>形式: 对象名.方法名();<br>this: 调用该方法的对象</p>\n<h3 id=\"构造函数调用模式\"><a href=\"#构造函数调用模式\" class=\"headerlink\" title=\"构造函数调用模式\"></a>构造函数调用模式</h3><p>形式: <code>new</code> .构造函数名()<br><code>this: new</code>创建出来的对象</p>\n<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObject</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.xxx = <span class=\"string\">\"xxx\"</span>;</div><div class=\"line\">    o.yyy = <span class=\"string\">\"yy\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p  = createObject();</div></pre></td></tr></table></figure>\n<h4 id=\"寄生模式\"><a href=\"#寄生模式\" class=\"headerlink\" title=\"寄生模式\"></a>寄生模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CObject</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.xxx = <span class=\"string\">\"xxx\"</span>;</div><div class=\"line\">    o.yyy = <span class=\"string\">\"yy\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> CObject();</div></pre></td></tr></table></figure>\n<h3 id=\"上下文调用模式\"><a href=\"#上下文调用模式\" class=\"headerlink\" title=\"上下文调用模式\"></a>上下文调用模式</h3><h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">函数名.call(对象,参数<span class=\"number\">1</span>,参数<span class=\"number\">2</span>,参数<span class=\"number\">3.</span>..)</div></pre></td></tr></table></figure>\n<ol>\n<li>调用该函数</li>\n<li>将函数内部的<code>this</code>赋值为<code>call</code>的第一个参数</li>\n<li>将第一个参数之后的所有参数，当做实参传递给函数</li>\n</ol>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">函数名.apply(对象,数组)</div></pre></td></tr></table></figure>\n<ol>\n<li>调用该函数</li>\n<li>将函数内部的<code>this</code>赋值为<code>apply</code>的第一个参数</li>\n<li>将第二个参数的数组，依次拆解开，将每一个元素挨个传递给函数做为实参</li>\n</ol>\n<h5 id=\"伪数组转换成数组\"><a href=\"#伪数组转换成数组\" class=\"headerlink\" title=\"伪数组转换成数组\"></a>伪数组转换成数组</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arrFake = &#123;</div><div class=\"line\">    <span class=\"number\">0</span>:<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">1</span>:<span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"number\">2</span>:<span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">length</span>:<span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arrReal = [];</div><div class=\"line\"></div><div class=\"line\">arrReal.push.apply(arrReal, arrFake);</div><div class=\"line\"><span class=\"comment\">//arrReal.push(arrFake[0] , arrFake[1], arrFake[2])   相当于这句代码</span></div></pre></td></tr></table></figure>\n<h5 id=\"求数组最大值\"><a href=\"#求数组最大值\" class=\"headerlink\" title=\"求数组最大值\"></a>求数组最大值</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">23</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">34</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> maxNum = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, arr);</div></pre></td></tr></table></figure>\n<h4 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.money = <span class=\"number\">99999999999999</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    Father.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Son();</div></pre></td></tr></table></figure>\n<h2 id=\"沙箱模式\"><a href=\"#沙箱模式\" class=\"headerlink\" title=\"沙箱模式\"></a>沙箱模式</h2><p>一个隔离的安全的环境</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//需要隔离的代码</span></div><div class=\"line\">    <span class=\"comment\">//最顶上写 变量函数之类的申明</span></div><div class=\"line\">    <span class=\"comment\">//逻辑代码</span></div><div class=\"line\">    <span class=\"comment\">//如果需要，使用window对象向外界暴露接口</span></div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</div></pre></td></tr></table></figure>\n<p>为什么要将 <code>window</code> 作为参数传递</p>\n<ol>\n<li>外面无法访问里面，里面也不要去访问外面的东西</li>\n<li>在代码压缩的时候，内置的对象名称无法被压缩，如果使用自己的变量，是可以压缩的</li>\n</ol>\n<h2 id=\"forEach-和-map\"><a href=\"#forEach-和-map\" class=\"headerlink\" title=\"forEach 和　map\"></a>forEach 和　map</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ,<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"comment\">//currentEle 当前正在遍历的元素,</span></div><div class=\"line\"><span class=\"comment\">//currentIndex 当前遍历的元素的索引,</span></div><div class=\"line\"><span class=\"comment\">//currentArray 当前正在被遍历的数组</span></div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class=\"line\">    currentArray[currentIndex] = currentEle * <span class=\"number\">2</span>;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//currentEle 当前正在遍历的元素,</span></div><div class=\"line\"><span class=\"comment\">//currentIndex 当前遍历的元素的索引,</span></div><div class=\"line\"><span class=\"comment\">//currentArray 当前正在被遍历的数组</span></div><div class=\"line\"><span class=\"comment\">//map如果回调函数内有返回值，会将所有调用的返回值重新组合成一个数组，作为map方法的返回值</span></div><div class=\"line\">arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> currentEle * <span class=\"number\">2</span>;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>变量不使用<code>var</code>声明会报错</li>\n<li>不能删除不允许删除的属性</li>\n<li>对象的属性不可以重名</li>\n<li>函数的形参不可以重名</li>\n<li>不允许使用八进制数据</li>\n</ul>\n<h2 id=\"事件兼容性处理\"><a href=\"#事件兼容性处理\" class=\"headerlink\" title=\"事件兼容性处理\"></a>事件兼容性处理</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRegister</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.addEventListener)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, type, handler</span>)</span>&#123;</div><div class=\"line\">            target.addEventListener(type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.attachEvent)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, type, handler</span>)</span>&#123;</div><div class=\"line\">            target.attachEvent(<span class=\"string\">\"on\"</span> + type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                handler.call(target, <span class=\"built_in\">window</span>.event);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, type, handler</span>)</span>&#123;</div><div class=\"line\">            target[<span class=\"string\">\"on\"</span>+type] = handler;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>javascript高级与面向对象笔记总结！！</p>","more":"<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>递归就是函数自己直接或者间接的调用自己</p>\n<h3 id=\"递归的两个要素\"><a href=\"#递归的两个要素\" class=\"headerlink\" title=\"递归的两个要素\"></a>递归的两个要素</h3><ul>\n<li>自己调用自己</li>\n<li>递归结束条件</li>\n</ul>\n<h3 id=\"化归思想\"><a href=\"#化归思想\" class=\"headerlink\" title=\"化归思想\"></a>化归思想</h3><p>由难化易，由繁化简，的思想就是化归思想</p>\n<h3 id=\"前n项和\"><a href=\"#前n项和\" class=\"headerlink\" title=\"前n项和\"></a>前n项和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fn(n) = fn(n<span class=\"number\">-1</span>) + n</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum(n - <span class=\"number\">1</span>) + n;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"阶乘\"><a href=\"#阶乘\" class=\"headerlink\" title=\"阶乘\"></a>阶乘</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fn(n) = fn(n<span class=\"number\">-1</span>) * n</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum(n - <span class=\"number\">1</span>) * n;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fn(n) = fn(n<span class=\"number\">-1</span>) + fn(n<span class=\"number\">-2</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>) + fib(n<span class=\"number\">-2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"递归获取指定元素的后代元素\"><a href=\"#递归获取指定元素的后代元素\" class=\"headerlink\" title=\"递归获取指定元素的后代元素\"></a>递归获取指定元素的后代元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">ele</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> children = ele.children;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; children.length; i++)&#123;</div><div class=\"line\">        result.push(children[i]);</div><div class=\"line\">        <span class=\"keyword\">var</span> temp = getChildren(children[i]);</div><div class=\"line\">        result = result.concat(temp);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>一个封闭的包裹结构</p>\n<p>一个可以访问独立数据的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//可以操作data数据</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>获取和设置数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">getData</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> data;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">setDate</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">            data = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"for循环注册点击事件的问题\"><a href=\"#for循环注册点击事件的问题\" class=\"headerlink\" title=\"for循环注册点击事件的问题\"></a>for循环注册点击事件的问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; divs.length; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> div = divs[i];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> j = i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(j);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    div.onclick = outer();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"for循环中使用setTimeout\"><a href=\"#for循环中使用setTimeout\" class=\"headerlink\" title=\"for循环中使用setTimeout\"></a>for循环中使用setTimeout</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">    setTimeout((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> j = i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(j);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;()),<span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><ul>\n<li>硬件缓存</li>\n<li>浏览器缓存</li>\n<li><code>CDN</code>—<code>Content Delivery Network</code>  内容分发网络</li>\n</ul>\n<h3 id=\"使用缓存解决递归实现的斐波那契数列的性能问题\"><a href=\"#使用缓存解决递归实现的斐波那契数列的性能问题\" class=\"headerlink\" title=\"使用缓存解决递归实现的斐波那契数列的性能问题\"></a>使用缓存解决递归实现的斐波那契数列的性能问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFib</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> num = arr[n];</div><div class=\"line\">        <span class=\"keyword\">if</span>(!num)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">                num = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                num = <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">1</span>) + <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            arr[n] = num;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> num;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"jQuery缓存实现分析\"><a href=\"#jQuery缓存实现分析\" class=\"headerlink\" title=\"jQuery缓存实现分析\"></a>jQuery缓存实现分析</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(value)&#123;</div><div class=\"line\">            cache[key] = value;</div><div class=\"line\">            arr.push(key);</div><div class=\"line\">            <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">50</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">delete</span> cache[arr.shift()];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cache[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数的四种调用模式\"><a href=\"#函数的四种调用模式\" class=\"headerlink\" title=\"函数的四种调用模式\"></a>函数的四种调用模式</h2><h3 id=\"函数调用模式\"><a href=\"#函数调用模式\" class=\"headerlink\" title=\"函数调用模式\"></a>函数调用模式</h3><p>形式: 函数名();<br><code>this: window</code></p>\n<h3 id=\"方法调用模式\"><a href=\"#方法调用模式\" class=\"headerlink\" title=\"方法调用模式\"></a>方法调用模式</h3><p>形式: 对象名.方法名();<br>this: 调用该方法的对象</p>\n<h3 id=\"构造函数调用模式\"><a href=\"#构造函数调用模式\" class=\"headerlink\" title=\"构造函数调用模式\"></a>构造函数调用模式</h3><p>形式: <code>new</code> .构造函数名()<br><code>this: new</code>创建出来的对象</p>\n<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObject</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.xxx = <span class=\"string\">\"xxx\"</span>;</div><div class=\"line\">    o.yyy = <span class=\"string\">\"yy\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p  = createObject();</div></pre></td></tr></table></figure>\n<h4 id=\"寄生模式\"><a href=\"#寄生模式\" class=\"headerlink\" title=\"寄生模式\"></a>寄生模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CObject</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.xxx = <span class=\"string\">\"xxx\"</span>;</div><div class=\"line\">    o.yyy = <span class=\"string\">\"yy\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> CObject();</div></pre></td></tr></table></figure>\n<h3 id=\"上下文调用模式\"><a href=\"#上下文调用模式\" class=\"headerlink\" title=\"上下文调用模式\"></a>上下文调用模式</h3><h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">函数名.call(对象,参数<span class=\"number\">1</span>,参数<span class=\"number\">2</span>,参数<span class=\"number\">3.</span>..)</div></pre></td></tr></table></figure>\n<ol>\n<li>调用该函数</li>\n<li>将函数内部的<code>this</code>赋值为<code>call</code>的第一个参数</li>\n<li>将第一个参数之后的所有参数，当做实参传递给函数</li>\n</ol>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">函数名.apply(对象,数组)</div></pre></td></tr></table></figure>\n<ol>\n<li>调用该函数</li>\n<li>将函数内部的<code>this</code>赋值为<code>apply</code>的第一个参数</li>\n<li>将第二个参数的数组，依次拆解开，将每一个元素挨个传递给函数做为实参</li>\n</ol>\n<h5 id=\"伪数组转换成数组\"><a href=\"#伪数组转换成数组\" class=\"headerlink\" title=\"伪数组转换成数组\"></a>伪数组转换成数组</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arrFake = &#123;</div><div class=\"line\">    <span class=\"number\">0</span>:<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">1</span>:<span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"number\">2</span>:<span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">length</span>:<span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arrReal = [];</div><div class=\"line\"></div><div class=\"line\">arrReal.push.apply(arrReal, arrFake);</div><div class=\"line\"><span class=\"comment\">//arrReal.push(arrFake[0] , arrFake[1], arrFake[2])   相当于这句代码</span></div></pre></td></tr></table></figure>\n<h5 id=\"求数组最大值\"><a href=\"#求数组最大值\" class=\"headerlink\" title=\"求数组最大值\"></a>求数组最大值</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">23</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">34</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> maxNum = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, arr);</div></pre></td></tr></table></figure>\n<h4 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.money = <span class=\"number\">99999999999999</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    Father.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Son();</div></pre></td></tr></table></figure>\n<h2 id=\"沙箱模式\"><a href=\"#沙箱模式\" class=\"headerlink\" title=\"沙箱模式\"></a>沙箱模式</h2><p>一个隔离的安全的环境</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//需要隔离的代码</span></div><div class=\"line\">    <span class=\"comment\">//最顶上写 变量函数之类的申明</span></div><div class=\"line\">    <span class=\"comment\">//逻辑代码</span></div><div class=\"line\">    <span class=\"comment\">//如果需要，使用window对象向外界暴露接口</span></div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</div></pre></td></tr></table></figure>\n<p>为什么要将 <code>window</code> 作为参数传递</p>\n<ol>\n<li>外面无法访问里面，里面也不要去访问外面的东西</li>\n<li>在代码压缩的时候，内置的对象名称无法被压缩，如果使用自己的变量，是可以压缩的</li>\n</ol>\n<h2 id=\"forEach-和-map\"><a href=\"#forEach-和-map\" class=\"headerlink\" title=\"forEach 和　map\"></a>forEach 和　map</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ,<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"comment\">//currentEle 当前正在遍历的元素,</span></div><div class=\"line\"><span class=\"comment\">//currentIndex 当前遍历的元素的索引,</span></div><div class=\"line\"><span class=\"comment\">//currentArray 当前正在被遍历的数组</span></div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class=\"line\">    currentArray[currentIndex] = currentEle * <span class=\"number\">2</span>;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//currentEle 当前正在遍历的元素,</span></div><div class=\"line\"><span class=\"comment\">//currentIndex 当前遍历的元素的索引,</span></div><div class=\"line\"><span class=\"comment\">//currentArray 当前正在被遍历的数组</span></div><div class=\"line\"><span class=\"comment\">//map如果回调函数内有返回值，会将所有调用的返回值重新组合成一个数组，作为map方法的返回值</span></div><div class=\"line\">arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> currentEle * <span class=\"number\">2</span>;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>变量不使用<code>var</code>声明会报错</li>\n<li>不能删除不允许删除的属性</li>\n<li>对象的属性不可以重名</li>\n<li>函数的形参不可以重名</li>\n<li>不允许使用八进制数据</li>\n</ul>\n<h2 id=\"事件兼容性处理\"><a href=\"#事件兼容性处理\" class=\"headerlink\" title=\"事件兼容性处理\"></a>事件兼容性处理</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRegister</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.addEventListener)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, type, handler</span>)</span>&#123;</div><div class=\"line\">            target.addEventListener(type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.attachEvent)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, type, handler</span>)</span>&#123;</div><div class=\"line\">            target.attachEvent(<span class=\"string\">\"on\"</span> + type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                handler.call(target, <span class=\"built_in\">window</span>.event);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, type, handler</span>)</span>&#123;</div><div class=\"line\">            target[<span class=\"string\">\"on\"</span>+type] = handler;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"重新认识伪类和伪元素","date":"2017-04-28T08:35:10.000Z","_content":"\n熟悉前端的人都会听过`css`的伪类与伪元素，然而大多数的人都会将这两者混淆(包括我)。那今天就让我们来看看伪类和伪元素的区别吧!\n\n<!-- more -->\n\n## 伪类与伪元素\n\n先说一说为什么`css`要引入伪元素和伪类，以下是`css2.1 Selectors`章节中对伪类与伪元素的描述：\n\n`CSS introduces the concepts of pseudo-elements and pseudo-classes  to permit formatting based on information that lies outside the document tree.`\n\n- 直译过来就是：`css`引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。下面分别对伪类和伪元素进行解释：\n    + 伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通过`:hover`来描述这个元素的状态。虽然它和普通的`css`类相似，可以为已有的元素添加样式，但是它只有处于`dom`树无法描述的状态下才能为元素添加样式，所以将其称为伪类。\n    + 伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过`:before`来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。\n\n## 伪类\n\n- 伪类前面是一个冒号，`E:first-child` 伪类，会对现有的元素进行筛选\n    + `:link`\n    + `:visited`\n    + `:hover`\n    + `:active`\n    + `:focus`\n    + `:not()`\n    + `:first-child`\n    + `:last-child`\n    + `:nth-child`\n    + `:nth-last-child` 从后面计数\n    + `:only-child` 只满足一个子元素\n    + `:target` 当URL带有锚名称，指向文档内某个具体的元素时，`:target`匹配该元素。\n    + `:checked` 被选中的input元素\n    + `:empty` 匹配没有子元素的元素\n    + `:valid` 匹配条件验证正确的表单元素。\n\n\n## 伪元素\n\n- 伪元素前面是两个冒号，`E::first-line` 伪元素。会创造出不存在的新元素，由于 `css` 对单冒号的伪元素也支持，所以这样很容易让新学者混淆。但实际上现在 `css3` 已经明确规定了伪类单冒号，伪元素双冒号的规则。\n    + `::before/:before` 在被选元素前插入内容\n    + `::after/:after` 在被元素后插入内容，其用法和特性与`:before`相似。\n    + `::first-letter/:first-letter` 匹配元素中文本的首字母。被修饰的首字母不在文档树中\n    + `::first-line/:first-line` 匹配元素中第一行的文本。这个伪元素只能用在块元素中，不能用在内联元素中。\n    + `::selection` 匹配用户被用户选中或者处于高亮状态的部分。在火狐浏览器使用时需要添加`-moz`前缀。该伪元素只支持双冒号的形式。\n    + `::placeholder` 匹配占位符的文本，只有元素设置了`placeholder`属性时，该伪元素才能生效。\n- 该伪元素不是`CSS`的标准，它的实现可能在将来会有所改变，所以要决定使用时必须谨慎。\n在一些浏览器中（`IE10`和`Firefox18`及其以下版本）会使用单冒号的形式。\n- 对于伪元素 `:before` 和 `:after` 而言，属性 `content` 是必须设置的，我们知道属性的值可以为字符串，也可以有其它形式，比如指向一张图片的 `URL:`\n\n```\ncontent: url('img/icon.png')\n```\n\n- 配合伪类使用\n    + 伪元素 `:before` 还可以配合伪类使用，这里举经常与 `:before` 配合使用的伪类 `:hover` 为例：\n\n```\n.before:hover:before{content:'you before'; color:red;}\n<div class=\"before\"> me</div>\n```\n\n- 配合取值函数 `attr()` 使用\n\n```\na::before{content: attr(title)}\n<a href=\"https://blog.ihoey.com\" title=\"梦魇小栈\"></a>\n\n效果\n<a href=\"https://blog.ihoey.com\" title=\"梦魇小栈\">梦魇小栈</a>\n```\n\n## 总结\n\n- 伪元素和伪类之所以这么容易混淆，是因为他们的效果类似而且写法相仿，但实际上 `css3` 为了区分两者，已经明确规定了伪类用一个冒号来表示，而伪元素则用两个冒号来表示。\n- 伪类的效果可以通过添加一个实际的类来达到，而伪元素的效果则需要通过添加一个实际的元素才能达到，这也是为什么他们一个称为伪类，一个称为伪元素的原因。\n","source":"_posts/pseudo-elements-and-pseudo-classes.md","raw":"---\ntitle: 重新认识伪类和伪元素\ndate: 2017-04-28 16:35:10\ntags:\n    - 伪类\n    - 伪元素\ncategories: CSS3\n---\n\n熟悉前端的人都会听过`css`的伪类与伪元素，然而大多数的人都会将这两者混淆(包括我)。那今天就让我们来看看伪类和伪元素的区别吧!\n\n<!-- more -->\n\n## 伪类与伪元素\n\n先说一说为什么`css`要引入伪元素和伪类，以下是`css2.1 Selectors`章节中对伪类与伪元素的描述：\n\n`CSS introduces the concepts of pseudo-elements and pseudo-classes  to permit formatting based on information that lies outside the document tree.`\n\n- 直译过来就是：`css`引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。下面分别对伪类和伪元素进行解释：\n    + 伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通过`:hover`来描述这个元素的状态。虽然它和普通的`css`类相似，可以为已有的元素添加样式，但是它只有处于`dom`树无法描述的状态下才能为元素添加样式，所以将其称为伪类。\n    + 伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过`:before`来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。\n\n## 伪类\n\n- 伪类前面是一个冒号，`E:first-child` 伪类，会对现有的元素进行筛选\n    + `:link`\n    + `:visited`\n    + `:hover`\n    + `:active`\n    + `:focus`\n    + `:not()`\n    + `:first-child`\n    + `:last-child`\n    + `:nth-child`\n    + `:nth-last-child` 从后面计数\n    + `:only-child` 只满足一个子元素\n    + `:target` 当URL带有锚名称，指向文档内某个具体的元素时，`:target`匹配该元素。\n    + `:checked` 被选中的input元素\n    + `:empty` 匹配没有子元素的元素\n    + `:valid` 匹配条件验证正确的表单元素。\n\n\n## 伪元素\n\n- 伪元素前面是两个冒号，`E::first-line` 伪元素。会创造出不存在的新元素，由于 `css` 对单冒号的伪元素也支持，所以这样很容易让新学者混淆。但实际上现在 `css3` 已经明确规定了伪类单冒号，伪元素双冒号的规则。\n    + `::before/:before` 在被选元素前插入内容\n    + `::after/:after` 在被元素后插入内容，其用法和特性与`:before`相似。\n    + `::first-letter/:first-letter` 匹配元素中文本的首字母。被修饰的首字母不在文档树中\n    + `::first-line/:first-line` 匹配元素中第一行的文本。这个伪元素只能用在块元素中，不能用在内联元素中。\n    + `::selection` 匹配用户被用户选中或者处于高亮状态的部分。在火狐浏览器使用时需要添加`-moz`前缀。该伪元素只支持双冒号的形式。\n    + `::placeholder` 匹配占位符的文本，只有元素设置了`placeholder`属性时，该伪元素才能生效。\n- 该伪元素不是`CSS`的标准，它的实现可能在将来会有所改变，所以要决定使用时必须谨慎。\n在一些浏览器中（`IE10`和`Firefox18`及其以下版本）会使用单冒号的形式。\n- 对于伪元素 `:before` 和 `:after` 而言，属性 `content` 是必须设置的，我们知道属性的值可以为字符串，也可以有其它形式，比如指向一张图片的 `URL:`\n\n```\ncontent: url('img/icon.png')\n```\n\n- 配合伪类使用\n    + 伪元素 `:before` 还可以配合伪类使用，这里举经常与 `:before` 配合使用的伪类 `:hover` 为例：\n\n```\n.before:hover:before{content:'you before'; color:red;}\n<div class=\"before\"> me</div>\n```\n\n- 配合取值函数 `attr()` 使用\n\n```\na::before{content: attr(title)}\n<a href=\"https://blog.ihoey.com\" title=\"梦魇小栈\"></a>\n\n效果\n<a href=\"https://blog.ihoey.com\" title=\"梦魇小栈\">梦魇小栈</a>\n```\n\n## 总结\n\n- 伪元素和伪类之所以这么容易混淆，是因为他们的效果类似而且写法相仿，但实际上 `css3` 为了区分两者，已经明确规定了伪类用一个冒号来表示，而伪元素则用两个冒号来表示。\n- 伪类的效果可以通过添加一个实际的类来达到，而伪元素的效果则需要通过添加一个实际的元素才能达到，这也是为什么他们一个称为伪类，一个称为伪元素的原因。\n","slug":"pseudo-elements-and-pseudo-classes","published":1,"updated":"2017-04-28T14:42:40.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvpj003suwg7d2v2voi4","content":"<p>熟悉前端的人都会听过<code>css</code>的伪类与伪元素，然而大多数的人都会将这两者混淆(包括我)。那今天就让我们来看看伪类和伪元素的区别吧!</p>\n<a id=\"more\"></a>\n<h2 id=\"伪类与伪元素\"><a href=\"#伪类与伪元素\" class=\"headerlink\" title=\"伪类与伪元素\"></a>伪类与伪元素</h2><p>先说一说为什么<code>css</code>要引入伪元素和伪类，以下是<code>css2.1 Selectors</code>章节中对伪类与伪元素的描述：</p>\n<p><code>CSS introduces the concepts of pseudo-elements and pseudo-classes  to permit formatting based on information that lies outside the document tree.</code></p>\n<ul>\n<li>直译过来就是：<code>css</code>引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。下面分别对伪类和伪元素进行解释：<ul>\n<li>伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通过<code>:hover</code>来描述这个元素的状态。虽然它和普通的<code>css</code>类相似，可以为已有的元素添加样式，但是它只有处于<code>dom</code>树无法描述的状态下才能为元素添加样式，所以将其称为伪类。</li>\n<li>伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过<code>:before</code>来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><ul>\n<li>伪类前面是一个冒号，<code>E:first-child</code> 伪类，会对现有的元素进行筛选<ul>\n<li><code>:link</code></li>\n<li><code>:visited</code></li>\n<li><code>:hover</code></li>\n<li><code>:active</code></li>\n<li><code>:focus</code></li>\n<li><code>:not()</code></li>\n<li><code>:first-child</code></li>\n<li><code>:last-child</code></li>\n<li><code>:nth-child</code></li>\n<li><code>:nth-last-child</code> 从后面计数</li>\n<li><code>:only-child</code> 只满足一个子元素</li>\n<li><code>:target</code> 当URL带有锚名称，指向文档内某个具体的元素时，<code>:target</code>匹配该元素。</li>\n<li><code>:checked</code> 被选中的input元素</li>\n<li><code>:empty</code> 匹配没有子元素的元素</li>\n<li><code>:valid</code> 匹配条件验证正确的表单元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h2><ul>\n<li>伪元素前面是两个冒号，<code>E::first-line</code> 伪元素。会创造出不存在的新元素，由于 <code>css</code> 对单冒号的伪元素也支持，所以这样很容易让新学者混淆。但实际上现在 <code>css3</code> 已经明确规定了伪类单冒号，伪元素双冒号的规则。<ul>\n<li><code>::before/:before</code> 在被选元素前插入内容</li>\n<li><code>::after/:after</code> 在被元素后插入内容，其用法和特性与<code>:before</code>相似。</li>\n<li><code>::first-letter/:first-letter</code> 匹配元素中文本的首字母。被修饰的首字母不在文档树中</li>\n<li><code>::first-line/:first-line</code> 匹配元素中第一行的文本。这个伪元素只能用在块元素中，不能用在内联元素中。</li>\n<li><code>::selection</code> 匹配用户被用户选中或者处于高亮状态的部分。在火狐浏览器使用时需要添加<code>-moz</code>前缀。该伪元素只支持双冒号的形式。</li>\n<li><code>::placeholder</code> 匹配占位符的文本，只有元素设置了<code>placeholder</code>属性时，该伪元素才能生效。</li>\n</ul>\n</li>\n<li>该伪元素不是<code>CSS</code>的标准，它的实现可能在将来会有所改变，所以要决定使用时必须谨慎。<br>在一些浏览器中（<code>IE10</code>和<code>Firefox18</code>及其以下版本）会使用单冒号的形式。</li>\n<li>对于伪元素 <code>:before</code> 和 <code>:after</code> 而言，属性 <code>content</code> 是必须设置的，我们知道属性的值可以为字符串，也可以有其它形式，比如指向一张图片的 <code>URL:</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">content: url(&apos;img/icon.png&apos;)</div></pre></td></tr></table></figure>\n<ul>\n<li>配合伪类使用<ul>\n<li>伪元素 <code>:before</code> 还可以配合伪类使用，这里举经常与 <code>:before</code> 配合使用的伪类 <code>:hover</code> 为例：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">.before:hover:before&#123;content:&apos;you before&apos;; color:red;&#125;</div><div class=\"line\">&lt;div class=&quot;before&quot;&gt; me&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>配合取值函数 <code>attr()</code> 使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a::before&#123;content: attr(title)&#125;</div><div class=\"line\">&lt;a href=&quot;https://blog.ihoey.com&quot; title=&quot;梦魇小栈&quot;&gt;&lt;/a&gt;</div><div class=\"line\"></div><div class=\"line\">效果</div><div class=\"line\">&lt;a href=&quot;https://blog.ihoey.com&quot; title=&quot;梦魇小栈&quot;&gt;梦魇小栈&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>伪元素和伪类之所以这么容易混淆，是因为他们的效果类似而且写法相仿，但实际上 <code>css3</code> 为了区分两者，已经明确规定了伪类用一个冒号来表示，而伪元素则用两个冒号来表示。</li>\n<li>伪类的效果可以通过添加一个实际的类来达到，而伪元素的效果则需要通过添加一个实际的元素才能达到，这也是为什么他们一个称为伪类，一个称为伪元素的原因。</li>\n</ul>\n","excerpt":"<p>熟悉前端的人都会听过<code>css</code>的伪类与伪元素，然而大多数的人都会将这两者混淆(包括我)。那今天就让我们来看看伪类和伪元素的区别吧!</p>","more":"<h2 id=\"伪类与伪元素\"><a href=\"#伪类与伪元素\" class=\"headerlink\" title=\"伪类与伪元素\"></a>伪类与伪元素</h2><p>先说一说为什么<code>css</code>要引入伪元素和伪类，以下是<code>css2.1 Selectors</code>章节中对伪类与伪元素的描述：</p>\n<p><code>CSS introduces the concepts of pseudo-elements and pseudo-classes  to permit formatting based on information that lies outside the document tree.</code></p>\n<ul>\n<li>直译过来就是：<code>css</code>引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。下面分别对伪类和伪元素进行解释：<ul>\n<li>伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通过<code>:hover</code>来描述这个元素的状态。虽然它和普通的<code>css</code>类相似，可以为已有的元素添加样式，但是它只有处于<code>dom</code>树无法描述的状态下才能为元素添加样式，所以将其称为伪类。</li>\n<li>伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过<code>:before</code>来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><ul>\n<li>伪类前面是一个冒号，<code>E:first-child</code> 伪类，会对现有的元素进行筛选<ul>\n<li><code>:link</code></li>\n<li><code>:visited</code></li>\n<li><code>:hover</code></li>\n<li><code>:active</code></li>\n<li><code>:focus</code></li>\n<li><code>:not()</code></li>\n<li><code>:first-child</code></li>\n<li><code>:last-child</code></li>\n<li><code>:nth-child</code></li>\n<li><code>:nth-last-child</code> 从后面计数</li>\n<li><code>:only-child</code> 只满足一个子元素</li>\n<li><code>:target</code> 当URL带有锚名称，指向文档内某个具体的元素时，<code>:target</code>匹配该元素。</li>\n<li><code>:checked</code> 被选中的input元素</li>\n<li><code>:empty</code> 匹配没有子元素的元素</li>\n<li><code>:valid</code> 匹配条件验证正确的表单元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h2><ul>\n<li>伪元素前面是两个冒号，<code>E::first-line</code> 伪元素。会创造出不存在的新元素，由于 <code>css</code> 对单冒号的伪元素也支持，所以这样很容易让新学者混淆。但实际上现在 <code>css3</code> 已经明确规定了伪类单冒号，伪元素双冒号的规则。<ul>\n<li><code>::before/:before</code> 在被选元素前插入内容</li>\n<li><code>::after/:after</code> 在被元素后插入内容，其用法和特性与<code>:before</code>相似。</li>\n<li><code>::first-letter/:first-letter</code> 匹配元素中文本的首字母。被修饰的首字母不在文档树中</li>\n<li><code>::first-line/:first-line</code> 匹配元素中第一行的文本。这个伪元素只能用在块元素中，不能用在内联元素中。</li>\n<li><code>::selection</code> 匹配用户被用户选中或者处于高亮状态的部分。在火狐浏览器使用时需要添加<code>-moz</code>前缀。该伪元素只支持双冒号的形式。</li>\n<li><code>::placeholder</code> 匹配占位符的文本，只有元素设置了<code>placeholder</code>属性时，该伪元素才能生效。</li>\n</ul>\n</li>\n<li>该伪元素不是<code>CSS</code>的标准，它的实现可能在将来会有所改变，所以要决定使用时必须谨慎。<br>在一些浏览器中（<code>IE10</code>和<code>Firefox18</code>及其以下版本）会使用单冒号的形式。</li>\n<li>对于伪元素 <code>:before</code> 和 <code>:after</code> 而言，属性 <code>content</code> 是必须设置的，我们知道属性的值可以为字符串，也可以有其它形式，比如指向一张图片的 <code>URL:</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">content: url(&apos;img/icon.png&apos;)</div></pre></td></tr></table></figure>\n<ul>\n<li>配合伪类使用<ul>\n<li>伪元素 <code>:before</code> 还可以配合伪类使用，这里举经常与 <code>:before</code> 配合使用的伪类 <code>:hover</code> 为例：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">.before:hover:before&#123;content:&apos;you before&apos;; color:red;&#125;</div><div class=\"line\">&lt;div class=&quot;before&quot;&gt; me&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>配合取值函数 <code>attr()</code> 使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a::before&#123;content: attr(title)&#125;</div><div class=\"line\">&lt;a href=&quot;https://blog.ihoey.com&quot; title=&quot;梦魇小栈&quot;&gt;&lt;/a&gt;</div><div class=\"line\"></div><div class=\"line\">效果</div><div class=\"line\">&lt;a href=&quot;https://blog.ihoey.com&quot; title=&quot;梦魇小栈&quot;&gt;梦魇小栈&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>伪元素和伪类之所以这么容易混淆，是因为他们的效果类似而且写法相仿，但实际上 <code>css3</code> 为了区分两者，已经明确规定了伪类用一个冒号来表示，而伪元素则用两个冒号来表示。</li>\n<li>伪类的效果可以通过添加一个实际的类来达到，而伪元素的效果则需要通过添加一个实际的元素才能达到，这也是为什么他们一个称为伪类，一个称为伪元素的原因。</li>\n</ul>"},{"title":"科学上网之shadowsocks 服务端安装","date":"2017-03-16T10:38:46.000Z","_content":"\n轻松搭建`shadowsocks`,及相关配置说明\n\n<!-- more -->\n\n## 安装shadowsocks依赖(我的服务器系统是ubuntu)\n\n- `sudo -s` // 获取超级管理员权限\n- `apt-get update` // 更新apt-get\n- `apt-get install python-pip` // 安装python包管理工具pip\n- `pip install shadowsocks` // 安装shadowsocks\n\n## 配置shadowsocks\n\n- `vi /etc/shadowsocks.json`\n\n```json\n//单一端口\n{\n    \"server\":\"0.0.0.0\",//服务器 ip地址 (IPv4/IPv6)\n    \"server_port\":1121,//服务器监听的端口,注意不要设为使用中的端口\n    \"local_address\":\"127.0.0.1\",//默认即可\n    \"local_port\":1080,\n    \"password\":\"password\",//密码\n    \"timeout\":300,//超时时间（秒）\n    \"method\":\"aes-256-cfb\",//加密方式\n    \"fast_open\":false\n}\n\n//多端口\n  {\n   \"server\":\"my_server_ip\",  //填入你的IP地址\n   \"local_address\": \"127.0.0.1\",\n   \"local_port\":1080,\n    \"port_password\": {\n        \"8381\": \"foobar1\",    //端口号，密码\n        \"8382\": \"foobar2\",\n        \"8383\": \"foobar3\",\n        \"8384\": \"foobar4\"\n   },\n   \"timeout\":300,\n   \"method\":\"aes-256-cfb\",\n   \"fast_open\": false\n  }\n```\n\n## 优化shadowsocks服务\n\n- 在终端输入 `vi /etc/sysctl.d/local.conf`\n\n```json\n  # max open files\n  fs.file-max = 1024000\n  # max read buffer\n  net.core.rmem_max = 67108864\n  # max write buffer\n  net.core.wmem_max = 67108864\n  # default read buffer\n  net.core.rmem_default = 65536\n  # default write buffer\n  net.core.wmem_default = 65536\n  # max processor input queue\n  net.core.netdev_max_backlog = 4096\n  # max backlog\n  net.core.somaxconn = 4096\n\n  # resist SYN flood attacks\n  net.ipv4.tcp_syncookies = 1\n  # reuse timewait sockets when safe\n  net.ipv4.tcp_tw_reuse = 1\n  # turn off fast timewait sockets recycling\n  net.ipv4.tcp_tw_recycle = 0\n  # short FIN timeout\n  net.ipv4.tcp_fin_timeout = 30\n  # short keepalive time\n  net.ipv4.tcp_keepalive_time = 1200\n  # outbound port range\n  net.ipv4.ip_local_port_range = 10000 65000\n  # max SYN backlog\n  net.ipv4.tcp_max_syn_backlog = 4096\n  # max timewait sockets held by system simultaneously\n  net.ipv4.tcp_max_tw_buckets = 5000\n  # TCP receive buffer\n  net.ipv4.tcp_rmem = 4096 87380 67108864\n  # TCP write buffer\n  net.ipv4.tcp_wmem = 4096 65536 67108864\n  # turn on path MTU discovery\n  net.ipv4.tcp_mtu_probing = 1\n\n  # for high-latency network\n  net.ipv4.tcp_congestion_control = hybla\n  # forward ivp4\n  net.ipv4.ip_forward = 1\n```\n\n- 配置生效：`sysctl --system`\n\n## 开启shadowsocks服务\n\n- `ssserver -c /etc/shadowsocks.json -d start`\n\n## 关闭\n\n- `ssserver -c /etc/shadowsocks.json -d stop`\n\n## 重启\n\n- 重启(修改配置要重启才生效)：`ssserver -c /etc/shadowsocks.json -d restart`\n\n## 日志\n\n- `/var/log/shadowsocks.log`\n\n## 帮助\n\n- `ssserver -h`\n\n    如果出现故障，试试把`/etc/shadowsocks.json`里改为`\"server\"=\"0.0.0.0\".` 小心不要掉`,`\n\n## 开机启动\n\n- 在终端输入 `vi /etc/rc.local`\n- 把 `sudo ssserver -c /etc/shadowsocks.json -d start`加进去\n","source":"_posts/shadowsocks-install.md","raw":"---\ntitle: 科学上网之shadowsocks 服务端安装\ndate: 2017-03-16 18:38:46\ntags:\n    - 科学上网\n    - shadowsocks\ncategories: shadowsocks\n---\n\n轻松搭建`shadowsocks`,及相关配置说明\n\n<!-- more -->\n\n## 安装shadowsocks依赖(我的服务器系统是ubuntu)\n\n- `sudo -s` // 获取超级管理员权限\n- `apt-get update` // 更新apt-get\n- `apt-get install python-pip` // 安装python包管理工具pip\n- `pip install shadowsocks` // 安装shadowsocks\n\n## 配置shadowsocks\n\n- `vi /etc/shadowsocks.json`\n\n```json\n//单一端口\n{\n    \"server\":\"0.0.0.0\",//服务器 ip地址 (IPv4/IPv6)\n    \"server_port\":1121,//服务器监听的端口,注意不要设为使用中的端口\n    \"local_address\":\"127.0.0.1\",//默认即可\n    \"local_port\":1080,\n    \"password\":\"password\",//密码\n    \"timeout\":300,//超时时间（秒）\n    \"method\":\"aes-256-cfb\",//加密方式\n    \"fast_open\":false\n}\n\n//多端口\n  {\n   \"server\":\"my_server_ip\",  //填入你的IP地址\n   \"local_address\": \"127.0.0.1\",\n   \"local_port\":1080,\n    \"port_password\": {\n        \"8381\": \"foobar1\",    //端口号，密码\n        \"8382\": \"foobar2\",\n        \"8383\": \"foobar3\",\n        \"8384\": \"foobar4\"\n   },\n   \"timeout\":300,\n   \"method\":\"aes-256-cfb\",\n   \"fast_open\": false\n  }\n```\n\n## 优化shadowsocks服务\n\n- 在终端输入 `vi /etc/sysctl.d/local.conf`\n\n```json\n  # max open files\n  fs.file-max = 1024000\n  # max read buffer\n  net.core.rmem_max = 67108864\n  # max write buffer\n  net.core.wmem_max = 67108864\n  # default read buffer\n  net.core.rmem_default = 65536\n  # default write buffer\n  net.core.wmem_default = 65536\n  # max processor input queue\n  net.core.netdev_max_backlog = 4096\n  # max backlog\n  net.core.somaxconn = 4096\n\n  # resist SYN flood attacks\n  net.ipv4.tcp_syncookies = 1\n  # reuse timewait sockets when safe\n  net.ipv4.tcp_tw_reuse = 1\n  # turn off fast timewait sockets recycling\n  net.ipv4.tcp_tw_recycle = 0\n  # short FIN timeout\n  net.ipv4.tcp_fin_timeout = 30\n  # short keepalive time\n  net.ipv4.tcp_keepalive_time = 1200\n  # outbound port range\n  net.ipv4.ip_local_port_range = 10000 65000\n  # max SYN backlog\n  net.ipv4.tcp_max_syn_backlog = 4096\n  # max timewait sockets held by system simultaneously\n  net.ipv4.tcp_max_tw_buckets = 5000\n  # TCP receive buffer\n  net.ipv4.tcp_rmem = 4096 87380 67108864\n  # TCP write buffer\n  net.ipv4.tcp_wmem = 4096 65536 67108864\n  # turn on path MTU discovery\n  net.ipv4.tcp_mtu_probing = 1\n\n  # for high-latency network\n  net.ipv4.tcp_congestion_control = hybla\n  # forward ivp4\n  net.ipv4.ip_forward = 1\n```\n\n- 配置生效：`sysctl --system`\n\n## 开启shadowsocks服务\n\n- `ssserver -c /etc/shadowsocks.json -d start`\n\n## 关闭\n\n- `ssserver -c /etc/shadowsocks.json -d stop`\n\n## 重启\n\n- 重启(修改配置要重启才生效)：`ssserver -c /etc/shadowsocks.json -d restart`\n\n## 日志\n\n- `/var/log/shadowsocks.log`\n\n## 帮助\n\n- `ssserver -h`\n\n    如果出现故障，试试把`/etc/shadowsocks.json`里改为`\"server\"=\"0.0.0.0\".` 小心不要掉`,`\n\n## 开机启动\n\n- 在终端输入 `vi /etc/rc.local`\n- 把 `sudo ssserver -c /etc/shadowsocks.json -d start`加进去\n","slug":"shadowsocks-install","published":1,"updated":"2017-05-24T04:50:40.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj46lmvuo006cuwg7zmnvkgwo","content":"<p>轻松搭建<code>shadowsocks</code>,及相关配置说明</p>\n<a id=\"more\"></a>\n<h2 id=\"安装shadowsocks依赖-我的服务器系统是ubuntu\"><a href=\"#安装shadowsocks依赖-我的服务器系统是ubuntu\" class=\"headerlink\" title=\"安装shadowsocks依赖(我的服务器系统是ubuntu)\"></a>安装shadowsocks依赖(我的服务器系统是ubuntu)</h2><ul>\n<li><code>sudo -s</code> // 获取超级管理员权限</li>\n<li><code>apt-get update</code> // 更新apt-get</li>\n<li><code>apt-get install python-pip</code> // 安装python包管理工具pip</li>\n<li><code>pip install shadowsocks</code> // 安装shadowsocks</li>\n</ul>\n<h2 id=\"配置shadowsocks\"><a href=\"#配置shadowsocks\" class=\"headerlink\" title=\"配置shadowsocks\"></a>配置shadowsocks</h2><ul>\n<li><code>vi /etc/shadowsocks.json</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">//单一端口</div><div class=\"line\">&#123;</div><div class=\"line\">    \"server\":\"0.0.0.0\",//服务器 ip地址 (IPv4/IPv6)</div><div class=\"line\">    \"server_port\":1121,//服务器监听的端口,注意不要设为使用中的端口</div><div class=\"line\">    \"local_address\":\"127.0.0.1\",//默认即可</div><div class=\"line\">    \"local_port\":1080,</div><div class=\"line\">    \"password\":\"password\",//密码</div><div class=\"line\">    \"timeout\":300,//超时时间（秒）</div><div class=\"line\">    \"method\":\"aes-256-cfb\",//加密方式</div><div class=\"line\">    \"fast_open\":false</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//多端口</div><div class=\"line\">  &#123;</div><div class=\"line\">   \"server\":\"my_server_ip\",  //填入你的IP地址</div><div class=\"line\">   \"local_address\": \"127.0.0.1\",</div><div class=\"line\">   \"local_port\":1080,</div><div class=\"line\">    \"port_password\": &#123;</div><div class=\"line\">        \"8381\": \"foobar1\",    //端口号，密码</div><div class=\"line\">        \"8382\": \"foobar2\",</div><div class=\"line\">        \"8383\": \"foobar3\",</div><div class=\"line\">        \"8384\": \"foobar4\"</div><div class=\"line\">   &#125;,</div><div class=\"line\">   \"timeout\":300,</div><div class=\"line\">   \"method\":\"aes-256-cfb\",</div><div class=\"line\">   \"fast_open\": false</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"优化shadowsocks服务\"><a href=\"#优化shadowsocks服务\" class=\"headerlink\" title=\"优化shadowsocks服务\"></a>优化shadowsocks服务</h2><ul>\n<li>在终端输入 <code>vi /etc/sysctl.d/local.conf</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"># max open files</div><div class=\"line\">fs.file-max = 1024000</div><div class=\"line\"># max read buffer</div><div class=\"line\">net.core.rmem_max = 67108864</div><div class=\"line\"># max write buffer</div><div class=\"line\">net.core.wmem_max = 67108864</div><div class=\"line\"># default read buffer</div><div class=\"line\">net.core.rmem_default = 65536</div><div class=\"line\"># default write buffer</div><div class=\"line\">net.core.wmem_default = 65536</div><div class=\"line\"># max processor input queue</div><div class=\"line\">net.core.netdev_max_backlog = 4096</div><div class=\"line\"># max backlog</div><div class=\"line\">net.core.somaxconn = 4096</div><div class=\"line\"></div><div class=\"line\"># resist SYN flood attacks</div><div class=\"line\">net.ipv4.tcp_syncookies = 1</div><div class=\"line\"># reuse timewait sockets when safe</div><div class=\"line\">net.ipv4.tcp_tw_reuse = 1</div><div class=\"line\"># turn off fast timewait sockets recycling</div><div class=\"line\">net.ipv4.tcp_tw_recycle = 0</div><div class=\"line\"># short FIN timeout</div><div class=\"line\">net.ipv4.tcp_fin_timeout = 30</div><div class=\"line\"># short keepalive time</div><div class=\"line\">net.ipv4.tcp_keepalive_time = 1200</div><div class=\"line\"># outbound port range</div><div class=\"line\">net.ipv4.ip_local_port_range = 10000 65000</div><div class=\"line\"># max SYN backlog</div><div class=\"line\">net.ipv4.tcp_max_syn_backlog = 4096</div><div class=\"line\"># max timewait sockets held by system simultaneously</div><div class=\"line\">net.ipv4.tcp_max_tw_buckets = 5000</div><div class=\"line\"># TCP receive buffer</div><div class=\"line\">net.ipv4.tcp_rmem = 4096 87380 67108864</div><div class=\"line\"># TCP write buffer</div><div class=\"line\">net.ipv4.tcp_wmem = 4096 65536 67108864</div><div class=\"line\"># turn on path MTU discovery</div><div class=\"line\">net.ipv4.tcp_mtu_probing = 1</div><div class=\"line\"></div><div class=\"line\"># for high-latency network</div><div class=\"line\">net.ipv4.tcp_congestion_control = hybla</div><div class=\"line\"># forward ivp4</div><div class=\"line\">net.ipv4.ip_forward = 1</div></pre></td></tr></table></figure>\n<ul>\n<li>配置生效：<code>sysctl --system</code></li>\n</ul>\n<h2 id=\"开启shadowsocks服务\"><a href=\"#开启shadowsocks服务\" class=\"headerlink\" title=\"开启shadowsocks服务\"></a>开启shadowsocks服务</h2><ul>\n<li><code>ssserver -c /etc/shadowsocks.json -d start</code></li>\n</ul>\n<h2 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h2><ul>\n<li><code>ssserver -c /etc/shadowsocks.json -d stop</code></li>\n</ul>\n<h2 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h2><ul>\n<li>重启(修改配置要重启才生效)：<code>ssserver -c /etc/shadowsocks.json -d restart</code></li>\n</ul>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><ul>\n<li><code>/var/log/shadowsocks.log</code></li>\n</ul>\n<h2 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h2><ul>\n<li><p><code>ssserver -h</code></p>\n<p>  如果出现故障，试试把<code>/etc/shadowsocks.json</code>里改为<code>&quot;server&quot;=&quot;0.0.0.0&quot;.</code> 小心不要掉<code>,</code></p>\n</li>\n</ul>\n<h2 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h2><ul>\n<li>在终端输入 <code>vi /etc/rc.local</code></li>\n<li>把 <code>sudo ssserver -c /etc/shadowsocks.json -d start</code>加进去</li>\n</ul>\n","excerpt":"<p>轻松搭建<code>shadowsocks</code>,及相关配置说明</p>","more":"<h2 id=\"安装shadowsocks依赖-我的服务器系统是ubuntu\"><a href=\"#安装shadowsocks依赖-我的服务器系统是ubuntu\" class=\"headerlink\" title=\"安装shadowsocks依赖(我的服务器系统是ubuntu)\"></a>安装shadowsocks依赖(我的服务器系统是ubuntu)</h2><ul>\n<li><code>sudo -s</code> // 获取超级管理员权限</li>\n<li><code>apt-get update</code> // 更新apt-get</li>\n<li><code>apt-get install python-pip</code> // 安装python包管理工具pip</li>\n<li><code>pip install shadowsocks</code> // 安装shadowsocks</li>\n</ul>\n<h2 id=\"配置shadowsocks\"><a href=\"#配置shadowsocks\" class=\"headerlink\" title=\"配置shadowsocks\"></a>配置shadowsocks</h2><ul>\n<li><code>vi /etc/shadowsocks.json</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">//单一端口</div><div class=\"line\">&#123;</div><div class=\"line\">    \"server\":\"0.0.0.0\",//服务器 ip地址 (IPv4/IPv6)</div><div class=\"line\">    \"server_port\":1121,//服务器监听的端口,注意不要设为使用中的端口</div><div class=\"line\">    \"local_address\":\"127.0.0.1\",//默认即可</div><div class=\"line\">    \"local_port\":1080,</div><div class=\"line\">    \"password\":\"password\",//密码</div><div class=\"line\">    \"timeout\":300,//超时时间（秒）</div><div class=\"line\">    \"method\":\"aes-256-cfb\",//加密方式</div><div class=\"line\">    \"fast_open\":false</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//多端口</div><div class=\"line\">  &#123;</div><div class=\"line\">   \"server\":\"my_server_ip\",  //填入你的IP地址</div><div class=\"line\">   \"local_address\": \"127.0.0.1\",</div><div class=\"line\">   \"local_port\":1080,</div><div class=\"line\">    \"port_password\": &#123;</div><div class=\"line\">        \"8381\": \"foobar1\",    //端口号，密码</div><div class=\"line\">        \"8382\": \"foobar2\",</div><div class=\"line\">        \"8383\": \"foobar3\",</div><div class=\"line\">        \"8384\": \"foobar4\"</div><div class=\"line\">   &#125;,</div><div class=\"line\">   \"timeout\":300,</div><div class=\"line\">   \"method\":\"aes-256-cfb\",</div><div class=\"line\">   \"fast_open\": false</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"优化shadowsocks服务\"><a href=\"#优化shadowsocks服务\" class=\"headerlink\" title=\"优化shadowsocks服务\"></a>优化shadowsocks服务</h2><ul>\n<li>在终端输入 <code>vi /etc/sysctl.d/local.conf</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"># max open files</div><div class=\"line\">fs.file-max = 1024000</div><div class=\"line\"># max read buffer</div><div class=\"line\">net.core.rmem_max = 67108864</div><div class=\"line\"># max write buffer</div><div class=\"line\">net.core.wmem_max = 67108864</div><div class=\"line\"># default read buffer</div><div class=\"line\">net.core.rmem_default = 65536</div><div class=\"line\"># default write buffer</div><div class=\"line\">net.core.wmem_default = 65536</div><div class=\"line\"># max processor input queue</div><div class=\"line\">net.core.netdev_max_backlog = 4096</div><div class=\"line\"># max backlog</div><div class=\"line\">net.core.somaxconn = 4096</div><div class=\"line\"></div><div class=\"line\"># resist SYN flood attacks</div><div class=\"line\">net.ipv4.tcp_syncookies = 1</div><div class=\"line\"># reuse timewait sockets when safe</div><div class=\"line\">net.ipv4.tcp_tw_reuse = 1</div><div class=\"line\"># turn off fast timewait sockets recycling</div><div class=\"line\">net.ipv4.tcp_tw_recycle = 0</div><div class=\"line\"># short FIN timeout</div><div class=\"line\">net.ipv4.tcp_fin_timeout = 30</div><div class=\"line\"># short keepalive time</div><div class=\"line\">net.ipv4.tcp_keepalive_time = 1200</div><div class=\"line\"># outbound port range</div><div class=\"line\">net.ipv4.ip_local_port_range = 10000 65000</div><div class=\"line\"># max SYN backlog</div><div class=\"line\">net.ipv4.tcp_max_syn_backlog = 4096</div><div class=\"line\"># max timewait sockets held by system simultaneously</div><div class=\"line\">net.ipv4.tcp_max_tw_buckets = 5000</div><div class=\"line\"># TCP receive buffer</div><div class=\"line\">net.ipv4.tcp_rmem = 4096 87380 67108864</div><div class=\"line\"># TCP write buffer</div><div class=\"line\">net.ipv4.tcp_wmem = 4096 65536 67108864</div><div class=\"line\"># turn on path MTU discovery</div><div class=\"line\">net.ipv4.tcp_mtu_probing = 1</div><div class=\"line\"></div><div class=\"line\"># for high-latency network</div><div class=\"line\">net.ipv4.tcp_congestion_control = hybla</div><div class=\"line\"># forward ivp4</div><div class=\"line\">net.ipv4.ip_forward = 1</div></pre></td></tr></table></figure>\n<ul>\n<li>配置生效：<code>sysctl --system</code></li>\n</ul>\n<h2 id=\"开启shadowsocks服务\"><a href=\"#开启shadowsocks服务\" class=\"headerlink\" title=\"开启shadowsocks服务\"></a>开启shadowsocks服务</h2><ul>\n<li><code>ssserver -c /etc/shadowsocks.json -d start</code></li>\n</ul>\n<h2 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h2><ul>\n<li><code>ssserver -c /etc/shadowsocks.json -d stop</code></li>\n</ul>\n<h2 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h2><ul>\n<li>重启(修改配置要重启才生效)：<code>ssserver -c /etc/shadowsocks.json -d restart</code></li>\n</ul>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><ul>\n<li><code>/var/log/shadowsocks.log</code></li>\n</ul>\n<h2 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h2><ul>\n<li><p><code>ssserver -h</code></p>\n<p>  如果出现故障，试试把<code>/etc/shadowsocks.json</code>里改为<code>&quot;server&quot;=&quot;0.0.0.0&quot;.</code> 小心不要掉<code>,</code></p>\n</li>\n</ul>\n<h2 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h2><ul>\n<li>在终端输入 <code>vi /etc/rc.local</code></li>\n<li>把 <code>sudo ssserver -c /etc/shadowsocks.json -d start</code>加进去</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj46lmvl60000uwg7xknm2pn5","category_id":"cj46lmvlo0002uwg7n7p6uigh","_id":"cj46lmvm70009uwg7uu19jbfd"},{"post_id":"cj46lmvlg0001uwg7ocz88rd6","category_id":"cj46lmvlo0002uwg7n7p6uigh","_id":"cj46lmvm9000duwg7q2i171y2"},{"post_id":"cj46lmvlx0004uwg7zvcnqi1h","category_id":"cj46lmvm8000auwg79iajzomo","_id":"cj46lmvma000huwg7wo9urkan"},{"post_id":"cj46lmvm00005uwg7fc8gbe33","category_id":"cj46lmvm9000fuwg71u9ivanf","_id":"cj46lmvmc000muwg7dvfpx87z"},{"post_id":"cj46lmvm30006uwg79c3jbqcr","category_id":"cj46lmvm8000auwg79iajzomo","_id":"cj46lmvmd000ouwg7emrtycjv"},{"post_id":"cj46lmvnh0015uwg7jigt4kco","category_id":"cj46lmvm9000fuwg71u9ivanf","_id":"cj46lmvny001euwg7qxsbwy28"},{"post_id":"cj46lmvnn0017uwg775toj8d7","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvo6001nuwg7xue83xjv"},{"post_id":"cj46lmvo4001muwg7sqn0omyf","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvod001tuwg7x94qmcvk"},{"post_id":"cj46lmvnu001auwg72y3af5m6","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvof001yuwg76qm9bpzo"},{"post_id":"cj46lmvo7001ouwg78opmr30n","category_id":"cj46lmvm8000auwg79iajzomo","_id":"cj46lmvog0021uwg78t4r6dxi"},{"post_id":"cj46lmvny001guwg79jxyasfx","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvoj0026uwg7bj4twyti"},{"post_id":"cj46lmvod001uuwg72y58qrwr","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvol0029uwg78w4xwwrx"},{"post_id":"cj46lmvof001zuwg7gzy62pap","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvop002duwg7gi1b3h0k"},{"post_id":"cj46lmvo0001iuwg7z43vbfy2","category_id":"cj46lmvoe001vuwg7lefx0fje","_id":"cj46lmvos002guwg78u3xz7tm"},{"post_id":"cj46lmvoh0022uwg74digicpe","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvot002iuwg7192il6fs"},{"post_id":"cj46lmvoj0027uwg7xx7wcl8j","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvow002muwg7qqngunuh"},{"post_id":"cj46lmvo2001juwg7vvg2fqbc","category_id":"cj46lmvoi0024uwg7et5y6pkj","_id":"cj46lmvox002puwg7649aji7q"},{"post_id":"cj46lmvom002auwg73fpwgm9a","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvoz002tuwg7uyv5s24c"},{"post_id":"cj46lmvoq002fuwg7anmur8hy","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvp1002wuwg70dnp1qgk"},{"post_id":"cj46lmvoc001ruwg7wlvpo3tz","category_id":"cj46lmvop002cuwg7lk5ol9m5","_id":"cj46lmvp20030uwg7ajo46qdp"},{"post_id":"cj46lmvos002huwg7k63hh1yy","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvp40033uwg70z8j3m73"},{"post_id":"cj46lmvou002juwg75autl0v1","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvp60036uwg7n0gvu5ec"},{"post_id":"cj46lmvow002nuwg72eyxb2ro","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvpa003auwg7qlqzggeo"},{"post_id":"cj46lmvoy002quwg7l9p4hzxg","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvpc003euwg7vu7ldb4w"},{"post_id":"cj46lmvp0002uuwg7v7h4rblr","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvpe003iuwg7biwl0n81"},{"post_id":"cj46lmvp1002xuwg76w1ae30q","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvpf003kuwg75v7urfs3"},{"post_id":"cj46lmvp20031uwg7zswdpbk3","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvpi003ouwg70tcmuoih"},{"post_id":"cj46lmvp40034uwg7fcmwon3m","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvpj003ruwg7s4jo077v"},{"post_id":"cj46lmvp70038uwg7aub1qx1e","category_id":"cj46lmvpc003cuwg7s9l4fmf3","_id":"cj46lmvpm003wuwg72af1y36i"},{"post_id":"cj46lmvpf003luwg7iopeajw2","category_id":"cj46lmvlo0002uwg7n7p6uigh","_id":"cj46lmvpn003yuwg7pbbdfblz"},{"post_id":"cj46lmvpi003puwg7q0jesakj","category_id":"cj46lmvnx001cuwg7dj572wni","_id":"cj46lmvpo0041uwg72k2zwpw0"},{"post_id":"cj46lmvpb003buwg7mzb3w7m8","category_id":"cj46lmvpg003muwg7uzf0353x","_id":"cj46lmvpp0044uwg7wuo7pb1g"},{"post_id":"cj46lmvpc003fuwg7029rqi7p","category_id":"cj46lmvpl003uuwg7b5loq6pp","_id":"cj46lmvpp0047uwg7m2d12hsf"},{"post_id":"cj46lmvpe003juwg7q0o8ab7o","category_id":"cj46lmvpg003muwg7uzf0353x","_id":"cj46lmvpq0049uwg7x2erln4m"},{"post_id":"cj46lmvpj003suwg7d2v2voi4","category_id":"cj46lmvpp0046uwg77h62le25","_id":"cj46lmvpq004cuwg7sxr7jq0g"},{"post_id":"cj46lmvuo006cuwg7zmnvkgwo","category_id":"cj46lmvur006fuwg7a0gf08th","_id":"cj46lmvut006iuwg74bboewp1"}],"PostTag":[{"post_id":"cj46lmvl60000uwg7xknm2pn5","tag_id":"cj46lmvlv0003uwg7dznnt6ug","_id":"cj46lmvm9000cuwg71e29co4b"},{"post_id":"cj46lmvl60000uwg7xknm2pn5","tag_id":"cj46lmvm60008uwg7lu12bjda","_id":"cj46lmvm9000euwg7sm06hos4"},{"post_id":"cj46lmvlg0001uwg7ocz88rd6","tag_id":"cj46lmvlv0003uwg7dznnt6ug","_id":"cj46lmvmb000kuwg7civqo6f1"},{"post_id":"cj46lmvlg0001uwg7ocz88rd6","tag_id":"cj46lmvm60008uwg7lu12bjda","_id":"cj46lmvmc000luwg7d00i3kzx"},{"post_id":"cj46lmvlx0004uwg7zvcnqi1h","tag_id":"cj46lmvma000iuwg71hvfnqps","_id":"cj46lmvmi000ruwg70isy9dp1"},{"post_id":"cj46lmvlx0004uwg7zvcnqi1h","tag_id":"cj46lmvmc000nuwg7dytei66p","_id":"cj46lmvmi000suwg7j6so9d7l"},{"post_id":"cj46lmvlx0004uwg7zvcnqi1h","tag_id":"cj46lmvmf000puwg7dvak4rns","_id":"cj46lmvmi000uuwg7t9apxunu"},{"post_id":"cj46lmvm00005uwg7fc8gbe33","tag_id":"cj46lmvmg000quwg7s1itrj5q","_id":"cj46lmvmj000xuwg7me8darn6"},{"post_id":"cj46lmvm00005uwg7fc8gbe33","tag_id":"cj46lmvmi000tuwg7ct2s7zc2","_id":"cj46lmvmj000yuwg7b8jqk840"},{"post_id":"cj46lmvm00005uwg7fc8gbe33","tag_id":"cj46lmvmj000vuwg7jgukira4","_id":"cj46lmvml0010uwg77u87c9om"},{"post_id":"cj46lmvm30006uwg79c3jbqcr","tag_id":"cj46lmvma000iuwg71hvfnqps","_id":"cj46lmvmm0012uwg7sba3d85b"},{"post_id":"cj46lmvm30006uwg79c3jbqcr","tag_id":"cj46lmvmc000nuwg7dytei66p","_id":"cj46lmvmm0013uwg7g617xpen"},{"post_id":"cj46lmvm30006uwg79c3jbqcr","tag_id":"cj46lmvmf000puwg7dvak4rns","_id":"cj46lmvmn0014uwg7bpv2vfsi"},{"post_id":"cj46lmvnh0015uwg7jigt4kco","tag_id":"cj46lmvmg000quwg7s1itrj5q","_id":"cj46lmvnu0019uwg7321xc6sz"},{"post_id":"cj46lmvnh0015uwg7jigt4kco","tag_id":"cj46lmvmi000tuwg7ct2s7zc2","_id":"cj46lmvny001fuwg7foriir6i"},{"post_id":"cj46lmvnh0015uwg7jigt4kco","tag_id":"cj46lmvmj000vuwg7jgukira4","_id":"cj46lmvnz001huwg7deur9e21"},{"post_id":"cj46lmvnn0017uwg775toj8d7","tag_id":"cj46lmvny001duwg79ritjthp","_id":"cj46lmvoc001suwg77tvzvgvl"},{"post_id":"cj46lmvnn0017uwg775toj8d7","tag_id":"cj46lmvo4001luwg7m7xqoz62","_id":"cj46lmvoe001wuwg728hiq3f9"},{"post_id":"cj46lmvo7001ouwg78opmr30n","tag_id":"cj46lmvma000iuwg71hvfnqps","_id":"cj46lmvog0020uwg7gkvb3fo1"},{"post_id":"cj46lmvo7001ouwg78opmr30n","tag_id":"cj46lmvmc000nuwg7dytei66p","_id":"cj46lmvoi0023uwg7go8bnrrn"},{"post_id":"cj46lmvo7001ouwg78opmr30n","tag_id":"cj46lmvmf000puwg7dvak4rns","_id":"cj46lmvok0028uwg7zt3gt6t9"},{"post_id":"cj46lmvnu001auwg72y3af5m6","tag_id":"cj46lmvoa001quwg7zvpnkuhr","_id":"cj46lmvoo002buwg744q2natj"},{"post_id":"cj46lmvos002huwg7k63hh1yy","tag_id":"cj46lmvny001duwg79ritjthp","_id":"cj46lmvow002luwg77pljtnyp"},{"post_id":"cj46lmvou002juwg75autl0v1","tag_id":"cj46lmvny001duwg79ritjthp","_id":"cj46lmvox002ouwg7cs2s1zm9"},{"post_id":"cj46lmvow002nuwg72eyxb2ro","tag_id":"cj46lmvny001duwg79ritjthp","_id":"cj46lmvoz002suwg7w1wqzkvy"},{"post_id":"cj46lmvny001guwg79jxyasfx","tag_id":"cj46lmvny001duwg79ritjthp","_id":"cj46lmvp0002vuwg7gym8y4ge"},{"post_id":"cj46lmvny001guwg79jxyasfx","tag_id":"cj46lmvoj0025uwg7g1973oo0","_id":"cj46lmvp2002zuwg7yxmwc69x"},{"post_id":"cj46lmvny001guwg79jxyasfx","tag_id":"cj46lmvop002euwg7lzfdzjuu","_id":"cj46lmvp40032uwg77qp9erfn"},{"post_id":"cj46lmvny001guwg79jxyasfx","tag_id":"cj46lmvov002kuwg7khpy9yen","_id":"cj46lmvp60035uwg7echnq8q6"},{"post_id":"cj46lmvoy002quwg7l9p4hzxg","tag_id":"cj46lmvny001duwg79ritjthp","_id":"cj46lmvpa0039uwg7mh2lp53g"},{"post_id":"cj46lmvp0002uuwg7v7h4rblr","tag_id":"cj46lmvny001duwg79ritjthp","_id":"cj46lmvpc003duwg7llim7tqy"},{"post_id":"cj46lmvp20031uwg7zswdpbk3","tag_id":"cj46lmvny001duwg79ritjthp","_id":"cj46lmvpd003huwg7mqvexsjf"},{"post_id":"cj46lmvo0001iuwg7z43vbfy2","tag_id":"cj46lmvoz002ruwg78p7yivv2","_id":"cj46lmvpj003quwg7b3ifn6du"},{"post_id":"cj46lmvo0001iuwg7z43vbfy2","tag_id":"cj46lmvp1002yuwg7ja9oe3xr","_id":"cj46lmvpl003tuwg743uquyz3"},{"post_id":"cj46lmvo0001iuwg7z43vbfy2","tag_id":"cj46lmvp70037uwg7uzekw90j","_id":"cj46lmvpn003xuwg723tzfw18"},{"post_id":"cj46lmvo0001iuwg7z43vbfy2","tag_id":"cj46lmvpd003guwg7vbf5zfal","_id":"cj46lmvpn003zuwg7arowgeud"},{"post_id":"cj46lmvpi003puwg7q0jesakj","tag_id":"cj46lmvny001duwg79ritjthp","_id":"cj46lmvpo0043uwg7af0iubty"},{"post_id":"cj46lmvo2001juwg7vvg2fqbc","tag_id":"cj46lmvph003nuwg7ojq5zx4n","_id":"cj46lmvpp0045uwg75kb9b3om"},{"post_id":"cj46lmvo4001muwg7sqn0omyf","tag_id":"cj46lmvpl003vuwg7d7e5r84k","_id":"cj46lmvpq004buwg796oajym5"},{"post_id":"cj46lmvo4001muwg7sqn0omyf","tag_id":"cj46lmvpo0042uwg7nkfqo9fe","_id":"cj46lmvpq004duwg7qir0jo4y"},{"post_id":"cj46lmvo4001muwg7sqn0omyf","tag_id":"cj46lmvpp0048uwg7p8z958lv","_id":"cj46lmvpr004fuwg7yjjmb17c"},{"post_id":"cj46lmvoc001ruwg7wlvpo3tz","tag_id":"cj46lmvpq004auwg7x4bfeb78","_id":"cj46lmvpr004huwg7qpuwqpff"},{"post_id":"cj46lmvoc001ruwg7wlvpo3tz","tag_id":"cj46lmvpr004euwg7s10eg8uo","_id":"cj46lmvpr004iuwg7zehd1rvv"},{"post_id":"cj46lmvod001uuwg72y58qrwr","tag_id":"cj46lmvpl003vuwg7d7e5r84k","_id":"cj46lmvpt004muwg7diymrerg"},{"post_id":"cj46lmvod001uuwg72y58qrwr","tag_id":"cj46lmvpo0042uwg7nkfqo9fe","_id":"cj46lmvpt004nuwg7gw7olvh0"},{"post_id":"cj46lmvod001uuwg72y58qrwr","tag_id":"cj46lmvpp0048uwg7p8z958lv","_id":"cj46lmvpu004puwg7uakd7j59"},{"post_id":"cj46lmvof001zuwg7gzy62pap","tag_id":"cj46lmvpl003vuwg7d7e5r84k","_id":"cj46lmvpv004suwg77696ssdj"},{"post_id":"cj46lmvof001zuwg7gzy62pap","tag_id":"cj46lmvpo0042uwg7nkfqo9fe","_id":"cj46lmvpv004tuwg7cf1rt4q6"},{"post_id":"cj46lmvof001zuwg7gzy62pap","tag_id":"cj46lmvpp0048uwg7p8z958lv","_id":"cj46lmvpw004vuwg7p1mo8q00"},{"post_id":"cj46lmvoh0022uwg74digicpe","tag_id":"cj46lmvpl003vuwg7d7e5r84k","_id":"cj46lmvpx004yuwg7yoo0tm71"},{"post_id":"cj46lmvoh0022uwg74digicpe","tag_id":"cj46lmvpo0042uwg7nkfqo9fe","_id":"cj46lmvpy004zuwg7ps4b1lub"},{"post_id":"cj46lmvoh0022uwg74digicpe","tag_id":"cj46lmvpp0048uwg7p8z958lv","_id":"cj46lmvpz0051uwg78azy6u5v"},{"post_id":"cj46lmvoj0027uwg7xx7wcl8j","tag_id":"cj46lmvpl003vuwg7d7e5r84k","_id":"cj46lmvq00054uwg7z5g4u1cj"},{"post_id":"cj46lmvoj0027uwg7xx7wcl8j","tag_id":"cj46lmvpo0042uwg7nkfqo9fe","_id":"cj46lmvq00055uwg705ix4eim"},{"post_id":"cj46lmvoj0027uwg7xx7wcl8j","tag_id":"cj46lmvpp0048uwg7p8z958lv","_id":"cj46lmvq10057uwg7dbura6xw"},{"post_id":"cj46lmvom002auwg73fpwgm9a","tag_id":"cj46lmvpl003vuwg7d7e5r84k","_id":"cj46lmvq2005auwg7ca96c7ak"},{"post_id":"cj46lmvom002auwg73fpwgm9a","tag_id":"cj46lmvpo0042uwg7nkfqo9fe","_id":"cj46lmvq2005buwg7tfua2b8k"},{"post_id":"cj46lmvom002auwg73fpwgm9a","tag_id":"cj46lmvpp0048uwg7p8z958lv","_id":"cj46lmvq2005duwg7jkpa4pev"},{"post_id":"cj46lmvoq002fuwg7anmur8hy","tag_id":"cj46lmvpl003vuwg7d7e5r84k","_id":"cj46lmvq3005guwg7greubn21"},{"post_id":"cj46lmvoq002fuwg7anmur8hy","tag_id":"cj46lmvpo0042uwg7nkfqo9fe","_id":"cj46lmvq3005huwg7ytuwtzka"},{"post_id":"cj46lmvoq002fuwg7anmur8hy","tag_id":"cj46lmvpp0048uwg7p8z958lv","_id":"cj46lmvq4005juwg7nxm1ciz4"},{"post_id":"cj46lmvp1002xuwg76w1ae30q","tag_id":"cj46lmvq3005fuwg7x6a9vj77","_id":"cj46lmvq4005kuwg77mmf9mmf"},{"post_id":"cj46lmvp40034uwg7fcmwon3m","tag_id":"cj46lmvny001duwg79ritjthp","_id":"cj46lmvq6005nuwg775kxbe4d"},{"post_id":"cj46lmvp40034uwg7fcmwon3m","tag_id":"cj46lmvq3005iuwg7md04f1ck","_id":"cj46lmvq6005ouwg7ovhz3epu"},{"post_id":"cj46lmvp40034uwg7fcmwon3m","tag_id":"cj46lmvq5005luwg7zj7qs3o8","_id":"cj46lmvq8005quwg71at4zox0"},{"post_id":"cj46lmvp70038uwg7aub1qx1e","tag_id":"cj46lmvq5005muwg7w3z2v7qn","_id":"cj46lmvqa005suwg7hgsb9zyk"},{"post_id":"cj46lmvp70038uwg7aub1qx1e","tag_id":"cj46lmvq6005puwg79pl1nb9h","_id":"cj46lmvqa005tuwg7tgn22krd"},{"post_id":"cj46lmvpb003buwg7mzb3w7m8","tag_id":"cj46lmvq9005ruwg7xhec2f5i","_id":"cj46lmvqb005wuwg75hwque9q"},{"post_id":"cj46lmvpb003buwg7mzb3w7m8","tag_id":"cj46lmvqa005uuwg7xbgi88tg","_id":"cj46lmvqb005xuwg7je144ime"},{"post_id":"cj46lmvpc003fuwg7029rqi7p","tag_id":"cj46lmvqa005vuwg7sc0lhhb3","_id":"cj46lmvqc0060uwg78ighohro"},{"post_id":"cj46lmvpc003fuwg7029rqi7p","tag_id":"cj46lmvqb005yuwg79hq9zb2z","_id":"cj46lmvqc0061uwg7i6a5opfd"},{"post_id":"cj46lmvpe003juwg7q0o8ab7o","tag_id":"cj46lmvq9005ruwg7xhec2f5i","_id":"cj46lmvqd0064uwg7e51xml4i"},{"post_id":"cj46lmvpe003juwg7q0o8ab7o","tag_id":"cj46lmvqa005uuwg7xbgi88tg","_id":"cj46lmvqd0065uwg7qdrjd9v1"},{"post_id":"cj46lmvpf003luwg7iopeajw2","tag_id":"cj46lmvqd0063uwg7u7mcgpav","_id":"cj46lmvqe0067uwg73t2torzd"},{"post_id":"cj46lmvpf003luwg7iopeajw2","tag_id":"cj46lmvlv0003uwg7dznnt6ug","_id":"cj46lmvqe0068uwg7t9f5kw6j"},{"post_id":"cj46lmvpj003suwg7d2v2voi4","tag_id":"cj46lmvqe0066uwg70pdc3zeq","_id":"cj46lmvqf006auwg73m0bndg9"},{"post_id":"cj46lmvpj003suwg7d2v2voi4","tag_id":"cj46lmvqe0069uwg75ivrh7ok","_id":"cj46lmvqf006buwg7hme3pd88"},{"post_id":"cj46lmvuo006cuwg7zmnvkgwo","tag_id":"cj46lmvur006guwg7aafrnkrt","_id":"cj46lmvuu006juwg7d7rs4qq9"},{"post_id":"cj46lmvuo006cuwg7zmnvkgwo","tag_id":"cj46lmvus006huwg77wmeti1f","_id":"cj46lmvuu006kuwg7yv536tzs"}],"Tag":[{"name":"Node","_id":"cj46lmvlv0003uwg7dznnt6ug"},{"name":"NodeJs","_id":"cj46lmvm60008uwg7lu12bjda"},{"name":"Canvas","_id":"cj46lmvma000iuwg71hvfnqps"},{"name":"HTML5","_id":"cj46lmvmc000nuwg7dytei66p"},{"name":"画布","_id":"cj46lmvmf000puwg7dvak4rns"},{"name":"adb","_id":"cj46lmvmg000quwg7s1itrj5q"},{"name":"Android","_id":"cj46lmvmi000tuwg7ct2s7zc2"},{"name":"adb命令","_id":"cj46lmvmj000vuwg7jgukira4"},{"name":"javascript","_id":"cj46lmvny001duwg79ritjthp"},{"name":"js构造函数","_id":"cj46lmvo4001luwg7m7xqoz62"},{"name":"Function","_id":"cj46lmvoa001quwg7zvpnkuhr"},{"name":"js面向对象","_id":"cj46lmvoj0025uwg7g1973oo0"},{"name":"继承","_id":"cj46lmvop002euwg7lzfdzjuu"},{"name":"继承的实现方式","_id":"cj46lmvov002kuwg7khpy9yen"},{"name":"hexo","_id":"cj46lmvoz002ruwg78p7yivv2"},{"name":"梦魇小栈","_id":"cj46lmvp1002yuwg7ja9oe3xr"},{"name":"梦魇","_id":"cj46lmvp70037uwg7uzekw90j"},{"name":"houyi1121","_id":"cj46lmvpd003guwg7vbf5zfal"},{"name":"Git","_id":"cj46lmvph003nuwg7ojq5zx4n"},{"name":"原生Js","_id":"cj46lmvpl003vuwg7d7e5r84k"},{"name":"Js框架","_id":"cj46lmvpo0042uwg7nkfqo9fe"},{"name":"JQuery","_id":"cj46lmvpp0048uwg7p8z958lv"},{"name":"Ubuntu","_id":"cj46lmvpq004auwg7x4bfeb78"},{"name":"Cron","_id":"cj46lmvpr004euwg7s10eg8uo"},{"name":"原型链","_id":"cj46lmvq3005fuwg7x6a9vj77"},{"name":"原型","_id":"cj46lmvq3005iuwg7md04f1ck"},{"name":"原型的基本概念","_id":"cj46lmvq5005luwg7zj7qs3o8"},{"name":"Linux","_id":"cj46lmvq5005muwg7w3z2v7qn"},{"name":"shell","_id":"cj46lmvq6005puwg79pl1nb9h"},{"name":"MongoDB","_id":"cj46lmvq9005ruwg7xhec2f5i"},{"name":"NoSQL","_id":"cj46lmvqa005uuwg7xbgi88tg"},{"name":"Markdown语法规范","_id":"cj46lmvqa005vuwg7sc0lhhb3"},{"name":"tools","_id":"cj46lmvqb005yuwg79hq9zb2z"},{"name":"npm","_id":"cj46lmvqd0063uwg7u7mcgpav"},{"name":"伪类","_id":"cj46lmvqe0066uwg70pdc3zeq"},{"name":"伪元素","_id":"cj46lmvqe0069uwg75ivrh7ok"},{"name":"科学上网","_id":"cj46lmvur006guwg7aafrnkrt"},{"name":"shadowsocks","_id":"cj46lmvus006huwg77wmeti1f"}]}}