{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/CNAME","path":"CNAME","modified":1,"renderable":1},{"_id":"themes/next/source/baidu_verify_HR5eYsvhwq.html","path":"baidu_verify_HR5eYsvhwq.html","modified":1,"renderable":1},{"_id":"themes/next/source/400.html","path":"400.html","modified":1,"renderable":1},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/css/cursor.css","path":"css/cursor.css","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cursor.ico","path":"images/cursor.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/Thumbs.db","path":"images/Thumbs.db","modified":1,"renderable":1},{"_id":"themes/next/source/images/img2.png","path":"images/img2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/img1.png","path":"images/img1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/plbj.png","path":"images/plbj.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/ds-1.gif","path":"images/ds-1.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/qcode/alipay_qcode.png","path":"qcode/alipay_qcode.png","modified":1,"renderable":1},{"_id":"themes/next/source/qcode/wechat_qcode.png","path":"qcode/wechat_qcode.png","modified":1,"renderable":1},{"_id":"themes/next/source/qcode/weixin-qrcode.png","path":"qcode/weixin-qrcode.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/ds-2.png","path":"images/ds-2.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/embed.js","path":"js/src/embed.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/set.js","path":"js/src/set.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/img/sp161118_190319.png","path":"img/sp161118_190319.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/robots.txt","hash":"40b57f82da7cab060ce14b212aaad9140627406d","modified":1478717428338},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1462394086000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1462394086000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1462394086000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1462394086000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1462394086000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1462394086000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1462394086000},{"_id":"themes/next/_config.yml","hash":"d702c147252c573c6e5f443843a4d052eb1480ed","modified":1480565599336},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1462394086000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1462394086000},{"_id":"source/favicon.ico","hash":"61ed14c161a5df9092565996e38cdd438f128783","modified":1479648569380},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1462394086000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1462394086000},{"_id":"source/_posts/canvas-part1.md","hash":"79f0a5655f28c51b6b6998b32f2bf048c8ab7643","modified":1479951213631},{"_id":"source/_posts/canvas-summary.md","hash":"64ccba23acb9678998ea941ed6eeae82ef9f5f7d","modified":1479951309908},{"_id":"source/_posts/canvas-part2.md","hash":"384b27a77509903dc479df5b5e2ddf877c806892","modified":1479951273712},{"_id":"source/_posts/hello-world.md","hash":"b3bb0867f9dd8365049ad2559a192d86b6a96705","modified":1479950190994},{"_id":"source/_posts/javascript-Function.md","hash":"0a59b054941e621ef7a24130bea30edebf875499","modified":1479950917656},{"_id":"source/_posts/javascript-constructor.md","hash":"f4b55e3c697b3462be9680d30da69cd26967a9bc","modified":1479950758217},{"_id":"source/_posts/javascript-inherit.md","hash":"5f92254df069652980996a6ff0dcdc3db7a33b72","modified":1479950850082},{"_id":"source/_posts/javascript-jquery-part1.md","hash":"a72edc8f8f08748dd5368e594b5ea635a85eaa74","modified":1479951348250},{"_id":"source/_posts/javascript-jquery-part3.md","hash":"94de405402ceb22fe6ec3712f4c62e74b385d5da","modified":1479951397176},{"_id":"source/_posts/javascript-jquery-part5.md","hash":"27c05a89c142453222993ae09706a8a41e36178f","modified":1479951457701},{"_id":"source/_posts/javascript-jquery-part2.md","hash":"ec09b544a399d60ddc3df569a7c8ea107b501b1b","modified":1479951378943},{"_id":"source/_posts/javascript-part1.md","hash":"34e46ec4b20cac6de81ff386300970f13ce7702f","modified":1479950491000},{"_id":"source/_posts/javascript-jquery-part4.md","hash":"cd19546c7bfd8d445d1f44a676e8b3fef940fd8e","modified":1479951449096},{"_id":"source/_posts/javascript-part2.md","hash":"442bd39b3dc6c9d5c35ec534ac0a859797d5f874","modified":1479950717338},{"_id":"source/_posts/javascript-part4.md","hash":"41bacb60063954146c606ea89875828864d0412f","modified":1479951005120},{"_id":"source/_posts/javascript-part3.md","hash":"b7904d5d1852859cb76c061122175512abc236b6","modified":1479950976406},{"_id":"source/_posts/javascript-part5.md","hash":"45bba563ca0c1e81d900255397c3ee1342baed77","modified":1479951021970},{"_id":"source/_posts/javascript-jquery-part6.md","hash":"6d2d515ba7ef29dba12e3b9d9dd931cbef6259ec","modified":1479993233120},{"_id":"source/_posts/javascript-part6.md","hash":"bbe1899a3f1384acb27fd1774a1e4f032e55ca69","modified":1479951091067},{"_id":"source/_posts/javascript-prototype-chain.md","hash":"74e3c28b6a0ce159e65b0b58ec3312756ae5cc5a","modified":1479950887277},{"_id":"source/_posts/javascript-prototype.md","hash":"73103828fc32ec288db88ce99bb9635684435647","modified":1479950799852},{"_id":"source/about/index.md","hash":"17f83a3da9825de8be0444cee6a1c0ba3351165f","modified":1480604443091},{"_id":"source/guestbook/index.md","hash":"addaf2b6dceff8c6f017b893ebc9c48f9059264c","modified":1480604388371},{"_id":"source/links/index.md","hash":"f3770696a0b69fec1b6fbf75dc3ae886c359b4b1","modified":1480604422975},{"_id":"source/_posts/use-tools-part1-markdown.md","hash":"9dd56546132220b8321571cecd302af9148e4522","modified":1480233771268},{"_id":"source/categories/index.md","hash":"c550b628154423bc8705185c3d2f517cb6d8302f","modified":1480582925604},{"_id":"source/tags/index.md","hash":"4b5e474c530d9099b4970cf881a7988d735573e8","modified":1478790256289},{"_id":"source/_posts/javascript-summary.md","hash":"732fcc68b63e07c4ac5ac9344cade64ec5003e63","modified":1479951148396},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1462394086000},{"_id":"source/_posts/javascript-jquery-part7.md","hash":"6c14bd63cf5fb4bea46597d2ee763e55f6b6640e","modified":1480213863000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1462394086000},{"_id":"themes/next/layout/category.swig","hash":"6c55fcc07acb91d788db70497aedaacad594f349","modified":1479867065339},{"_id":"themes/next/layout/index.swig","hash":"1328ab8ddfb08a3f8e2ba204d25ef9c1ceccb50d","modified":1479867384799},{"_id":"themes/next/layout/archive.swig","hash":"1532dde26dd547a93531f4c3b9d2da0606183c0b","modified":1479867102901},{"_id":"themes/next/layout/_layout.swig","hash":"26280ba9db00eae0bc6b9ee908df9d5da6cd8420","modified":1479866943760},{"_id":"themes/next/layout/page.swig","hash":"f6d274cf36773c75a76bf24b64a89bf6c3ebb8c1","modified":1479867559556},{"_id":"themes/next/layout/tag.swig","hash":"5e46abeacde124a08818fc1c34b15d9de293f05c","modified":1479867086290},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1462394086000},{"_id":"themes/next/layout/post.swig","hash":"320ec16a178814387c521ca1117cd8607172e96d","modified":1479867684686},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1462394086000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1462394086000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1462394086000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1462394086000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1462394086000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1462394086000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1462394086000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f8fdab64abb69a55e11bca3a5daadfff9cdf859d","modified":1478788211322},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1462394086000},{"_id":"themes/next/source/CNAME","hash":"b6b717a1f89639bb8eeb19bbf4558c6cc1804390","modified":1479806730149},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1462394086000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1462394086000},{"_id":"themes/next/source/baidu_verify_HR5eYsvhwq.html","hash":"18f2c1a4a646c26871a5e9fc8fd424117035fcc3","modified":1479487192246},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1462394086000},{"_id":"themes/next/source/400.html","hash":"3f872f1e5f7ab764fb0d3ae2875c9088d84f98ac","modified":1479866612156},{"_id":"themes/next/source/404.html","hash":"90e824f92dd6b1901818ec12546ac02194247bfe","modified":1479866591048},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1462394086000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1462394086000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1462394086000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1462394086000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"8b7935fe68c05a6d9a3b1130faef241586471346","modified":1479828636484},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1462394086000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1462394086000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1462394086000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1462394086000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1462394086000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1462394086000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1462394086000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1462394086000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1462394086000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1462394086000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1462394086000},{"_id":"themes/next/layout/_partials/head.swig","hash":"bf151b8e68027bed501181d72a97a3e421db63e5","modified":1478854749751},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1462394086000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1462394086000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1462394086000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1462394086000},{"_id":"themes/next/source/css/cursor.css","hash":"da582310722ca088769344f81d39919356c69f72","modified":1478860083881},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1462394086000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1462394086000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1462394086000},{"_id":"themes/next/source/images/cursor.ico","hash":"cd8349fb9cef6c217fc364cf35eae6819cebf5d6","modified":1478845626332},{"_id":"themes/next/source/images/Thumbs.db","hash":"878f9833358933aa1f79c0627cbb7180d3853b89","modified":1470202100000},{"_id":"themes/next/source/images/img2.png","hash":"69eb3bd6a5e6d45ee336b328753b3465c4abc48a","modified":1478770542679},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462394086000},{"_id":"themes/next/source/images/img1.png","hash":"8091e664621d6d4fc2f41818af5ea5ade896173b","modified":1467101542000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462394086000},{"_id":"themes/next/source/images/plbj.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1479485780865},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1462394086000},{"_id":"themes/next/source/images/ds-1.gif","hash":"e0bc6023185e4c841f624f2347f8439d06f627fd","modified":1478770531362},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1462394086000},{"_id":"themes/next/source/qcode/alipay_qcode.png","hash":"f3f74023ae68e5c42089cffedcc219bc5a927bcf","modified":1472816960320},{"_id":"themes/next/source/qcode/wechat_qcode.png","hash":"c9f59c9bab781f36de9d6f0d712663ed71c396b0","modified":1478759413896},{"_id":"themes/next/source/qcode/weixin-qrcode.png","hash":"1914ee1c99643a35aac4d9ad700ac157bd1bbe65","modified":1478759378132},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1462394086000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/images/ds-2.png","hash":"bc9e1efb29ee3d8da0d84fd59009f74218e604ce","modified":1478770526833},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1462394086000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1462394086000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"5bde717281120b44711f6516b9ab2fa8438811e3","modified":1480163871492},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1462394086000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1462394086000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1462394086000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1462394086000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1462394086000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1462394086000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1462394086000},{"_id":"themes/next/source/js/src/embed.js","hash":"2b54e66acd0bb0756486b939da6be43475c039ae","modified":1472816960349},{"_id":"themes/next/source/js/src/set.js","hash":"6b703b1dd498dc185036e7be063730aff6b431ef","modified":1480314818620},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1462394086000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1462394086000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1462394086000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1462394086000},{"_id":"themes/next/source/img/sp161118_190319.png","hash":"5dbcdf3b18a5934d6808ef5dc3f6404f41786d52","modified":1479467004963},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2f6361f4356d648eebe4989df43e0d4ddd560c00","modified":1479486368389},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1480084858710},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1462394086000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462394086000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1462394086000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1462394086000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1462394086000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1462394086000},{"_id":"themes/next/source/images/avatar.png","hash":"0b274517b133ee04e9a98dcd85d752e649496579","modified":1457761425637},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1462394086000},{"_id":"public/baidusitemap.xml","hash":"1e81570c38b210d9ec2d5ac78c2d7bc2b4d5824f","modified":1480604545708},{"_id":"public/atom.xml","hash":"ab788da1fd846885f8c4ef82371eb1b6c5172a14","modified":1480604545789},{"_id":"public/sitemap.xml","hash":"70b968c217ae5ef4bf7f443411034efcee4412a9","modified":1480604545789},{"_id":"public/baidu_urls.txt","hash":"e68e46c84d5207cab2b0c3e8ea3b361e08150f76","modified":1480604545789},{"_id":"public/tags/hexo/index.html","hash":"59007167445103b13cc687e83f7f33cf811e4ac1","modified":1480604545802},{"_id":"public/tags/Function/index.html","hash":"fec00e122a8b2f3f3269615fdd642f2bf3cb32f3","modified":1480604545802},{"_id":"public/tags/梦魇/index.html","hash":"4c6f2ee35d16541dd1b3714b1686e8152c94c55d","modified":1480604545802},{"_id":"public/tags/梦魇小栈/index.html","hash":"ec9891035380a6dca2699a611954cc2ec8936455","modified":1480604545802},{"_id":"public/tags/houyi1121/index.html","hash":"a7fc21816ea9e57347cd680d901f1321d0853738","modified":1480604545802},{"_id":"public/tags/js构造函数/index.html","hash":"9c8a12a3a039c0e9cd09b2b12aa09f0a5a58499f","modified":1480604545802},{"_id":"public/tags/js面向对象/index.html","hash":"80b148a3bc96f83d2b489cf214a1ee8336f01d2d","modified":1480604545802},{"_id":"public/tags/继承/index.html","hash":"03a7213f3bc0ba58475299c3fe1b771336c79417","modified":1480604545802},{"_id":"public/tags/继承的实现方式/index.html","hash":"382916ca6bbcdd5da7c4621718a918c691418650","modified":1480604545802},{"_id":"public/tags/原型链/index.html","hash":"f5dcb7cec9cf509920326855d989495d23c77538","modified":1480604545802},{"_id":"public/tags/原型/index.html","hash":"52020eec11f3fd8ace27e90a8beb68b40e7a5cc3","modified":1480604545802},{"_id":"public/tags/原型的基本概念/index.html","hash":"63497029d10f6d5d0b85549fe0ddb7d5392750c9","modified":1480604545802},{"_id":"public/tags/Markdown语法规范/index.html","hash":"4820ff70b0ecefb7c99f92cf36f2fbb7ee887645","modified":1480604545802},{"_id":"public/tags/tools/index.html","hash":"2143fe5d84ea76633b39f87edadc0599c42ebad4","modified":1480604545803},{"_id":"public/categories/Hexo/index.html","hash":"8ff41aa8a5fbcd1761b5173c225f7cfa571f4193","modified":1480604545803},{"_id":"public/categories/Markdown/index.html","hash":"78ba329b7fbb24fe6c8cee034bb6ca05a998bb3c","modified":1480604545803},{"_id":"public/about/index.html","hash":"d6973df35001baf6a715feb269ea000bb336b7e5","modified":1480604545803},{"_id":"public/guestbook/index.html","hash":"e665bb28eb110f2c12c7f753d18d034318afae6d","modified":1480604545803},{"_id":"public/links/index.html","hash":"314604c406c4c37816948a1edd9a56e351bd57ed","modified":1480604545803},{"_id":"public/categories/index.html","hash":"44fa7ea06a8d1388f52d407523bf5414c8521105","modified":1480604545803},{"_id":"public/tags/index.html","hash":"1d2c35314d57a3ebfc85ca6a7b37f2ffe4b065a5","modified":1480604545803},{"_id":"public/posts/Markdown/2016-11-27-use-tools-part1-markdown.html","hash":"4035b8d00271d7c130aa6c4fbfe7144da78fb8ae","modified":1480604545803},{"_id":"public/posts/javascript/2016-11-25-javascript-jquery-part7.html","hash":"02b37c46cd5e1a1db69f85ce0e9b8a5fddfc7816","modified":1480604545803},{"_id":"public/posts/javascript/2016-11-24-javascript-jquery-part6.html","hash":"1bb6772eb5c1d1e7fe37d80965dcfc2500a9122b","modified":1480604545803},{"_id":"public/posts/javascript/2016-11-23-javascript-jquery-part5.html","hash":"227a0bc22ce24d9790b62897bb33f0dc0002978a","modified":1480604545803},{"_id":"public/posts/javascript/2016-11-21-javascript-jquery-part4.html","hash":"561d07b25afc358de16bf8617dfe1cf16bb62795","modified":1480604545803},{"_id":"public/posts/javascript/2016-11-20-javascript-jquery-part3.html","hash":"1af02039da8041e8bc237d1c26aceccb51a719cc","modified":1480604545803},{"_id":"public/posts/javascript/2016-11-18-javascript-jquery-part1.html","hash":"eab0d7945c445d239096a7b863125bef1c567e8e","modified":1480604545803},{"_id":"public/posts/Canvas/2016-11-15-canvas-summary.html","hash":"cd60a474dd2a674d3ee634e8b77ef8d4bbddf88b","modified":1480604545803},{"_id":"public/posts/javascript/2016-11-19-javascript-jquery-part2.html","hash":"2ecb91aac0f7c25bd29a85329af6d448804f65ef","modified":1480604545804},{"_id":"public/posts/Canvas/2016-11-14-canvas-part2.html","hash":"ba4a6af57b66f284773ec2d9743b791401db14a5","modified":1480604545804},{"_id":"public/posts/Canvas/2016-11-13-canvas-part1.html","hash":"789c05d619f10b3dc436f21704c5a2bb1bb4aaef","modified":1480604545804},{"_id":"public/posts/javascript/2016-11-12-javascript-summary.html","hash":"5a9cdd2ab49a32efe754d4ffb87bb81ffb0405bc","modified":1480604545804},{"_id":"public/posts/javascript/2016-11-11-javascript-part6.html","hash":"c6b50aef1ae0d9494423982cfa8142ff22d2d541","modified":1480604545804},{"_id":"public/posts/javascript/2016-11-10-javascript-part5.html","hash":"dbdd1814bf1e0b6435d03045cf10cf3e287d9c0d","modified":1480604545804},{"_id":"public/posts/javascript/2016-11-09-javascript-part4.html","hash":"d17274faf10524bc79f11f5bbe369b51885961c8","modified":1480604545804},{"_id":"public/posts/javascript/2016-11-08-javascript-part3.html","hash":"07060e4f2741213c37813d0fdd3652b88596c8ad","modified":1480604545804},{"_id":"public/posts/javascript/2016-07-22-javascript-Function.html","hash":"68a836012a167daf55588392dbf5caeb11049695","modified":1480604545804},{"_id":"public/posts/javascript/2016-07-09-javascript-prototype-chain.html","hash":"2241d54ea79fd55b5e89a01a16d6797cdf82360e","modified":1480604545804},{"_id":"public/posts/javascript/2016-06-15-javascript-inherit.html","hash":"5db5e0139dae435a0790a9bb891e9772220c8da4","modified":1480604545804},{"_id":"public/posts/javascript/2016-06-04-javascript-prototype.html","hash":"db185effebff944bfedb098803406d50106cecec","modified":1480604545804},{"_id":"public/posts/javascript/2016-05-20-javascript-constructor.html","hash":"7dbf5e56c31e121506b6b62ec765b3bbefec7f0f","modified":1480604545804},{"_id":"public/posts/javascript/2016-05-18-javascript-part2.html","hash":"424427bd4d919671af04528a286497980a32bb8e","modified":1480604545805},{"_id":"public/posts/javascript/2016-05-08-javascript-part1.html","hash":"c83b4b00dc5aeb3d332af11016c2e517da6c20f0","modified":1480604545805},{"_id":"public/posts/Hexo/2015-08-28-hello-world.html","hash":"589cc7c892e198db2726cd15fe919568778c0b76","modified":1480604545805},{"_id":"public/archives/index.html","hash":"d248522abc4796157de644d390bb914c1c5cdce6","modified":1480604545805},{"_id":"public/archives/page/2/index.html","hash":"252e42af1758f814a9aa165b7651e543c214d4d6","modified":1480604545805},{"_id":"public/archives/2015/index.html","hash":"a4c1bd6033bc7ee53d53494b22278fb0fb2d1af2","modified":1480604545805},{"_id":"public/archives/2015/08/index.html","hash":"d808ec0921bfc04c003fbb6aee1a7fc713029ffa","modified":1480604545805},{"_id":"public/archives/2016/index.html","hash":"d1f046ec79485a5f571b16207972bacff6729eac","modified":1480604545805},{"_id":"public/archives/2016/page/2/index.html","hash":"5ad07f68d220e30a9527948f83fa02ed7656d9ab","modified":1480604545805},{"_id":"public/archives/2016/05/index.html","hash":"c00fd0add71452f9ce1a96840e529591a5c39c6e","modified":1480604545805},{"_id":"public/archives/2016/06/index.html","hash":"7c16315a414be857d722349957a68608ec62525c","modified":1480604545805},{"_id":"public/archives/2016/07/index.html","hash":"a4128d554d2dcde838947107278a01e933480ece","modified":1480604545805},{"_id":"public/archives/2016/11/index.html","hash":"b8ed8af1489078ef703d8a9abc305287dcce2224","modified":1480604545805},{"_id":"public/tags/Canvas/index.html","hash":"fb1ee9d4afbc8a3fc093cfb647c6681e61264e72","modified":1480604545805},{"_id":"public/tags/HTML5/index.html","hash":"61243da3af1ff03ccd2d3cfceee5f0b7c1a0b146","modified":1480604545805},{"_id":"public/tags/画布/index.html","hash":"a6cde2e9332a484f692316693bd6111be2a80cd9","modified":1480604545805},{"_id":"public/tags/javascript/index.html","hash":"cf99627b382cba391a43e994bbb10c37917cace0","modified":1480604545805},{"_id":"public/tags/原生Js/index.html","hash":"b358f22ae4b921bdc6032f49d2af132024420d09","modified":1480604545805},{"_id":"public/tags/JQuery/index.html","hash":"c9eb6d347fe645e8f1457736a75e1f18a7f7531b","modified":1480604545806},{"_id":"public/tags/Js框架/index.html","hash":"976e0d362d15417557c9fc618b13e0504e858d58","modified":1480604545806},{"_id":"public/categories/Canvas/index.html","hash":"6b56a45dcb58a6589d7494dfff37888cba0a434d","modified":1480604545806},{"_id":"public/categories/javascript/index.html","hash":"78d7087486dd5c8bb30b6aa3c9110b4b193dce60","modified":1480604545806},{"_id":"public/categories/javascript/page/3/index.html","hash":"d8b93d614409b6335c2fc4d11eccb678ff050073","modified":1480604545806},{"_id":"public/categories/javascript/page/2/index.html","hash":"7d16cfb75a4204ce9cdee10d45c479bbfcce2fd6","modified":1480604545806},{"_id":"public/categories/javascript/page/4/index.html","hash":"aeec531785744a2e5da22f48223482cfeb4e5492","modified":1480604545806},{"_id":"public/index.html","hash":"242016305dce31e6430d50834ebe2f8bc42154c6","modified":1480604545806},{"_id":"public/page/2/index.html","hash":"4e386817f3945192ad6abf959b9bf5c078ffccaf","modified":1480604545806},{"_id":"public/page/3/index.html","hash":"e98618c96418ac228553250ee8641d30c54470ce","modified":1480604545806},{"_id":"public/page/4/index.html","hash":"fde73bb5338d32125724f637ef8c2a7e34a1068e","modified":1480604545806},{"_id":"public/page/5/index.html","hash":"32be8b70aa1a3cb00cb86c2ffdd70f4208c4f8f6","modified":1480604545806},{"_id":"public/robots.txt","hash":"40b57f82da7cab060ce14b212aaad9140627406d","modified":1480604545849},{"_id":"public/CNAME","hash":"b6b717a1f89639bb8eeb19bbf4558c6cc1804390","modified":1480604545849},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480604545849},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1480604545849},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1480604545849},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1480604545849},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1480604545849},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1480604545849},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1480604545849},{"_id":"public/images/cursor.ico","hash":"cd8349fb9cef6c217fc364cf35eae6819cebf5d6","modified":1480604545849},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480604545849},{"_id":"public/images/Thumbs.db","hash":"878f9833358933aa1f79c0627cbb7180d3853b89","modified":1480604545849},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480604545849},{"_id":"public/images/img1.png","hash":"8091e664621d6d4fc2f41818af5ea5ade896173b","modified":1480604545849},{"_id":"public/images/img2.png","hash":"69eb3bd6a5e6d45ee336b328753b3465c4abc48a","modified":1480604545850},{"_id":"public/images/plbj.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1480604545850},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1480604545850},{"_id":"public/images/ds-1.gif","hash":"e0bc6023185e4c841f624f2347f8439d06f627fd","modified":1480604545850},{"_id":"public/qcode/alipay_qcode.png","hash":"f3f74023ae68e5c42089cffedcc219bc5a927bcf","modified":1480604545850},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480604545850},{"_id":"public/qcode/weixin-qrcode.png","hash":"1914ee1c99643a35aac4d9ad700ac157bd1bbe65","modified":1480604545850},{"_id":"public/qcode/wechat_qcode.png","hash":"c9f59c9bab781f36de9d6f0d712663ed71c396b0","modified":1480604545850},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1480604545850},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1480604545850},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1480604545850},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1480604545850},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480604545850},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480604545850},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480604545850},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480604545850},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480604545850},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480604545850},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1480604545850},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1480604545850},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480604545851},{"_id":"public/favicon.ico","hash":"61ed14c161a5df9092565996e38cdd438f128783","modified":1480604548385},{"_id":"public/images/ds-2.png","hash":"bc9e1efb29ee3d8da0d84fd59009f74218e604ce","modified":1480604548385},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1480604548402},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1480604548402},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1480604548402},{"_id":"public/baidu_verify_HR5eYsvhwq.html","hash":"18f2c1a4a646c26871a5e9fc8fd424117035fcc3","modified":1480604548409},{"_id":"public/404.html","hash":"6d89ae5b035b9bf9b2fcc1373df837cc4c156d91","modified":1480604548409},{"_id":"public/css/cursor.css","hash":"da582310722ca088769344f81d39919356c69f72","modified":1480604548409},{"_id":"public/400.html","hash":"120310b98b61dd1150f2909745002653e5afbecc","modified":1480604548409},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480604548409},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480604548409},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480604548410},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480604548410},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480604548410},{"_id":"public/js/src/set.js","hash":"6b703b1dd498dc185036e7be063730aff6b431ef","modified":1480604548410},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1480604548410},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480604548410},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1480604548410},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1480604548410},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1480604548410},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1480604548410},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1480604548410},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1480604548412},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480604548412},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1480604548412},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480604548413},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480604548413},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1480604548413},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480604548413},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480604548413},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480604548413},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480604548413},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480604548413},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480604548413},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480604548413},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480604548413},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480604548413},{"_id":"public/css/main.css","hash":"fca15dc45ab3808a5d9e458bf28e590e8be8f1e0","modified":1480604548413},{"_id":"public/js/src/embed.js","hash":"2b54e66acd0bb0756486b939da6be43475c039ae","modified":1480604548413},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480604548413},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480604548413},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480604548413},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480604548413},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480604548413},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1480604548414},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1480604548414},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480604548414},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480604548414},{"_id":"public/img/sp161118_190319.png","hash":"5dbcdf3b18a5934d6808ef5dc3f6404f41786d52","modified":1480604548414},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1480604548414},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1480604548540},{"_id":"public/images/avatar.png","hash":"0b274517b133ee04e9a98dcd85d752e649496579","modified":1480604548587}],"Category":[{"name":"Canvas","_id":"ciw6hpri700049wg7pkulbfju"},{"name":"javascript","_id":"ciw6hprj6000m9wg7s10644qb"},{"name":"Hexo","_id":"ciw6hprjl000s9wg7fei5ht48"},{"name":"Markdown","_id":"ciw6hprks001x9wg7u8qowzil"}],"Data":[],"Page":[{"title":"关于我","date":"2016-11-09T01:58:04.000Z","_content":"\n<blockquote class=\"blockquote-center\">愿多年以后，我可以酌一杯清酒，烂醉如泥，梦中回到我们的曾经。</blockquote>\n\n<center>首先梦魇小栈欢迎您的到来!</center>\n\n> <p style=\"text-indent: .5em; margin-bottom: 10px;\">关于我</p>\n\n90后,技术宅?恩或许是,现居于北京,然后喜爱折腾,好奇新事物\n欢迎各位小伙伴与我互换友链，详情请戳 上面的 <a href=\"/links\"><b>链接</b></a> 页面 。\n关于这个站呢,就是记录下平时记不太住的还有一些自己感兴趣喜欢的一些东西\n顺便也分享给大家吧!\n就酱紫,联系方式在下面\n\n***\n\n<center> <h2>联系方式</h2> </center>\n\n- Email：<a href=\"https://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=ihoeys@163.com\">ihoeys@163.com</a>\n- Q  Q：<a href=\"http://wpa.qq.com/msgrd?v=3&uin=1058221214&site=qq&menu=yes\">1058221214</a>\n- 微博：<a href=\"http://weibo.com/hy951121\">hy1121</a>\n\n***\n\n[2016-10-25] 站点从SinaAppEngine(SAE)迁移到Coding/GitHub, 国内用户默认解析至Coding, 海外则解析至GitHub, 互为备份, 改善了访问速度与稳定性\n\n***\n\n<center> <h2>打赏记录</h2> </center><br>\n\n|打赏人|打赏留言|打赏时间|\n|:--:|:--:|:--:|\n|159**0212|小站不错，支持一下啦！|2015-11-02|\n|138**4533|我来啦，占前排！|2015-11-02|\n|188**5838|网站不错哦！|2015-12-14|\n|175**1534|新年快乐!！|2016-2-11|\n|131**7309|很漂亮的网站,我的零钱都给你啦!|2016-3-15|\n|1121**@qq.com|谢谢帮助,祝你888!|2016-6-20|\n|lw**@163.com|那我就给你来个666吧!|2016-6-21|\n\n<br>\n\n啦啦啦，感谢你们啦，我会做的更好的呢\n2016-6-25:感谢你们的赞助了.虽然人不多,但我还是很感动的.\n\n\n***\n\n<iframe src=\"https://houyi1121.github.io/Playing-reward/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n***","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-11-09 09:58:04\n---\n\n<blockquote class=\"blockquote-center\">愿多年以后，我可以酌一杯清酒，烂醉如泥，梦中回到我们的曾经。</blockquote>\n\n<center>首先梦魇小栈欢迎您的到来!</center>\n\n> <p style=\"text-indent: .5em; margin-bottom: 10px;\">关于我</p>\n\n90后,技术宅?恩或许是,现居于北京,然后喜爱折腾,好奇新事物\n欢迎各位小伙伴与我互换友链，详情请戳 上面的 <a href=\"/links\"><b>链接</b></a> 页面 。\n关于这个站呢,就是记录下平时记不太住的还有一些自己感兴趣喜欢的一些东西\n顺便也分享给大家吧!\n就酱紫,联系方式在下面\n\n***\n\n<center> <h2>联系方式</h2> </center>\n\n- Email：<a href=\"https://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=ihoeys@163.com\">ihoeys@163.com</a>\n- Q  Q：<a href=\"http://wpa.qq.com/msgrd?v=3&uin=1058221214&site=qq&menu=yes\">1058221214</a>\n- 微博：<a href=\"http://weibo.com/hy951121\">hy1121</a>\n\n***\n\n[2016-10-25] 站点从SinaAppEngine(SAE)迁移到Coding/GitHub, 国内用户默认解析至Coding, 海外则解析至GitHub, 互为备份, 改善了访问速度与稳定性\n\n***\n\n<center> <h2>打赏记录</h2> </center><br>\n\n|打赏人|打赏留言|打赏时间|\n|:--:|:--:|:--:|\n|159**0212|小站不错，支持一下啦！|2015-11-02|\n|138**4533|我来啦，占前排！|2015-11-02|\n|188**5838|网站不错哦！|2015-12-14|\n|175**1534|新年快乐!！|2016-2-11|\n|131**7309|很漂亮的网站,我的零钱都给你啦!|2016-3-15|\n|1121**@qq.com|谢谢帮助,祝你888!|2016-6-20|\n|lw**@163.com|那我就给你来个666吧!|2016-6-21|\n\n<br>\n\n啦啦啦，感谢你们啦，我会做的更好的呢\n2016-6-25:感谢你们的赞助了.虽然人不多,但我还是很感动的.\n\n\n***\n\n<iframe src=\"https://houyi1121.github.io/Playing-reward/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n***","updated":"2016-12-01T15:00:43.091Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciw6hpri000019wg7yqmvobga","content":"<blockquote class=\"blockquote-center\">愿多年以后，我可以酌一杯清酒，烂醉如泥，梦中回到我们的曾经。</blockquote>\n\n<center>首先梦魇小栈欢迎您的到来!</center>\n\n<blockquote>\n<p style=\"text-indent: .5em; margin-bottom: 10px;\">关于我</p>\n\n</blockquote>\n<p>90后,技术宅?恩或许是,现居于北京,然后喜爱折腾,好奇新事物<br>欢迎各位小伙伴与我互换友链，详情请戳 上面的 <a href=\"/links\"><b>链接</b></a> 页面 。<br>关于这个站呢,就是记录下平时记不太住的还有一些自己感兴趣喜欢的一些东西<br>顺便也分享给大家吧!<br>就酱紫,联系方式在下面</p>\n<hr>\n<center> <h2>联系方式</h2> </center>\n\n<ul>\n<li>Email：<a href=\"https://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=ihoeys@163.com\" target=\"_blank\" rel=\"external\">ihoeys@163.com</a></li>\n<li>Q  Q：<a href=\"http://wpa.qq.com/msgrd?v=3&uin=1058221214&site=qq&menu=yes\" target=\"_blank\" rel=\"external\">1058221214</a></li>\n<li>微博：<a href=\"http://weibo.com/hy951121\" target=\"_blank\" rel=\"external\">hy1121</a></li>\n</ul>\n<hr>\n<p>[2016-10-25] 站点从SinaAppEngine(SAE)迁移到Coding/GitHub, 国内用户默认解析至Coding, 海外则解析至GitHub, 互为备份, 改善了访问速度与稳定性</p>\n<hr>\n<p><center> <h2>打赏记录</h2> </center><br></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">打赏人</th>\n<th style=\"text-align:center\">打赏留言</th>\n<th style=\"text-align:center\">打赏时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">159**0212</td>\n<td style=\"text-align:center\">小站不错，支持一下啦！</td>\n<td style=\"text-align:center\">2015-11-02</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">138**4533</td>\n<td style=\"text-align:center\">我来啦，占前排！</td>\n<td style=\"text-align:center\">2015-11-02</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">188**5838</td>\n<td style=\"text-align:center\">网站不错哦！</td>\n<td style=\"text-align:center\">2015-12-14</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">175**1534</td>\n<td style=\"text-align:center\">新年快乐!！</td>\n<td style=\"text-align:center\">2016-2-11</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">131**7309</td>\n<td style=\"text-align:center\">很漂亮的网站,我的零钱都给你啦!</td>\n<td style=\"text-align:center\">2016-3-15</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1121**@qq.com</td>\n<td style=\"text-align:center\">谢谢帮助,祝你888!</td>\n<td style=\"text-align:center\">2016-6-20</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lw**@163.com</td>\n<td style=\"text-align:center\">那我就给你来个666吧!</td>\n<td style=\"text-align:center\">2016-6-21</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p>啦啦啦，感谢你们啦，我会做的更好的呢<br>2016-6-25:感谢你们的赞助了.虽然人不多,但我还是很感动的.</p>\n<hr>\n<iframe src=\"https://houyi1121.github.io/Playing-reward/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\n<hr>\n","excerpt":"","more":"<blockquote class=\"blockquote-center\">愿多年以后，我可以酌一杯清酒，烂醉如泥，梦中回到我们的曾经。</blockquote>\n\n<center>首先梦魇小栈欢迎您的到来!</center>\n\n<blockquote>\n<p style=\"text-indent: .5em; margin-bottom: 10px;\">关于我</p>\n\n</blockquote>\n<p>90后,技术宅?恩或许是,现居于北京,然后喜爱折腾,好奇新事物<br>欢迎各位小伙伴与我互换友链，详情请戳 上面的 <a href=\"/links\"><b>链接</b></a> 页面 。<br>关于这个站呢,就是记录下平时记不太住的还有一些自己感兴趣喜欢的一些东西<br>顺便也分享给大家吧!<br>就酱紫,联系方式在下面</p>\n<hr>\n<center> <h2>联系方式</h2> </center>\n\n<ul>\n<li>Email：<a href=\"https://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=ihoeys@163.com\">ihoeys@163.com</a></li>\n<li>Q  Q：<a href=\"http://wpa.qq.com/msgrd?v=3&uin=1058221214&site=qq&menu=yes\">1058221214</a></li>\n<li>微博：<a href=\"http://weibo.com/hy951121\">hy1121</a></li>\n</ul>\n<hr>\n<p>[2016-10-25] 站点从SinaAppEngine(SAE)迁移到Coding/GitHub, 国内用户默认解析至Coding, 海外则解析至GitHub, 互为备份, 改善了访问速度与稳定性</p>\n<hr>\n<p><center> <h2>打赏记录</h2> </center><br></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">打赏人</th>\n<th style=\"text-align:center\">打赏留言</th>\n<th style=\"text-align:center\">打赏时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">159**0212</td>\n<td style=\"text-align:center\">小站不错，支持一下啦！</td>\n<td style=\"text-align:center\">2015-11-02</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">138**4533</td>\n<td style=\"text-align:center\">我来啦，占前排！</td>\n<td style=\"text-align:center\">2015-11-02</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">188**5838</td>\n<td style=\"text-align:center\">网站不错哦！</td>\n<td style=\"text-align:center\">2015-12-14</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">175**1534</td>\n<td style=\"text-align:center\">新年快乐!！</td>\n<td style=\"text-align:center\">2016-2-11</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">131**7309</td>\n<td style=\"text-align:center\">很漂亮的网站,我的零钱都给你啦!</td>\n<td style=\"text-align:center\">2016-3-15</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1121**@qq.com</td>\n<td style=\"text-align:center\">谢谢帮助,祝你888!</td>\n<td style=\"text-align:center\">2016-6-20</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lw**@163.com</td>\n<td style=\"text-align:center\">那我就给你来个666吧!</td>\n<td style=\"text-align:center\">2016-6-21</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p>啦啦啦，感谢你们啦，我会做的更好的呢<br>2016-6-25:感谢你们的赞助了.虽然人不多,但我还是很感动的.</p>\n<hr>\n<iframe src=\"https://houyi1121.github.io/Playing-reward/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n<hr>\n"},{"title":"留言板","date":"2016-11-10T12:35:52.000Z","comments":1,"_content":"\n<blockquote class=\"blockquote-center\">I eat alone. I sleep alone. I cry alone. So….cool.</blockquote>\n\n<center> 你想说些什么呢？就在这里回复吧~ 欢迎灌水，来者不拒！<br>如果你觉得我的博客对你有价值，并且有帮助到你，欢迎向我捐赠，就当是请我喝杯饮料~ <br><b>另外,你确定就看看不留个爪爪么!</b></center>\n\n<div style=\"margin: 20px auto; width: 100%; text-align: center\">\n    <a href=\"/qcode/alipay_qcode.png\" class=\"fancybox\" rel=\"group\"><img src=\"/qcode/alipay_qcode.png\" alt=\"支付宝打赏\" style=\"width: 200px; max-width: 100%;\"></a>\n    <div>支付宝打赏</div>\n</div>\n\n***\n\n<iframe src=\"https://houyi1121.github.io/Playing-reward/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n\n*** \n\n> <p style=\"text-indent: .5em; margin-bottom: 10px;\">最新访客</p>\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n\n*** \n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"http://music.163.com/outchain/player?type=2&id=442016214&auto=1&height=32\"></iframe>\n\n***","source":"guestbook/index.md","raw":"---\ntitle: 留言板\ndate: 2016-11-10 20:35:52\ncomments: true\n---\n\n<blockquote class=\"blockquote-center\">I eat alone. I sleep alone. I cry alone. So….cool.</blockquote>\n\n<center> 你想说些什么呢？就在这里回复吧~ 欢迎灌水，来者不拒！<br>如果你觉得我的博客对你有价值，并且有帮助到你，欢迎向我捐赠，就当是请我喝杯饮料~ <br><b>另外,你确定就看看不留个爪爪么!</b></center>\n\n<div style=\"margin: 20px auto; width: 100%; text-align: center\">\n    <a href=\"/qcode/alipay_qcode.png\" class=\"fancybox\" rel=\"group\"><img src=\"/qcode/alipay_qcode.png\" alt=\"支付宝打赏\" style=\"width: 200px; max-width: 100%;\"></a>\n    <div>支付宝打赏</div>\n</div>\n\n***\n\n<iframe src=\"https://houyi1121.github.io/Playing-reward/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n\n*** \n\n> <p style=\"text-indent: .5em; margin-bottom: 10px;\">最新访客</p>\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n\n*** \n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"http://music.163.com/outchain/player?type=2&id=442016214&auto=1&height=32\"></iframe>\n\n***","updated":"2016-12-01T14:59:48.371Z","path":"guestbook/index.html","layout":"page","_id":"ciw6hpri500039wg7zhbad0hz","content":"<blockquote class=\"blockquote-center\">I eat alone. I sleep alone. I cry alone. So….cool.</blockquote>\n\n<center> 你想说些什么呢？就在这里回复吧~ 欢迎灌水，来者不拒！<br>如果你觉得我的博客对你有价值，并且有帮助到你，欢迎向我捐赠，就当是请我喝杯饮料~ <br><b>另外,你确定就看看不留个爪爪么!</b></center>\n\n<div style=\"margin: 20px auto; width: 100%; text-align: center\"><br>    <a href=\"/qcode/alipay_qcode.png\" class=\"fancybox\" rel=\"group\"><img src=\"/qcode/alipay_qcode.png\" alt=\"支付宝打赏\" style=\"width: 200px; max-width: 100%;\"></a><br>    <div>支付宝打赏</div><br></div>\n\n<hr>\n<iframe src=\"https://houyi1121.github.io/Playing-reward/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\n\n<hr>\n<blockquote>\n<p style=\"text-indent: .5em; margin-bottom: 10px;\">最新访客</p>\n\n</blockquote>\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n\n<hr>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"298\" height=\"52\" src=\"http://music.163.com/outchain/player?type=2&id=442016214&auto=1&height=32\"></iframe>\n\n<hr>\n","excerpt":"","more":"<blockquote class=\"blockquote-center\">I eat alone. I sleep alone. I cry alone. So….cool.</blockquote>\n\n<center> 你想说些什么呢？就在这里回复吧~ 欢迎灌水，来者不拒！<br>如果你觉得我的博客对你有价值，并且有帮助到你，欢迎向我捐赠，就当是请我喝杯饮料~ <br><b>另外,你确定就看看不留个爪爪么!</b></center>\n\n<div style=\"margin: 20px auto; width: 100%; text-align: center\"><br>    <a href=\"/qcode/alipay_qcode.png\" class=\"fancybox\" rel=\"group\"><img src=\"/qcode/alipay_qcode.png\" alt=\"支付宝打赏\" style=\"width: 200px; max-width: 100%;\"></a><br>    <div>支付宝打赏</div><br></div>\n\n<hr>\n<iframe src=\"https://houyi1121.github.io/Playing-reward/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n\n<hr>\n<blockquote>\n<p style=\"text-indent: .5em; margin-bottom: 10px;\">最新访客</p>\n\n</blockquote>\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n\n<hr>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"http://music.163.com/outchain/player?type=2&id=442016214&auto=1&height=32\"></iframe>\n\n<hr>\n"},{"title":"友情链接","date":"2016-11-10T12:36:20.000Z","_content":"\n<blockquote class=\"blockquote-center\">人的一切痛苦，本质上都是对自己无能的愤怒</blockquote>\n\n\n## Blog friends\n\n- [梦魇|专注于分享](http://www.dode.top/ \"梦魇|专注于分享™\")  -  一个帮助过我的好朋友，技术很不错\n- [一叶知秋](http://www.yc1993.xyz/)  -  森林里出现了两条路，而我选择了人迹罕至的一条，从此决定了一切际遇的不同！\n\n***\n\n以上链接排名不分先后。\n如果你发现你的链接消失了，那么可能是网站无法访问，恢复后联系我即可~\n（也可能是超过半年未更新或者有不适当内容...这样的话自己看着办）\n在您申请友情链接之前请先添加本站链接,谢谢\n\n***\n\n### 友情链接添加须知\n\n- 本站友链目的不是为了SEO,只是为了交朋友;\n- 必须为合法的、内容健康向上的网站;\n- 只接受文字链接，并写好网站介绍;\n- 友情连接是双方站点寻求共同发展、互助互利的方式;\n\n***\n\n### 本站链接信息\n\n- 名称：梦魇小栈\n- 地址：http://blog.ihoey.com/\n- 描述：心，若没有栖息的地方，到哪里都是流浪......\n\n***\n\n<iframe src=\"https://houyi1121.github.io/Playing-reward/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n***","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2016-11-10 20:36:20\n---\n\n<blockquote class=\"blockquote-center\">人的一切痛苦，本质上都是对自己无能的愤怒</blockquote>\n\n\n## Blog friends\n\n- [梦魇|专注于分享](http://www.dode.top/ \"梦魇|专注于分享™\")  -  一个帮助过我的好朋友，技术很不错\n- [一叶知秋](http://www.yc1993.xyz/)  -  森林里出现了两条路，而我选择了人迹罕至的一条，从此决定了一切际遇的不同！\n\n***\n\n以上链接排名不分先后。\n如果你发现你的链接消失了，那么可能是网站无法访问，恢复后联系我即可~\n（也可能是超过半年未更新或者有不适当内容...这样的话自己看着办）\n在您申请友情链接之前请先添加本站链接,谢谢\n\n***\n\n### 友情链接添加须知\n\n- 本站友链目的不是为了SEO,只是为了交朋友;\n- 必须为合法的、内容健康向上的网站;\n- 只接受文字链接，并写好网站介绍;\n- 友情连接是双方站点寻求共同发展、互助互利的方式;\n\n***\n\n### 本站链接信息\n\n- 名称：梦魇小栈\n- 地址：http://blog.ihoey.com/\n- 描述：心，若没有栖息的地方，到哪里都是流浪......\n\n***\n\n<iframe src=\"https://houyi1121.github.io/Playing-reward/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n***","updated":"2016-12-01T15:00:22.975Z","path":"links/index.html","comments":1,"layout":"page","_id":"ciw6hprig00079wg7tekgmr5e","content":"<blockquote class=\"blockquote-center\">人的一切痛苦，本质上都是对自己无能的愤怒</blockquote>\n\n\n<h2 id=\"Blog-friends\"><a href=\"#Blog-friends\" class=\"headerlink\" title=\"Blog friends\"></a>Blog friends</h2><ul>\n<li><a href=\"http://www.dode.top/\" title=\"梦魇|专注于分享™\" target=\"_blank\" rel=\"external\">梦魇|专注于分享</a>  -  一个帮助过我的好朋友，技术很不错</li>\n<li><a href=\"http://www.yc1993.xyz/\" target=\"_blank\" rel=\"external\">一叶知秋</a>  -  森林里出现了两条路，而我选择了人迹罕至的一条，从此决定了一切际遇的不同！</li>\n</ul>\n<hr>\n<p>以上链接排名不分先后。<br>如果你发现你的链接消失了，那么可能是网站无法访问，恢复后联系我即可~<br>（也可能是超过半年未更新或者有不适当内容…这样的话自己看着办）<br>在您申请友情链接之前请先添加本站链接,谢谢</p>\n<hr>\n<h3 id=\"友情链接添加须知\"><a href=\"#友情链接添加须知\" class=\"headerlink\" title=\"友情链接添加须知\"></a>友情链接添加须知</h3><ul>\n<li>本站友链目的不是为了SEO,只是为了交朋友;</li>\n<li>必须为合法的、内容健康向上的网站;</li>\n<li>只接受文字链接，并写好网站介绍;</li>\n<li>友情连接是双方站点寻求共同发展、互助互利的方式;</li>\n</ul>\n<hr>\n<h3 id=\"本站链接信息\"><a href=\"#本站链接信息\" class=\"headerlink\" title=\"本站链接信息\"></a>本站链接信息</h3><ul>\n<li>名称：梦魇小栈</li>\n<li>地址：<a href=\"http://blog.ihoey.com/\">http://blog.ihoey.com/</a></li>\n<li>描述：心，若没有栖息的地方，到哪里都是流浪……</li>\n</ul>\n<hr>\n<iframe src=\"https://houyi1121.github.io/Playing-reward/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\n<hr>\n","excerpt":"","more":"<blockquote class=\"blockquote-center\">人的一切痛苦，本质上都是对自己无能的愤怒</blockquote>\n\n\n<h2 id=\"Blog-friends\"><a href=\"#Blog-friends\" class=\"headerlink\" title=\"Blog friends\"></a>Blog friends</h2><ul>\n<li><a href=\"http://www.dode.top/\" title=\"梦魇|专注于分享™\">梦魇|专注于分享</a>  -  一个帮助过我的好朋友，技术很不错</li>\n<li><a href=\"http://www.yc1993.xyz/\">一叶知秋</a>  -  森林里出现了两条路，而我选择了人迹罕至的一条，从此决定了一切际遇的不同！</li>\n</ul>\n<hr>\n<p>以上链接排名不分先后。<br>如果你发现你的链接消失了，那么可能是网站无法访问，恢复后联系我即可~<br>（也可能是超过半年未更新或者有不适当内容…这样的话自己看着办）<br>在您申请友情链接之前请先添加本站链接,谢谢</p>\n<hr>\n<h3 id=\"友情链接添加须知\"><a href=\"#友情链接添加须知\" class=\"headerlink\" title=\"友情链接添加须知\"></a>友情链接添加须知</h3><ul>\n<li>本站友链目的不是为了SEO,只是为了交朋友;</li>\n<li>必须为合法的、内容健康向上的网站;</li>\n<li>只接受文字链接，并写好网站介绍;</li>\n<li>友情连接是双方站点寻求共同发展、互助互利的方式;</li>\n</ul>\n<hr>\n<h3 id=\"本站链接信息\"><a href=\"#本站链接信息\" class=\"headerlink\" title=\"本站链接信息\"></a>本站链接信息</h3><ul>\n<li>名称：梦魇小栈</li>\n<li>地址：<a href=\"http://blog.ihoey.com/\">http://blog.ihoey.com/</a></li>\n<li>描述：心，若没有栖息的地方，到哪里都是流浪……</li>\n</ul>\n<hr>\n<iframe src=\"https://houyi1121.github.io/Playing-reward/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\"  frameborder=\"0\" scrolling=\"no\"></iframe>\n\n<hr>\n"},{"title":"categories","date":"2016-11-09T01:56:23.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-09 09:56:23\ntype: \"categories\"\n---\n","updated":"2016-12-01T09:02:05.604Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciw6hprio00099wg7mwkcujca","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-11-09T01:55:47.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-11-09 09:55:47\ntype: \"tags\"\n---\n","updated":"2016-11-10T15:04:16.289Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciw6hprit000d9wg7cyq0jci2","content":"","excerpt":"","more":""}],"Post":[{"title":"Canvas部分知识总结","date":"2016-11-15T12:38:26.000Z","_content":"\nCanvas笔记总结！！\n接前部分~\n\n<!-- more -->\n\n## canvas是什么?\n\n是一个 `HTML5` 标签,该标签用来绘图\n\n## canvas怎么用\n\n`canvas` 是一个画布,不能自己画图,画图需要绘图上下文\n\n```js\nvar cas = document.querySelector(\"#c\");\n//获取绘图上下文\ncar ctx = cas.getContext(\"2d\");\n```\n\n## 画直线\n\n```js\n//设置直线的起点\nctx.moveTo(x,y);\n//画路径到直线的终点\nctx.lineTo(x,y);\n```\n\n## 开启新路径\n\n```js\nctx.befinPath();\n```\n\n## 画曲线\n\n```js\n//使用for循环,用函数来帮一个y确定一个x\n//然后讲x,y的每一个点用lingTo连起来就变成了一条曲线\n```\n\n## 画矩形\n\n```js\n//1. 手动,纯人工\n//2. ctx.rect(x,y,w,h);\n//3. ctx.strokeRect(x,y,w,h);\n//4. ctx.fillRect(x,y,w,h);\n```\n\n## 画弧\n\n```js\nctx.arc(x,y,r,startAngle.endAngle[,Boolean optional anticlockwise])\n```\n\n## 扇形\n\n```js\n//先moveTo到原心\nmoveTo(x,y);\nctx.arc(x,y,r,startAngle.endAngle[,Boolean optional anticlockwise])\nctx.closePath();\nctx.fill();\n```\n\n## 饼图\n\n`3` 等分的饼\n1. 开始的角度一般是 `-90`\n2. 每画一个扇形,就让角度 `+120`\n3. 再从加了 `120` 的角度画下一个扇形\n\n## 动画饼图\n\n定时器\n每一段时间画一个小扇形,就和画饼一样\n\n## 文字\n\n```js\nfillText(str, x, y)\nstrokText(str, x, y)\n```\n\n### 对其方式\n\n#### 水平\n\n* left\n* center\n* right\n* start\n* end\n\n#### 垂直\n\n* top\n* middle\n* bottom\n* hanging\n* alphabetic\n* ideographic\n\n## 完整饼图\n\n1. 先算所有数据的总和\n2. 算每个数据的比例,用比例算出角度\n3. 更具每个角度去画扇形\n4. 在去画扇形的中线\n5. 画文字下面的线\n6. 写文字\n\n## 图片\n\n```js\n//3参\nctx.drawImage(img, x, y)\n//直接画不管宽高\n//5参\nctx.drawImage(img, x, y, w, h)\n//要确定宽高\n//9参\nctx.drawImage(img, x, y, w, h, x1, y1, w1, h1)\n\n//拿出图片中 x, y, w, h 这个矩形所在的位置的图像\n//放到canvas中x1, y1, w1, h1这个矩形所在的位置\n```\n\n## 帧动画\n\n\n## 变换\n\n* 平移变换   把画布的原点移动到指定的位置\n    `ctx.translate(x, y)`\n* 缩放变换   对画布进行缩放\n\n```js\n    ctx.scale(x, y)  //x表示的是对画布x轴的缩放，如果大于1 是放大 如果小于1 是缩小\n    ctx.scale(x, y)  //y表示的是对画布y轴的缩放，如果大于1 是放大 如果小于1 是缩小\n```\n\n* 旋转变换\n    `ctx.rotate(弧度)  //将画布，围绕原点旋转指定的弧度`","source":"_posts/canvas-summary.md","raw":"---\ntitle: Canvas部分知识总结\ndate: 2016-11-15 20:38:26\ntags: \n\t- Canvas\n\t- HTML5\n\t- 画布\ncategories: Canvas\n---\n\nCanvas笔记总结！！\n接前部分~\n\n<!-- more -->\n\n## canvas是什么?\n\n是一个 `HTML5` 标签,该标签用来绘图\n\n## canvas怎么用\n\n`canvas` 是一个画布,不能自己画图,画图需要绘图上下文\n\n```js\nvar cas = document.querySelector(\"#c\");\n//获取绘图上下文\ncar ctx = cas.getContext(\"2d\");\n```\n\n## 画直线\n\n```js\n//设置直线的起点\nctx.moveTo(x,y);\n//画路径到直线的终点\nctx.lineTo(x,y);\n```\n\n## 开启新路径\n\n```js\nctx.befinPath();\n```\n\n## 画曲线\n\n```js\n//使用for循环,用函数来帮一个y确定一个x\n//然后讲x,y的每一个点用lingTo连起来就变成了一条曲线\n```\n\n## 画矩形\n\n```js\n//1. 手动,纯人工\n//2. ctx.rect(x,y,w,h);\n//3. ctx.strokeRect(x,y,w,h);\n//4. ctx.fillRect(x,y,w,h);\n```\n\n## 画弧\n\n```js\nctx.arc(x,y,r,startAngle.endAngle[,Boolean optional anticlockwise])\n```\n\n## 扇形\n\n```js\n//先moveTo到原心\nmoveTo(x,y);\nctx.arc(x,y,r,startAngle.endAngle[,Boolean optional anticlockwise])\nctx.closePath();\nctx.fill();\n```\n\n## 饼图\n\n`3` 等分的饼\n1. 开始的角度一般是 `-90`\n2. 每画一个扇形,就让角度 `+120`\n3. 再从加了 `120` 的角度画下一个扇形\n\n## 动画饼图\n\n定时器\n每一段时间画一个小扇形,就和画饼一样\n\n## 文字\n\n```js\nfillText(str, x, y)\nstrokText(str, x, y)\n```\n\n### 对其方式\n\n#### 水平\n\n* left\n* center\n* right\n* start\n* end\n\n#### 垂直\n\n* top\n* middle\n* bottom\n* hanging\n* alphabetic\n* ideographic\n\n## 完整饼图\n\n1. 先算所有数据的总和\n2. 算每个数据的比例,用比例算出角度\n3. 更具每个角度去画扇形\n4. 在去画扇形的中线\n5. 画文字下面的线\n6. 写文字\n\n## 图片\n\n```js\n//3参\nctx.drawImage(img, x, y)\n//直接画不管宽高\n//5参\nctx.drawImage(img, x, y, w, h)\n//要确定宽高\n//9参\nctx.drawImage(img, x, y, w, h, x1, y1, w1, h1)\n\n//拿出图片中 x, y, w, h 这个矩形所在的位置的图像\n//放到canvas中x1, y1, w1, h1这个矩形所在的位置\n```\n\n## 帧动画\n\n\n## 变换\n\n* 平移变换   把画布的原点移动到指定的位置\n    `ctx.translate(x, y)`\n* 缩放变换   对画布进行缩放\n\n```js\n    ctx.scale(x, y)  //x表示的是对画布x轴的缩放，如果大于1 是放大 如果小于1 是缩小\n    ctx.scale(x, y)  //y表示的是对画布y轴的缩放，如果大于1 是放大 如果小于1 是缩小\n```\n\n* 旋转变换\n    `ctx.rotate(弧度)  //将画布，围绕原点旋转指定的弧度`","slug":"canvas-summary","published":1,"updated":"2016-11-24T01:35:09.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprhu00009wg7xffp9jcv","content":"<p>Canvas笔记总结！！<br>接前部分~</p>\n<a id=\"more\"></a>\n<h2 id=\"canvas是什么\"><a href=\"#canvas是什么\" class=\"headerlink\" title=\"canvas是什么?\"></a>canvas是什么?</h2><p>是一个 <code>HTML5</code> 标签,该标签用来绘图</p>\n<h2 id=\"canvas怎么用\"><a href=\"#canvas怎么用\" class=\"headerlink\" title=\"canvas怎么用\"></a>canvas怎么用</h2><p><code>canvas</code> 是一个画布,不能自己画图,画图需要绘图上下文</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#c\"</span>);</div><div class=\"line\"><span class=\"comment\">//获取绘图上下文</span></div><div class=\"line\">car ctx = cas.getContext(<span class=\"string\">\"2d\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"画直线\"><a href=\"#画直线\" class=\"headerlink\" title=\"画直线\"></a>画直线</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置直线的起点</span></div><div class=\"line\">ctx.moveTo(x,y);</div><div class=\"line\"><span class=\"comment\">//画路径到直线的终点</span></div><div class=\"line\">ctx.lineTo(x,y);</div></pre></td></tr></table></figure>\n<h2 id=\"开启新路径\"><a href=\"#开启新路径\" class=\"headerlink\" title=\"开启新路径\"></a>开启新路径</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.befinPath();</div></pre></td></tr></table></figure>\n<h2 id=\"画曲线\"><a href=\"#画曲线\" class=\"headerlink\" title=\"画曲线\"></a>画曲线</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用for循环,用函数来帮一个y确定一个x</span></div><div class=\"line\"><span class=\"comment\">//然后讲x,y的每一个点用lingTo连起来就变成了一条曲线</span></div></pre></td></tr></table></figure>\n<h2 id=\"画矩形\"><a href=\"#画矩形\" class=\"headerlink\" title=\"画矩形\"></a>画矩形</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1. 手动,纯人工</span></div><div class=\"line\"><span class=\"comment\">//2. ctx.rect(x,y,w,h);</span></div><div class=\"line\"><span class=\"comment\">//3. ctx.strokeRect(x,y,w,h);</span></div><div class=\"line\"><span class=\"comment\">//4. ctx.fillRect(x,y,w,h);</span></div></pre></td></tr></table></figure>\n<h2 id=\"画弧\"><a href=\"#画弧\" class=\"headerlink\" title=\"画弧\"></a>画弧</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.arc(x,y,r,startAngle.endAngle[,<span class=\"built_in\">Boolean</span> optional anticlockwise])</div></pre></td></tr></table></figure>\n<h2 id=\"扇形\"><a href=\"#扇形\" class=\"headerlink\" title=\"扇形\"></a>扇形</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//先moveTo到原心</span></div><div class=\"line\">moveTo(x,y);</div><div class=\"line\">ctx.arc(x,y,r,startAngle.endAngle[,<span class=\"built_in\">Boolean</span> optional anticlockwise])</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n<h2 id=\"饼图\"><a href=\"#饼图\" class=\"headerlink\" title=\"饼图\"></a>饼图</h2><p><code>3</code> 等分的饼</p>\n<ol>\n<li>开始的角度一般是 <code>-90</code></li>\n<li>每画一个扇形,就让角度 <code>+120</code></li>\n<li>再从加了 <code>120</code> 的角度画下一个扇形</li>\n</ol>\n<h2 id=\"动画饼图\"><a href=\"#动画饼图\" class=\"headerlink\" title=\"动画饼图\"></a>动画饼图</h2><p>定时器<br>每一段时间画一个小扇形,就和画饼一样</p>\n<h2 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillText(str, x, y)</div><div class=\"line\">strokText(str, x, y)</div></pre></td></tr></table></figure>\n<h3 id=\"对其方式\"><a href=\"#对其方式\" class=\"headerlink\" title=\"对其方式\"></a>对其方式</h3><h4 id=\"水平\"><a href=\"#水平\" class=\"headerlink\" title=\"水平\"></a>水平</h4><ul>\n<li>left</li>\n<li>center</li>\n<li>right</li>\n<li>start</li>\n<li>end</li>\n</ul>\n<h4 id=\"垂直\"><a href=\"#垂直\" class=\"headerlink\" title=\"垂直\"></a>垂直</h4><ul>\n<li>top</li>\n<li>middle</li>\n<li>bottom</li>\n<li>hanging</li>\n<li>alphabetic</li>\n<li>ideographic</li>\n</ul>\n<h2 id=\"完整饼图\"><a href=\"#完整饼图\" class=\"headerlink\" title=\"完整饼图\"></a>完整饼图</h2><ol>\n<li>先算所有数据的总和</li>\n<li>算每个数据的比例,用比例算出角度</li>\n<li>更具每个角度去画扇形</li>\n<li>在去画扇形的中线</li>\n<li>画文字下面的线</li>\n<li>写文字</li>\n</ol>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//3参</span></div><div class=\"line\">ctx.drawImage(img, x, y)</div><div class=\"line\"><span class=\"comment\">//直接画不管宽高</span></div><div class=\"line\"><span class=\"comment\">//5参</span></div><div class=\"line\">ctx.drawImage(img, x, y, w, h)</div><div class=\"line\"><span class=\"comment\">//要确定宽高</span></div><div class=\"line\"><span class=\"comment\">//9参</span></div><div class=\"line\">ctx.drawImage(img, x, y, w, h, x1, y1, w1, h1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//拿出图片中 x, y, w, h 这个矩形所在的位置的图像</span></div><div class=\"line\"><span class=\"comment\">//放到canvas中x1, y1, w1, h1这个矩形所在的位置</span></div></pre></td></tr></table></figure>\n<h2 id=\"帧动画\"><a href=\"#帧动画\" class=\"headerlink\" title=\"帧动画\"></a>帧动画</h2><h2 id=\"变换\"><a href=\"#变换\" class=\"headerlink\" title=\"变换\"></a>变换</h2><ul>\n<li>平移变换   把画布的原点移动到指定的位置<br>  <code>ctx.translate(x, y)</code></li>\n<li>缩放变换   对画布进行缩放</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.scale(x, y)  <span class=\"comment\">//x表示的是对画布x轴的缩放，如果大于1 是放大 如果小于1 是缩小</span></div><div class=\"line\">ctx.scale(x, y)  <span class=\"comment\">//y表示的是对画布y轴的缩放，如果大于1 是放大 如果小于1 是缩小</span></div></pre></td></tr></table></figure>\n<ul>\n<li>旋转变换<br>  <code>ctx.rotate(弧度)  //将画布，围绕原点旋转指定的弧度</code></li>\n</ul>\n","excerpt":"<p>Canvas笔记总结！！<br>接前部分~</p>","more":"<h2 id=\"canvas是什么\"><a href=\"#canvas是什么\" class=\"headerlink\" title=\"canvas是什么?\"></a>canvas是什么?</h2><p>是一个 <code>HTML5</code> 标签,该标签用来绘图</p>\n<h2 id=\"canvas怎么用\"><a href=\"#canvas怎么用\" class=\"headerlink\" title=\"canvas怎么用\"></a>canvas怎么用</h2><p><code>canvas</code> 是一个画布,不能自己画图,画图需要绘图上下文</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#c\"</span>);</div><div class=\"line\"><span class=\"comment\">//获取绘图上下文</span></div><div class=\"line\">car ctx = cas.getContext(<span class=\"string\">\"2d\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"画直线\"><a href=\"#画直线\" class=\"headerlink\" title=\"画直线\"></a>画直线</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置直线的起点</span></div><div class=\"line\">ctx.moveTo(x,y);</div><div class=\"line\"><span class=\"comment\">//画路径到直线的终点</span></div><div class=\"line\">ctx.lineTo(x,y);</div></pre></td></tr></table></figure>\n<h2 id=\"开启新路径\"><a href=\"#开启新路径\" class=\"headerlink\" title=\"开启新路径\"></a>开启新路径</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.befinPath();</div></pre></td></tr></table></figure>\n<h2 id=\"画曲线\"><a href=\"#画曲线\" class=\"headerlink\" title=\"画曲线\"></a>画曲线</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用for循环,用函数来帮一个y确定一个x</span></div><div class=\"line\"><span class=\"comment\">//然后讲x,y的每一个点用lingTo连起来就变成了一条曲线</span></div></pre></td></tr></table></figure>\n<h2 id=\"画矩形\"><a href=\"#画矩形\" class=\"headerlink\" title=\"画矩形\"></a>画矩形</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1. 手动,纯人工</span></div><div class=\"line\"><span class=\"comment\">//2. ctx.rect(x,y,w,h);</span></div><div class=\"line\"><span class=\"comment\">//3. ctx.strokeRect(x,y,w,h);</span></div><div class=\"line\"><span class=\"comment\">//4. ctx.fillRect(x,y,w,h);</span></div></pre></td></tr></table></figure>\n<h2 id=\"画弧\"><a href=\"#画弧\" class=\"headerlink\" title=\"画弧\"></a>画弧</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.arc(x,y,r,startAngle.endAngle[,<span class=\"built_in\">Boolean</span> optional anticlockwise])</div></pre></td></tr></table></figure>\n<h2 id=\"扇形\"><a href=\"#扇形\" class=\"headerlink\" title=\"扇形\"></a>扇形</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//先moveTo到原心</span></div><div class=\"line\">moveTo(x,y);</div><div class=\"line\">ctx.arc(x,y,r,startAngle.endAngle[,<span class=\"built_in\">Boolean</span> optional anticlockwise])</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n<h2 id=\"饼图\"><a href=\"#饼图\" class=\"headerlink\" title=\"饼图\"></a>饼图</h2><p><code>3</code> 等分的饼</p>\n<ol>\n<li>开始的角度一般是 <code>-90</code></li>\n<li>每画一个扇形,就让角度 <code>+120</code></li>\n<li>再从加了 <code>120</code> 的角度画下一个扇形</li>\n</ol>\n<h2 id=\"动画饼图\"><a href=\"#动画饼图\" class=\"headerlink\" title=\"动画饼图\"></a>动画饼图</h2><p>定时器<br>每一段时间画一个小扇形,就和画饼一样</p>\n<h2 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillText(str, x, y)</div><div class=\"line\">strokText(str, x, y)</div></pre></td></tr></table></figure>\n<h3 id=\"对其方式\"><a href=\"#对其方式\" class=\"headerlink\" title=\"对其方式\"></a>对其方式</h3><h4 id=\"水平\"><a href=\"#水平\" class=\"headerlink\" title=\"水平\"></a>水平</h4><ul>\n<li>left</li>\n<li>center</li>\n<li>right</li>\n<li>start</li>\n<li>end</li>\n</ul>\n<h4 id=\"垂直\"><a href=\"#垂直\" class=\"headerlink\" title=\"垂直\"></a>垂直</h4><ul>\n<li>top</li>\n<li>middle</li>\n<li>bottom</li>\n<li>hanging</li>\n<li>alphabetic</li>\n<li>ideographic</li>\n</ul>\n<h2 id=\"完整饼图\"><a href=\"#完整饼图\" class=\"headerlink\" title=\"完整饼图\"></a>完整饼图</h2><ol>\n<li>先算所有数据的总和</li>\n<li>算每个数据的比例,用比例算出角度</li>\n<li>更具每个角度去画扇形</li>\n<li>在去画扇形的中线</li>\n<li>画文字下面的线</li>\n<li>写文字</li>\n</ol>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//3参</span></div><div class=\"line\">ctx.drawImage(img, x, y)</div><div class=\"line\"><span class=\"comment\">//直接画不管宽高</span></div><div class=\"line\"><span class=\"comment\">//5参</span></div><div class=\"line\">ctx.drawImage(img, x, y, w, h)</div><div class=\"line\"><span class=\"comment\">//要确定宽高</span></div><div class=\"line\"><span class=\"comment\">//9参</span></div><div class=\"line\">ctx.drawImage(img, x, y, w, h, x1, y1, w1, h1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//拿出图片中 x, y, w, h 这个矩形所在的位置的图像</span></div><div class=\"line\"><span class=\"comment\">//放到canvas中x1, y1, w1, h1这个矩形所在的位置</span></div></pre></td></tr></table></figure>\n<h2 id=\"帧动画\"><a href=\"#帧动画\" class=\"headerlink\" title=\"帧动画\"></a>帧动画</h2><h2 id=\"变换\"><a href=\"#变换\" class=\"headerlink\" title=\"变换\"></a>变换</h2><ul>\n<li>平移变换   把画布的原点移动到指定的位置<br>  <code>ctx.translate(x, y)</code></li>\n<li>缩放变换   对画布进行缩放</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.scale(x, y)  <span class=\"comment\">//x表示的是对画布x轴的缩放，如果大于1 是放大 如果小于1 是缩小</span></div><div class=\"line\">ctx.scale(x, y)  <span class=\"comment\">//y表示的是对画布y轴的缩放，如果大于1 是放大 如果小于1 是缩小</span></div></pre></td></tr></table></figure>\n<ul>\n<li>旋转变换<br>  <code>ctx.rotate(弧度)  //将画布，围绕原点旋转指定的弧度</code></li>\n</ul>"},{"title":"Canvas知识整理part1","date":"2016-11-13T11:39:33.000Z","_content":"\ncanvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.\n\n<!-- more -->\n\n    canvas 英 ['kænvəs]  美 ['kænvəs]   帆布 画布\n\n默认的宽高为：`300 * 150`\n\n## Canvas 使用注意：\n\n* 设置 `canvas` 宽高 `canvas` 只是一个画布，不能直接自己绘图，绘图需要使用工具\n* 设置 `canvas` 宽和高的时候不推荐使用 `css` 样式去设置，因为会有拉伸的效果\n* 在不支持的浏览器中，`canvas` 中的内容会正常的现实出来\n* 再 `canvas` 标签内部书写内容，在支持的浏览器中，该内容会被忽略\n* 在不支持的浏览器中会将 `canvas` 标签会当作 `div` 标签来处理\n\n## canvas 的使用领域\n\n`canvas` 的使用领域很多:\n\n1. 游戏\n2. 可视化数据(重点)\n3. `banner` 广告\n4. 多媒体\n5. 未来\n    * 模拟仿真\n    * 远程操作\n    * 图形编辑\n\n## Canvas 怎么用？\n\n1. 创建一个 `Canvas` 标签\n2. 获取到该 `DOM` 对象\n3.  `Canvas` 只是一个画布，不能自己画画，需要画图工具\n4. 每个 `Canvas` 对应一个画图工具，通过 `canvas` 对象 `.getContext(\"2d\")` 参数有 `2d` 和 `webgl` 两种 `2d` 获取到一个 ` CanvasRenderingContext2D` 类型的对象,使用 `webgl` 返回 `WebGLRenderingContext` 类型的对象.\n\n## 如何画直线\n\n1. 先确定在何处下笔，画图工具 `.moveTo(x, y)`\n2. 确定从开始的点画到哪里去，  画图工具 `.lineTo(x, y)`\n3. 上面两步之后，线并没有画出来，而是描点，需要最后一步进行画线  画图工具 `.stroke();`\n\n```js\nvar canvas = document.createElement( 'canvas' );\ncanvas.width = 500;\ncanvas.height = 400;\ncanvas.style.border = '1px dashed red';\ndocument.body.appendChild( canvas );\n// 获得 CanvasRenderingContext2D 对象\nvar context = canvas.getContext( '2d' );\n// 设置 起点\ncontext.moveTo( 0, 0 );\n// 绘制直线\ncontext.lineTo( 500, 400 );\n// 设置 起点\ncontext.moveTo( 0, 400 );\n// 绘制直线\ncontext.lineTo( 500, 0 );\n// 描边显示效果\ncontext.stroke();\n```\n\n## lineTo的特性\n\n每次 `lineTo` 之后都会记录最后的 `lineTo` 的点，下次 `lineTo` 的时候就接着这个 `canvas` 只是一个画布，不能直接自己绘图，绘图需要使用工具sssss点继续画\n\n\n## closePath\n\n将最后一次 `lineTo` 的点 和最后一次 `moveTo` 的点连起来的\n两条线的交界处，如果使用的是 `closePath` 会补全缺口\n\n```js\nctx.moveTo( 100, 100 );\nctx.lineTo( 300, 100 );\nctx.lineTo( 300, 200 );\nctx.closePath();\nctx.stroke();\n```\n\n## fill\n\n可以将闭合的图形进行填充\n\n## 非零填充原则\n\n从一个闭合空间引出一条直线，如果该直线两边的箭头数量不相等，则要填充，如果相等则不填充\n\n一边有一个箭头就+1\n另一边有一个箭头就-1\n\n## 如何绘制曲线？\n\n使用 `for` 循环给每一个 `x` 对应一个 `y` 值，`x` 和 `y` 的关系需要是个多次幂的方程\n\n## 路径概念\n\n路径就是一次绘图，包含该次绘图中的所有的状态，线宽  颜色  是否虚线\n\n如果想要改变状态，就需要开启新的路径\n\n## beginPath\n\n可以用来开启新的路径\n\n## 线型相关属性\n\n|名称|描述|\n|:--:|:--:|\n|lineWidth|画线的时候的线的宽度|\n|setLineDash()|设置虚线各个线段的长度,参数是一个数组，会将数组中的数字循环使用|\n|getLineDash()|获取虚线各个线段的长度，如果是实线，获取到的是空数组|\n|lineDashOffset|设置虚线的偏移量，正值往左，负值往右|\n|strokeStyle|设置描边的，画线的颜色，颜色值可以为css中任意一种|\n|fillStyle|设置填充颜色，颜色值可以为css中任意一种|\n\n## 渐变色\n\n将线划分为 `256` 份，每一份为一个颜色，新画一条线，依次递增，就形成了一个颜色渐变的线段","source":"_posts/canvas-part1.md","raw":"---\ntitle: Canvas知识整理part1\ndate: 2016-11-13 19:39:33\ntags: \n\t- Canvas\n\t- HTML5\n\t- 画布\ncategories: Canvas\n---\n\ncanvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.\n\n<!-- more -->\n\n    canvas 英 ['kænvəs]  美 ['kænvəs]   帆布 画布\n\n默认的宽高为：`300 * 150`\n\n## Canvas 使用注意：\n\n* 设置 `canvas` 宽高 `canvas` 只是一个画布，不能直接自己绘图，绘图需要使用工具\n* 设置 `canvas` 宽和高的时候不推荐使用 `css` 样式去设置，因为会有拉伸的效果\n* 在不支持的浏览器中，`canvas` 中的内容会正常的现实出来\n* 再 `canvas` 标签内部书写内容，在支持的浏览器中，该内容会被忽略\n* 在不支持的浏览器中会将 `canvas` 标签会当作 `div` 标签来处理\n\n## canvas 的使用领域\n\n`canvas` 的使用领域很多:\n\n1. 游戏\n2. 可视化数据(重点)\n3. `banner` 广告\n4. 多媒体\n5. 未来\n    * 模拟仿真\n    * 远程操作\n    * 图形编辑\n\n## Canvas 怎么用？\n\n1. 创建一个 `Canvas` 标签\n2. 获取到该 `DOM` 对象\n3.  `Canvas` 只是一个画布，不能自己画画，需要画图工具\n4. 每个 `Canvas` 对应一个画图工具，通过 `canvas` 对象 `.getContext(\"2d\")` 参数有 `2d` 和 `webgl` 两种 `2d` 获取到一个 ` CanvasRenderingContext2D` 类型的对象,使用 `webgl` 返回 `WebGLRenderingContext` 类型的对象.\n\n## 如何画直线\n\n1. 先确定在何处下笔，画图工具 `.moveTo(x, y)`\n2. 确定从开始的点画到哪里去，  画图工具 `.lineTo(x, y)`\n3. 上面两步之后，线并没有画出来，而是描点，需要最后一步进行画线  画图工具 `.stroke();`\n\n```js\nvar canvas = document.createElement( 'canvas' );\ncanvas.width = 500;\ncanvas.height = 400;\ncanvas.style.border = '1px dashed red';\ndocument.body.appendChild( canvas );\n// 获得 CanvasRenderingContext2D 对象\nvar context = canvas.getContext( '2d' );\n// 设置 起点\ncontext.moveTo( 0, 0 );\n// 绘制直线\ncontext.lineTo( 500, 400 );\n// 设置 起点\ncontext.moveTo( 0, 400 );\n// 绘制直线\ncontext.lineTo( 500, 0 );\n// 描边显示效果\ncontext.stroke();\n```\n\n## lineTo的特性\n\n每次 `lineTo` 之后都会记录最后的 `lineTo` 的点，下次 `lineTo` 的时候就接着这个 `canvas` 只是一个画布，不能直接自己绘图，绘图需要使用工具sssss点继续画\n\n\n## closePath\n\n将最后一次 `lineTo` 的点 和最后一次 `moveTo` 的点连起来的\n两条线的交界处，如果使用的是 `closePath` 会补全缺口\n\n```js\nctx.moveTo( 100, 100 );\nctx.lineTo( 300, 100 );\nctx.lineTo( 300, 200 );\nctx.closePath();\nctx.stroke();\n```\n\n## fill\n\n可以将闭合的图形进行填充\n\n## 非零填充原则\n\n从一个闭合空间引出一条直线，如果该直线两边的箭头数量不相等，则要填充，如果相等则不填充\n\n一边有一个箭头就+1\n另一边有一个箭头就-1\n\n## 如何绘制曲线？\n\n使用 `for` 循环给每一个 `x` 对应一个 `y` 值，`x` 和 `y` 的关系需要是个多次幂的方程\n\n## 路径概念\n\n路径就是一次绘图，包含该次绘图中的所有的状态，线宽  颜色  是否虚线\n\n如果想要改变状态，就需要开启新的路径\n\n## beginPath\n\n可以用来开启新的路径\n\n## 线型相关属性\n\n|名称|描述|\n|:--:|:--:|\n|lineWidth|画线的时候的线的宽度|\n|setLineDash()|设置虚线各个线段的长度,参数是一个数组，会将数组中的数字循环使用|\n|getLineDash()|获取虚线各个线段的长度，如果是实线，获取到的是空数组|\n|lineDashOffset|设置虚线的偏移量，正值往左，负值往右|\n|strokeStyle|设置描边的，画线的颜色，颜色值可以为css中任意一种|\n|fillStyle|设置填充颜色，颜色值可以为css中任意一种|\n\n## 渐变色\n\n将线划分为 `256` 份，每一份为一个颜色，新画一条线，依次递增，就形成了一个颜色渐变的线段","slug":"canvas-part1","published":1,"updated":"2016-11-24T01:33:33.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hpri300029wg7czxepbds","content":"<p>canvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.</p>\n<a id=\"more\"></a>\n<pre><code>canvas 英 [&apos;kænvəs]  美 [&apos;kænvəs]   帆布 画布\n</code></pre><p>默认的宽高为：<code>300 * 150</code></p>\n<h2 id=\"Canvas-使用注意：\"><a href=\"#Canvas-使用注意：\" class=\"headerlink\" title=\"Canvas 使用注意：\"></a>Canvas 使用注意：</h2><ul>\n<li>设置 <code>canvas</code> 宽高 <code>canvas</code> 只是一个画布，不能直接自己绘图，绘图需要使用工具</li>\n<li>设置 <code>canvas</code> 宽和高的时候不推荐使用 <code>css</code> 样式去设置，因为会有拉伸的效果</li>\n<li>在不支持的浏览器中，<code>canvas</code> 中的内容会正常的现实出来</li>\n<li>再 <code>canvas</code> 标签内部书写内容，在支持的浏览器中，该内容会被忽略</li>\n<li>在不支持的浏览器中会将 <code>canvas</code> 标签会当作 <code>div</code> 标签来处理</li>\n</ul>\n<h2 id=\"canvas-的使用领域\"><a href=\"#canvas-的使用领域\" class=\"headerlink\" title=\"canvas 的使用领域\"></a>canvas 的使用领域</h2><p><code>canvas</code> 的使用领域很多:</p>\n<ol>\n<li>游戏</li>\n<li>可视化数据(重点)</li>\n<li><code>banner</code> 广告</li>\n<li>多媒体</li>\n<li>未来<ul>\n<li>模拟仿真</li>\n<li>远程操作</li>\n<li>图形编辑</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Canvas-怎么用？\"><a href=\"#Canvas-怎么用？\" class=\"headerlink\" title=\"Canvas 怎么用？\"></a>Canvas 怎么用？</h2><ol>\n<li>创建一个 <code>Canvas</code> 标签</li>\n<li>获取到该 <code>DOM</code> 对象</li>\n<li><code>Canvas</code> 只是一个画布，不能自己画画，需要画图工具</li>\n<li>每个 <code>Canvas</code> 对应一个画图工具，通过 <code>canvas</code> 对象 <code>.getContext(&quot;2d&quot;)</code> 参数有 <code>2d</code> 和 <code>webgl</code> 两种 <code>2d</code> 获取到一个 <code>CanvasRenderingContext2D</code> 类型的对象,使用 <code>webgl</code> 返回 <code>WebGLRenderingContext</code> 类型的对象.</li>\n</ol>\n<h2 id=\"如何画直线\"><a href=\"#如何画直线\" class=\"headerlink\" title=\"如何画直线\"></a>如何画直线</h2><ol>\n<li>先确定在何处下笔，画图工具 <code>.moveTo(x, y)</code></li>\n<li>确定从开始的点画到哪里去，  画图工具 <code>.lineTo(x, y)</code></li>\n<li>上面两步之后，线并没有画出来，而是描点，需要最后一步进行画线  画图工具 <code>.stroke();</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.createElement( <span class=\"string\">'canvas'</span> );</div><div class=\"line\">canvas.width = <span class=\"number\">500</span>;</div><div class=\"line\">canvas.height = <span class=\"number\">400</span>;</div><div class=\"line\">canvas.style.border = <span class=\"string\">'1px dashed red'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild( canvas );</div><div class=\"line\"><span class=\"comment\">// 获得 CanvasRenderingContext2D 对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> context = canvas.getContext( <span class=\"string\">'2d'</span> );</div><div class=\"line\"><span class=\"comment\">// 设置 起点</span></div><div class=\"line\">context.moveTo( <span class=\"number\">0</span>, <span class=\"number\">0</span> );</div><div class=\"line\"><span class=\"comment\">// 绘制直线</span></div><div class=\"line\">context.lineTo( <span class=\"number\">500</span>, <span class=\"number\">400</span> );</div><div class=\"line\"><span class=\"comment\">// 设置 起点</span></div><div class=\"line\">context.moveTo( <span class=\"number\">0</span>, <span class=\"number\">400</span> );</div><div class=\"line\"><span class=\"comment\">// 绘制直线</span></div><div class=\"line\">context.lineTo( <span class=\"number\">500</span>, <span class=\"number\">0</span> );</div><div class=\"line\"><span class=\"comment\">// 描边显示效果</span></div><div class=\"line\">context.stroke();</div></pre></td></tr></table></figure>\n<h2 id=\"lineTo的特性\"><a href=\"#lineTo的特性\" class=\"headerlink\" title=\"lineTo的特性\"></a>lineTo的特性</h2><p>每次 <code>lineTo</code> 之后都会记录最后的 <code>lineTo</code> 的点，下次 <code>lineTo</code> 的时候就接着这个 <code>canvas</code> 只是一个画布，不能直接自己绘图，绘图需要使用工具sssss点继续画</p>\n<h2 id=\"closePath\"><a href=\"#closePath\" class=\"headerlink\" title=\"closePath\"></a>closePath</h2><p>将最后一次 <code>lineTo</code> 的点 和最后一次 <code>moveTo</code> 的点连起来的<br>两条线的交界处，如果使用的是 <code>closePath</code> 会补全缺口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.moveTo( <span class=\"number\">100</span>, <span class=\"number\">100</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">300</span>, <span class=\"number\">100</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">300</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.stroke();</div></pre></td></tr></table></figure>\n<h2 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill\"></a>fill</h2><p>可以将闭合的图形进行填充</p>\n<h2 id=\"非零填充原则\"><a href=\"#非零填充原则\" class=\"headerlink\" title=\"非零填充原则\"></a>非零填充原则</h2><p>从一个闭合空间引出一条直线，如果该直线两边的箭头数量不相等，则要填充，如果相等则不填充</p>\n<p>一边有一个箭头就+1<br>另一边有一个箭头就-1</p>\n<h2 id=\"如何绘制曲线？\"><a href=\"#如何绘制曲线？\" class=\"headerlink\" title=\"如何绘制曲线？\"></a>如何绘制曲线？</h2><p>使用 <code>for</code> 循环给每一个 <code>x</code> 对应一个 <code>y</code> 值，<code>x</code> 和 <code>y</code> 的关系需要是个多次幂的方程</p>\n<h2 id=\"路径概念\"><a href=\"#路径概念\" class=\"headerlink\" title=\"路径概念\"></a>路径概念</h2><p>路径就是一次绘图，包含该次绘图中的所有的状态，线宽  颜色  是否虚线</p>\n<p>如果想要改变状态，就需要开启新的路径</p>\n<h2 id=\"beginPath\"><a href=\"#beginPath\" class=\"headerlink\" title=\"beginPath\"></a>beginPath</h2><p>可以用来开启新的路径</p>\n<h2 id=\"线型相关属性\"><a href=\"#线型相关属性\" class=\"headerlink\" title=\"线型相关属性\"></a>线型相关属性</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">lineWidth</td>\n<td style=\"text-align:center\">画线的时候的线的宽度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setLineDash()</td>\n<td style=\"text-align:center\">设置虚线各个线段的长度,参数是一个数组，会将数组中的数字循环使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getLineDash()</td>\n<td style=\"text-align:center\">获取虚线各个线段的长度，如果是实线，获取到的是空数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lineDashOffset</td>\n<td style=\"text-align:center\">设置虚线的偏移量，正值往左，负值往右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strokeStyle</td>\n<td style=\"text-align:center\">设置描边的，画线的颜色，颜色值可以为css中任意一种</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fillStyle</td>\n<td style=\"text-align:center\">设置填充颜色，颜色值可以为css中任意一种</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"渐变色\"><a href=\"#渐变色\" class=\"headerlink\" title=\"渐变色\"></a>渐变色</h2><p>将线划分为 <code>256</code> 份，每一份为一个颜色，新画一条线，依次递增，就形成了一个颜色渐变的线段</p>\n","excerpt":"<p>canvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.</p>","more":"<pre><code>canvas 英 [&apos;kænvəs]  美 [&apos;kænvəs]   帆布 画布\n</code></pre><p>默认的宽高为：<code>300 * 150</code></p>\n<h2 id=\"Canvas-使用注意：\"><a href=\"#Canvas-使用注意：\" class=\"headerlink\" title=\"Canvas 使用注意：\"></a>Canvas 使用注意：</h2><ul>\n<li>设置 <code>canvas</code> 宽高 <code>canvas</code> 只是一个画布，不能直接自己绘图，绘图需要使用工具</li>\n<li>设置 <code>canvas</code> 宽和高的时候不推荐使用 <code>css</code> 样式去设置，因为会有拉伸的效果</li>\n<li>在不支持的浏览器中，<code>canvas</code> 中的内容会正常的现实出来</li>\n<li>再 <code>canvas</code> 标签内部书写内容，在支持的浏览器中，该内容会被忽略</li>\n<li>在不支持的浏览器中会将 <code>canvas</code> 标签会当作 <code>div</code> 标签来处理</li>\n</ul>\n<h2 id=\"canvas-的使用领域\"><a href=\"#canvas-的使用领域\" class=\"headerlink\" title=\"canvas 的使用领域\"></a>canvas 的使用领域</h2><p><code>canvas</code> 的使用领域很多:</p>\n<ol>\n<li>游戏</li>\n<li>可视化数据(重点)</li>\n<li><code>banner</code> 广告</li>\n<li>多媒体</li>\n<li>未来<ul>\n<li>模拟仿真</li>\n<li>远程操作</li>\n<li>图形编辑</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Canvas-怎么用？\"><a href=\"#Canvas-怎么用？\" class=\"headerlink\" title=\"Canvas 怎么用？\"></a>Canvas 怎么用？</h2><ol>\n<li>创建一个 <code>Canvas</code> 标签</li>\n<li>获取到该 <code>DOM</code> 对象</li>\n<li><code>Canvas</code> 只是一个画布，不能自己画画，需要画图工具</li>\n<li>每个 <code>Canvas</code> 对应一个画图工具，通过 <code>canvas</code> 对象 <code>.getContext(&quot;2d&quot;)</code> 参数有 <code>2d</code> 和 <code>webgl</code> 两种 <code>2d</code> 获取到一个 <code>CanvasRenderingContext2D</code> 类型的对象,使用 <code>webgl</code> 返回 <code>WebGLRenderingContext</code> 类型的对象.</li>\n</ol>\n<h2 id=\"如何画直线\"><a href=\"#如何画直线\" class=\"headerlink\" title=\"如何画直线\"></a>如何画直线</h2><ol>\n<li>先确定在何处下笔，画图工具 <code>.moveTo(x, y)</code></li>\n<li>确定从开始的点画到哪里去，  画图工具 <code>.lineTo(x, y)</code></li>\n<li>上面两步之后，线并没有画出来，而是描点，需要最后一步进行画线  画图工具 <code>.stroke();</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.createElement( <span class=\"string\">'canvas'</span> );</div><div class=\"line\">canvas.width = <span class=\"number\">500</span>;</div><div class=\"line\">canvas.height = <span class=\"number\">400</span>;</div><div class=\"line\">canvas.style.border = <span class=\"string\">'1px dashed red'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild( canvas );</div><div class=\"line\"><span class=\"comment\">// 获得 CanvasRenderingContext2D 对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> context = canvas.getContext( <span class=\"string\">'2d'</span> );</div><div class=\"line\"><span class=\"comment\">// 设置 起点</span></div><div class=\"line\">context.moveTo( <span class=\"number\">0</span>, <span class=\"number\">0</span> );</div><div class=\"line\"><span class=\"comment\">// 绘制直线</span></div><div class=\"line\">context.lineTo( <span class=\"number\">500</span>, <span class=\"number\">400</span> );</div><div class=\"line\"><span class=\"comment\">// 设置 起点</span></div><div class=\"line\">context.moveTo( <span class=\"number\">0</span>, <span class=\"number\">400</span> );</div><div class=\"line\"><span class=\"comment\">// 绘制直线</span></div><div class=\"line\">context.lineTo( <span class=\"number\">500</span>, <span class=\"number\">0</span> );</div><div class=\"line\"><span class=\"comment\">// 描边显示效果</span></div><div class=\"line\">context.stroke();</div></pre></td></tr></table></figure>\n<h2 id=\"lineTo的特性\"><a href=\"#lineTo的特性\" class=\"headerlink\" title=\"lineTo的特性\"></a>lineTo的特性</h2><p>每次 <code>lineTo</code> 之后都会记录最后的 <code>lineTo</code> 的点，下次 <code>lineTo</code> 的时候就接着这个 <code>canvas</code> 只是一个画布，不能直接自己绘图，绘图需要使用工具sssss点继续画</p>\n<h2 id=\"closePath\"><a href=\"#closePath\" class=\"headerlink\" title=\"closePath\"></a>closePath</h2><p>将最后一次 <code>lineTo</code> 的点 和最后一次 <code>moveTo</code> 的点连起来的<br>两条线的交界处，如果使用的是 <code>closePath</code> 会补全缺口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.moveTo( <span class=\"number\">100</span>, <span class=\"number\">100</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">300</span>, <span class=\"number\">100</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">300</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.stroke();</div></pre></td></tr></table></figure>\n<h2 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill\"></a>fill</h2><p>可以将闭合的图形进行填充</p>\n<h2 id=\"非零填充原则\"><a href=\"#非零填充原则\" class=\"headerlink\" title=\"非零填充原则\"></a>非零填充原则</h2><p>从一个闭合空间引出一条直线，如果该直线两边的箭头数量不相等，则要填充，如果相等则不填充</p>\n<p>一边有一个箭头就+1<br>另一边有一个箭头就-1</p>\n<h2 id=\"如何绘制曲线？\"><a href=\"#如何绘制曲线？\" class=\"headerlink\" title=\"如何绘制曲线？\"></a>如何绘制曲线？</h2><p>使用 <code>for</code> 循环给每一个 <code>x</code> 对应一个 <code>y</code> 值，<code>x</code> 和 <code>y</code> 的关系需要是个多次幂的方程</p>\n<h2 id=\"路径概念\"><a href=\"#路径概念\" class=\"headerlink\" title=\"路径概念\"></a>路径概念</h2><p>路径就是一次绘图，包含该次绘图中的所有的状态，线宽  颜色  是否虚线</p>\n<p>如果想要改变状态，就需要开启新的路径</p>\n<h2 id=\"beginPath\"><a href=\"#beginPath\" class=\"headerlink\" title=\"beginPath\"></a>beginPath</h2><p>可以用来开启新的路径</p>\n<h2 id=\"线型相关属性\"><a href=\"#线型相关属性\" class=\"headerlink\" title=\"线型相关属性\"></a>线型相关属性</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">lineWidth</td>\n<td style=\"text-align:center\">画线的时候的线的宽度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setLineDash()</td>\n<td style=\"text-align:center\">设置虚线各个线段的长度,参数是一个数组，会将数组中的数字循环使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getLineDash()</td>\n<td style=\"text-align:center\">获取虚线各个线段的长度，如果是实线，获取到的是空数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lineDashOffset</td>\n<td style=\"text-align:center\">设置虚线的偏移量，正值往左，负值往右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">strokeStyle</td>\n<td style=\"text-align:center\">设置描边的，画线的颜色，颜色值可以为css中任意一种</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fillStyle</td>\n<td style=\"text-align:center\">设置填充颜色，颜色值可以为css中任意一种</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"渐变色\"><a href=\"#渐变色\" class=\"headerlink\" title=\"渐变色\"></a>渐变色</h2><p>将线划分为 <code>256</code> 份，每一份为一个颜色，新画一条线，依次递增，就形成了一个颜色渐变的线段</p>"},{"title":"Canvas知识整理part2","date":"2016-11-14T11:42:44.000Z","_content":"Html5Canvas笔记整理，接part1篇！！\n\n绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法!\n1. 绘制矩形\n2. 绘制圆弧\n3. 绘制文本\n4. 绘制图片\n5. 绘制动画\n\n<!-- more -->\n\n## 绘制矩形\n\n1. strokeRect();\n\n```js\nstrokeRect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, `y`坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：绘制一个矩形路径，并描边\n- 用来绘制一个矩形. 比起直接使用 `moveTo` 和 `lineTo` 方法要简单许多.\n- 该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.\n- 使用该方法不需要使用 `moveTo` 方法设置起始点, 也不需要调用 `stroke` 等绘画方法.\n- 绘制的矩形支持 `strokeStyle` 设置颜色样式.\n\n```js\nctx.strokeStyle = 'red';\nctx.strokeRect( 100, 100, 200, 100 );\n```\n\n2. fillRect();\n\n```js\nfillRect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, `y`坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：绘制一个矩形路径，并填充\n- 用来绘制一个矩形. 比起直接使用 `moveTo` 和 `lineTo` 方法要简单许多.\n- 该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.\n- 使用该方法不需要使用 `moveTo` 方法设置起始点, 也不需要调用 `stroke` 等绘画方法.\n- 绘制的矩形支持 `fillStyle` 设置颜色样式.\n\n```js\nctx.fillStyle = 'green';\nctx.fillRect( 100, 100, 200, 100 );\n```\n\n3. rect();\n\n```js\nrect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, y坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：绘制一个矩形路径，不描边\n\n4. clearRect();\n\n```js\nclearRect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, `y`坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：清除指定的矩形区域\n- 用于清除画布中的矩形区域的内容.\n- 参数 `x`, `y` 表示矩形区域左上角的坐标,`width` 与 `height` 表示矩形区域的宽高.\n\n```js\nctx.fillRect( 100, 100, 200, 100 );\nctx.clearRect( 110, 110, 50, 50 );\n```\n\n* save restore\n\tsave 保存当前的路径状态\n\trestore 恢复上一次保存的路径状态( `restore` 是与之对应的,先 `save` 的,后被 `restore` )\n\t\n```js\nvar x = 10, y = 10, oldx = 10, oldy = 10;\nvar width = 100, height = 50;     \nvar intervalId = setInterval(function () {\n\tctx.clearRect( oldx - 1, oldy - 1, width + 2, height + 2 );\n\n\tctx.strokeRect( x, y, width, height );\n\n\toldx = x;\n\toldy = y;\n\n\tx += 4;\n\ty += 2;\n\n\tif ( oldy >= 200 ) {\n\t\t// clearInterval( intervalId );\n\t\tx = 10, y = 10;\n\t}\n}, 20);\n```\n\n## 绘制圆弧\n\n```js\narc(x, y, r, startAngle, endAngle, anticlockwise)\n```\n\n* `x,y` 圆心坐标\n* `r `  圆的半径\n* `startAngle` 起始角度（弧度表示）\n* `endAngle` 结束角度（弧度表示）\n* `anticlockwise` 是否逆时针绘制，注意找角的时候还是顺时针找\n\n注意事项，每次画完弧之后，都会保存点，下次绘图会从该点开始\n\n```js\n// 在 200, 200 的地方绘制一段半径为 100 的圆弧, 圆心角为 - PI / 2 到 PI / 4\n...\nctx.arc( 200, 200, 100, -Math.PI/2, Math.PI/4 );\nctx.stroke();\n\n// 为了方便看清楚结构, 绘制坐标轴\nctx.beginPath();\nctx.strokeStyle = 'red';\nctx.moveTo( 50, 200 );\nctx.lineTo( 350, 200 );\n\nctx.moveTo( 200, 50 );\nctx.lineTo( 200, 350 );\n\nctx.moveTo( 200, 200 );\nctx.lineTo( 300, 300 );\n\nctx.stroke();\n```\n\n## 绘制扇形\n\n先 `moveTo` 圆心，然后画弧 ，然后 `closePath` 弧就有了\n\n```js\nctx.strokeStyle = 'red';\nctx.fillStyle = 'pink';\n\nctx.moveTo( 100, 200 );\nctx.arc( 100, 200, 100, -Math.PI/3, Math.PI/3 );\nctx.closePath();\nctx.stroke();\n\nctx.beginPath();\nctx.moveTo( 300, 200 );\nctx.arc( 300, 200, 100, -Math.PI/3, Math.PI/3 );\nctx.closePath();\nctx.fill();\n```\n\n## 绘制扇形动画\n\n绘制扇形动画, 就是每隔几毫秒( 20 毫秒)擦除以前绘制的内容, 然后在以前绘制的基础上比以前多绘制一点东西. 这里多绘制的内容就是由角度决定. 比如一开始角度从 `-Math.PI / 2` 开始绘制. 那么每次角度都 `+0.1` , 直到 绘制到 `Math.PI * 3 / 2 `为止.\n\n```js\nctx.fillStyle = 'green';\nvar startAngle = -Math.PI / 2,\n\tangle = startAngle,\n\tx = 200, y = 200,\n\tr = 100;\nvar intervalId = setInterval(function () {\n\t// 清除之前绘制的内容\n\tctx.clearRect( 0, 0, cas.width, cas.height );\n\t// 角度增量\n\tangle += 0.1;\n\t// 判断是否停止计时器\n\tif ( angle >= Math.PI * 3 / 2 ) {\n\t\tclearInterval( intervalId);\n\t\tangle = Math.PI * 3 / 2; \n\t\tconsole.log( '绘制完成' );\n\t}\n\t// 绘制\n\tctx.moveTo( x, y );\n\tctx.arc( x, y, r, startAngle, angle );\n\tctx.fill();\n}, 20);\n```\n\n## 绘制饼形图\n\n\t等分的饼图,饼图的起始位置在\t`-90°` .\n绘制饼形图最大的特点是角度是叠加的. 开始从 `-Math.PI/2` 开始绘制, 达到执行角 `x` 后, 下一个区域从 `x` 开始绘制, 然后有到一个角 `y` 停下来. 如此反复到 `Math.PI * 3 / 2` 结束.\n\n```js\nvar x = 200, y = 200,\n\tr = 100,\n\tstep = Math.PI * 2 / 3,     // 120 度一个区域\n\tstart = -Math.PI / 2,       // 起始角度\n\tcolors = [ 'red', 'green', 'blue' ];\n\nfor ( var i = 0; i < 3; i++ ) {\n\tctx.beginPath();\n\tctx.moveTo( x, y );\n\tctx.fillStyle = colors[ i ];\n\tctx.arc( x, y, r, start, start+=step );\n\tctx.fill();\n}\n```","source":"_posts/canvas-part2.md","raw":"---\ntitle: Canvas知识整理part2\ndate: 2016-11-14 19:42:44\ntags: \n\t- Canvas\n\t- HTML5\n\t- 画布\ncategories: Canvas\n---\nHtml5Canvas笔记整理，接part1篇！！\n\n绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法!\n1. 绘制矩形\n2. 绘制圆弧\n3. 绘制文本\n4. 绘制图片\n5. 绘制动画\n\n<!-- more -->\n\n## 绘制矩形\n\n1. strokeRect();\n\n```js\nstrokeRect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, `y`坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：绘制一个矩形路径，并描边\n- 用来绘制一个矩形. 比起直接使用 `moveTo` 和 `lineTo` 方法要简单许多.\n- 该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.\n- 使用该方法不需要使用 `moveTo` 方法设置起始点, 也不需要调用 `stroke` 等绘画方法.\n- 绘制的矩形支持 `strokeStyle` 设置颜色样式.\n\n```js\nctx.strokeStyle = 'red';\nctx.strokeRect( 100, 100, 200, 100 );\n```\n\n2. fillRect();\n\n```js\nfillRect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, `y`坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：绘制一个矩形路径，并填充\n- 用来绘制一个矩形. 比起直接使用 `moveTo` 和 `lineTo` 方法要简单许多.\n- 该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.\n- 使用该方法不需要使用 `moveTo` 方法设置起始点, 也不需要调用 `stroke` 等绘画方法.\n- 绘制的矩形支持 `fillStyle` 设置颜色样式.\n\n```js\nctx.fillStyle = 'green';\nctx.fillRect( 100, 100, 200, 100 );\n```\n\n3. rect();\n\n```js\nrect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, y坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：绘制一个矩形路径，不描边\n\n4. clearRect();\n\n```js\nclearRect(x, y, w, h)\n```\n\n`x`, `x`坐标\n`y`, `y`坐标\n`w`, 矩形宽\n`h`, 矩形高\n功能：清除指定的矩形区域\n- 用于清除画布中的矩形区域的内容.\n- 参数 `x`, `y` 表示矩形区域左上角的坐标,`width` 与 `height` 表示矩形区域的宽高.\n\n```js\nctx.fillRect( 100, 100, 200, 100 );\nctx.clearRect( 110, 110, 50, 50 );\n```\n\n* save restore\n\tsave 保存当前的路径状态\n\trestore 恢复上一次保存的路径状态( `restore` 是与之对应的,先 `save` 的,后被 `restore` )\n\t\n```js\nvar x = 10, y = 10, oldx = 10, oldy = 10;\nvar width = 100, height = 50;     \nvar intervalId = setInterval(function () {\n\tctx.clearRect( oldx - 1, oldy - 1, width + 2, height + 2 );\n\n\tctx.strokeRect( x, y, width, height );\n\n\toldx = x;\n\toldy = y;\n\n\tx += 4;\n\ty += 2;\n\n\tif ( oldy >= 200 ) {\n\t\t// clearInterval( intervalId );\n\t\tx = 10, y = 10;\n\t}\n}, 20);\n```\n\n## 绘制圆弧\n\n```js\narc(x, y, r, startAngle, endAngle, anticlockwise)\n```\n\n* `x,y` 圆心坐标\n* `r `  圆的半径\n* `startAngle` 起始角度（弧度表示）\n* `endAngle` 结束角度（弧度表示）\n* `anticlockwise` 是否逆时针绘制，注意找角的时候还是顺时针找\n\n注意事项，每次画完弧之后，都会保存点，下次绘图会从该点开始\n\n```js\n// 在 200, 200 的地方绘制一段半径为 100 的圆弧, 圆心角为 - PI / 2 到 PI / 4\n...\nctx.arc( 200, 200, 100, -Math.PI/2, Math.PI/4 );\nctx.stroke();\n\n// 为了方便看清楚结构, 绘制坐标轴\nctx.beginPath();\nctx.strokeStyle = 'red';\nctx.moveTo( 50, 200 );\nctx.lineTo( 350, 200 );\n\nctx.moveTo( 200, 50 );\nctx.lineTo( 200, 350 );\n\nctx.moveTo( 200, 200 );\nctx.lineTo( 300, 300 );\n\nctx.stroke();\n```\n\n## 绘制扇形\n\n先 `moveTo` 圆心，然后画弧 ，然后 `closePath` 弧就有了\n\n```js\nctx.strokeStyle = 'red';\nctx.fillStyle = 'pink';\n\nctx.moveTo( 100, 200 );\nctx.arc( 100, 200, 100, -Math.PI/3, Math.PI/3 );\nctx.closePath();\nctx.stroke();\n\nctx.beginPath();\nctx.moveTo( 300, 200 );\nctx.arc( 300, 200, 100, -Math.PI/3, Math.PI/3 );\nctx.closePath();\nctx.fill();\n```\n\n## 绘制扇形动画\n\n绘制扇形动画, 就是每隔几毫秒( 20 毫秒)擦除以前绘制的内容, 然后在以前绘制的基础上比以前多绘制一点东西. 这里多绘制的内容就是由角度决定. 比如一开始角度从 `-Math.PI / 2` 开始绘制. 那么每次角度都 `+0.1` , 直到 绘制到 `Math.PI * 3 / 2 `为止.\n\n```js\nctx.fillStyle = 'green';\nvar startAngle = -Math.PI / 2,\n\tangle = startAngle,\n\tx = 200, y = 200,\n\tr = 100;\nvar intervalId = setInterval(function () {\n\t// 清除之前绘制的内容\n\tctx.clearRect( 0, 0, cas.width, cas.height );\n\t// 角度增量\n\tangle += 0.1;\n\t// 判断是否停止计时器\n\tif ( angle >= Math.PI * 3 / 2 ) {\n\t\tclearInterval( intervalId);\n\t\tangle = Math.PI * 3 / 2; \n\t\tconsole.log( '绘制完成' );\n\t}\n\t// 绘制\n\tctx.moveTo( x, y );\n\tctx.arc( x, y, r, startAngle, angle );\n\tctx.fill();\n}, 20);\n```\n\n## 绘制饼形图\n\n\t等分的饼图,饼图的起始位置在\t`-90°` .\n绘制饼形图最大的特点是角度是叠加的. 开始从 `-Math.PI/2` 开始绘制, 达到执行角 `x` 后, 下一个区域从 `x` 开始绘制, 然后有到一个角 `y` 停下来. 如此反复到 `Math.PI * 3 / 2` 结束.\n\n```js\nvar x = 200, y = 200,\n\tr = 100,\n\tstep = Math.PI * 2 / 3,     // 120 度一个区域\n\tstart = -Math.PI / 2,       // 起始角度\n\tcolors = [ 'red', 'green', 'blue' ];\n\nfor ( var i = 0; i < 3; i++ ) {\n\tctx.beginPath();\n\tctx.moveTo( x, y );\n\tctx.fillStyle = colors[ i ];\n\tctx.arc( x, y, r, start, start+=step );\n\tctx.fill();\n}\n```","slug":"canvas-part2","published":1,"updated":"2016-11-24T01:34:33.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprie00069wg7fdagrxkq","content":"<p>Html5Canvas笔记整理，接part1篇！！</p>\n<p>绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法!</p>\n<ol>\n<li>绘制矩形</li>\n<li>绘制圆弧</li>\n<li>绘制文本</li>\n<li>绘制图片</li>\n<li>绘制动画</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h2><ol>\n<li>strokeRect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">strokeRect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，并描边</p>\n<ul>\n<li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li>\n<li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li>\n<li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li>\n<li>绘制的矩形支持 <code>strokeStyle</code> 设置颜色样式.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.strokeRect( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span> );</div></pre></td></tr></table></figure>\n<ol>\n<li>fillRect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillRect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，并填充</p>\n<ul>\n<li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li>\n<li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li>\n<li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li>\n<li>绘制的矩形支持 <code>fillStyle</code> 设置颜色样式.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">'green'</span>;</div><div class=\"line\">ctx.fillRect( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span> );</div></pre></td></tr></table></figure>\n<ol>\n<li>rect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, y坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，不描边</p>\n<ol>\n<li>clearRect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clearRect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：清除指定的矩形区域</p>\n<ul>\n<li>用于清除画布中的矩形区域的内容.</li>\n<li>参数 <code>x</code>, <code>y</code> 表示矩形区域左上角的坐标,<code>width</code> 与 <code>height</code> 表示矩形区域的宽高.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillRect( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span> );</div><div class=\"line\">ctx.clearRect( <span class=\"number\">110</span>, <span class=\"number\">110</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span> );</div></pre></td></tr></table></figure>\n<ul>\n<li>save restore<br>  save 保存当前的路径状态<br>  restore 恢复上一次保存的路径状态( <code>restore</code> 是与之对应的,先 <code>save</code> 的,后被 <code>restore</code> )</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>, y = <span class=\"number\">10</span>, oldx = <span class=\"number\">10</span>, oldy = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">100</span>, height = <span class=\"number\">50</span>;     </div><div class=\"line\"><span class=\"keyword\">var</span> intervalId = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tctx.clearRect( oldx - <span class=\"number\">1</span>, oldy - <span class=\"number\">1</span>, width + <span class=\"number\">2</span>, height + <span class=\"number\">2</span> );</div><div class=\"line\"></div><div class=\"line\">\tctx.strokeRect( x, y, width, height );</div><div class=\"line\"></div><div class=\"line\">\toldx = x;</div><div class=\"line\">\toldy = y;</div><div class=\"line\"></div><div class=\"line\">\tx += <span class=\"number\">4</span>;</div><div class=\"line\">\ty += <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ( oldy &gt;= <span class=\"number\">200</span> ) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// clearInterval( intervalId );</span></div><div class=\"line\">\t\tx = <span class=\"number\">10</span>, y = <span class=\"number\">10</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;, <span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"绘制圆弧\"><a href=\"#绘制圆弧\" class=\"headerlink\" title=\"绘制圆弧\"></a>绘制圆弧</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arc(x, y, r, startAngle, endAngle, anticlockwise)</div></pre></td></tr></table></figure>\n<ul>\n<li><code>x,y</code> 圆心坐标</li>\n<li><code>r</code>  圆的半径</li>\n<li><code>startAngle</code> 起始角度（弧度表示）</li>\n<li><code>endAngle</code> 结束角度（弧度表示）</li>\n<li><code>anticlockwise</code> 是否逆时针绘制，注意找角的时候还是顺时针找</li>\n</ul>\n<p>注意事项，每次画完弧之后，都会保存点，下次绘图会从该点开始</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在 200, 200 的地方绘制一段半径为 100 的圆弧, 圆心角为 - PI / 2 到 PI / 4</span></div><div class=\"line\">...</div><div class=\"line\">ctx.arc( <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">2</span>, <span class=\"built_in\">Math</span>.PI/<span class=\"number\">4</span> );</div><div class=\"line\">ctx.stroke();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为了方便看清楚结构, 绘制坐标轴</span></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.moveTo( <span class=\"number\">50</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">350</span>, <span class=\"number\">200</span> );</div><div class=\"line\"></div><div class=\"line\">ctx.moveTo( <span class=\"number\">200</span>, <span class=\"number\">50</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">200</span>, <span class=\"number\">350</span> );</div><div class=\"line\"></div><div class=\"line\">ctx.moveTo( <span class=\"number\">200</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">300</span>, <span class=\"number\">300</span> );</div><div class=\"line\"></div><div class=\"line\">ctx.stroke();</div></pre></td></tr></table></figure>\n<h2 id=\"绘制扇形\"><a href=\"#绘制扇形\" class=\"headerlink\" title=\"绘制扇形\"></a>绘制扇形</h2><p>先 <code>moveTo</code> 圆心，然后画弧 ，然后 <code>closePath</code> 弧就有了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'pink'</span>;</div><div class=\"line\"></div><div class=\"line\">ctx.moveTo( <span class=\"number\">100</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.arc( <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span>, <span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span> );</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.stroke();</div><div class=\"line\"></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.moveTo( <span class=\"number\">300</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.arc( <span class=\"number\">300</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span>, <span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span> );</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n<h2 id=\"绘制扇形动画\"><a href=\"#绘制扇形动画\" class=\"headerlink\" title=\"绘制扇形动画\"></a>绘制扇形动画</h2><p>绘制扇形动画, 就是每隔几毫秒( 20 毫秒)擦除以前绘制的内容, 然后在以前绘制的基础上比以前多绘制一点东西. 这里多绘制的内容就是由角度决定. 比如一开始角度从 <code>-Math.PI / 2</code> 开始绘制. 那么每次角度都 <code>+0.1</code> , 直到 绘制到 <code>Math.PI * 3 / 2</code>为止.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">'green'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> startAngle = -<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>,</div><div class=\"line\">\tangle = startAngle,</div><div class=\"line\">\tx = <span class=\"number\">200</span>, y = <span class=\"number\">200</span>,</div><div class=\"line\">\tr = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> intervalId = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 清除之前绘制的内容</span></div><div class=\"line\">\tctx.clearRect( <span class=\"number\">0</span>, <span class=\"number\">0</span>, cas.width, cas.height );</div><div class=\"line\">\t<span class=\"comment\">// 角度增量</span></div><div class=\"line\">\tangle += <span class=\"number\">0.1</span>;</div><div class=\"line\">\t<span class=\"comment\">// 判断是否停止计时器</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ( angle &gt;= <span class=\"built_in\">Math</span>.PI * <span class=\"number\">3</span> / <span class=\"number\">2</span> ) &#123;</div><div class=\"line\">\t\tclearInterval( intervalId);</div><div class=\"line\">\t\tangle = <span class=\"built_in\">Math</span>.PI * <span class=\"number\">3</span> / <span class=\"number\">2</span>; </div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log( <span class=\"string\">'绘制完成'</span> );</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 绘制</span></div><div class=\"line\">\tctx.moveTo( x, y );</div><div class=\"line\">\tctx.arc( x, y, r, startAngle, angle );</div><div class=\"line\">\tctx.fill();</div><div class=\"line\">&#125;, <span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"绘制饼形图\"><a href=\"#绘制饼形图\" class=\"headerlink\" title=\"绘制饼形图\"></a>绘制饼形图</h2><pre><code>等分的饼图,饼图的起始位置在    `-90°` .\n</code></pre><p>绘制饼形图最大的特点是角度是叠加的. 开始从 <code>-Math.PI/2</code> 开始绘制, 达到执行角 <code>x</code> 后, 下一个区域从 <code>x</code> 开始绘制, 然后有到一个角 <code>y</code> 停下来. 如此反复到 <code>Math.PI * 3 / 2</code> 结束.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">200</span>, y = <span class=\"number\">200</span>,</div><div class=\"line\">\tr = <span class=\"number\">100</span>,</div><div class=\"line\">\tstep = <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span> / <span class=\"number\">3</span>,     <span class=\"comment\">// 120 度一个区域</span></div><div class=\"line\">\tstart = -<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>,       <span class=\"comment\">// 起始角度</span></div><div class=\"line\">\tcolors = [ <span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span> ];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</div><div class=\"line\">\tctx.beginPath();</div><div class=\"line\">\tctx.moveTo( x, y );</div><div class=\"line\">\tctx.fillStyle = colors[ i ];</div><div class=\"line\">\tctx.arc( x, y, r, start, start+=step );</div><div class=\"line\">\tctx.fill();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>Html5Canvas笔记整理，接part1篇！！</p>\n<p>绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法!</p>\n<ol>\n<li>绘制矩形</li>\n<li>绘制圆弧</li>\n<li>绘制文本</li>\n<li>绘制图片</li>\n<li>绘制动画</li>\n</ol>","more":"<h2 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h2><ol>\n<li>strokeRect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">strokeRect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，并描边</p>\n<ul>\n<li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li>\n<li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li>\n<li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li>\n<li>绘制的矩形支持 <code>strokeStyle</code> 设置颜色样式.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.strokeRect( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span> );</div></pre></td></tr></table></figure>\n<ol>\n<li>fillRect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillRect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，并填充</p>\n<ul>\n<li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li>\n<li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li>\n<li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li>\n<li>绘制的矩形支持 <code>fillStyle</code> 设置颜色样式.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">'green'</span>;</div><div class=\"line\">ctx.fillRect( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span> );</div></pre></td></tr></table></figure>\n<ol>\n<li>rect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, y坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，不描边</p>\n<ol>\n<li>clearRect();</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">clearRect(x, y, w, h)</div></pre></td></tr></table></figure>\n<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：清除指定的矩形区域</p>\n<ul>\n<li>用于清除画布中的矩形区域的内容.</li>\n<li>参数 <code>x</code>, <code>y</code> 表示矩形区域左上角的坐标,<code>width</code> 与 <code>height</code> 表示矩形区域的宽高.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillRect( <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span> );</div><div class=\"line\">ctx.clearRect( <span class=\"number\">110</span>, <span class=\"number\">110</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span> );</div></pre></td></tr></table></figure>\n<ul>\n<li>save restore<br>  save 保存当前的路径状态<br>  restore 恢复上一次保存的路径状态( <code>restore</code> 是与之对应的,先 <code>save</code> 的,后被 <code>restore</code> )</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>, y = <span class=\"number\">10</span>, oldx = <span class=\"number\">10</span>, oldy = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">100</span>, height = <span class=\"number\">50</span>;     </div><div class=\"line\"><span class=\"keyword\">var</span> intervalId = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tctx.clearRect( oldx - <span class=\"number\">1</span>, oldy - <span class=\"number\">1</span>, width + <span class=\"number\">2</span>, height + <span class=\"number\">2</span> );</div><div class=\"line\"></div><div class=\"line\">\tctx.strokeRect( x, y, width, height );</div><div class=\"line\"></div><div class=\"line\">\toldx = x;</div><div class=\"line\">\toldy = y;</div><div class=\"line\"></div><div class=\"line\">\tx += <span class=\"number\">4</span>;</div><div class=\"line\">\ty += <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ( oldy &gt;= <span class=\"number\">200</span> ) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// clearInterval( intervalId );</span></div><div class=\"line\">\t\tx = <span class=\"number\">10</span>, y = <span class=\"number\">10</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;, <span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"绘制圆弧\"><a href=\"#绘制圆弧\" class=\"headerlink\" title=\"绘制圆弧\"></a>绘制圆弧</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arc(x, y, r, startAngle, endAngle, anticlockwise)</div></pre></td></tr></table></figure>\n<ul>\n<li><code>x,y</code> 圆心坐标</li>\n<li><code>r</code>  圆的半径</li>\n<li><code>startAngle</code> 起始角度（弧度表示）</li>\n<li><code>endAngle</code> 结束角度（弧度表示）</li>\n<li><code>anticlockwise</code> 是否逆时针绘制，注意找角的时候还是顺时针找</li>\n</ul>\n<p>注意事项，每次画完弧之后，都会保存点，下次绘图会从该点开始</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在 200, 200 的地方绘制一段半径为 100 的圆弧, 圆心角为 - PI / 2 到 PI / 4</span></div><div class=\"line\">...</div><div class=\"line\">ctx.arc( <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">2</span>, <span class=\"built_in\">Math</span>.PI/<span class=\"number\">4</span> );</div><div class=\"line\">ctx.stroke();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为了方便看清楚结构, 绘制坐标轴</span></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.moveTo( <span class=\"number\">50</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">350</span>, <span class=\"number\">200</span> );</div><div class=\"line\"></div><div class=\"line\">ctx.moveTo( <span class=\"number\">200</span>, <span class=\"number\">50</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">200</span>, <span class=\"number\">350</span> );</div><div class=\"line\"></div><div class=\"line\">ctx.moveTo( <span class=\"number\">200</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.lineTo( <span class=\"number\">300</span>, <span class=\"number\">300</span> );</div><div class=\"line\"></div><div class=\"line\">ctx.stroke();</div></pre></td></tr></table></figure>\n<h2 id=\"绘制扇形\"><a href=\"#绘制扇形\" class=\"headerlink\" title=\"绘制扇形\"></a>绘制扇形</h2><p>先 <code>moveTo</code> 圆心，然后画弧 ，然后 <code>closePath</code> 弧就有了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.strokeStyle = <span class=\"string\">'red'</span>;</div><div class=\"line\">ctx.fillStyle = <span class=\"string\">'pink'</span>;</div><div class=\"line\"></div><div class=\"line\">ctx.moveTo( <span class=\"number\">100</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.arc( <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span>, <span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span> );</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.stroke();</div><div class=\"line\"></div><div class=\"line\">ctx.beginPath();</div><div class=\"line\">ctx.moveTo( <span class=\"number\">300</span>, <span class=\"number\">200</span> );</div><div class=\"line\">ctx.arc( <span class=\"number\">300</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, -<span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span>, <span class=\"built_in\">Math</span>.PI/<span class=\"number\">3</span> );</div><div class=\"line\">ctx.closePath();</div><div class=\"line\">ctx.fill();</div></pre></td></tr></table></figure>\n<h2 id=\"绘制扇形动画\"><a href=\"#绘制扇形动画\" class=\"headerlink\" title=\"绘制扇形动画\"></a>绘制扇形动画</h2><p>绘制扇形动画, 就是每隔几毫秒( 20 毫秒)擦除以前绘制的内容, 然后在以前绘制的基础上比以前多绘制一点东西. 这里多绘制的内容就是由角度决定. 比如一开始角度从 <code>-Math.PI / 2</code> 开始绘制. 那么每次角度都 <code>+0.1</code> , 直到 绘制到 <code>Math.PI * 3 / 2</code>为止.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.fillStyle = <span class=\"string\">'green'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> startAngle = -<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>,</div><div class=\"line\">\tangle = startAngle,</div><div class=\"line\">\tx = <span class=\"number\">200</span>, y = <span class=\"number\">200</span>,</div><div class=\"line\">\tr = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> intervalId = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 清除之前绘制的内容</span></div><div class=\"line\">\tctx.clearRect( <span class=\"number\">0</span>, <span class=\"number\">0</span>, cas.width, cas.height );</div><div class=\"line\">\t<span class=\"comment\">// 角度增量</span></div><div class=\"line\">\tangle += <span class=\"number\">0.1</span>;</div><div class=\"line\">\t<span class=\"comment\">// 判断是否停止计时器</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ( angle &gt;= <span class=\"built_in\">Math</span>.PI * <span class=\"number\">3</span> / <span class=\"number\">2</span> ) &#123;</div><div class=\"line\">\t\tclearInterval( intervalId);</div><div class=\"line\">\t\tangle = <span class=\"built_in\">Math</span>.PI * <span class=\"number\">3</span> / <span class=\"number\">2</span>; </div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log( <span class=\"string\">'绘制完成'</span> );</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 绘制</span></div><div class=\"line\">\tctx.moveTo( x, y );</div><div class=\"line\">\tctx.arc( x, y, r, startAngle, angle );</div><div class=\"line\">\tctx.fill();</div><div class=\"line\">&#125;, <span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"绘制饼形图\"><a href=\"#绘制饼形图\" class=\"headerlink\" title=\"绘制饼形图\"></a>绘制饼形图</h2><pre><code>等分的饼图,饼图的起始位置在    `-90°` .\n</code></pre><p>绘制饼形图最大的特点是角度是叠加的. 开始从 <code>-Math.PI/2</code> 开始绘制, 达到执行角 <code>x</code> 后, 下一个区域从 <code>x</code> 开始绘制, 然后有到一个角 <code>y</code> 停下来. 如此反复到 <code>Math.PI * 3 / 2</code> 结束.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">200</span>, y = <span class=\"number\">200</span>,</div><div class=\"line\">\tr = <span class=\"number\">100</span>,</div><div class=\"line\">\tstep = <span class=\"built_in\">Math</span>.PI * <span class=\"number\">2</span> / <span class=\"number\">3</span>,     <span class=\"comment\">// 120 度一个区域</span></div><div class=\"line\">\tstart = -<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>,       <span class=\"comment\">// 起始角度</span></div><div class=\"line\">\tcolors = [ <span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span> ];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</div><div class=\"line\">\tctx.beginPath();</div><div class=\"line\">\tctx.moveTo( x, y );</div><div class=\"line\">\tctx.fillStyle = colors[ i ];</div><div class=\"line\">\tctx.arc( x, y, r, start, start+=step );</div><div class=\"line\">\tctx.fill();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"js高级与面向对象之函数","date":"2016-07-22T11:40:39.000Z","_content":"\n## 函数声明\n\n```js\nfunction func(){\n    //函数体\n}\n//2.函数表达式\nvar func1 = function(){\n\n}\n//3.通过Function构造函数来创建\nvar func2 = new Function();\n```\n<!-- more -->\n\n### 函数的name属性\n\n```js\nfunction Person(){\n\n}\nvar p = new Person();\n//p.constructor\nconsole.log(typeof p);  //object\nconsole.log(p.constructor.toString());\nconsole.log(Person.name);\nconsole.log(p.constructor.name);\n```\n\n函数都会有一个 `name` 属性，所以我们可以通过对象先找到构造函数，然后直接访问构造函数的 `name` ，就拿到了具体类型\n\n## Function的使用\n\n### 语法:\n\n```js\n//Function函数所有的参数全都是字符串\n//Function函数的作用就是将所有的参数组合起来，变成一个函数\n//1、如果只传一个参数，那么这个函数必然是函数体\n//2、如果传多个参数，那么最后一个参数表示函数体，前面的参数代表将要创建的函数的参数\n//3、如果不传参数，表示创建一个空函数\nnew Function(arg1, arg2, arg3, ..., argN, body);\n```\n\n### 创建一个打印一句话的函数\n\n```js\n//传统的方式\nfunction foo(){\n    console.log(\"你好\");\n}\n\n//使用Function\nvar func = new Function(\"console.log('你好');\");\n```\n\n### 创建一个空函数\n\n```js\n//传统的方式\nfunction foo(){}\n\n//Function\nvar func = new Function();\n```\n\n### 创建一个有参数的函数\n\n```js\n//传统的方式\nfunction foo(num){\n    console.log(num);\n}\n\n//Function\n\nvar func = new Function(){\"num\", \"console.log(num);\"};\n```\n\n## 静态成员与实例成员的概念\n\n静态成员和实例成员这两个概念其实也是从面相对象的编程语言中引入的，对应到 `JavaScript` 中的理解为：\n\n### 静态成员\n\n* 静态成员是指静态属性和静态方法，所谓静态，就是有构造函数提供的。\n\n### 实例成员\n\n* 实例成员是值实例属性和实例方法，所谓实例，就是由构造函数创建出来的对象。\n\n### 举例说明\n\n```js\nfunction Person(){\n    this.name = \"zs\",\n    this.sayHello = function(){\n        console.log(\"Hello World\");\n    }\n}\n\n//下面这个sayHi方法就是构造函数自己的方法，也就是静态方法\nPerson.sayHi = function(){\n    console.log(\"I'm a Person\");\n}\n\n//原型属性属于构造函数，所以原型属性是静态属性\nPerson.prototype = {};\nvar p = new Person();\n\n//这里的name是构造函数创建出来的实例对象的属性，所以是实例属性\np.name = \"李四\";\n\n\n//这里的sayHello也是构造函数创建出来的实例对象的方法，所以是实例方法\np.sayHello();\n```\n提示：\n\n一般工具型方法都有静态成员提供, 一般与实例对象有关的方法由实例成员表示.\n\n工具方法：比如 `jQuery.Ajax()` 、 `jQuery.trim()` 、 `jQuery.Each()`","source":"_posts/javascript-Function.md","raw":"---\ntitle: js高级与面向对象之函数\ndate: 2016-07-22 19:40:39\ntags:\n\t- Function\ncategories: javascript\n---\n\n## 函数声明\n\n```js\nfunction func(){\n    //函数体\n}\n//2.函数表达式\nvar func1 = function(){\n\n}\n//3.通过Function构造函数来创建\nvar func2 = new Function();\n```\n<!-- more -->\n\n### 函数的name属性\n\n```js\nfunction Person(){\n\n}\nvar p = new Person();\n//p.constructor\nconsole.log(typeof p);  //object\nconsole.log(p.constructor.toString());\nconsole.log(Person.name);\nconsole.log(p.constructor.name);\n```\n\n函数都会有一个 `name` 属性，所以我们可以通过对象先找到构造函数，然后直接访问构造函数的 `name` ，就拿到了具体类型\n\n## Function的使用\n\n### 语法:\n\n```js\n//Function函数所有的参数全都是字符串\n//Function函数的作用就是将所有的参数组合起来，变成一个函数\n//1、如果只传一个参数，那么这个函数必然是函数体\n//2、如果传多个参数，那么最后一个参数表示函数体，前面的参数代表将要创建的函数的参数\n//3、如果不传参数，表示创建一个空函数\nnew Function(arg1, arg2, arg3, ..., argN, body);\n```\n\n### 创建一个打印一句话的函数\n\n```js\n//传统的方式\nfunction foo(){\n    console.log(\"你好\");\n}\n\n//使用Function\nvar func = new Function(\"console.log('你好');\");\n```\n\n### 创建一个空函数\n\n```js\n//传统的方式\nfunction foo(){}\n\n//Function\nvar func = new Function();\n```\n\n### 创建一个有参数的函数\n\n```js\n//传统的方式\nfunction foo(num){\n    console.log(num);\n}\n\n//Function\n\nvar func = new Function(){\"num\", \"console.log(num);\"};\n```\n\n## 静态成员与实例成员的概念\n\n静态成员和实例成员这两个概念其实也是从面相对象的编程语言中引入的，对应到 `JavaScript` 中的理解为：\n\n### 静态成员\n\n* 静态成员是指静态属性和静态方法，所谓静态，就是有构造函数提供的。\n\n### 实例成员\n\n* 实例成员是值实例属性和实例方法，所谓实例，就是由构造函数创建出来的对象。\n\n### 举例说明\n\n```js\nfunction Person(){\n    this.name = \"zs\",\n    this.sayHello = function(){\n        console.log(\"Hello World\");\n    }\n}\n\n//下面这个sayHi方法就是构造函数自己的方法，也就是静态方法\nPerson.sayHi = function(){\n    console.log(\"I'm a Person\");\n}\n\n//原型属性属于构造函数，所以原型属性是静态属性\nPerson.prototype = {};\nvar p = new Person();\n\n//这里的name是构造函数创建出来的实例对象的属性，所以是实例属性\np.name = \"李四\";\n\n\n//这里的sayHello也是构造函数创建出来的实例对象的方法，所以是实例方法\np.sayHello();\n```\n提示：\n\n一般工具型方法都有静态成员提供, 一般与实例对象有关的方法由实例成员表示.\n\n工具方法：比如 `jQuery.Ajax()` 、 `jQuery.trim()` 、 `jQuery.Each()`","slug":"javascript-Function","published":1,"updated":"2016-11-24T01:28:37.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprih00089wg7e9n5c0z1","content":"<h2 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//2.函数表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> func1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//3.通过Function构造函数来创建</span></div><div class=\"line\"><span class=\"keyword\">var</span> func2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>();</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"函数的name属性\"><a href=\"#函数的name属性\" class=\"headerlink\" title=\"函数的name属性\"></a>函数的name属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"comment\">//p.constructor</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> p);  <span class=\"comment\">//object</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.constructor.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.name);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.constructor.name);</div></pre></td></tr></table></figure>\n<p>函数都会有一个 <code>name</code> 属性，所以我们可以通过对象先找到构造函数，然后直接访问构造函数的 <code>name</code> ，就拿到了具体类型</p>\n<h2 id=\"Function的使用\"><a href=\"#Function的使用\" class=\"headerlink\" title=\"Function的使用\"></a>Function的使用</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法:\"></a>语法:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Function函数所有的参数全都是字符串</span></div><div class=\"line\"><span class=\"comment\">//Function函数的作用就是将所有的参数组合起来，变成一个函数</span></div><div class=\"line\"><span class=\"comment\">//1、如果只传一个参数，那么这个函数必然是函数体</span></div><div class=\"line\"><span class=\"comment\">//2、如果传多个参数，那么最后一个参数表示函数体，前面的参数代表将要创建的函数的参数</span></div><div class=\"line\"><span class=\"comment\">//3、如果不传参数，表示创建一个空函数</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(arg1, arg2, arg3, ..., argN, body);</div></pre></td></tr></table></figure>\n<h3 id=\"创建一个打印一句话的函数\"><a href=\"#创建一个打印一句话的函数\" class=\"headerlink\" title=\"创建一个打印一句话的函数\"></a>创建一个打印一句话的函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传统的方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用Function</span></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"console.log('你好');\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"创建一个空函数\"><a href=\"#创建一个空函数\" class=\"headerlink\" title=\"创建一个空函数\"></a>创建一个空函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传统的方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Function</span></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>();</div></pre></td></tr></table></figure>\n<h3 id=\"创建一个有参数的函数\"><a href=\"#创建一个有参数的函数\" class=\"headerlink\" title=\"创建一个有参数的函数\"></a>创建一个有参数的函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传统的方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()&#123;<span class=\"string\">\"num\"</span>, <span class=\"string\">\"console.log(num);\"</span>&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"静态成员与实例成员的概念\"><a href=\"#静态成员与实例成员的概念\" class=\"headerlink\" title=\"静态成员与实例成员的概念\"></a>静态成员与实例成员的概念</h2><p>静态成员和实例成员这两个概念其实也是从面相对象的编程语言中引入的，对应到 <code>JavaScript</code> 中的理解为：</p>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><ul>\n<li>静态成员是指静态属性和静态方法，所谓静态，就是有构造函数提供的。</li>\n</ul>\n<h3 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h3><ul>\n<li>实例成员是值实例属性和实例方法，所谓实例，就是由构造函数创建出来的对象。</li>\n</ul>\n<h3 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"zs\"</span>,</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面这个sayHi方法就是构造函数自己的方法，也就是静态方法</span></div><div class=\"line\">Person.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"I'm a Person\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//原型属性属于构造函数，所以原型属性是静态属性</span></div><div class=\"line\">Person.prototype = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里的name是构造函数创建出来的实例对象的属性，所以是实例属性</span></div><div class=\"line\">p.name = <span class=\"string\">\"李四\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里的sayHello也是构造函数创建出来的实例对象的方法，所以是实例方法</span></div><div class=\"line\">p.sayHello();</div></pre></td></tr></table></figure>\n<p>提示：</p>\n<p>一般工具型方法都有静态成员提供, 一般与实例对象有关的方法由实例成员表示.</p>\n<p>工具方法：比如 <code>jQuery.Ajax()</code> 、 <code>jQuery.trim()</code> 、 <code>jQuery.Each()</code></p>\n","excerpt":"<h2 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//2.函数表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> func1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//3.通过Function构造函数来创建</span></div><div class=\"line\"><span class=\"keyword\">var</span> func2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>();</div></pre></td></tr></table></figure>","more":"<h3 id=\"函数的name属性\"><a href=\"#函数的name属性\" class=\"headerlink\" title=\"函数的name属性\"></a>函数的name属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"comment\">//p.constructor</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> p);  <span class=\"comment\">//object</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.constructor.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.name);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.constructor.name);</div></pre></td></tr></table></figure>\n<p>函数都会有一个 <code>name</code> 属性，所以我们可以通过对象先找到构造函数，然后直接访问构造函数的 <code>name</code> ，就拿到了具体类型</p>\n<h2 id=\"Function的使用\"><a href=\"#Function的使用\" class=\"headerlink\" title=\"Function的使用\"></a>Function的使用</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法:\"></a>语法:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Function函数所有的参数全都是字符串</span></div><div class=\"line\"><span class=\"comment\">//Function函数的作用就是将所有的参数组合起来，变成一个函数</span></div><div class=\"line\"><span class=\"comment\">//1、如果只传一个参数，那么这个函数必然是函数体</span></div><div class=\"line\"><span class=\"comment\">//2、如果传多个参数，那么最后一个参数表示函数体，前面的参数代表将要创建的函数的参数</span></div><div class=\"line\"><span class=\"comment\">//3、如果不传参数，表示创建一个空函数</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(arg1, arg2, arg3, ..., argN, body);</div></pre></td></tr></table></figure>\n<h3 id=\"创建一个打印一句话的函数\"><a href=\"#创建一个打印一句话的函数\" class=\"headerlink\" title=\"创建一个打印一句话的函数\"></a>创建一个打印一句话的函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传统的方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用Function</span></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"console.log('你好');\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"创建一个空函数\"><a href=\"#创建一个空函数\" class=\"headerlink\" title=\"创建一个空函数\"></a>创建一个空函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传统的方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Function</span></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>();</div></pre></td></tr></table></figure>\n<h3 id=\"创建一个有参数的函数\"><a href=\"#创建一个有参数的函数\" class=\"headerlink\" title=\"创建一个有参数的函数\"></a>创建一个有参数的函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//传统的方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()&#123;<span class=\"string\">\"num\"</span>, <span class=\"string\">\"console.log(num);\"</span>&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"静态成员与实例成员的概念\"><a href=\"#静态成员与实例成员的概念\" class=\"headerlink\" title=\"静态成员与实例成员的概念\"></a>静态成员与实例成员的概念</h2><p>静态成员和实例成员这两个概念其实也是从面相对象的编程语言中引入的，对应到 <code>JavaScript</code> 中的理解为：</p>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><ul>\n<li>静态成员是指静态属性和静态方法，所谓静态，就是有构造函数提供的。</li>\n</ul>\n<h3 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h3><ul>\n<li>实例成员是值实例属性和实例方法，所谓实例，就是由构造函数创建出来的对象。</li>\n</ul>\n<h3 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"zs\"</span>,</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面这个sayHi方法就是构造函数自己的方法，也就是静态方法</span></div><div class=\"line\">Person.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"I'm a Person\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//原型属性属于构造函数，所以原型属性是静态属性</span></div><div class=\"line\">Person.prototype = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里的name是构造函数创建出来的实例对象的属性，所以是实例属性</span></div><div class=\"line\">p.name = <span class=\"string\">\"李四\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里的sayHello也是构造函数创建出来的实例对象的方法，所以是实例方法</span></div><div class=\"line\">p.sayHello();</div></pre></td></tr></table></figure>\n<p>提示：</p>\n<p>一般工具型方法都有静态成员提供, 一般与实例对象有关的方法由实例成员表示.</p>\n<p>工具方法：比如 <code>jQuery.Ajax()</code> 、 <code>jQuery.trim()</code> 、 <code>jQuery.Each()</code></p>"},{"title":"Hexo 最常用的几个命令","date":"2015-08-28T10:29:33.000Z","_content":"Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:\n\n<!-- more -->\n\n## hexo s\n\n```bash\n$ hexo s\n```\n\n### 启动本地服务器 ###\n用于预览主题。默认地址： http://localhost:4000/\n\t\n* hexo s 是 hexo server 的缩写，命令效果一致；\n* 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；\n* 对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。\n\t\n## hexo new\n\n\n``` bash\n$ hexo new \"学习笔记  六\"\n```\n\n### 新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。\n\t\n* 文章标题可以在对应 md 文件里改，新建时标题可以写的简单些，纯字母一般不加引号。\n\n## hexo d\n\n```bash\n$ hexo d\n```\n\n### 自动生成网站静态文件，并部署到设定的仓库。\n\n* hexo d 是 hexo deploy 的缩写，命令效果一致。\n\n## hexo clean\n\n``` bash\n$ hexo clean\n```\n\n### 清除缓存文件 db.json 和已生成的静态文件 public 。\n\t\n* 网站显示异常时可以执行这条命令试试。\n\n## hexo g\n\n``` bash\n$ hexo g\n```\n\n### 生成网站静态文件到默认设置的 public 文件夹。\n\t\n* 便于查看网站生成的静态文件或者手动部署网站；\n* 如果使用自动部署，不需要先执行该命令；\n* hexo g 是 hexo generate 的缩写，命令效果一致。\n\n## hexo new page\n\n``` bash\n$ hexo new page aboutme\n```\n\n### 新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/\n\n* 标题可以为中文，但一般习惯用英文；\n* 页面标题和文章一样可以随意修改；\n* 页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。","source":"_posts/hello-world.md","raw":"---\ntitle: Hexo 最常用的几个命令\ndate: 2015-08-28 18:29:33\ntags: \n\t- hexo\n\t- 梦魇小栈\n\t- 梦魇\n\t- houyi1121\ncategories: Hexo\n---\nHexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:\n\n<!-- more -->\n\n## hexo s\n\n```bash\n$ hexo s\n```\n\n### 启动本地服务器 ###\n用于预览主题。默认地址： http://localhost:4000/\n\t\n* hexo s 是 hexo server 的缩写，命令效果一致；\n* 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；\n* 对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。\n\t\n## hexo new\n\n\n``` bash\n$ hexo new \"学习笔记  六\"\n```\n\n### 新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。\n\t\n* 文章标题可以在对应 md 文件里改，新建时标题可以写的简单些，纯字母一般不加引号。\n\n## hexo d\n\n```bash\n$ hexo d\n```\n\n### 自动生成网站静态文件，并部署到设定的仓库。\n\n* hexo d 是 hexo deploy 的缩写，命令效果一致。\n\n## hexo clean\n\n``` bash\n$ hexo clean\n```\n\n### 清除缓存文件 db.json 和已生成的静态文件 public 。\n\t\n* 网站显示异常时可以执行这条命令试试。\n\n## hexo g\n\n``` bash\n$ hexo g\n```\n\n### 生成网站静态文件到默认设置的 public 文件夹。\n\t\n* 便于查看网站生成的静态文件或者手动部署网站；\n* 如果使用自动部署，不需要先执行该命令；\n* hexo g 是 hexo generate 的缩写，命令效果一致。\n\n## hexo new page\n\n``` bash\n$ hexo new page aboutme\n```\n\n### 新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/\n\n* 标题可以为中文，但一般习惯用英文；\n* 页面标题和文章一样可以随意修改；\n* 页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。","slug":"hello-world","published":1,"updated":"2016-11-24T01:16:30.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hpriq000a9wg7w8qz969v","content":"<p>Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:</p>\n<a id=\"more\"></a>\n<h2 id=\"hexo-s\"><a href=\"#hexo-s\" class=\"headerlink\" title=\"hexo s\"></a>hexo s</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure>\n<h3 id=\"启动本地服务器\"><a href=\"#启动本地服务器\" class=\"headerlink\" title=\"启动本地服务器\"></a>启动本地服务器</h3><p>用于预览主题。默认地址： <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a></p>\n<ul>\n<li>hexo s 是 hexo server 的缩写，命令效果一致；</li>\n<li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li>\n<li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</li>\n</ul>\n<h2 id=\"hexo-new\"><a href=\"#hexo-new\" class=\"headerlink\" title=\"hexo new\"></a>hexo new</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"学习笔记  六\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"新建一篇标题为-学习笔记-六-的文章，因为标题里有空格，所以加上了引号。\"><a href=\"#新建一篇标题为-学习笔记-六-的文章，因为标题里有空格，所以加上了引号。\" class=\"headerlink\" title=\"新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。\"></a>新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。</h3><ul>\n<li>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些，纯字母一般不加引号。</li>\n</ul>\n<h2 id=\"hexo-d\"><a href=\"#hexo-d\" class=\"headerlink\" title=\"hexo d\"></a>hexo d</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure>\n<h3 id=\"自动生成网站静态文件，并部署到设定的仓库。\"><a href=\"#自动生成网站静态文件，并部署到设定的仓库。\" class=\"headerlink\" title=\"自动生成网站静态文件，并部署到设定的仓库。\"></a>自动生成网站静态文件，并部署到设定的仓库。</h3><ul>\n<li>hexo d 是 hexo deploy 的缩写，命令效果一致。</li>\n</ul>\n<h2 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure>\n<h3 id=\"清除缓存文件-db-json-和已生成的静态文件-public-。\"><a href=\"#清除缓存文件-db-json-和已生成的静态文件-public-。\" class=\"headerlink\" title=\"清除缓存文件 db.json 和已生成的静态文件 public 。\"></a>清除缓存文件 db.json 和已生成的静态文件 public 。</h3><ul>\n<li>网站显示异常时可以执行这条命令试试。</li>\n</ul>\n<h2 id=\"hexo-g\"><a href=\"#hexo-g\" class=\"headerlink\" title=\"hexo g\"></a>hexo g</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div></pre></td></tr></table></figure>\n<h3 id=\"生成网站静态文件到默认设置的-public-文件夹。\"><a href=\"#生成网站静态文件到默认设置的-public-文件夹。\" class=\"headerlink\" title=\"生成网站静态文件到默认设置的 public 文件夹。\"></a>生成网站静态文件到默认设置的 public 文件夹。</h3><ul>\n<li>便于查看网站生成的静态文件或者手动部署网站；</li>\n<li>如果使用自动部署，不需要先执行该命令；</li>\n<li>hexo g 是 hexo generate 的缩写，命令效果一致。</li>\n</ul>\n<h2 id=\"hexo-new-page\"><a href=\"#hexo-new-page\" class=\"headerlink\" title=\"hexo new page\"></a>hexo new page</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page aboutme</div></pre></td></tr></table></figure>\n<h3 id=\"新建一个标题为-aboutme-的页面，默认链接地址为-主页地址-aboutme\"><a href=\"#新建一个标题为-aboutme-的页面，默认链接地址为-主页地址-aboutme\" class=\"headerlink\" title=\"新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/\"></a>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/</h3><ul>\n<li>标题可以为中文，但一般习惯用英文；</li>\n<li>页面标题和文章一样可以随意修改；</li>\n<li>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</li>\n</ul>\n","excerpt":"<p>Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个:</p>","more":"<h2 id=\"hexo-s\"><a href=\"#hexo-s\" class=\"headerlink\" title=\"hexo s\"></a>hexo s</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure>\n<h3 id=\"启动本地服务器\"><a href=\"#启动本地服务器\" class=\"headerlink\" title=\"启动本地服务器\"></a>启动本地服务器</h3><p>用于预览主题。默认地址： <a href=\"http://localhost:4000/\">http://localhost:4000/</a></p>\n<ul>\n<li>hexo s 是 hexo server 的缩写，命令效果一致；</li>\n<li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li>\n<li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</li>\n</ul>\n<h2 id=\"hexo-new\"><a href=\"#hexo-new\" class=\"headerlink\" title=\"hexo new\"></a>hexo new</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"学习笔记  六\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"新建一篇标题为-学习笔记-六-的文章，因为标题里有空格，所以加上了引号。\"><a href=\"#新建一篇标题为-学习笔记-六-的文章，因为标题里有空格，所以加上了引号。\" class=\"headerlink\" title=\"新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。\"></a>新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。</h3><ul>\n<li>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些，纯字母一般不加引号。</li>\n</ul>\n<h2 id=\"hexo-d\"><a href=\"#hexo-d\" class=\"headerlink\" title=\"hexo d\"></a>hexo d</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure>\n<h3 id=\"自动生成网站静态文件，并部署到设定的仓库。\"><a href=\"#自动生成网站静态文件，并部署到设定的仓库。\" class=\"headerlink\" title=\"自动生成网站静态文件，并部署到设定的仓库。\"></a>自动生成网站静态文件，并部署到设定的仓库。</h3><ul>\n<li>hexo d 是 hexo deploy 的缩写，命令效果一致。</li>\n</ul>\n<h2 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure>\n<h3 id=\"清除缓存文件-db-json-和已生成的静态文件-public-。\"><a href=\"#清除缓存文件-db-json-和已生成的静态文件-public-。\" class=\"headerlink\" title=\"清除缓存文件 db.json 和已生成的静态文件 public 。\"></a>清除缓存文件 db.json 和已生成的静态文件 public 。</h3><ul>\n<li>网站显示异常时可以执行这条命令试试。</li>\n</ul>\n<h2 id=\"hexo-g\"><a href=\"#hexo-g\" class=\"headerlink\" title=\"hexo g\"></a>hexo g</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div></pre></td></tr></table></figure>\n<h3 id=\"生成网站静态文件到默认设置的-public-文件夹。\"><a href=\"#生成网站静态文件到默认设置的-public-文件夹。\" class=\"headerlink\" title=\"生成网站静态文件到默认设置的 public 文件夹。\"></a>生成网站静态文件到默认设置的 public 文件夹。</h3><ul>\n<li>便于查看网站生成的静态文件或者手动部署网站；</li>\n<li>如果使用自动部署，不需要先执行该命令；</li>\n<li>hexo g 是 hexo generate 的缩写，命令效果一致。</li>\n</ul>\n<h2 id=\"hexo-new-page\"><a href=\"#hexo-new-page\" class=\"headerlink\" title=\"hexo new page\"></a>hexo new page</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page aboutme</div></pre></td></tr></table></figure>\n<h3 id=\"新建一个标题为-aboutme-的页面，默认链接地址为-主页地址-aboutme\"><a href=\"#新建一个标题为-aboutme-的页面，默认链接地址为-主页地址-aboutme\" class=\"headerlink\" title=\"新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/\"></a>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/</h3><ul>\n<li>标题可以为中文，但一般习惯用英文；</li>\n<li>页面标题和文章一样可以随意修改；</li>\n<li>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</li>\n</ul>"},{"title":"js高级与面向对象之构造函数","date":"2016-05-20T05:39:33.000Z","_content":"\n首先，什么是_声明_、_初始化_、_赋值_、_定义_?\n* 声明：告诉解析器有这个东西存在\n* 初始化：就理解为第一次赋值\n* 定义：不需要去理解\n* 赋值：改变变量的值，就是赋值\n\n<!-- more -->\n\n## 什么是构造函数？\n\n* 构造函数其实就是一个函数，只是用途跟普通函数不太一样\n* 构造函数一般用于初始化对象\n\n## 构造函数的特点\n\n* 首字母大写\n* 构造函数一般情况下和 `new` 关键字结合使用\n* 构造函数不需要写返回值\n\n构造函数的返回值默认为创建出来的对象，如果手动的去设置返回值\n\n* 设置返回值为基本类型，不会对默认返回值有任何的影响\n* 设置返回值为对象类型，就会替换掉默认的返回值\n\n## 构造函数的执行顺序\n\n* 使用 `new` 关键字创建对象\n* 调用构造函数，并且将构造函数内的 `this` 赋值为新创建的对象\n* 在构造函数内部，使用 `this` 为新创建出来的对象新增成员\n* 默认的返回新创建的这个对象\n\n返回值代码\n\n```js\nfunction Person(){\n    this.name = \"范冰冰\";\n    //初始化对象的代码\n\t//return \"范冰冰\";\n\t//return 123;\n\t//return true;\n\t//return null;\n    return {};\n}\nvar p = new Person();\nconsole.log(p);\n```\n自定义构造函数代码\n\n```js\n//自定义构造函数，就是自己创建的构造函数s\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.kanren = function(){\n        console.log(\"上课再闲聊，我就砍死你\");\n    }\n}\n\nvar p = new Person(\"大飞\", 50);\nconsole.log(p);\np.kanren();\n\nvar p1 = new Person(\"陈浩南\", 30);\nconsole.log(p1);\np1.kanren();\n```\n构造函数补充\n\n```js\n//因为构造函数也是函数\n//所以构造函数可以使用函数的使用方式\n//但是如果把构造函数当做普通函数来使用的话\n//该构造函数内的this就指向了window对象\n//返回值为undefined\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.kanren = function(){\n        console.log(\"上课再闲聊，我就砍死你\");\n    }\n}\n\nvar p = Person(\"谢文东\", 30);\nconsole.log(p);\nwindow.kanren();\n```\n\n## 传统构造函数存在的问题\n\n如果在构造函数内部声明函数，并为新创建的对象方法赋值的话每次创建对象，调用构造函数，都会新创建一个函数出来，每个对象独占一份函数 但是，所有的对象中的方法的代码是一模一样的，没有必要每人一份所以就造成了资源的浪费\n\n### 解决方案一\n\n将构造函数内部给对象的方法赋值的时候的函数声明提出来放到构造函外面，这样，在每次创建对象的时候，就不会再重新声明函数而是直接拿外面的函数地址进行赋值，所以，这样子创建出来的所有的对象都会共享构造函数外面的声明的这个函数\n\n### 解决方案一存在的问题\n\n1. 如果方法过多，会造成全局变量污染\n2. 代码结构会变得混乱不堪，不利于维护\n\n```js\n//解决方案一存在的问题\nfunction eat(){\n    console.log(\"吃个红烧鸡屁股\");\n}\n\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.eat = eat;\n//\t\tthis.eat = function (){\n//\t\tconsole.log(\"吃个红烧鸡屁股\");\n//     }\n}\n\nvar p = new Person(\"唐伯虎\",500);\np.eat();\nvar p1 = new Person(\"李二狗\",81);\np1.eat();\n\nconsole.log(p.eat == p1.eat);\n```\n\n这个问题我们可以通过原型来处理","source":"_posts/javascript-constructor.md","raw":"---\ntitle: js高级与面向对象之构造函数\ndate: 2016-05-20 13:39:33\ntags: \n\t- javascript\n\t- js构造函数\ncategories: javascript\n---\n\n首先，什么是_声明_、_初始化_、_赋值_、_定义_?\n* 声明：告诉解析器有这个东西存在\n* 初始化：就理解为第一次赋值\n* 定义：不需要去理解\n* 赋值：改变变量的值，就是赋值\n\n<!-- more -->\n\n## 什么是构造函数？\n\n* 构造函数其实就是一个函数，只是用途跟普通函数不太一样\n* 构造函数一般用于初始化对象\n\n## 构造函数的特点\n\n* 首字母大写\n* 构造函数一般情况下和 `new` 关键字结合使用\n* 构造函数不需要写返回值\n\n构造函数的返回值默认为创建出来的对象，如果手动的去设置返回值\n\n* 设置返回值为基本类型，不会对默认返回值有任何的影响\n* 设置返回值为对象类型，就会替换掉默认的返回值\n\n## 构造函数的执行顺序\n\n* 使用 `new` 关键字创建对象\n* 调用构造函数，并且将构造函数内的 `this` 赋值为新创建的对象\n* 在构造函数内部，使用 `this` 为新创建出来的对象新增成员\n* 默认的返回新创建的这个对象\n\n返回值代码\n\n```js\nfunction Person(){\n    this.name = \"范冰冰\";\n    //初始化对象的代码\n\t//return \"范冰冰\";\n\t//return 123;\n\t//return true;\n\t//return null;\n    return {};\n}\nvar p = new Person();\nconsole.log(p);\n```\n自定义构造函数代码\n\n```js\n//自定义构造函数，就是自己创建的构造函数s\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.kanren = function(){\n        console.log(\"上课再闲聊，我就砍死你\");\n    }\n}\n\nvar p = new Person(\"大飞\", 50);\nconsole.log(p);\np.kanren();\n\nvar p1 = new Person(\"陈浩南\", 30);\nconsole.log(p1);\np1.kanren();\n```\n构造函数补充\n\n```js\n//因为构造函数也是函数\n//所以构造函数可以使用函数的使用方式\n//但是如果把构造函数当做普通函数来使用的话\n//该构造函数内的this就指向了window对象\n//返回值为undefined\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.kanren = function(){\n        console.log(\"上课再闲聊，我就砍死你\");\n    }\n}\n\nvar p = Person(\"谢文东\", 30);\nconsole.log(p);\nwindow.kanren();\n```\n\n## 传统构造函数存在的问题\n\n如果在构造函数内部声明函数，并为新创建的对象方法赋值的话每次创建对象，调用构造函数，都会新创建一个函数出来，每个对象独占一份函数 但是，所有的对象中的方法的代码是一模一样的，没有必要每人一份所以就造成了资源的浪费\n\n### 解决方案一\n\n将构造函数内部给对象的方法赋值的时候的函数声明提出来放到构造函外面，这样，在每次创建对象的时候，就不会再重新声明函数而是直接拿外面的函数地址进行赋值，所以，这样子创建出来的所有的对象都会共享构造函数外面的声明的这个函数\n\n### 解决方案一存在的问题\n\n1. 如果方法过多，会造成全局变量污染\n2. 代码结构会变得混乱不堪，不利于维护\n\n```js\n//解决方案一存在的问题\nfunction eat(){\n    console.log(\"吃个红烧鸡屁股\");\n}\n\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n    this.eat = eat;\n//\t\tthis.eat = function (){\n//\t\tconsole.log(\"吃个红烧鸡屁股\");\n//     }\n}\n\nvar p = new Person(\"唐伯虎\",500);\np.eat();\nvar p1 = new Person(\"李二狗\",81);\np1.eat();\n\nconsole.log(p.eat == p1.eat);\n```\n\n这个问题我们可以通过原型来处理","slug":"javascript-constructor","published":1,"updated":"2016-11-24T01:25:58.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hpriw000e9wg7ygzb2slg","content":"<p>首先，什么是<em>声明</em>、<em>初始化</em>、<em>赋值</em>、<em>定义</em>?</p>\n<ul>\n<li>声明：告诉解析器有这个东西存在</li>\n<li>初始化：就理解为第一次赋值</li>\n<li>定义：不需要去理解</li>\n<li>赋值：改变变量的值，就是赋值</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"什么是构造函数？\"><a href=\"#什么是构造函数？\" class=\"headerlink\" title=\"什么是构造函数？\"></a>什么是构造函数？</h2><ul>\n<li>构造函数其实就是一个函数，只是用途跟普通函数不太一样</li>\n<li>构造函数一般用于初始化对象</li>\n</ul>\n<h2 id=\"构造函数的特点\"><a href=\"#构造函数的特点\" class=\"headerlink\" title=\"构造函数的特点\"></a>构造函数的特点</h2><ul>\n<li>首字母大写</li>\n<li>构造函数一般情况下和 <code>new</code> 关键字结合使用</li>\n<li>构造函数不需要写返回值</li>\n</ul>\n<p>构造函数的返回值默认为创建出来的对象，如果手动的去设置返回值</p>\n<ul>\n<li>设置返回值为基本类型，不会对默认返回值有任何的影响</li>\n<li>设置返回值为对象类型，就会替换掉默认的返回值</li>\n</ul>\n<h2 id=\"构造函数的执行顺序\"><a href=\"#构造函数的执行顺序\" class=\"headerlink\" title=\"构造函数的执行顺序\"></a>构造函数的执行顺序</h2><ul>\n<li>使用 <code>new</code> 关键字创建对象</li>\n<li>调用构造函数，并且将构造函数内的 <code>this</code> 赋值为新创建的对象</li>\n<li>在构造函数内部，使用 <code>this</code> 为新创建出来的对象新增成员</li>\n<li>默认的返回新创建的这个对象</li>\n</ul>\n<p>返回值代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"范冰冰\"</span>;</div><div class=\"line\">    <span class=\"comment\">//初始化对象的代码</span></div><div class=\"line\">\t<span class=\"comment\">//return \"范冰冰\";</span></div><div class=\"line\">\t<span class=\"comment\">//return 123;</span></div><div class=\"line\">\t<span class=\"comment\">//return true;</span></div><div class=\"line\">\t<span class=\"comment\">//return null;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p);</div></pre></td></tr></table></figure>\n<p>自定义构造函数代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//自定义构造函数，就是自己创建的构造函数s</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.kanren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"上课再闲聊，我就砍死你\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"大飞\"</span>, <span class=\"number\">50</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p);</div><div class=\"line\">p.kanren();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"陈浩南\"</span>, <span class=\"number\">30</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1);</div><div class=\"line\">p1.kanren();</div></pre></td></tr></table></figure>\n<p>构造函数补充</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//因为构造函数也是函数</span></div><div class=\"line\"><span class=\"comment\">//所以构造函数可以使用函数的使用方式</span></div><div class=\"line\"><span class=\"comment\">//但是如果把构造函数当做普通函数来使用的话</span></div><div class=\"line\"><span class=\"comment\">//该构造函数内的this就指向了window对象</span></div><div class=\"line\"><span class=\"comment\">//返回值为undefined</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.kanren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"上课再闲聊，我就砍死你\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = Person(<span class=\"string\">\"谢文东\"</span>, <span class=\"number\">30</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p);</div><div class=\"line\"><span class=\"built_in\">window</span>.kanren();</div></pre></td></tr></table></figure>\n<h2 id=\"传统构造函数存在的问题\"><a href=\"#传统构造函数存在的问题\" class=\"headerlink\" title=\"传统构造函数存在的问题\"></a>传统构造函数存在的问题</h2><p>如果在构造函数内部声明函数，并为新创建的对象方法赋值的话每次创建对象，调用构造函数，都会新创建一个函数出来，每个对象独占一份函数 但是，所有的对象中的方法的代码是一模一样的，没有必要每人一份所以就造成了资源的浪费</p>\n<h3 id=\"解决方案一\"><a href=\"#解决方案一\" class=\"headerlink\" title=\"解决方案一\"></a>解决方案一</h3><p>将构造函数内部给对象的方法赋值的时候的函数声明提出来放到构造函外面，这样，在每次创建对象的时候，就不会再重新声明函数而是直接拿外面的函数地址进行赋值，所以，这样子创建出来的所有的对象都会共享构造函数外面的声明的这个函数</p>\n<h3 id=\"解决方案一存在的问题\"><a href=\"#解决方案一存在的问题\" class=\"headerlink\" title=\"解决方案一存在的问题\"></a>解决方案一存在的问题</h3><ol>\n<li>如果方法过多，会造成全局变量污染</li>\n<li>代码结构会变得混乱不堪，不利于维护</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//解决方案一存在的问题</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"吃个红烧鸡屁股\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eat = eat;</div><div class=\"line\"><span class=\"comment\">//\t\tthis.eat = function ()&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\tconsole.log(\"吃个红烧鸡屁股\");</span></div><div class=\"line\"><span class=\"comment\">//     &#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"唐伯虎\"</span>,<span class=\"number\">500</span>);</div><div class=\"line\">p.eat();</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"李二狗\"</span>,<span class=\"number\">81</span>);</div><div class=\"line\">p1.eat();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.eat == p1.eat);</div></pre></td></tr></table></figure>\n<p>这个问题我们可以通过原型来处理</p>\n","excerpt":"<p>首先，什么是<em>声明</em>、<em>初始化</em>、<em>赋值</em>、<em>定义</em>?</p>\n<ul>\n<li>声明：告诉解析器有这个东西存在</li>\n<li>初始化：就理解为第一次赋值</li>\n<li>定义：不需要去理解</li>\n<li>赋值：改变变量的值，就是赋值</li>\n</ul>","more":"<h2 id=\"什么是构造函数？\"><a href=\"#什么是构造函数？\" class=\"headerlink\" title=\"什么是构造函数？\"></a>什么是构造函数？</h2><ul>\n<li>构造函数其实就是一个函数，只是用途跟普通函数不太一样</li>\n<li>构造函数一般用于初始化对象</li>\n</ul>\n<h2 id=\"构造函数的特点\"><a href=\"#构造函数的特点\" class=\"headerlink\" title=\"构造函数的特点\"></a>构造函数的特点</h2><ul>\n<li>首字母大写</li>\n<li>构造函数一般情况下和 <code>new</code> 关键字结合使用</li>\n<li>构造函数不需要写返回值</li>\n</ul>\n<p>构造函数的返回值默认为创建出来的对象，如果手动的去设置返回值</p>\n<ul>\n<li>设置返回值为基本类型，不会对默认返回值有任何的影响</li>\n<li>设置返回值为对象类型，就会替换掉默认的返回值</li>\n</ul>\n<h2 id=\"构造函数的执行顺序\"><a href=\"#构造函数的执行顺序\" class=\"headerlink\" title=\"构造函数的执行顺序\"></a>构造函数的执行顺序</h2><ul>\n<li>使用 <code>new</code> 关键字创建对象</li>\n<li>调用构造函数，并且将构造函数内的 <code>this</code> 赋值为新创建的对象</li>\n<li>在构造函数内部，使用 <code>this</code> 为新创建出来的对象新增成员</li>\n<li>默认的返回新创建的这个对象</li>\n</ul>\n<p>返回值代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"范冰冰\"</span>;</div><div class=\"line\">    <span class=\"comment\">//初始化对象的代码</span></div><div class=\"line\">\t<span class=\"comment\">//return \"范冰冰\";</span></div><div class=\"line\">\t<span class=\"comment\">//return 123;</span></div><div class=\"line\">\t<span class=\"comment\">//return true;</span></div><div class=\"line\">\t<span class=\"comment\">//return null;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p);</div></pre></td></tr></table></figure>\n<p>自定义构造函数代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//自定义构造函数，就是自己创建的构造函数s</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.kanren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"上课再闲聊，我就砍死你\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"大飞\"</span>, <span class=\"number\">50</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p);</div><div class=\"line\">p.kanren();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"陈浩南\"</span>, <span class=\"number\">30</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1);</div><div class=\"line\">p1.kanren();</div></pre></td></tr></table></figure>\n<p>构造函数补充</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//因为构造函数也是函数</span></div><div class=\"line\"><span class=\"comment\">//所以构造函数可以使用函数的使用方式</span></div><div class=\"line\"><span class=\"comment\">//但是如果把构造函数当做普通函数来使用的话</span></div><div class=\"line\"><span class=\"comment\">//该构造函数内的this就指向了window对象</span></div><div class=\"line\"><span class=\"comment\">//返回值为undefined</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.kanren = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"上课再闲聊，我就砍死你\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = Person(<span class=\"string\">\"谢文东\"</span>, <span class=\"number\">30</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p);</div><div class=\"line\"><span class=\"built_in\">window</span>.kanren();</div></pre></td></tr></table></figure>\n<h2 id=\"传统构造函数存在的问题\"><a href=\"#传统构造函数存在的问题\" class=\"headerlink\" title=\"传统构造函数存在的问题\"></a>传统构造函数存在的问题</h2><p>如果在构造函数内部声明函数，并为新创建的对象方法赋值的话每次创建对象，调用构造函数，都会新创建一个函数出来，每个对象独占一份函数 但是，所有的对象中的方法的代码是一模一样的，没有必要每人一份所以就造成了资源的浪费</p>\n<h3 id=\"解决方案一\"><a href=\"#解决方案一\" class=\"headerlink\" title=\"解决方案一\"></a>解决方案一</h3><p>将构造函数内部给对象的方法赋值的时候的函数声明提出来放到构造函外面，这样，在每次创建对象的时候，就不会再重新声明函数而是直接拿外面的函数地址进行赋值，所以，这样子创建出来的所有的对象都会共享构造函数外面的声明的这个函数</p>\n<h3 id=\"解决方案一存在的问题\"><a href=\"#解决方案一存在的问题\" class=\"headerlink\" title=\"解决方案一存在的问题\"></a>解决方案一存在的问题</h3><ol>\n<li>如果方法过多，会造成全局变量污染</li>\n<li>代码结构会变得混乱不堪，不利于维护</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//解决方案一存在的问题</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"吃个红烧鸡屁股\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eat = eat;</div><div class=\"line\"><span class=\"comment\">//\t\tthis.eat = function ()&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\tconsole.log(\"吃个红烧鸡屁股\");</span></div><div class=\"line\"><span class=\"comment\">//     &#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"唐伯虎\"</span>,<span class=\"number\">500</span>);</div><div class=\"line\">p.eat();</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"李二狗\"</span>,<span class=\"number\">81</span>);</div><div class=\"line\">p1.eat();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.eat == p1.eat);</div></pre></td></tr></table></figure>\n<p>这个问题我们可以通过原型来处理</p>"},{"title":"js高级与面向对象之继承","date":"2016-06-15T05:43:28.000Z","_content":"\n一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承\n\n<!-- more -->\n\n## 继承的实现方式\n\n### 混入式继承\n\n```js\nvar obj = {};\nvar obj1 = {\n    money : 10000000,\n    car : 100,\n    brand: \"布加迪威航\",\n    huaqian: function(){\n        console.log(\"不差钱，随便花\");\n    }\n};\nconsole.log(obj);\n\nfor(var k in obj1){\n    //money\n    //car\n    //brand\n    //huaqian\n    obj[k] = obj1[k];\n}\n\nconsole.log(obj);\n```\n\n### 原型继承\n\n* 通过修改原型实现的继承 就是原型继承\n\t通过构造函数创建出来的对象继承自构造函数的原型对象\n\n```js\nvar human = {\n    gender:\"female\",\n    height: 170,\n    weight: 50\n}\nfunction Person(){\n\n}\n//Person.prototype.name = \"王莉莉\";\n```\n\n#### 原型继承的方式\n\n1. 通过混入的方式给原型添加属性和方法\n\n```js\n//Person.prototype\nvar human = {\n    gender:\"female\",\n    height: 170,\n    weight: 50\n}\nfunction Person(){\n\n}\nPerson.prototype.name = \"王莉莉\";\n\nfor(var k in human){\n    Person.prototype[k] = human[k];\n}\nvar p = new Person();\nconsole.log(p.name,p.gender,p.height,p.weight);\n```\n\n2. 修改原型对象\n\n```js\nPerson.prototype.maimeng = function (){\n    console.log(\"感觉自己萌萌哒\");\n}\n\np.maimeng();\n```\n\n3. 替换原型对象\n\n```js\nPerson.prototype = human;\nvar p = new Person();\nconsole.log(p.gender);\n```\n\n### 经典继承\n\n《JavaScript语言精粹》\n* 调用一个方法，就能实现继承\n`var obj1 = Object.create(obj)`\n* 创建出来一个新的继承自参数 `obj` 的对象 `obj1` \n* 其实内部使用的就是原型继承\n* ES5才支持的这个方法 需要考虑兼容性问题\n\n```js\nvar human = {\n    name: \"王莉莉\",\n    gender: \"female\",\n    dance :function(){\n        console.log(\"二人转，转转转\")\n    }\n}\n\nvar obj = Object.create(human);\n\nconsole.log(obj);\n```\n\n## 处理经典继承的兼容性问题\n\n```js\nif(Object.create){\n    var obj = Object.create({name:\"李狗二\",age:18});\n}else{\n    Object.create = function(obj){\n\n\t\t//在这个函数中要实现的功能\n\t\t//就是，创建一个对象，将obj设置为该对象的原型\n\n\t\t//要设置原型，只能通过两种方式，\n\t\t// 一种是 对象.__proto__  另外一种是 构造函数.prototype\n\t\t//由于__proto__这个属性有兼容性问题，所以不使用\n\t\t//就只能使用 构造函数.prototype 去替换原型对象了\n\n        function F(){}\n        F.prototype = obj;\n        var result = new F();\n        return result;\n    }\n}\n\n//不推荐直接修改内置对象，因为在多人开发的时候，会产生冲突\n\nObject.creat = function () {\n    console.log(\"我是李二狗，我的create方法就是用来输出这句话的，哈哈哈\");\n}\n\nfunction hanyingxinCreate(obj){\n    if(Object.create){\n        return Object.creat(obj);\n    }else{\n        function F(){}\n        F.prototype = obj;\n        var result = new F();\n        return result;\n    }\n}\n\n```\n\n## 继承的实际应用\n\n* 扩展内置对象\n\n* 扩展 `string` 的方法  `trim()`\n\n```js\n//$.trim()\n\nArray.prototype.sayHello = function () {\n   console.log(\"Hello, i'm a Array\")\n}\n\nvar arr = new Array();\narr.sayHello();\n\nvar arr1 = [];\narr1.sayHello();\n\n//需求分析\n//1.创建出来的对象得有数组的所有的方法和属性\n//2.创建输出来的对象得有sayHello方法\n//3.不能修改原生的内置对象\n\n\nfunction MyArray(){\n\n}\n\nMyArray.prototype = [];\nMyArray.prototype.sayHello = function () {\n    console.log(\"相加就加，随心所欲，为所欲为\");\n}\n\nvar myArr = new MyArray();\nmyArr.push(1,2,3,4,4,5);\nconsole.log(myArr);\nmyArr.sayHello();\n```","source":"_posts/javascript-inherit.md","raw":"---\ntitle: js高级与面向对象之继承\ndate: 2016-06-15 13:43:28\ntags: \n\t- javascript\n\t- js面向对象\n\t- 继承\n\t- 继承的实现方式\ncategories: javascript\n---\n\n一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承\n\n<!-- more -->\n\n## 继承的实现方式\n\n### 混入式继承\n\n```js\nvar obj = {};\nvar obj1 = {\n    money : 10000000,\n    car : 100,\n    brand: \"布加迪威航\",\n    huaqian: function(){\n        console.log(\"不差钱，随便花\");\n    }\n};\nconsole.log(obj);\n\nfor(var k in obj1){\n    //money\n    //car\n    //brand\n    //huaqian\n    obj[k] = obj1[k];\n}\n\nconsole.log(obj);\n```\n\n### 原型继承\n\n* 通过修改原型实现的继承 就是原型继承\n\t通过构造函数创建出来的对象继承自构造函数的原型对象\n\n```js\nvar human = {\n    gender:\"female\",\n    height: 170,\n    weight: 50\n}\nfunction Person(){\n\n}\n//Person.prototype.name = \"王莉莉\";\n```\n\n#### 原型继承的方式\n\n1. 通过混入的方式给原型添加属性和方法\n\n```js\n//Person.prototype\nvar human = {\n    gender:\"female\",\n    height: 170,\n    weight: 50\n}\nfunction Person(){\n\n}\nPerson.prototype.name = \"王莉莉\";\n\nfor(var k in human){\n    Person.prototype[k] = human[k];\n}\nvar p = new Person();\nconsole.log(p.name,p.gender,p.height,p.weight);\n```\n\n2. 修改原型对象\n\n```js\nPerson.prototype.maimeng = function (){\n    console.log(\"感觉自己萌萌哒\");\n}\n\np.maimeng();\n```\n\n3. 替换原型对象\n\n```js\nPerson.prototype = human;\nvar p = new Person();\nconsole.log(p.gender);\n```\n\n### 经典继承\n\n《JavaScript语言精粹》\n* 调用一个方法，就能实现继承\n`var obj1 = Object.create(obj)`\n* 创建出来一个新的继承自参数 `obj` 的对象 `obj1` \n* 其实内部使用的就是原型继承\n* ES5才支持的这个方法 需要考虑兼容性问题\n\n```js\nvar human = {\n    name: \"王莉莉\",\n    gender: \"female\",\n    dance :function(){\n        console.log(\"二人转，转转转\")\n    }\n}\n\nvar obj = Object.create(human);\n\nconsole.log(obj);\n```\n\n## 处理经典继承的兼容性问题\n\n```js\nif(Object.create){\n    var obj = Object.create({name:\"李狗二\",age:18});\n}else{\n    Object.create = function(obj){\n\n\t\t//在这个函数中要实现的功能\n\t\t//就是，创建一个对象，将obj设置为该对象的原型\n\n\t\t//要设置原型，只能通过两种方式，\n\t\t// 一种是 对象.__proto__  另外一种是 构造函数.prototype\n\t\t//由于__proto__这个属性有兼容性问题，所以不使用\n\t\t//就只能使用 构造函数.prototype 去替换原型对象了\n\n        function F(){}\n        F.prototype = obj;\n        var result = new F();\n        return result;\n    }\n}\n\n//不推荐直接修改内置对象，因为在多人开发的时候，会产生冲突\n\nObject.creat = function () {\n    console.log(\"我是李二狗，我的create方法就是用来输出这句话的，哈哈哈\");\n}\n\nfunction hanyingxinCreate(obj){\n    if(Object.create){\n        return Object.creat(obj);\n    }else{\n        function F(){}\n        F.prototype = obj;\n        var result = new F();\n        return result;\n    }\n}\n\n```\n\n## 继承的实际应用\n\n* 扩展内置对象\n\n* 扩展 `string` 的方法  `trim()`\n\n```js\n//$.trim()\n\nArray.prototype.sayHello = function () {\n   console.log(\"Hello, i'm a Array\")\n}\n\nvar arr = new Array();\narr.sayHello();\n\nvar arr1 = [];\narr1.sayHello();\n\n//需求分析\n//1.创建出来的对象得有数组的所有的方法和属性\n//2.创建输出来的对象得有sayHello方法\n//3.不能修改原生的内置对象\n\n\nfunction MyArray(){\n\n}\n\nMyArray.prototype = [];\nMyArray.prototype.sayHello = function () {\n    console.log(\"相加就加，随心所欲，为所欲为\");\n}\n\nvar myArr = new MyArray();\nmyArr.push(1,2,3,4,4,5);\nconsole.log(myArr);\nmyArr.sayHello();\n```","slug":"javascript-inherit","published":1,"updated":"2016-11-24T01:27:30.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hpriz000g9wg7q8u2q26u","content":"<p>一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承</p>\n<a id=\"more\"></a>\n<h2 id=\"继承的实现方式\"><a href=\"#继承的实现方式\" class=\"headerlink\" title=\"继承的实现方式\"></a>继承的实现方式</h2><h3 id=\"混入式继承\"><a href=\"#混入式继承\" class=\"headerlink\" title=\"混入式继承\"></a>混入式继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">    <span class=\"attr\">money</span> : <span class=\"number\">10000000</span>,</div><div class=\"line\">    <span class=\"attr\">car</span> : <span class=\"number\">100</span>,</div><div class=\"line\">    <span class=\"attr\">brand</span>: <span class=\"string\">\"布加迪威航\"</span>,</div><div class=\"line\">    <span class=\"attr\">huaqian</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"不差钱，随便花\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj1)&#123;</div><div class=\"line\">    <span class=\"comment\">//money</span></div><div class=\"line\">    <span class=\"comment\">//car</span></div><div class=\"line\">    <span class=\"comment\">//brand</span></div><div class=\"line\">    <span class=\"comment\">//huaqian</span></div><div class=\"line\">    obj[k] = obj1[k];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj);</div></pre></td></tr></table></figure>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><ul>\n<li>通过修改原型实现的继承 就是原型继承<br>  通过构造函数创建出来的对象继承自构造函数的原型对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">\"female\"</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">170</span>,</div><div class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"number\">50</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Person.prototype.name = \"王莉莉\";</span></div></pre></td></tr></table></figure>\n<h4 id=\"原型继承的方式\"><a href=\"#原型继承的方式\" class=\"headerlink\" title=\"原型继承的方式\"></a>原型继承的方式</h4><ol>\n<li>通过混入的方式给原型添加属性和方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Person.prototype</span></div><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">\"female\"</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">170</span>,</div><div class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"number\">50</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">\"王莉莉\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> human)&#123;</div><div class=\"line\">    Person.prototype[k] = human[k];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.name,p.gender,p.height,p.weight);</div></pre></td></tr></table></figure>\n<ol>\n<li>修改原型对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype.maimeng = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"感觉自己萌萌哒\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">p.maimeng();</div></pre></td></tr></table></figure>\n<ol>\n<li>替换原型对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype = human;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.gender);</div></pre></td></tr></table></figure>\n<h3 id=\"经典继承\"><a href=\"#经典继承\" class=\"headerlink\" title=\"经典继承\"></a>经典继承</h3><p>《JavaScript语言精粹》</p>\n<ul>\n<li>调用一个方法，就能实现继承<br><code>var obj1 = Object.create(obj)</code></li>\n<li>创建出来一个新的继承自参数 <code>obj</code> 的对象 <code>obj1</code> </li>\n<li>其实内部使用的就是原型继承</li>\n<li>ES5才支持的这个方法 需要考虑兼容性问题</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"王莉莉\"</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">\"female\"</span>,</div><div class=\"line\">    <span class=\"attr\">dance</span> :<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"二人转，转转转\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(human);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj);</div></pre></td></tr></table></figure>\n<h2 id=\"处理经典继承的兼容性问题\"><a href=\"#处理经典继承的兼容性问题\" class=\"headerlink\" title=\"处理经典继承的兼容性问题\"></a>处理经典继承的兼容性问题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.create)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"李狗二\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//在这个函数中要实现的功能</span></div><div class=\"line\">\t\t<span class=\"comment\">//就是，创建一个对象，将obj设置为该对象的原型</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//要设置原型，只能通过两种方式，</span></div><div class=\"line\">\t\t<span class=\"comment\">// 一种是 对象.__proto__  另外一种是 构造函数.prototype</span></div><div class=\"line\">\t\t<span class=\"comment\">//由于__proto__这个属性有兼容性问题，所以不使用</span></div><div class=\"line\">\t\t<span class=\"comment\">//就只能使用 构造函数.prototype 去替换原型对象了</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">        F.prototype = obj;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//不推荐直接修改内置对象，因为在多人开发的时候，会产生冲突</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.creat = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是李二狗，我的create方法就是用来输出这句话的，哈哈哈\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hanyingxinCreate</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.create)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.creat(obj);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">        F.prototype = obj;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"继承的实际应用\"><a href=\"#继承的实际应用\" class=\"headerlink\" title=\"继承的实际应用\"></a>继承的实际应用</h2><ul>\n<li><p>扩展内置对象</p>\n</li>\n<li><p>扩展 <code>string</code> 的方法  <code>trim()</code></p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//$.trim()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, i'm a Array\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">arr.sayHello();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [];</div><div class=\"line\">arr1.sayHello();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//需求分析</span></div><div class=\"line\"><span class=\"comment\">//1.创建出来的对象得有数组的所有的方法和属性</span></div><div class=\"line\"><span class=\"comment\">//2.创建输出来的对象得有sayHello方法</span></div><div class=\"line\"><span class=\"comment\">//3.不能修改原生的内置对象</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyArray</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyArray.prototype = [];</div><div class=\"line\">MyArray.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"相加就加，随心所欲，为所欲为\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myArr = <span class=\"keyword\">new</span> MyArray();</div><div class=\"line\">myArr.push(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myArr);</div><div class=\"line\">myArr.sayHello();</div></pre></td></tr></table></figure>","excerpt":"<p>一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承</p>","more":"<h2 id=\"继承的实现方式\"><a href=\"#继承的实现方式\" class=\"headerlink\" title=\"继承的实现方式\"></a>继承的实现方式</h2><h3 id=\"混入式继承\"><a href=\"#混入式继承\" class=\"headerlink\" title=\"混入式继承\"></a>混入式继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</div><div class=\"line\">    <span class=\"attr\">money</span> : <span class=\"number\">10000000</span>,</div><div class=\"line\">    <span class=\"attr\">car</span> : <span class=\"number\">100</span>,</div><div class=\"line\">    <span class=\"attr\">brand</span>: <span class=\"string\">\"布加迪威航\"</span>,</div><div class=\"line\">    <span class=\"attr\">huaqian</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"不差钱，随便花\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj1)&#123;</div><div class=\"line\">    <span class=\"comment\">//money</span></div><div class=\"line\">    <span class=\"comment\">//car</span></div><div class=\"line\">    <span class=\"comment\">//brand</span></div><div class=\"line\">    <span class=\"comment\">//huaqian</span></div><div class=\"line\">    obj[k] = obj1[k];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj);</div></pre></td></tr></table></figure>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><ul>\n<li>通过修改原型实现的继承 就是原型继承<br>  通过构造函数创建出来的对象继承自构造函数的原型对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">\"female\"</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">170</span>,</div><div class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"number\">50</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Person.prototype.name = \"王莉莉\";</span></div></pre></td></tr></table></figure>\n<h4 id=\"原型继承的方式\"><a href=\"#原型继承的方式\" class=\"headerlink\" title=\"原型继承的方式\"></a>原型继承的方式</h4><ol>\n<li>通过混入的方式给原型添加属性和方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Person.prototype</span></div><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">\"female\"</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">170</span>,</div><div class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"number\">50</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">\"王莉莉\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> human)&#123;</div><div class=\"line\">    Person.prototype[k] = human[k];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.name,p.gender,p.height,p.weight);</div></pre></td></tr></table></figure>\n<ol>\n<li>修改原型对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype.maimeng = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"感觉自己萌萌哒\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">p.maimeng();</div></pre></td></tr></table></figure>\n<ol>\n<li>替换原型对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype = human;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.gender);</div></pre></td></tr></table></figure>\n<h3 id=\"经典继承\"><a href=\"#经典继承\" class=\"headerlink\" title=\"经典继承\"></a>经典继承</h3><p>《JavaScript语言精粹》</p>\n<ul>\n<li>调用一个方法，就能实现继承<br><code>var obj1 = Object.create(obj)</code></li>\n<li>创建出来一个新的继承自参数 <code>obj</code> 的对象 <code>obj1</code> </li>\n<li>其实内部使用的就是原型继承</li>\n<li>ES5才支持的这个方法 需要考虑兼容性问题</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"王莉莉\"</span>,</div><div class=\"line\">    <span class=\"attr\">gender</span>: <span class=\"string\">\"female\"</span>,</div><div class=\"line\">    <span class=\"attr\">dance</span> :<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"二人转，转转转\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(human);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj);</div></pre></td></tr></table></figure>\n<h2 id=\"处理经典继承的兼容性问题\"><a href=\"#处理经典继承的兼容性问题\" class=\"headerlink\" title=\"处理经典继承的兼容性问题\"></a>处理经典继承的兼容性问题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.create)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"李狗二\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//在这个函数中要实现的功能</span></div><div class=\"line\">\t\t<span class=\"comment\">//就是，创建一个对象，将obj设置为该对象的原型</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//要设置原型，只能通过两种方式，</span></div><div class=\"line\">\t\t<span class=\"comment\">// 一种是 对象.__proto__  另外一种是 构造函数.prototype</span></div><div class=\"line\">\t\t<span class=\"comment\">//由于__proto__这个属性有兼容性问题，所以不使用</span></div><div class=\"line\">\t\t<span class=\"comment\">//就只能使用 构造函数.prototype 去替换原型对象了</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">        F.prototype = obj;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//不推荐直接修改内置对象，因为在多人开发的时候，会产生冲突</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.creat = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是李二狗，我的create方法就是用来输出这句话的，哈哈哈\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hanyingxinCreate</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.create)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.creat(obj);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">        F.prototype = obj;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"继承的实际应用\"><a href=\"#继承的实际应用\" class=\"headerlink\" title=\"继承的实际应用\"></a>继承的实际应用</h2><ul>\n<li><p>扩展内置对象</p>\n</li>\n<li><p>扩展 <code>string</code> 的方法  <code>trim()</code></p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//$.trim()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, i'm a Array\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">arr.sayHello();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [];</div><div class=\"line\">arr1.sayHello();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//需求分析</span></div><div class=\"line\"><span class=\"comment\">//1.创建出来的对象得有数组的所有的方法和属性</span></div><div class=\"line\"><span class=\"comment\">//2.创建输出来的对象得有sayHello方法</span></div><div class=\"line\"><span class=\"comment\">//3.不能修改原生的内置对象</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyArray</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyArray.prototype = [];</div><div class=\"line\">MyArray.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"相加就加，随心所欲，为所欲为\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myArr = <span class=\"keyword\">new</span> MyArray();</div><div class=\"line\">myArr.push(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myArr);</div><div class=\"line\">myArr.sayHello();</div></pre></td></tr></table></figure>"},{"title":"JQuery分析及实现part1框架结构","date":"2016-11-18T10:40:35.000Z","_content":"\nJQuery模块分析及其实现第一部分!\n\n<img src=\"http://of2np1oao.bkt.clouddn.com/ihoey/imgsp161118_190319.png\" width=\"100%\">\n\n<!-- more -->\n\n## 案例：获取指定DOM下所有子元素\n\t\n1. 在框架内部，遍历子节点，应该使用 `firstChild` 和 `nextSibling` 两种方式实现,代码如下。\n获取 `id` 为 `dv` 的元素下所有的子元素 `nodeType：1 - 12 (1 2 3 8 9 11 --documentFrament)` .\n\n* 第一种方式: `childNodes`\n\n```js\n// 实现思路：\n// 通过childNodes获取到所有的子节点；\n// 将上述所有的子节点中，元素节点获取出来。\n/**\n * [getChildren 获取子元素]\n * @param  {[type]} parent [父节点]\n * @return {[type]}        [返回parent的所有子元素]\n */\nfunction getChildren(parent) {\n\t// 存储结果集\n\tvar ret = [],\n\t\tnodes;\n\t// 获取parent所有子节点\n\tnodes = parent.childNodes;\n\n\t// 遍历nodes\n\tfor(var i = 0,l = nodes.length; i < l;i++){\n\t\t// 如果遍历到当前子节点类型为元素，即为所要结果。存储在ret内。\n\t\tif(nodes[i].nodeType === 1) {\n\t\t\tret.push(nodes[i]);\n\t\t}\n\t}\n\t// 返回结果\n\treturn ret;\n}\nconsole.log(getChildren(document.getElementById('dv')));\n```\n\n* 第二种方式：`firstChild nextSibling（推荐）`\n\n```js\n//使用while方式\nfunction getChildren(parent) {\n\tvar ret = [],\n\t\telem = parent.firstChild;\n\t// 遍历parent所有子节点\n\t// 如果有子节点\n\twhile(elem){\n\t\t// 并且节点类型为元素。存储在ret内\n\t\tif(elem.nodeType === 1) ret.push(elem);\n\t\t// 更新循环标量\n\t\t// 赋值为下一个兄弟节点\n\t\telem = elem.nextSibling;\n\t}\n\t// 返回结果\n\treturn ret;\n} \n\n\n//使用for循环\nfunction getChildren(parent) {\n\tvar ret = [],\n\t\telem = parent.firstChild;\n\tfor(; elem ; elem = elem.nextSibling){\n\t\tif(elem.nodeType === 1) ret.push(elem);\n\t}\t\t\t\n\treturn ret;\n}\n\nconsole.log(getChildren(document.getElementById('dv')));\n```\n\n## 框架结构\n\n1. 在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架\n\t+ 在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将它们当做实参传入沙箱内。\n\n2. 核心函数为 `itcast` ，相当于 `jQuery` 。最终要暴露给用户使用的\n\n3. 实现 `itcast` 函数，使用的是 工厂模式 来 创建对象。好处：用户 `new` 或 不 `new` 都可以得到正确的对象\n\n4.  `init` 构造函数 的 位置\n\n\t+ 如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更改用户，尽量将构造函数暴露给用户\n\t+ 可以把构造函数放在 `itcast` 函数上，也可以放在 `itcast` 函数原型上。\n\t+ 处于 `jQuery` 之父，在写简单继承模式时，将构造函数放在其原型上。那么在编写框架时，即延续下来了\n\n5.  `init` 创建出来的对象，最终继承自 `itcast.prototype` 。所以可以将 `init` 对象称为 `itcast` 对象。\n\n6. 由于暴露给用户 的 是 `itcast` 和 其原型。所以在扩展成员时，只能在这两个对象上扩展。而在函数对象上扩展的成员 为 静态成员。可以直接通过函数名字来访问。但是，在原型上的成员，必须创建实例来访问。因此为了实现 `init` 对象可以访问 `itcast` 原型上的成员，就基于原型来实现继承。\n\n```js\n(function(global) {\n\tvar init;\n\t// 核心函数（工厂函数）\n\tvar itcast = function(selector) {\n\t\treturn new itcast.fn.init(selector);\n\t};\n\n\t// 核心原型\t\n\titcast.fn = itcast.prototype = {\n\t\tconstructor: itcast\n\t};\n\n\t// 构造函数\n\tinit = itcast.fn.init = function(selector) {};\n\t// 实现init对象继承自itcast原型\n\tinit.prototype = itcast.fn;\n\n\t// 可扩展方法\n\t// 如果target为undefined值，那么就是给this扩展成员\n\t// 否则就是给target对象扩展。\n\titcast.extend = itcast.fn.extend = function(source, target) {\n\t\tvar k;\n\t\t// 如果target为undefined值，就赋值为this\n\t\t// 给this扩展成员\n\t\tif (target == undefined) {\n\t\t\ttarget = this;\n\t\t}\t\n\n\t\t// target = target || this;\n\n\t\tfor(k in source){\n\t\t\ttarget[k] = source[k];\n\t\t}\t\t\n\t};\n\t// 暴露给用户\n\tglobal.$ = global.itcast = itcast;\n}(window));\n\nitcast.fn.addClass = function(className) {};\nitcast.fn.append = function(className) {};\n```\n\n7. 完善`init`构造函数\n\n\t+ `selector` 类型：\n\t\t- 无效值： `null` `undefined` `' '` `false`\n\t\t- 字符串\n\t\t\t* 选择器：\t `div` 根据选择器筛选dom元素，并以伪数组形式 存储在 `this` 上\n\t\t\t*  `html` 字符串 `<p>123</p><p>456</p>` `<p>` 将html字符串 转换成 `html` 元素\n\t\t- `DOM` 节点 \n\t\t- `DOM` 数组（伪数组） \n\t\t- `function`：入口函数 `DOMContentLoaded`\n\t\t\t* 使用静态属性 `isReady` 存储 `dom` 树是否加载完毕\n\t\t\t* 判断 `isReady` 值， 如果为 `true` ，就直接执行传入的函数。\n\t\t\t* 否则，就给 `document` 的 `DOMContentLoaded` 事件绑定处理程序，在处理程序中，先将 `isReady` 赋值为 `true` ，在执行传入的函数。\n\n8. 如何判断字符串为 `html` 字符串，必须满足一下条件：\n\n\t* 以 `<` 开头\n\t* 以 `>` 结尾\n\t* 最小长度为 `3`\n\n9. 如何判断像数组（数组和伪数组）\n\n\t+ 用 `length` 属性去判断，若具有 `length` 属性 表示为 像数组类型\n\t+ 除了 `window` 对象以及函数对象\n\t+  `{length: 1} {4: \"123\", length: 5}` 稀疏数组\n\n\t+ 如果为真数组，返回 `true`\n\t+ 如果 `length` 属性值为 `0` （除了 `window` 对象以及函数对象），返回 `true`\n\t+ 如果 `length` 属性值 `>0`, 如果对象 具有 `length - 1` 索引，返回 `true`\n\n10. 全局对象 `window` 特性：有一个 `window` 属性 引用 自身。\n\n```js\n(function(global) {\n\tvar init,\n\t\tdocument = global.document;\n\n\tvar itcast = function(selector) {\n\t\treturn new itcast.fn.init(selector);\n\t};\n\n\titcast.fn = itcast.prototype = {\n\t\tconstructor: itcast,\n\t\tlength: 0\n\t};\n\tinit = itcast.fn.init = function(selector) {\n\t\t// handle: null undefined '' false\n\t\tif(!selector) return this;\n\t\t// handle: string\n\t\telse if(itcast.isString(selector)){\n\t\t\t// handle: html string '<p>123</p>'\n\t\t\tif(itcast.isHTML(selector)){\t\t\t\t\t\t\n\t\t\t\t// 怎么存储 以伪数组对象形式存储 dom元素\n\t\t\t\tArray.prototype.push.apply(this, itcast.parseHTML(selector));\n\t\t\t}\n\t\t\t// handle: selector\n\t\t\telse {\n\t\t\t\t// 根据选择器获取dom元素\n\t\t\t\tvar nodelist = document.querySelectorAll(selector);\n\t\t\t\t// 将结果伪数组对象 变成 真数组\n\t\t\t\tvar ret = Array.prototype.slice.call(nodelist);\n\t\t\t\t// 借调数组对象的slice方法将数组中的所有元素 以伪数组形式存储在this上\n\t\t\t\tArray.prototype.push.apply(this, ret);\n\t\t\t}\n\t\t}\n\t\t// handle: dom node\n\t\telse if(itcast.isDOM(selector)){\n\t\t\tthis[0] = selector;\n\t\t\tthis.length = 1;\n\t\t}\n\t\t// handle: dom array(伪数组对象)\n\t\telse if(itcast.isArrayLike(selector)){\n\t\t\t// 获取selector类型\n\t\t\tvar _type = Object.prototype.toString.call(selector).\n\t\t\t\t\tslice(8, -1).toLowerCase();\n\t\t\t// 如果不是数组类型,就 将其转换 为 真数组类型\n\t\t\tif(_type !== 'array') \n\t\t\t\tselector = Array.prototype.slice.call(selector);\n\t\t\tArray.prototype.push.apply(this, selector);\n\t\t}\t\n\t\t// handle: function\n\t\telse if(itcast.isFunction(selector)){\n\t\t\tif(itcast.isReady){\n\t\t\t\tselector();\n\t\t\t} else {\n\t\t\t\tdoucment.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t\tselector();\n\t\t\t\t\titcast.isReady = true;\n\t\t\t\t});\t\n\t\t\t}\n\t\t}\n\t};\n\tinit.prototype = itcast.fn;\n\n\titcast.extend = itcast.fn.extend = function(source, target) {\n\t\tvar k;\n\n\t\ttarget = target || this;\n\n\t\tfor(k in source){\n\t\t\ttarget[k] = source[k];\n\t\t}\n\t};\n\n\t// 添加工具类方法\n\titcast.extend({\n\t\tisReady: false,\n\t\tpaseHTML: function(html) {\n\t\t\tvar div = document.createElement('div'),\n\t\t\t\tret = [];\n\t\t\tdiv.innerHTML = html;\n\n\t\t\tfor(var elem = div.firstChild; elem; elem = elem.nextSibling){\n\t\t\t\tif(elem.nodeType === 1) ret.push(elem);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\t});\n\t// 类型判断方法\n\titcast.extend({\n\t\t// 判断是否为字符串类型\n\t\tisString: function(obj) {\n\t\t\t// 如果为null或undefined，返回false\n\t\t\t// 如果typeof值为string，返回true否则返回false。\n\t\t\treturn !!obj && typeof obj === 'string';\n\t\t},\n\t\tisHTML: function(obj) {\n\t\t\treturn !!obj && obj.charAt(0) === '<' && \n\t\t\t\tobj.charAt(obj.length - 1) === '>' &&\n\t\t\t\tobj.length >= 3;\n\t\t},\n\t\tisDOM: function(obj) {\n\t\t\treturn !!obj && !!obj.nodeType;\n\t\t},\n\t\tisFunction: function(obj) {\n\t\t\treturn !!obj && typeof obj === 'function';\n\t\t},\n\t\tisGlobal: function(obj) {\n\t\t\treturn !!obj && obj.window === obj;\n\t\t},\n\t\tisArrayLike: function(obj) {\n\t\t\tvar _type = Object.prototype.toString.call(obj).slice(8, -1).toLowerCase(),\n\t\t\t\tlength = !!obj && 'length' in obj && obj.length;\n\t\t\t// 过滤 window对象和函数对象\n\t\t\tif(itcast.isFunction(obj) || itcast.isGlobal(obj)) return false;\n\t\t\treturn _type === 'array' || length === 0 || \n\t\t\t\ttypeof length === 'number' && length > 0 && (length - 1) in obj;\n\t\t}\n\t});\n\n\tglobal.$ = global.itcast = itcast;\n}(window));\n```\n\n到此,一个完整的 `init` 框架结构就好了!","source":"_posts/javascript-jquery-part1.md","raw":"---\ntitle: JQuery分析及实现part1框架结构\ndate: 2016-11-18 18:40:35\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第一部分!\n\n<img src=\"http://of2np1oao.bkt.clouddn.com/ihoey/imgsp161118_190319.png\" width=\"100%\">\n\n<!-- more -->\n\n## 案例：获取指定DOM下所有子元素\n\t\n1. 在框架内部，遍历子节点，应该使用 `firstChild` 和 `nextSibling` 两种方式实现,代码如下。\n获取 `id` 为 `dv` 的元素下所有的子元素 `nodeType：1 - 12 (1 2 3 8 9 11 --documentFrament)` .\n\n* 第一种方式: `childNodes`\n\n```js\n// 实现思路：\n// 通过childNodes获取到所有的子节点；\n// 将上述所有的子节点中，元素节点获取出来。\n/**\n * [getChildren 获取子元素]\n * @param  {[type]} parent [父节点]\n * @return {[type]}        [返回parent的所有子元素]\n */\nfunction getChildren(parent) {\n\t// 存储结果集\n\tvar ret = [],\n\t\tnodes;\n\t// 获取parent所有子节点\n\tnodes = parent.childNodes;\n\n\t// 遍历nodes\n\tfor(var i = 0,l = nodes.length; i < l;i++){\n\t\t// 如果遍历到当前子节点类型为元素，即为所要结果。存储在ret内。\n\t\tif(nodes[i].nodeType === 1) {\n\t\t\tret.push(nodes[i]);\n\t\t}\n\t}\n\t// 返回结果\n\treturn ret;\n}\nconsole.log(getChildren(document.getElementById('dv')));\n```\n\n* 第二种方式：`firstChild nextSibling（推荐）`\n\n```js\n//使用while方式\nfunction getChildren(parent) {\n\tvar ret = [],\n\t\telem = parent.firstChild;\n\t// 遍历parent所有子节点\n\t// 如果有子节点\n\twhile(elem){\n\t\t// 并且节点类型为元素。存储在ret内\n\t\tif(elem.nodeType === 1) ret.push(elem);\n\t\t// 更新循环标量\n\t\t// 赋值为下一个兄弟节点\n\t\telem = elem.nextSibling;\n\t}\n\t// 返回结果\n\treturn ret;\n} \n\n\n//使用for循环\nfunction getChildren(parent) {\n\tvar ret = [],\n\t\telem = parent.firstChild;\n\tfor(; elem ; elem = elem.nextSibling){\n\t\tif(elem.nodeType === 1) ret.push(elem);\n\t}\t\t\t\n\treturn ret;\n}\n\nconsole.log(getChildren(document.getElementById('dv')));\n```\n\n## 框架结构\n\n1. 在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架\n\t+ 在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将它们当做实参传入沙箱内。\n\n2. 核心函数为 `itcast` ，相当于 `jQuery` 。最终要暴露给用户使用的\n\n3. 实现 `itcast` 函数，使用的是 工厂模式 来 创建对象。好处：用户 `new` 或 不 `new` 都可以得到正确的对象\n\n4.  `init` 构造函数 的 位置\n\n\t+ 如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更改用户，尽量将构造函数暴露给用户\n\t+ 可以把构造函数放在 `itcast` 函数上，也可以放在 `itcast` 函数原型上。\n\t+ 处于 `jQuery` 之父，在写简单继承模式时，将构造函数放在其原型上。那么在编写框架时，即延续下来了\n\n5.  `init` 创建出来的对象，最终继承自 `itcast.prototype` 。所以可以将 `init` 对象称为 `itcast` 对象。\n\n6. 由于暴露给用户 的 是 `itcast` 和 其原型。所以在扩展成员时，只能在这两个对象上扩展。而在函数对象上扩展的成员 为 静态成员。可以直接通过函数名字来访问。但是，在原型上的成员，必须创建实例来访问。因此为了实现 `init` 对象可以访问 `itcast` 原型上的成员，就基于原型来实现继承。\n\n```js\n(function(global) {\n\tvar init;\n\t// 核心函数（工厂函数）\n\tvar itcast = function(selector) {\n\t\treturn new itcast.fn.init(selector);\n\t};\n\n\t// 核心原型\t\n\titcast.fn = itcast.prototype = {\n\t\tconstructor: itcast\n\t};\n\n\t// 构造函数\n\tinit = itcast.fn.init = function(selector) {};\n\t// 实现init对象继承自itcast原型\n\tinit.prototype = itcast.fn;\n\n\t// 可扩展方法\n\t// 如果target为undefined值，那么就是给this扩展成员\n\t// 否则就是给target对象扩展。\n\titcast.extend = itcast.fn.extend = function(source, target) {\n\t\tvar k;\n\t\t// 如果target为undefined值，就赋值为this\n\t\t// 给this扩展成员\n\t\tif (target == undefined) {\n\t\t\ttarget = this;\n\t\t}\t\n\n\t\t// target = target || this;\n\n\t\tfor(k in source){\n\t\t\ttarget[k] = source[k];\n\t\t}\t\t\n\t};\n\t// 暴露给用户\n\tglobal.$ = global.itcast = itcast;\n}(window));\n\nitcast.fn.addClass = function(className) {};\nitcast.fn.append = function(className) {};\n```\n\n7. 完善`init`构造函数\n\n\t+ `selector` 类型：\n\t\t- 无效值： `null` `undefined` `' '` `false`\n\t\t- 字符串\n\t\t\t* 选择器：\t `div` 根据选择器筛选dom元素，并以伪数组形式 存储在 `this` 上\n\t\t\t*  `html` 字符串 `<p>123</p><p>456</p>` `<p>` 将html字符串 转换成 `html` 元素\n\t\t- `DOM` 节点 \n\t\t- `DOM` 数组（伪数组） \n\t\t- `function`：入口函数 `DOMContentLoaded`\n\t\t\t* 使用静态属性 `isReady` 存储 `dom` 树是否加载完毕\n\t\t\t* 判断 `isReady` 值， 如果为 `true` ，就直接执行传入的函数。\n\t\t\t* 否则，就给 `document` 的 `DOMContentLoaded` 事件绑定处理程序，在处理程序中，先将 `isReady` 赋值为 `true` ，在执行传入的函数。\n\n8. 如何判断字符串为 `html` 字符串，必须满足一下条件：\n\n\t* 以 `<` 开头\n\t* 以 `>` 结尾\n\t* 最小长度为 `3`\n\n9. 如何判断像数组（数组和伪数组）\n\n\t+ 用 `length` 属性去判断，若具有 `length` 属性 表示为 像数组类型\n\t+ 除了 `window` 对象以及函数对象\n\t+  `{length: 1} {4: \"123\", length: 5}` 稀疏数组\n\n\t+ 如果为真数组，返回 `true`\n\t+ 如果 `length` 属性值为 `0` （除了 `window` 对象以及函数对象），返回 `true`\n\t+ 如果 `length` 属性值 `>0`, 如果对象 具有 `length - 1` 索引，返回 `true`\n\n10. 全局对象 `window` 特性：有一个 `window` 属性 引用 自身。\n\n```js\n(function(global) {\n\tvar init,\n\t\tdocument = global.document;\n\n\tvar itcast = function(selector) {\n\t\treturn new itcast.fn.init(selector);\n\t};\n\n\titcast.fn = itcast.prototype = {\n\t\tconstructor: itcast,\n\t\tlength: 0\n\t};\n\tinit = itcast.fn.init = function(selector) {\n\t\t// handle: null undefined '' false\n\t\tif(!selector) return this;\n\t\t// handle: string\n\t\telse if(itcast.isString(selector)){\n\t\t\t// handle: html string '<p>123</p>'\n\t\t\tif(itcast.isHTML(selector)){\t\t\t\t\t\t\n\t\t\t\t// 怎么存储 以伪数组对象形式存储 dom元素\n\t\t\t\tArray.prototype.push.apply(this, itcast.parseHTML(selector));\n\t\t\t}\n\t\t\t// handle: selector\n\t\t\telse {\n\t\t\t\t// 根据选择器获取dom元素\n\t\t\t\tvar nodelist = document.querySelectorAll(selector);\n\t\t\t\t// 将结果伪数组对象 变成 真数组\n\t\t\t\tvar ret = Array.prototype.slice.call(nodelist);\n\t\t\t\t// 借调数组对象的slice方法将数组中的所有元素 以伪数组形式存储在this上\n\t\t\t\tArray.prototype.push.apply(this, ret);\n\t\t\t}\n\t\t}\n\t\t// handle: dom node\n\t\telse if(itcast.isDOM(selector)){\n\t\t\tthis[0] = selector;\n\t\t\tthis.length = 1;\n\t\t}\n\t\t// handle: dom array(伪数组对象)\n\t\telse if(itcast.isArrayLike(selector)){\n\t\t\t// 获取selector类型\n\t\t\tvar _type = Object.prototype.toString.call(selector).\n\t\t\t\t\tslice(8, -1).toLowerCase();\n\t\t\t// 如果不是数组类型,就 将其转换 为 真数组类型\n\t\t\tif(_type !== 'array') \n\t\t\t\tselector = Array.prototype.slice.call(selector);\n\t\t\tArray.prototype.push.apply(this, selector);\n\t\t}\t\n\t\t// handle: function\n\t\telse if(itcast.isFunction(selector)){\n\t\t\tif(itcast.isReady){\n\t\t\t\tselector();\n\t\t\t} else {\n\t\t\t\tdoucment.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t\tselector();\n\t\t\t\t\titcast.isReady = true;\n\t\t\t\t});\t\n\t\t\t}\n\t\t}\n\t};\n\tinit.prototype = itcast.fn;\n\n\titcast.extend = itcast.fn.extend = function(source, target) {\n\t\tvar k;\n\n\t\ttarget = target || this;\n\n\t\tfor(k in source){\n\t\t\ttarget[k] = source[k];\n\t\t}\n\t};\n\n\t// 添加工具类方法\n\titcast.extend({\n\t\tisReady: false,\n\t\tpaseHTML: function(html) {\n\t\t\tvar div = document.createElement('div'),\n\t\t\t\tret = [];\n\t\t\tdiv.innerHTML = html;\n\n\t\t\tfor(var elem = div.firstChild; elem; elem = elem.nextSibling){\n\t\t\t\tif(elem.nodeType === 1) ret.push(elem);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\t});\n\t// 类型判断方法\n\titcast.extend({\n\t\t// 判断是否为字符串类型\n\t\tisString: function(obj) {\n\t\t\t// 如果为null或undefined，返回false\n\t\t\t// 如果typeof值为string，返回true否则返回false。\n\t\t\treturn !!obj && typeof obj === 'string';\n\t\t},\n\t\tisHTML: function(obj) {\n\t\t\treturn !!obj && obj.charAt(0) === '<' && \n\t\t\t\tobj.charAt(obj.length - 1) === '>' &&\n\t\t\t\tobj.length >= 3;\n\t\t},\n\t\tisDOM: function(obj) {\n\t\t\treturn !!obj && !!obj.nodeType;\n\t\t},\n\t\tisFunction: function(obj) {\n\t\t\treturn !!obj && typeof obj === 'function';\n\t\t},\n\t\tisGlobal: function(obj) {\n\t\t\treturn !!obj && obj.window === obj;\n\t\t},\n\t\tisArrayLike: function(obj) {\n\t\t\tvar _type = Object.prototype.toString.call(obj).slice(8, -1).toLowerCase(),\n\t\t\t\tlength = !!obj && 'length' in obj && obj.length;\n\t\t\t// 过滤 window对象和函数对象\n\t\t\tif(itcast.isFunction(obj) || itcast.isGlobal(obj)) return false;\n\t\t\treturn _type === 'array' || length === 0 || \n\t\t\t\ttypeof length === 'number' && length > 0 && (length - 1) in obj;\n\t\t}\n\t});\n\n\tglobal.$ = global.itcast = itcast;\n}(window));\n```\n\n到此,一个完整的 `init` 框架结构就好了!","slug":"javascript-jquery-part1","published":1,"updated":"2016-11-24T01:35:48.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprj2000j9wg7udo18aqq","content":"<p>JQuery模块分析及其实现第一部分!</p>\n<p><img src=\"http://of2np1oao.bkt.clouddn.com/ihoey/imgsp161118_190319.png\" width=\"100%\"></p>\n<a id=\"more\"></a>\n<h2 id=\"案例：获取指定DOM下所有子元素\"><a href=\"#案例：获取指定DOM下所有子元素\" class=\"headerlink\" title=\"案例：获取指定DOM下所有子元素\"></a>案例：获取指定DOM下所有子元素</h2><ol>\n<li>在框架内部，遍历子节点，应该使用 <code>firstChild</code> 和 <code>nextSibling</code> 两种方式实现,代码如下。<br>获取 <code>id</code> 为 <code>dv</code> 的元素下所有的子元素 <code>nodeType：1 - 12 (1 2 3 8 9 11 --documentFrament)</code> .</li>\n</ol>\n<ul>\n<li>第一种方式: <code>childNodes</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 实现思路：</span></div><div class=\"line\"><span class=\"comment\">// 通过childNodes获取到所有的子节点；</span></div><div class=\"line\"><span class=\"comment\">// 将上述所有的子节点中，元素节点获取出来。</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * [getChildren 获取子元素]</div><div class=\"line\"> * @param  &#123;[type]&#125; parent [父节点]</div><div class=\"line\"> * @return &#123;[type]&#125;        [返回parent的所有子元素]</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">parent</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 存储结果集</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\tnodes;</div><div class=\"line\">\t<span class=\"comment\">// 获取parent所有子节点</span></div><div class=\"line\">\tnodes = parent.childNodes;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 遍历nodes</span></div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,l = nodes.length; i &lt; l;i++)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果遍历到当前子节点类型为元素，即为所要结果。存储在ret内。</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(nodes[i].nodeType === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tret.push(nodes[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 返回结果</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(getChildren(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>)));</div></pre></td></tr></table></figure>\n<ul>\n<li>第二种方式：<code>firstChild nextSibling（推荐）</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用while方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">parent</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\telem = parent.firstChild;</div><div class=\"line\">\t<span class=\"comment\">// 遍历parent所有子节点</span></div><div class=\"line\">\t<span class=\"comment\">// 如果有子节点</span></div><div class=\"line\">\t<span class=\"keyword\">while</span>(elem)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 并且节点类型为元素。存储在ret内</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(elem.nodeType === <span class=\"number\">1</span>) ret.push(elem);</div><div class=\"line\">\t\t<span class=\"comment\">// 更新循环标量</span></div><div class=\"line\">\t\t<span class=\"comment\">// 赋值为下一个兄弟节点</span></div><div class=\"line\">\t\telem = elem.nextSibling;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 返回结果</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用for循环</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">parent</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\telem = parent.firstChild;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(; elem ; elem = elem.nextSibling)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(elem.nodeType === <span class=\"number\">1</span>) ret.push(elem);</div><div class=\"line\">\t&#125;\t\t\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getChildren(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>)));</div></pre></td></tr></table></figure>\n<h2 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h2><ol>\n<li><p>在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架</p>\n<ul>\n<li>在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将它们当做实参传入沙箱内。</li>\n</ul>\n</li>\n<li><p>核心函数为 <code>itcast</code> ，相当于 <code>jQuery</code> 。最终要暴露给用户使用的</p>\n</li>\n<li><p>实现 <code>itcast</code> 函数，使用的是 工厂模式 来 创建对象。好处：用户 <code>new</code> 或 不 <code>new</code> 都可以得到正确的对象</p>\n</li>\n<li><p><code>init</code> 构造函数 的 位置</p>\n<ul>\n<li>如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更改用户，尽量将构造函数暴露给用户</li>\n<li>可以把构造函数放在 <code>itcast</code> 函数上，也可以放在 <code>itcast</code> 函数原型上。</li>\n<li>处于 <code>jQuery</code> 之父，在写简单继承模式时，将构造函数放在其原型上。那么在编写框架时，即延续下来了</li>\n</ul>\n</li>\n<li><p><code>init</code> 创建出来的对象，最终继承自 <code>itcast.prototype</code> 。所以可以将 <code>init</code> 对象称为 <code>itcast</code> 对象。</p>\n</li>\n<li><p>由于暴露给用户 的 是 <code>itcast</code> 和 其原型。所以在扩展成员时，只能在这两个对象上扩展。而在函数对象上扩展的成员 为 静态成员。可以直接通过函数名字来访问。但是，在原型上的成员，必须创建实例来访问。因此为了实现 <code>init</code> 对象可以访问 <code>itcast</code> 原型上的成员，就基于原型来实现继承。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">global</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> init;</div><div class=\"line\">\t<span class=\"comment\">// 核心函数（工厂函数）</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> itcast = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> itcast.fn.init(selector);</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 核心原型\t</span></div><div class=\"line\">\titcast.fn = itcast.prototype = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">constructor</span>: itcast</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 构造函数</span></div><div class=\"line\">\tinit = itcast.fn.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 实现init对象继承自itcast原型</span></div><div class=\"line\">\tinit.prototype = itcast.fn;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 可扩展方法</span></div><div class=\"line\">\t<span class=\"comment\">// 如果target为undefined值，那么就是给this扩展成员</span></div><div class=\"line\">\t<span class=\"comment\">// 否则就是给target对象扩展。</span></div><div class=\"line\">\titcast.extend = itcast.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> k;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果target为undefined值，就赋值为this</span></div><div class=\"line\">\t\t<span class=\"comment\">// 给this扩展成员</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (target == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">\t\t\ttarget = <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// target = target || this;</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(k <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">\t\t\ttarget[k] = source[k];</div><div class=\"line\">\t\t&#125;\t\t</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 暴露给用户</span></div><div class=\"line\">\tglobal.$ = global.itcast = itcast;</div><div class=\"line\">&#125;(<span class=\"built_in\">window</span>));</div><div class=\"line\"></div><div class=\"line\">itcast.fn.addClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;&#125;;</div><div class=\"line\">itcast.fn.append = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>完善<code>init</code>构造函数</p>\n<ul>\n<li><code>selector</code> 类型：<ul>\n<li>无效值： <code>null</code> <code>undefined</code> <code>&#39; &#39;</code> <code>false</code></li>\n<li>字符串<ul>\n<li>选择器：     <code>div</code> 根据选择器筛选dom元素，并以伪数组形式 存储在 <code>this</code> 上</li>\n<li><code>html</code> 字符串 <code>&lt;p&gt;123&lt;/p&gt;&lt;p&gt;456&lt;/p&gt;</code> <code>&lt;p&gt;</code> 将html字符串 转换成 <code>html</code> 元素</li>\n</ul>\n</li>\n<li><code>DOM</code> 节点 </li>\n<li><code>DOM</code> 数组（伪数组） </li>\n<li><code>function</code>：入口函数 <code>DOMContentLoaded</code><ul>\n<li>使用静态属性 <code>isReady</code> 存储 <code>dom</code> 树是否加载完毕</li>\n<li>判断 <code>isReady</code> 值， 如果为 <code>true</code> ，就直接执行传入的函数。</li>\n<li>否则，就给 <code>document</code> 的 <code>DOMContentLoaded</code> 事件绑定处理程序，在处理程序中，先将 <code>isReady</code> 赋值为 <code>true</code> ，在执行传入的函数。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>如何判断字符串为 <code>html</code> 字符串，必须满足一下条件：</p>\n<ul>\n<li>以 <code>&lt;</code> 开头</li>\n<li>以 <code>&gt;</code> 结尾</li>\n<li>最小长度为 <code>3</code></li>\n</ul>\n</li>\n<li><p>如何判断像数组（数组和伪数组）</p>\n<ul>\n<li>用 <code>length</code> 属性去判断，若具有 <code>length</code> 属性 表示为 像数组类型</li>\n<li>除了 <code>window</code> 对象以及函数对象</li>\n<li><p><code>{length: 1} {4: &quot;123&quot;, length: 5}</code> 稀疏数组</p>\n</li>\n<li><p>如果为真数组，返回 <code>true</code></p>\n</li>\n<li>如果 <code>length</code> 属性值为 <code>0</code> （除了 <code>window</code> 对象以及函数对象），返回 <code>true</code></li>\n<li>如果 <code>length</code> 属性值 <code>&gt;0</code>, 如果对象 具有 <code>length - 1</code> 索引，返回 <code>true</code></li>\n</ul>\n</li>\n<li><p>全局对象 <code>window</code> 特性：有一个 <code>window</code> 属性 引用 自身。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">global</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> init,</div><div class=\"line\">\t\t<span class=\"built_in\">document</span> = global.document;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> itcast = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> itcast.fn.init(selector);</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\titcast.fn = itcast.prototype = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">constructor</span>: itcast,</div><div class=\"line\">\t\t<span class=\"attr\">length</span>: <span class=\"number\">0</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">\tinit = itcast.fn.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: null undefined '' false</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!selector) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: string</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isString(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// handle: html string '&lt;p&gt;123&lt;/p&gt;'</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(itcast.isHTML(selector))&#123;\t\t\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 怎么存储 以伪数组对象形式存储 dom元素</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"keyword\">this</span>, itcast.parseHTML(selector));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// handle: selector</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 根据选择器获取dom元素</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> nodelist = <span class=\"built_in\">document</span>.querySelectorAll(selector);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 将结果伪数组对象 变成 真数组</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> ret = <span class=\"built_in\">Array</span>.prototype.slice.call(nodelist);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 借调数组对象的slice方法将数组中的所有元素 以伪数组形式存储在this上</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"keyword\">this</span>, ret);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: dom node</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isDOM(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>[<span class=\"number\">0</span>] = selector;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.length = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: dom array(伪数组对象)</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isArrayLike(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取selector类型</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> _type = <span class=\"built_in\">Object</span>.prototype.toString.call(selector).</div><div class=\"line\">\t\t\t\t\tslice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>).toLowerCase();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果不是数组类型,就 将其转换 为 真数组类型</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(_type !== <span class=\"string\">'array'</span>) </div><div class=\"line\">\t\t\t\tselector = <span class=\"built_in\">Array</span>.prototype.slice.call(selector);</div><div class=\"line\">\t\t\t<span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"keyword\">this</span>, selector);</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t\t<span class=\"comment\">// handle: function</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isFunction(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(itcast.isReady)&#123;</div><div class=\"line\">\t\t\t\tselector();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tdoucment.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t\tselector();</div><div class=\"line\">\t\t\t\t\titcast.isReady = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t\t&#125;);\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\tinit.prototype = itcast.fn;</div><div class=\"line\"></div><div class=\"line\">\titcast.extend = itcast.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> k;</div><div class=\"line\"></div><div class=\"line\">\t\ttarget = target || <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(k <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">\t\t\ttarget[k] = source[k];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 添加工具类方法</span></div><div class=\"line\">\titcast.extend(&#123;</div><div class=\"line\">\t\t<span class=\"attr\">isReady</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">\t\t<span class=\"attr\">paseHTML</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>),</div><div class=\"line\">\t\t\t\tret = [];</div><div class=\"line\">\t\t\tdiv.innerHTML = html;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> elem = div.firstChild; elem; elem = elem.nextSibling)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(elem.nodeType === <span class=\"number\">1</span>) ret.push(elem);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 类型判断方法</span></div><div class=\"line\">\titcast.extend(&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 判断是否为字符串类型</span></div><div class=\"line\">\t\tisString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果为null或undefined，返回false</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果typeof值为string，返回true否则返回false。</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'string'</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isHTML</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; obj.charAt(<span class=\"number\">0</span>) === <span class=\"string\">'&lt;'</span> &amp;&amp; </div><div class=\"line\">\t\t\t\tobj.charAt(obj.length - <span class=\"number\">1</span>) === <span class=\"string\">'&gt;'</span> &amp;&amp;</div><div class=\"line\">\t\t\t\tobj.length &gt;= <span class=\"number\">3</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isDOM</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; !!obj.nodeType;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isFunction</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'function'</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isGlobal</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; obj.window === obj;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isArrayLike</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> _type = <span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>).toLowerCase(),</div><div class=\"line\">\t\t\t\tlength = !!obj &amp;&amp; <span class=\"string\">'length'</span> <span class=\"keyword\">in</span> obj &amp;&amp; obj.length;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 过滤 window对象和函数对象</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(itcast.isFunction(obj) || itcast.isGlobal(obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _type === <span class=\"string\">'array'</span> || length === <span class=\"number\">0</span> || </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">typeof</span> length === <span class=\"string\">'number'</span> &amp;&amp; length &gt; <span class=\"number\">0</span> &amp;&amp; (length - <span class=\"number\">1</span>) <span class=\"keyword\">in</span> obj;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\tglobal.$ = global.itcast = itcast;</div><div class=\"line\">&#125;(<span class=\"built_in\">window</span>));</div></pre></td></tr></table></figure>\n<p>到此,一个完整的 <code>init</code> 框架结构就好了!</p>\n","excerpt":"<p>JQuery模块分析及其实现第一部分!</p>\n<p><img src=\"http://of2np1oao.bkt.clouddn.com/ihoey/imgsp161118_190319.png\" width=\"100%\"></p>","more":"<h2 id=\"案例：获取指定DOM下所有子元素\"><a href=\"#案例：获取指定DOM下所有子元素\" class=\"headerlink\" title=\"案例：获取指定DOM下所有子元素\"></a>案例：获取指定DOM下所有子元素</h2><ol>\n<li>在框架内部，遍历子节点，应该使用 <code>firstChild</code> 和 <code>nextSibling</code> 两种方式实现,代码如下。<br>获取 <code>id</code> 为 <code>dv</code> 的元素下所有的子元素 <code>nodeType：1 - 12 (1 2 3 8 9 11 --documentFrament)</code> .</li>\n</ol>\n<ul>\n<li>第一种方式: <code>childNodes</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 实现思路：</span></div><div class=\"line\"><span class=\"comment\">// 通过childNodes获取到所有的子节点；</span></div><div class=\"line\"><span class=\"comment\">// 将上述所有的子节点中，元素节点获取出来。</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * [getChildren 获取子元素]</div><div class=\"line\"> * @param  &#123;[type]&#125; parent [父节点]</div><div class=\"line\"> * @return &#123;[type]&#125;        [返回parent的所有子元素]</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">parent</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 存储结果集</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\tnodes;</div><div class=\"line\">\t<span class=\"comment\">// 获取parent所有子节点</span></div><div class=\"line\">\tnodes = parent.childNodes;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 遍历nodes</span></div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,l = nodes.length; i &lt; l;i++)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果遍历到当前子节点类型为元素，即为所要结果。存储在ret内。</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(nodes[i].nodeType === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tret.push(nodes[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 返回结果</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(getChildren(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>)));</div></pre></td></tr></table></figure>\n<ul>\n<li>第二种方式：<code>firstChild nextSibling（推荐）</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用while方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">parent</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\telem = parent.firstChild;</div><div class=\"line\">\t<span class=\"comment\">// 遍历parent所有子节点</span></div><div class=\"line\">\t<span class=\"comment\">// 如果有子节点</span></div><div class=\"line\">\t<span class=\"keyword\">while</span>(elem)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 并且节点类型为元素。存储在ret内</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(elem.nodeType === <span class=\"number\">1</span>) ret.push(elem);</div><div class=\"line\">\t\t<span class=\"comment\">// 更新循环标量</span></div><div class=\"line\">\t\t<span class=\"comment\">// 赋值为下一个兄弟节点</span></div><div class=\"line\">\t\telem = elem.nextSibling;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 返回结果</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用for循环</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">parent</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\telem = parent.firstChild;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(; elem ; elem = elem.nextSibling)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(elem.nodeType === <span class=\"number\">1</span>) ret.push(elem);</div><div class=\"line\">\t&#125;\t\t\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getChildren(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>)));</div></pre></td></tr></table></figure>\n<h2 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h2><ol>\n<li><p>在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架</p>\n<ul>\n<li>在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将它们当做实参传入沙箱内。</li>\n</ul>\n</li>\n<li><p>核心函数为 <code>itcast</code> ，相当于 <code>jQuery</code> 。最终要暴露给用户使用的</p>\n</li>\n<li><p>实现 <code>itcast</code> 函数，使用的是 工厂模式 来 创建对象。好处：用户 <code>new</code> 或 不 <code>new</code> 都可以得到正确的对象</p>\n</li>\n<li><p><code>init</code> 构造函数 的 位置</p>\n<ul>\n<li>如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更改用户，尽量将构造函数暴露给用户</li>\n<li>可以把构造函数放在 <code>itcast</code> 函数上，也可以放在 <code>itcast</code> 函数原型上。</li>\n<li>处于 <code>jQuery</code> 之父，在写简单继承模式时，将构造函数放在其原型上。那么在编写框架时，即延续下来了</li>\n</ul>\n</li>\n<li><p><code>init</code> 创建出来的对象，最终继承自 <code>itcast.prototype</code> 。所以可以将 <code>init</code> 对象称为 <code>itcast</code> 对象。</p>\n</li>\n<li><p>由于暴露给用户 的 是 <code>itcast</code> 和 其原型。所以在扩展成员时，只能在这两个对象上扩展。而在函数对象上扩展的成员 为 静态成员。可以直接通过函数名字来访问。但是，在原型上的成员，必须创建实例来访问。因此为了实现 <code>init</code> 对象可以访问 <code>itcast</code> 原型上的成员，就基于原型来实现继承。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">global</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> init;</div><div class=\"line\">\t<span class=\"comment\">// 核心函数（工厂函数）</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> itcast = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> itcast.fn.init(selector);</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 核心原型\t</span></div><div class=\"line\">\titcast.fn = itcast.prototype = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">constructor</span>: itcast</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 构造函数</span></div><div class=\"line\">\tinit = itcast.fn.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 实现init对象继承自itcast原型</span></div><div class=\"line\">\tinit.prototype = itcast.fn;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 可扩展方法</span></div><div class=\"line\">\t<span class=\"comment\">// 如果target为undefined值，那么就是给this扩展成员</span></div><div class=\"line\">\t<span class=\"comment\">// 否则就是给target对象扩展。</span></div><div class=\"line\">\titcast.extend = itcast.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> k;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果target为undefined值，就赋值为this</span></div><div class=\"line\">\t\t<span class=\"comment\">// 给this扩展成员</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (target == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">\t\t\ttarget = <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// target = target || this;</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(k <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">\t\t\ttarget[k] = source[k];</div><div class=\"line\">\t\t&#125;\t\t</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 暴露给用户</span></div><div class=\"line\">\tglobal.$ = global.itcast = itcast;</div><div class=\"line\">&#125;(<span class=\"built_in\">window</span>));</div><div class=\"line\"></div><div class=\"line\">itcast.fn.addClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;&#125;;</div><div class=\"line\">itcast.fn.append = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>完善<code>init</code>构造函数</p>\n<ul>\n<li><code>selector</code> 类型：<ul>\n<li>无效值： <code>null</code> <code>undefined</code> <code>&#39; &#39;</code> <code>false</code></li>\n<li>字符串<ul>\n<li>选择器：     <code>div</code> 根据选择器筛选dom元素，并以伪数组形式 存储在 <code>this</code> 上</li>\n<li><code>html</code> 字符串 <code>&lt;p&gt;123&lt;/p&gt;&lt;p&gt;456&lt;/p&gt;</code> <code>&lt;p&gt;</code> 将html字符串 转换成 <code>html</code> 元素</li>\n</ul>\n</li>\n<li><code>DOM</code> 节点 </li>\n<li><code>DOM</code> 数组（伪数组） </li>\n<li><code>function</code>：入口函数 <code>DOMContentLoaded</code><ul>\n<li>使用静态属性 <code>isReady</code> 存储 <code>dom</code> 树是否加载完毕</li>\n<li>判断 <code>isReady</code> 值， 如果为 <code>true</code> ，就直接执行传入的函数。</li>\n<li>否则，就给 <code>document</code> 的 <code>DOMContentLoaded</code> 事件绑定处理程序，在处理程序中，先将 <code>isReady</code> 赋值为 <code>true</code> ，在执行传入的函数。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>如何判断字符串为 <code>html</code> 字符串，必须满足一下条件：</p>\n<ul>\n<li>以 <code>&lt;</code> 开头</li>\n<li>以 <code>&gt;</code> 结尾</li>\n<li>最小长度为 <code>3</code></li>\n</ul>\n</li>\n<li><p>如何判断像数组（数组和伪数组）</p>\n<ul>\n<li>用 <code>length</code> 属性去判断，若具有 <code>length</code> 属性 表示为 像数组类型</li>\n<li>除了 <code>window</code> 对象以及函数对象</li>\n<li><p><code>{length: 1} {4: &quot;123&quot;, length: 5}</code> 稀疏数组</p>\n</li>\n<li><p>如果为真数组，返回 <code>true</code></p>\n</li>\n<li>如果 <code>length</code> 属性值为 <code>0</code> （除了 <code>window</code> 对象以及函数对象），返回 <code>true</code></li>\n<li>如果 <code>length</code> 属性值 <code>&gt;0</code>, 如果对象 具有 <code>length - 1</code> 索引，返回 <code>true</code></li>\n</ul>\n</li>\n<li><p>全局对象 <code>window</code> 特性：有一个 <code>window</code> 属性 引用 自身。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">global</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> init,</div><div class=\"line\">\t\t<span class=\"built_in\">document</span> = global.document;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> itcast = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> itcast.fn.init(selector);</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\titcast.fn = itcast.prototype = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">constructor</span>: itcast,</div><div class=\"line\">\t\t<span class=\"attr\">length</span>: <span class=\"number\">0</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">\tinit = itcast.fn.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: null undefined '' false</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!selector) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: string</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isString(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// handle: html string '&lt;p&gt;123&lt;/p&gt;'</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(itcast.isHTML(selector))&#123;\t\t\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 怎么存储 以伪数组对象形式存储 dom元素</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"keyword\">this</span>, itcast.parseHTML(selector));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// handle: selector</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 根据选择器获取dom元素</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> nodelist = <span class=\"built_in\">document</span>.querySelectorAll(selector);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 将结果伪数组对象 变成 真数组</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> ret = <span class=\"built_in\">Array</span>.prototype.slice.call(nodelist);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 借调数组对象的slice方法将数组中的所有元素 以伪数组形式存储在this上</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"keyword\">this</span>, ret);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: dom node</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isDOM(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>[<span class=\"number\">0</span>] = selector;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.length = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// handle: dom array(伪数组对象)</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isArrayLike(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取selector类型</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> _type = <span class=\"built_in\">Object</span>.prototype.toString.call(selector).</div><div class=\"line\">\t\t\t\t\tslice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>).toLowerCase();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果不是数组类型,就 将其转换 为 真数组类型</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(_type !== <span class=\"string\">'array'</span>) </div><div class=\"line\">\t\t\t\tselector = <span class=\"built_in\">Array</span>.prototype.slice.call(selector);</div><div class=\"line\">\t\t\t<span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"keyword\">this</span>, selector);</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t\t<span class=\"comment\">// handle: function</span></div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(itcast.isFunction(selector))&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(itcast.isReady)&#123;</div><div class=\"line\">\t\t\t\tselector();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tdoucment.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t\tselector();</div><div class=\"line\">\t\t\t\t\titcast.isReady = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t\t&#125;);\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\tinit.prototype = itcast.fn;</div><div class=\"line\"></div><div class=\"line\">\titcast.extend = itcast.fn.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source, target</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> k;</div><div class=\"line\"></div><div class=\"line\">\t\ttarget = target || <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(k <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">\t\t\ttarget[k] = source[k];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 添加工具类方法</span></div><div class=\"line\">\titcast.extend(&#123;</div><div class=\"line\">\t\t<span class=\"attr\">isReady</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">\t\t<span class=\"attr\">paseHTML</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>),</div><div class=\"line\">\t\t\t\tret = [];</div><div class=\"line\">\t\t\tdiv.innerHTML = html;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> elem = div.firstChild; elem; elem = elem.nextSibling)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(elem.nodeType === <span class=\"number\">1</span>) ret.push(elem);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 类型判断方法</span></div><div class=\"line\">\titcast.extend(&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 判断是否为字符串类型</span></div><div class=\"line\">\t\tisString: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果为null或undefined，返回false</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果typeof值为string，返回true否则返回false。</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'string'</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isHTML</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; obj.charAt(<span class=\"number\">0</span>) === <span class=\"string\">'&lt;'</span> &amp;&amp; </div><div class=\"line\">\t\t\t\tobj.charAt(obj.length - <span class=\"number\">1</span>) === <span class=\"string\">'&gt;'</span> &amp;&amp;</div><div class=\"line\">\t\t\t\tobj.length &gt;= <span class=\"number\">3</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isDOM</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; !!obj.nodeType;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isFunction</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'function'</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isGlobal</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> !!obj &amp;&amp; obj.window === obj;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">isArrayLike</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> _type = <span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>).toLowerCase(),</div><div class=\"line\">\t\t\t\tlength = !!obj &amp;&amp; <span class=\"string\">'length'</span> <span class=\"keyword\">in</span> obj &amp;&amp; obj.length;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 过滤 window对象和函数对象</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(itcast.isFunction(obj) || itcast.isGlobal(obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _type === <span class=\"string\">'array'</span> || length === <span class=\"number\">0</span> || </div><div class=\"line\">\t\t\t\t<span class=\"keyword\">typeof</span> length === <span class=\"string\">'number'</span> &amp;&amp; length &gt; <span class=\"number\">0</span> &amp;&amp; (length - <span class=\"number\">1</span>) <span class=\"keyword\">in</span> obj;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\tglobal.$ = global.itcast = itcast;</div><div class=\"line\">&#125;(<span class=\"built_in\">window</span>));</div></pre></td></tr></table></figure>\n<p>到此,一个完整的 <code>init</code> 框架结构就好了!</p>"},{"title":"JQuery分析及实现part3之属性模块功能及实现","date":"2016-11-20T03:51:28.000Z","_content":"\nJQuery模块分析及其实现第三部分属性模块功能及实现,接第二部分!\n\n<!-- more -->\n\n## 知识点复习\n\n1.  `css` 方法\n\t* 如果只传入一个参数\n\t\t* 如果参数类型为对象,表示同时设置多个样式\n\t\t* 如果参数类型为字符串,表示获取指定的样式值\n\t* 如果传入的两个参数,表示设置单个样式值\n\n2.  `itcast.each` 方法: 遍历数组或伪数组\n\t* 第一个参数,指定遍历的对象\n\t* 第二个参数,指定的回调函数,对遍历到的每一个元素,进行相关处理\n\n## attr方法( setAttribute 和 getAttribute )\n\n1. 功能: 获取(设置)属性节点值\n2. 实现思路\n\t* 给原型添加 `attr` 方法,定义两个参数:属性节点名字 `name` 以及属性节点值\n\t* 如果只传入一个参数\n\t\t* 如果参数类型为对象,表示设置多个节点值\n\t\t* 否则获取指定的属性节点值(默认获取第一个 `dom` 元素的属性节点值)\n\t* 如果传入两个参数,表示设置单个属性节点值.\n\n```js\nattr: function(name,value){\n\t//只传入一个参数\n\tif(value == undefined){\n\t\t//如果类型为对象,表示设置多个属性\n\t\tif(typeof name ==='object'){\n\t\t\t//遍历itcast上的每一个dom元素,并设置属性节点值\n\t\t\tthis.each(function(v){\n\t\t\t\t//枚举name对象上的每一个属性\n\t\t\t\tfor(var k in name){\n\t\t\t\t\tv.setAttribute(k, name[k]);\n\t\t\t\t}\n\t\t\t});\n\t\t} else { //如果类型为字符串,获取属性节点值\n\t\t\tif(!this[0]) return null;\n\t\t\treturn this[0].getAttribute(name);\n\t\t}\n\t}else { //传入两个参数,表示设置单个属性节点值\n\t\tthis.each(function(v) {\n\t\t\tv.setAttribute(name, value)\n\t\t});\n\t}\n\treturn this\n},\n```\n\n## html方法\n\n1. 功能: \n\t* 不传参数,表示获取指定 `dom` 元素的 `innerHTML` 属性值\n\t* 否则,表示设置指定 `dom` 元素的 `innerHTML` 属性\n2. 实行思路\n\t* 判断是否传入参数\n\t* 如果没穿,获取 `itcast` 对象上的第一个 `dom` 元素的 `innerHTML` 属性值\n\t* 否则,给 `itcast` 对象上的每一个 `dom` 元素设置 `innerHTML` 属性\n\n```js\nhtml: function(html) {\n\t//如果没有给html传值,表示获取\n\tif(html==undefined){\n\t\t//如果icast没有任何dom元素,就返回一个期望值,即空字符串\n\t\t//如果有的话,就返回一个dom元素的innerHTML属性值\n\t\treturn this[0] ? this[0].innerHTML : '';\n\t}else{//如果给html船只,给itcast对象上的每一个dom元素设置innerHTML属性\n\t\treturn this.each(function(v){\n\t\t\tv.innerHTML = html;\n\t\t});\n\t}\n},\n```\n\n## text方法\n\n1. 功能\n\t* 不传值,表示获取文本节点(返回的是后代中所有文本节点值)\n\t* 传值,设置指定 `dom` 元素文本值\n2. 实现思路\n\t* 如果不传值,优先考虑浏览器是否支持 `textContent` 属性\n\t\t* 如果支持,就使用 `textContent` 返回结果集中每一个 `dom` 元素的文本节点值\n\t\t* 否则,就是用 `innerText` 返回结果集中每一个 `dom` 元素的文本节点值\n\t* 如果传值,给 `itcast` 对象上的每一个 `dom` 元素设置文本节点值.\n\t\t* 如果支持 `textContent` 属性,就是用该属性设置文本\n\t\t* 否则,就是用 `innerText` 来设置文本.\n\n```js\ntext: function(text) {\n\t// 如果没有传值，表示获取文本值\n\tif(text == undefined){\n\t\t// 定义结果变量，存储每个dom元素的文本\n\t\tvar ret = '';\n\t\t// 遍历每一个dom元素\n\t\tthis.each(function(v) {\n\t\t\t// 如果支持textContent，使用其获取文本，累加到ret上\n\t\t\tret += 'textContent' in document ?\n\t\t\t\tv.textContent :\n\t\t\t\tv.innerText.replace(/\\r\\n/g, '');\n\t\t});\n\t\t// 返回所有文本\n\t\treturn ret;\n\t} else { // 如果传值了，表示为每个dom设置文本\n\t\treturn this.each(function(v) {\n\t\t\t// 如果支持textContent，就使用该属性为当前dom元素设置文本节点值\n\t\t\t// 否则，使用innerText设置文本节点值。\n\t\t\tif('textContent' in document){\n\t\t\t\tv.textContent = text;\n\t\t\t} else {\n\t\t\t\tv.innerText = text;\n\t\t\t}\n\t\t});\n\t}\n},\n```\n\n## val方法\n\n1. 功能( `value` 属性)\n\t* 如果不传值,表示获取输入框的文本值\n\t* 如果传值, 表示给输入框 设置文本\n2. 实现思路\n\t* 如果不传值，表示获取输入框的文本值（获取第一个文本框值）\n\t* 如果传值，表示给输入框 设置文本\n\t\t* 遍历每一个输入框，同时给其设置文本\n```js\nval: function(value) {\n\t// 如果没有传值，表示获取第一个dom元素的value属性值\n\t// 如果itcast对象上没有任何dom元素，返回空字符串\n\tif(value == undefined){\n\t\treturn this[0] ? this[0].value : '';\n\t} else {// 否则，为每一个dom元素设置value属性值\n\t\treturn this.each(function() {\n\t\t\tthis.value = value;\n\t\t});\n\t}\n}\n```\n\n## prop方法\n\n1. 功能:和 `attr` 相似\n\t* 注意: 有些属性名称,比如 `for` , `class` 是保留字或关键字不能作为对象属性名称,所以要创建一个对象,需要转换这类的属性\n\t* 定义 `propFix` 对象,存储上述属性到这属性名称的映射关系\n\t* 如果只传入一个参数\n\t\t* 类型为对象,同时给  `dom` 对象添加属性\n\t\t* 类型为字符串,获取 `itcast` 对象上的第一个 `dom` 对象的指定属性值\n\t* 如果传入的参数,给所有的 `dom` 对象添加单个属性\n\t* 细节: 无论是设置还是获取属性,在操作之前,先要从 `propFix` 对象拿到映射后的属性名称\n\t\t* 如果拿到的心的属性名称不为 `undefined` ,就用映射后的属性名来操作 `dom` 对象\n\t\t* 否则,那么久使用旧的属性名称来操作 `dom` 对象.\n\n```js\n// 属性模块\nitcast.propFix = {\n\t'for': 'htmlFor',\n\t'class': 'className'\n};\nitcast.each([\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\titcast.propFix[this.toLowerCase()] = this;\n});\nprop: function(name, value) {\n\t// 如果没有给value传值\n\tvar prop;\n\tif (value == undefined) {\n\t\t// 并且name的类型为 对象，表示给每一个dom对象添加多个属性\n\t\tif (typeof name === 'object') {\n\t\t\tthis.each(function() {\n\t\t\t\tfor (var k in name) {\n\t\t\t\t\t// 首先从propFix对象上获取属性名字\n\t\t\t\t\t// 如果有，就使用新的属性名字\n\t\t\t\t\t// 如果没有，就使用原来的属性名字\n\t\t\t\t\tprop = itcast.propFix[k] ? itcast.propFix[k] : k;\n\t\t\t\t\tthis[prop] = name[k];\n\t\t\t\t}\n\t\t\t});\n\t\t} else { // 如果name的类型 为字符串，表示获取第一个dom对象的指定属性值\n\t\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;\n\t\t\treturn this.length > 0 ? this[0][prop] : null;\n\t\t}\n\t} else { // 如果传入两个参数，表示给每一个dom对象添加单个属性\n\t\t// 遍历itcast上的每一个dom对象，添加属性\n\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;\n\t\tthis.each(function() {\n\t\t\tthis[prop] = value;\n\t\t});\n\t}\n\t// 实现链式编程\n\treturn this;\n}\n```","source":"_posts/javascript-jquery-part3.md","raw":"---\ntitle: JQuery分析及实现part3之属性模块功能及实现\ndate: 2016-11-20 11:51:28\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第三部分属性模块功能及实现,接第二部分!\n\n<!-- more -->\n\n## 知识点复习\n\n1.  `css` 方法\n\t* 如果只传入一个参数\n\t\t* 如果参数类型为对象,表示同时设置多个样式\n\t\t* 如果参数类型为字符串,表示获取指定的样式值\n\t* 如果传入的两个参数,表示设置单个样式值\n\n2.  `itcast.each` 方法: 遍历数组或伪数组\n\t* 第一个参数,指定遍历的对象\n\t* 第二个参数,指定的回调函数,对遍历到的每一个元素,进行相关处理\n\n## attr方法( setAttribute 和 getAttribute )\n\n1. 功能: 获取(设置)属性节点值\n2. 实现思路\n\t* 给原型添加 `attr` 方法,定义两个参数:属性节点名字 `name` 以及属性节点值\n\t* 如果只传入一个参数\n\t\t* 如果参数类型为对象,表示设置多个节点值\n\t\t* 否则获取指定的属性节点值(默认获取第一个 `dom` 元素的属性节点值)\n\t* 如果传入两个参数,表示设置单个属性节点值.\n\n```js\nattr: function(name,value){\n\t//只传入一个参数\n\tif(value == undefined){\n\t\t//如果类型为对象,表示设置多个属性\n\t\tif(typeof name ==='object'){\n\t\t\t//遍历itcast上的每一个dom元素,并设置属性节点值\n\t\t\tthis.each(function(v){\n\t\t\t\t//枚举name对象上的每一个属性\n\t\t\t\tfor(var k in name){\n\t\t\t\t\tv.setAttribute(k, name[k]);\n\t\t\t\t}\n\t\t\t});\n\t\t} else { //如果类型为字符串,获取属性节点值\n\t\t\tif(!this[0]) return null;\n\t\t\treturn this[0].getAttribute(name);\n\t\t}\n\t}else { //传入两个参数,表示设置单个属性节点值\n\t\tthis.each(function(v) {\n\t\t\tv.setAttribute(name, value)\n\t\t});\n\t}\n\treturn this\n},\n```\n\n## html方法\n\n1. 功能: \n\t* 不传参数,表示获取指定 `dom` 元素的 `innerHTML` 属性值\n\t* 否则,表示设置指定 `dom` 元素的 `innerHTML` 属性\n2. 实行思路\n\t* 判断是否传入参数\n\t* 如果没穿,获取 `itcast` 对象上的第一个 `dom` 元素的 `innerHTML` 属性值\n\t* 否则,给 `itcast` 对象上的每一个 `dom` 元素设置 `innerHTML` 属性\n\n```js\nhtml: function(html) {\n\t//如果没有给html传值,表示获取\n\tif(html==undefined){\n\t\t//如果icast没有任何dom元素,就返回一个期望值,即空字符串\n\t\t//如果有的话,就返回一个dom元素的innerHTML属性值\n\t\treturn this[0] ? this[0].innerHTML : '';\n\t}else{//如果给html船只,给itcast对象上的每一个dom元素设置innerHTML属性\n\t\treturn this.each(function(v){\n\t\t\tv.innerHTML = html;\n\t\t});\n\t}\n},\n```\n\n## text方法\n\n1. 功能\n\t* 不传值,表示获取文本节点(返回的是后代中所有文本节点值)\n\t* 传值,设置指定 `dom` 元素文本值\n2. 实现思路\n\t* 如果不传值,优先考虑浏览器是否支持 `textContent` 属性\n\t\t* 如果支持,就使用 `textContent` 返回结果集中每一个 `dom` 元素的文本节点值\n\t\t* 否则,就是用 `innerText` 返回结果集中每一个 `dom` 元素的文本节点值\n\t* 如果传值,给 `itcast` 对象上的每一个 `dom` 元素设置文本节点值.\n\t\t* 如果支持 `textContent` 属性,就是用该属性设置文本\n\t\t* 否则,就是用 `innerText` 来设置文本.\n\n```js\ntext: function(text) {\n\t// 如果没有传值，表示获取文本值\n\tif(text == undefined){\n\t\t// 定义结果变量，存储每个dom元素的文本\n\t\tvar ret = '';\n\t\t// 遍历每一个dom元素\n\t\tthis.each(function(v) {\n\t\t\t// 如果支持textContent，使用其获取文本，累加到ret上\n\t\t\tret += 'textContent' in document ?\n\t\t\t\tv.textContent :\n\t\t\t\tv.innerText.replace(/\\r\\n/g, '');\n\t\t});\n\t\t// 返回所有文本\n\t\treturn ret;\n\t} else { // 如果传值了，表示为每个dom设置文本\n\t\treturn this.each(function(v) {\n\t\t\t// 如果支持textContent，就使用该属性为当前dom元素设置文本节点值\n\t\t\t// 否则，使用innerText设置文本节点值。\n\t\t\tif('textContent' in document){\n\t\t\t\tv.textContent = text;\n\t\t\t} else {\n\t\t\t\tv.innerText = text;\n\t\t\t}\n\t\t});\n\t}\n},\n```\n\n## val方法\n\n1. 功能( `value` 属性)\n\t* 如果不传值,表示获取输入框的文本值\n\t* 如果传值, 表示给输入框 设置文本\n2. 实现思路\n\t* 如果不传值，表示获取输入框的文本值（获取第一个文本框值）\n\t* 如果传值，表示给输入框 设置文本\n\t\t* 遍历每一个输入框，同时给其设置文本\n```js\nval: function(value) {\n\t// 如果没有传值，表示获取第一个dom元素的value属性值\n\t// 如果itcast对象上没有任何dom元素，返回空字符串\n\tif(value == undefined){\n\t\treturn this[0] ? this[0].value : '';\n\t} else {// 否则，为每一个dom元素设置value属性值\n\t\treturn this.each(function() {\n\t\t\tthis.value = value;\n\t\t});\n\t}\n}\n```\n\n## prop方法\n\n1. 功能:和 `attr` 相似\n\t* 注意: 有些属性名称,比如 `for` , `class` 是保留字或关键字不能作为对象属性名称,所以要创建一个对象,需要转换这类的属性\n\t* 定义 `propFix` 对象,存储上述属性到这属性名称的映射关系\n\t* 如果只传入一个参数\n\t\t* 类型为对象,同时给  `dom` 对象添加属性\n\t\t* 类型为字符串,获取 `itcast` 对象上的第一个 `dom` 对象的指定属性值\n\t* 如果传入的参数,给所有的 `dom` 对象添加单个属性\n\t* 细节: 无论是设置还是获取属性,在操作之前,先要从 `propFix` 对象拿到映射后的属性名称\n\t\t* 如果拿到的心的属性名称不为 `undefined` ,就用映射后的属性名来操作 `dom` 对象\n\t\t* 否则,那么久使用旧的属性名称来操作 `dom` 对象.\n\n```js\n// 属性模块\nitcast.propFix = {\n\t'for': 'htmlFor',\n\t'class': 'className'\n};\nitcast.each([\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\titcast.propFix[this.toLowerCase()] = this;\n});\nprop: function(name, value) {\n\t// 如果没有给value传值\n\tvar prop;\n\tif (value == undefined) {\n\t\t// 并且name的类型为 对象，表示给每一个dom对象添加多个属性\n\t\tif (typeof name === 'object') {\n\t\t\tthis.each(function() {\n\t\t\t\tfor (var k in name) {\n\t\t\t\t\t// 首先从propFix对象上获取属性名字\n\t\t\t\t\t// 如果有，就使用新的属性名字\n\t\t\t\t\t// 如果没有，就使用原来的属性名字\n\t\t\t\t\tprop = itcast.propFix[k] ? itcast.propFix[k] : k;\n\t\t\t\t\tthis[prop] = name[k];\n\t\t\t\t}\n\t\t\t});\n\t\t} else { // 如果name的类型 为字符串，表示获取第一个dom对象的指定属性值\n\t\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;\n\t\t\treturn this.length > 0 ? this[0][prop] : null;\n\t\t}\n\t} else { // 如果传入两个参数，表示给每一个dom对象添加单个属性\n\t\t// 遍历itcast上的每一个dom对象，添加属性\n\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;\n\t\tthis.each(function() {\n\t\t\tthis[prop] = value;\n\t\t});\n\t}\n\t// 实现链式编程\n\treturn this;\n}\n```","slug":"javascript-jquery-part3","published":1,"updated":"2016-11-24T01:36:37.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprj5000l9wg7bs9fnxop","content":"<p>JQuery模块分析及其实现第三部分属性模块功能及实现,接第二部分!</p>\n<a id=\"more\"></a>\n<h2 id=\"知识点复习\"><a href=\"#知识点复习\" class=\"headerlink\" title=\"知识点复习\"></a>知识点复习</h2><ol>\n<li><p><code>css</code> 方法</p>\n<ul>\n<li>如果只传入一个参数<ul>\n<li>如果参数类型为对象,表示同时设置多个样式</li>\n<li>如果参数类型为字符串,表示获取指定的样式值</li>\n</ul>\n</li>\n<li>如果传入的两个参数,表示设置单个样式值</li>\n</ul>\n</li>\n<li><p><code>itcast.each</code> 方法: 遍历数组或伪数组</p>\n<ul>\n<li>第一个参数,指定遍历的对象</li>\n<li>第二个参数,指定的回调函数,对遍历到的每一个元素,进行相关处理</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"attr方法-setAttribute-和-getAttribute\"><a href=\"#attr方法-setAttribute-和-getAttribute\" class=\"headerlink\" title=\"attr方法( setAttribute 和 getAttribute )\"></a>attr方法( setAttribute 和 getAttribute )</h2><ol>\n<li>功能: 获取(设置)属性节点值</li>\n<li>实现思路<ul>\n<li>给原型添加 <code>attr</code> 方法,定义两个参数:属性节点名字 <code>name</code> 以及属性节点值</li>\n<li>如果只传入一个参数<ul>\n<li>如果参数类型为对象,表示设置多个节点值</li>\n<li>否则获取指定的属性节点值(默认获取第一个 <code>dom</code> 元素的属性节点值)</li>\n</ul>\n</li>\n<li>如果传入两个参数,表示设置单个属性节点值.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">attr: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,value</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//只传入一个参数</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(value == <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//如果类型为对象,表示设置多个属性</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> name ===<span class=\"string\">'object'</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//遍历itcast上的每一个dom元素,并设置属性节点值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//枚举name对象上的每一个属性</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> name)&#123;</div><div class=\"line\">\t\t\t\t\tv.setAttribute(k, name[k]);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果类型为字符串,获取属性节点值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].getAttribute(name);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">//传入两个参数,表示设置单个属性节点值</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\tv.setAttribute(name, value)</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"html方法\"><a href=\"#html方法\" class=\"headerlink\" title=\"html方法\"></a>html方法</h2><ol>\n<li>功能: <ul>\n<li>不传参数,表示获取指定 <code>dom</code> 元素的 <code>innerHTML</code> 属性值</li>\n<li>否则,表示设置指定 <code>dom</code> 元素的 <code>innerHTML</code> 属性</li>\n</ul>\n</li>\n<li>实行思路<ul>\n<li>判断是否传入参数</li>\n<li>如果没穿,获取 <code>itcast</code> 对象上的第一个 <code>dom</code> 元素的 <code>innerHTML</code> 属性值</li>\n<li>否则,给 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素设置 <code>innerHTML</code> 属性</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">html: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//如果没有给html传值,表示获取</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(html==<span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//如果icast没有任何dom元素,就返回一个期望值,即空字符串</span></div><div class=\"line\">\t\t<span class=\"comment\">//如果有的话,就返回一个dom元素的innerHTML属性值</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">0</span>] ? <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].innerHTML : <span class=\"string\">''</span>;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//如果给html船只,给itcast对象上的每一个dom元素设置innerHTML属性</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">\t\t\tv.innerHTML = html;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"text方法\"><a href=\"#text方法\" class=\"headerlink\" title=\"text方法\"></a>text方法</h2><ol>\n<li>功能<ul>\n<li>不传值,表示获取文本节点(返回的是后代中所有文本节点值)</li>\n<li>传值,设置指定 <code>dom</code> 元素文本值</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>如果不传值,优先考虑浏览器是否支持 <code>textContent</code> 属性<ul>\n<li>如果支持,就使用 <code>textContent</code> 返回结果集中每一个 <code>dom</code> 元素的文本节点值</li>\n<li>否则,就是用 <code>innerText</code> 返回结果集中每一个 <code>dom</code> 元素的文本节点值</li>\n</ul>\n</li>\n<li>如果传值,给 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素设置文本节点值.<ul>\n<li>如果支持 <code>textContent</code> 属性,就是用该属性设置文本</li>\n<li>否则,就是用 <code>innerText</code> 来设置文本.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">text: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果没有传值，表示获取文本值</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(text == <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 定义结果变量，存储每个dom元素的文本</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ret = <span class=\"string\">''</span>;</div><div class=\"line\">\t\t<span class=\"comment\">// 遍历每一个dom元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果支持textContent，使用其获取文本，累加到ret上</span></div><div class=\"line\">\t\t\tret += <span class=\"string\">'textContent'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span> ?</div><div class=\"line\">\t\t\t\tv.textContent :</div><div class=\"line\">\t\t\t\tv.innerText.replace(<span class=\"regexp\">/\\r\\n/g</span>, <span class=\"string\">''</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"comment\">// 返回所有文本</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果传值了，表示为每个dom设置文本</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果支持textContent，就使用该属性为当前dom元素设置文本节点值</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 否则，使用innerText设置文本节点值。</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"string\">'textContent'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>)&#123;</div><div class=\"line\">\t\t\t\tv.textContent = text;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tv.innerText = text;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"val方法\"><a href=\"#val方法\" class=\"headerlink\" title=\"val方法\"></a>val方法</h2><ol>\n<li>功能( <code>value</code> 属性)<ul>\n<li>如果不传值,表示获取输入框的文本值</li>\n<li>如果传值, 表示给输入框 设置文本</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>如果不传值，表示获取输入框的文本值（获取第一个文本框值）</li>\n<li>如果传值，表示给输入框 设置文本<ul>\n<li>遍历每一个输入框，同时给其设置文本<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">val: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果没有传值，表示获取第一个dom元素的value属性值</span></div><div class=\"line\">\t<span class=\"comment\">// 如果itcast对象上没有任何dom元素，返回空字符串</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(value == <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">0</span>] ? <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].value : <span class=\"string\">''</span>;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 否则，为每一个dom元素设置value属性值</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"prop方法\"><a href=\"#prop方法\" class=\"headerlink\" title=\"prop方法\"></a>prop方法</h2><ol>\n<li>功能:和 <code>attr</code> 相似<ul>\n<li>注意: 有些属性名称,比如 <code>for</code> , <code>class</code> 是保留字或关键字不能作为对象属性名称,所以要创建一个对象,需要转换这类的属性</li>\n<li>定义 <code>propFix</code> 对象,存储上述属性到这属性名称的映射关系</li>\n<li>如果只传入一个参数<ul>\n<li>类型为对象,同时给  <code>dom</code> 对象添加属性</li>\n<li>类型为字符串,获取 <code>itcast</code> 对象上的第一个 <code>dom</code> 对象的指定属性值</li>\n</ul>\n</li>\n<li>如果传入的参数,给所有的 <code>dom</code> 对象添加单个属性</li>\n<li>细节: 无论是设置还是获取属性,在操作之前,先要从 <code>propFix</code> 对象拿到映射后的属性名称<ul>\n<li>如果拿到的心的属性名称不为 <code>undefined</code> ,就用映射后的属性名来操作 <code>dom</code> 对象</li>\n<li>否则,那么久使用旧的属性名称来操作 <code>dom</code> 对象.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 属性模块</span></div><div class=\"line\">itcast.propFix = &#123;</div><div class=\"line\">\t<span class=\"string\">'for'</span>: <span class=\"string\">'htmlFor'</span>,</div><div class=\"line\">\t<span class=\"string\">'class'</span>: <span class=\"string\">'className'</span></div><div class=\"line\">&#125;;</div><div class=\"line\">itcast.each([</div><div class=\"line\">\t<span class=\"string\">\"tabIndex\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"readOnly\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"maxLength\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"cellSpacing\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"cellPadding\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"rowSpan\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"colSpan\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"useMap\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"frameBorder\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"contentEditable\"</span></div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\titcast.propFix[<span class=\"keyword\">this</span>.toLowerCase()] = <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\">prop: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, value</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果没有给value传值</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> prop;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (value == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 并且name的类型为 对象，表示给每一个dom对象添加多个属性</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> name) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 首先从propFix对象上获取属性名字</span></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 如果有，就使用新的属性名字</span></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 如果没有，就使用原来的属性名字</span></div><div class=\"line\">\t\t\t\t\tprop = itcast.propFix[k] ? itcast.propFix[k] : k;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">this</span>[prop] = name[k];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果name的类型 为字符串，表示获取第一个dom对象的指定属性值</span></div><div class=\"line\">\t\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length &gt; <span class=\"number\">0</span> ? <span class=\"keyword\">this</span>[<span class=\"number\">0</span>][prop] : <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果传入两个参数，表示给每一个dom对象添加单个属性</span></div><div class=\"line\">\t\t<span class=\"comment\">// 遍历itcast上的每一个dom对象，添加属性</span></div><div class=\"line\">\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>[prop] = value;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>JQuery模块分析及其实现第三部分属性模块功能及实现,接第二部分!</p>","more":"<h2 id=\"知识点复习\"><a href=\"#知识点复习\" class=\"headerlink\" title=\"知识点复习\"></a>知识点复习</h2><ol>\n<li><p><code>css</code> 方法</p>\n<ul>\n<li>如果只传入一个参数<ul>\n<li>如果参数类型为对象,表示同时设置多个样式</li>\n<li>如果参数类型为字符串,表示获取指定的样式值</li>\n</ul>\n</li>\n<li>如果传入的两个参数,表示设置单个样式值</li>\n</ul>\n</li>\n<li><p><code>itcast.each</code> 方法: 遍历数组或伪数组</p>\n<ul>\n<li>第一个参数,指定遍历的对象</li>\n<li>第二个参数,指定的回调函数,对遍历到的每一个元素,进行相关处理</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"attr方法-setAttribute-和-getAttribute\"><a href=\"#attr方法-setAttribute-和-getAttribute\" class=\"headerlink\" title=\"attr方法( setAttribute 和 getAttribute )\"></a>attr方法( setAttribute 和 getAttribute )</h2><ol>\n<li>功能: 获取(设置)属性节点值</li>\n<li>实现思路<ul>\n<li>给原型添加 <code>attr</code> 方法,定义两个参数:属性节点名字 <code>name</code> 以及属性节点值</li>\n<li>如果只传入一个参数<ul>\n<li>如果参数类型为对象,表示设置多个节点值</li>\n<li>否则获取指定的属性节点值(默认获取第一个 <code>dom</code> 元素的属性节点值)</li>\n</ul>\n</li>\n<li>如果传入两个参数,表示设置单个属性节点值.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">attr: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name,value</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//只传入一个参数</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(value == <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//如果类型为对象,表示设置多个属性</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> name ===<span class=\"string\">'object'</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//遍历itcast上的每一个dom元素,并设置属性节点值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//枚举name对象上的每一个属性</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> name)&#123;</div><div class=\"line\">\t\t\t\t\tv.setAttribute(k, name[k]);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果类型为字符串,获取属性节点值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].getAttribute(name);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">//传入两个参数,表示设置单个属性节点值</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\tv.setAttribute(name, value)</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"html方法\"><a href=\"#html方法\" class=\"headerlink\" title=\"html方法\"></a>html方法</h2><ol>\n<li>功能: <ul>\n<li>不传参数,表示获取指定 <code>dom</code> 元素的 <code>innerHTML</code> 属性值</li>\n<li>否则,表示设置指定 <code>dom</code> 元素的 <code>innerHTML</code> 属性</li>\n</ul>\n</li>\n<li>实行思路<ul>\n<li>判断是否传入参数</li>\n<li>如果没穿,获取 <code>itcast</code> 对象上的第一个 <code>dom</code> 元素的 <code>innerHTML</code> 属性值</li>\n<li>否则,给 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素设置 <code>innerHTML</code> 属性</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">html: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//如果没有给html传值,表示获取</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(html==<span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//如果icast没有任何dom元素,就返回一个期望值,即空字符串</span></div><div class=\"line\">\t\t<span class=\"comment\">//如果有的话,就返回一个dom元素的innerHTML属性值</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">0</span>] ? <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].innerHTML : <span class=\"string\">''</span>;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//如果给html船只,给itcast对象上的每一个dom元素设置innerHTML属性</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</div><div class=\"line\">\t\t\tv.innerHTML = html;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"text方法\"><a href=\"#text方法\" class=\"headerlink\" title=\"text方法\"></a>text方法</h2><ol>\n<li>功能<ul>\n<li>不传值,表示获取文本节点(返回的是后代中所有文本节点值)</li>\n<li>传值,设置指定 <code>dom</code> 元素文本值</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>如果不传值,优先考虑浏览器是否支持 <code>textContent</code> 属性<ul>\n<li>如果支持,就使用 <code>textContent</code> 返回结果集中每一个 <code>dom</code> 元素的文本节点值</li>\n<li>否则,就是用 <code>innerText</code> 返回结果集中每一个 <code>dom</code> 元素的文本节点值</li>\n</ul>\n</li>\n<li>如果传值,给 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素设置文本节点值.<ul>\n<li>如果支持 <code>textContent</code> 属性,就是用该属性设置文本</li>\n<li>否则,就是用 <code>innerText</code> 来设置文本.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">text: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果没有传值，表示获取文本值</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(text == <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 定义结果变量，存储每个dom元素的文本</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ret = <span class=\"string\">''</span>;</div><div class=\"line\">\t\t<span class=\"comment\">// 遍历每一个dom元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果支持textContent，使用其获取文本，累加到ret上</span></div><div class=\"line\">\t\t\tret += <span class=\"string\">'textContent'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span> ?</div><div class=\"line\">\t\t\t\tv.textContent :</div><div class=\"line\">\t\t\t\tv.innerText.replace(<span class=\"regexp\">/\\r\\n/g</span>, <span class=\"string\">''</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"comment\">// 返回所有文本</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果传值了，表示为每个dom设置文本</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果支持textContent，就使用该属性为当前dom元素设置文本节点值</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 否则，使用innerText设置文本节点值。</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"string\">'textContent'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>)&#123;</div><div class=\"line\">\t\t\t\tv.textContent = text;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tv.innerText = text;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"val方法\"><a href=\"#val方法\" class=\"headerlink\" title=\"val方法\"></a>val方法</h2><ol>\n<li>功能( <code>value</code> 属性)<ul>\n<li>如果不传值,表示获取输入框的文本值</li>\n<li>如果传值, 表示给输入框 设置文本</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>如果不传值，表示获取输入框的文本值（获取第一个文本框值）</li>\n<li>如果传值，表示给输入框 设置文本<ul>\n<li>遍历每一个输入框，同时给其设置文本<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">val: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果没有传值，表示获取第一个dom元素的value属性值</span></div><div class=\"line\">\t<span class=\"comment\">// 如果itcast对象上没有任何dom元素，返回空字符串</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(value == <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">0</span>] ? <span class=\"keyword\">this</span>[<span class=\"number\">0</span>].value : <span class=\"string\">''</span>;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 否则，为每一个dom元素设置value属性值</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"prop方法\"><a href=\"#prop方法\" class=\"headerlink\" title=\"prop方法\"></a>prop方法</h2><ol>\n<li>功能:和 <code>attr</code> 相似<ul>\n<li>注意: 有些属性名称,比如 <code>for</code> , <code>class</code> 是保留字或关键字不能作为对象属性名称,所以要创建一个对象,需要转换这类的属性</li>\n<li>定义 <code>propFix</code> 对象,存储上述属性到这属性名称的映射关系</li>\n<li>如果只传入一个参数<ul>\n<li>类型为对象,同时给  <code>dom</code> 对象添加属性</li>\n<li>类型为字符串,获取 <code>itcast</code> 对象上的第一个 <code>dom</code> 对象的指定属性值</li>\n</ul>\n</li>\n<li>如果传入的参数,给所有的 <code>dom</code> 对象添加单个属性</li>\n<li>细节: 无论是设置还是获取属性,在操作之前,先要从 <code>propFix</code> 对象拿到映射后的属性名称<ul>\n<li>如果拿到的心的属性名称不为 <code>undefined</code> ,就用映射后的属性名来操作 <code>dom</code> 对象</li>\n<li>否则,那么久使用旧的属性名称来操作 <code>dom</code> 对象.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 属性模块</span></div><div class=\"line\">itcast.propFix = &#123;</div><div class=\"line\">\t<span class=\"string\">'for'</span>: <span class=\"string\">'htmlFor'</span>,</div><div class=\"line\">\t<span class=\"string\">'class'</span>: <span class=\"string\">'className'</span></div><div class=\"line\">&#125;;</div><div class=\"line\">itcast.each([</div><div class=\"line\">\t<span class=\"string\">\"tabIndex\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"readOnly\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"maxLength\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"cellSpacing\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"cellPadding\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"rowSpan\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"colSpan\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"useMap\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"frameBorder\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"contentEditable\"</span></div><div class=\"line\">], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\titcast.propFix[<span class=\"keyword\">this</span>.toLowerCase()] = <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\">prop: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, value</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果没有给value传值</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> prop;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (value == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 并且name的类型为 对象，表示给每一个dom对象添加多个属性</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> name) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 首先从propFix对象上获取属性名字</span></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 如果有，就使用新的属性名字</span></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 如果没有，就使用原来的属性名字</span></div><div class=\"line\">\t\t\t\t\tprop = itcast.propFix[k] ? itcast.propFix[k] : k;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">this</span>[prop] = name[k];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果name的类型 为字符串，表示获取第一个dom对象的指定属性值</span></div><div class=\"line\">\t\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length &gt; <span class=\"number\">0</span> ? <span class=\"keyword\">this</span>[<span class=\"number\">0</span>][prop] : <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果传入两个参数，表示给每一个dom对象添加单个属性</span></div><div class=\"line\">\t\t<span class=\"comment\">// 遍历itcast上的每一个dom对象，添加属性</span></div><div class=\"line\">\t\tprop = itcast.propFix[name] ? itcast.propFix[name]: name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>[prop] = value;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JQuery分析及实现part5之事件模块功能及实现","date":"2016-11-23T02:27:16.000Z","_content":"\nJQuery模块分析及其实现第五部分事件部分功能及实现,接第四部分!\n\n<!-- more -->\n\n## remove 方法\n\n1. 功能:将筛选出来的所有 `dom` 元素删除掉\n2. 实现思路\n    * 遍历 `this` 上的所有 `dom` 元素;\n    * 获取当前 `dom` 元素的父节点,调用 `removeChild` 方法删除自己;\n    * 循环结束,返回 `this` .\n\n```js\nremove: function() {\n    return this.each(function() {\n        this.parentNode.removeChild(this);\n    });\n},\n```\n\n## empty 方法\n\n1. 功能:将筛选出来的所有 `dom` 元素,清空后代节点\n2. 实现思路\n    * 遍历 `this` 上的所有 `dom` 元素;\n    * 直接给当前 `dom` 元素的 `innerHTML` 属性赋值为空字符串;\n    * 循环结束,返回 `this` ,实现链式编程.\n\n```js\nempty: function() {\n    return this.each(function() {\n        this.innerHTML = '';\n    });\n}\n```\n\n<b>以上接第四部分 `dom` 操作模块</b>\n\n***\n\n<b>事件部分begin</b>\n\n## 事件绑定\n\n1. DOM 0方式\n    * 通过 `dom` 元素的 `on + 事件名` 属性来绑定事件,并且赋值为 一个字符串;\n    * 上述字符串为 执行该事件的代码块(逻辑);\n    * 缺点:可读性以及可维护性不好.\n\n2. DOM 0方式的加强版\n    * 通过 `dom` 元素的 `on + 事件名` 属性来绑定事件,并且赋值为 一个事件处理函数;\n    * 缺点:定义很多的全局函数,容易造成内存过大的损耗,依然没有解决 `js` 代码和 `html` 的耦合度关系;\n\n3. IE标准\n    * 通过 `attachEvent` 来绑定事件;\n    * 语法: `dom.attachEvent(type, callback)`;\n    * 移除事件: `detachEvent(type, callback)`;\n        * 注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的\n\n4. W3C标准\n    * 通过 `addEventListener` 方法来给dom元素绑定事件;\n    * 语法: `dom.addEventListener(type, callback, useCapture默认值为false)`;\n    * 移除事件: `removEventListener(type, callback)`;\n        * 注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的\n\n5. 事件流\n    * 概念: 用户在触发某一动作时,页面所做相关反映的过程\n    * 三个阶段:\n        * 事件捕获阶段\n        * 处于事件源阶段\n        * 冒泡阶段\n    * 事件流种类\n        * 捕获型事件流: 事件处理函数是在事件的捕获阶段执行\n        * 冒泡型事件流: 事件处理函数是在事件的冒泡阶段执行\n\n6. attachEvent 和 addEventListener 区别\n    * 参数个数不同\n    * 事件类型传值不同\n        * `IE` 标准需要加 `on` 前缀\n        * `W3C` 标准不加 `on` 前缀\n    * 在绑定多个事件处理函数时，`IE` 在执行事件处理函数时,顺序不定(根据版本),而 `W3C`按照对垒结构来一次执行事件的处理函数\n    * 在事件处理函数内 `this` 指向不同\n        * IE: `window`\n        * W3C: 返回正在执行事件的处理函数的 `dom` 元素\n\n## addEvent 方法\n\n1. 根据浏览器能力,提前返回事件绑定方法\n2. 如果浏览器符合 `W3C` 标准,使用 `addEventListener` 来绑定事件\n3. 否则就使用 `attachEvent` 来绑定事件\n\n```js\n//提前返回\nvar addEvent = function() {\n    // 如果符合W3C标准，使用addEvnetListener绑定事件\n    if (global.addEventListener) {\n        return function(elem, type, callback, useCapture) {\n            elem.addEventListener(type, callback, useCapture || false);\n        };\n    } else { // 否则就使用IE标准的 attachEvent绑定事件\n        return function(elem, type, callback) {\n            elem.attachEvent('on' + type, callback);\n        };\n    }\n}();\n```\n\n## removeEvent 方法\n\n1. 根据浏览器能力,提前返回事件移除方法\n2. 如果浏览器符合 `W3C` 标准,使用 `removeEventListener` 来移除事件处理函数\n3. 否则就使用 `detachEvent` 来移除事件处理函数\n\n```js\n//提前返回\nvar removeEvent = function() {\n    if (global.removeEventListener) {\n        return function(elem, type, callback) {\n            elem.removeEventListener(type, callback);\n        };\n    } else {\n        return function(elem, type, callback) {\n            elem.detachEvent('on' + type, callback);\n        };\n    }\n}();\n```\n\n## on 方法\n\n1. 功能:给 `itcast` 对象上的所有的 `dom` 元素绑定事件\n2. 实现思路\n    * 遍历 `this` 上所有 `dom` 元素\n    * 调用 `addEvent` 给当前遍历到的 `dom` 元素绑定事件\n    * 返回 `this` ，实现链式编程\n\n```js\non: function(type, callback, capture) {\n    return this.each(function() {\n        addEvent(this, type, callback, capture);\n    });\n},\n```\n\n## off 方法\n\n1.  功能：移除 `itcast` 对象上所有 `dom` 元素的事件处理函数\n2. 实现思路\n    * 遍历 `this` 上所有 `dom` 元素\n    * 调用 `removeEvent` 给当前遍历到的 `dom` 元素移除相应事件的处理函数\n    * 返回 `this` ，实现链式编程\n\n```js\noff: function(type, callback) {\n    return this.each(function() {\n        removeEvent(this, type, callback);\n    });\n}\n```\n\n## click 方法\n\n1. 功能: 给 `itcast` 对象上的所有的 `dom` 元素绑定单击事件处理函数的\n2. 语法: `itcast对象.click(callback)`;\n3. 实现思路\n    * 遍历 `this` 上的所有 `dom` 元素\n    * 调用 `addEventListener` 分别传值即可\n    * `return this` 实现链式编程\n\n```js\nclick: function(callback, capture) {\n    return this.each(function() {\n        addEvent(this, 'click', callback, capture);\n    });\n}\n```\n\n## 快捷绑定事件方法\n\n```js\nitcast.each(['click', 'dblclick', 'keypress', 'keyup', 'keydown', 'mouseover', 'mouseout',\n'mouseenter', 'mouseleave', 'mousemove', 'mouseup', 'mousedown'], function(type) {\n    itcast.fn[type] = function(callback, capture) {\n        return this.on(type, callback, capture);\n    };\n});\n```\n\n","source":"_posts/javascript-jquery-part5.md","raw":"---\ntitle: JQuery分析及实现part5之事件模块功能及实现\ndate: 2016-11-23 10:27:16\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第五部分事件部分功能及实现,接第四部分!\n\n<!-- more -->\n\n## remove 方法\n\n1. 功能:将筛选出来的所有 `dom` 元素删除掉\n2. 实现思路\n    * 遍历 `this` 上的所有 `dom` 元素;\n    * 获取当前 `dom` 元素的父节点,调用 `removeChild` 方法删除自己;\n    * 循环结束,返回 `this` .\n\n```js\nremove: function() {\n    return this.each(function() {\n        this.parentNode.removeChild(this);\n    });\n},\n```\n\n## empty 方法\n\n1. 功能:将筛选出来的所有 `dom` 元素,清空后代节点\n2. 实现思路\n    * 遍历 `this` 上的所有 `dom` 元素;\n    * 直接给当前 `dom` 元素的 `innerHTML` 属性赋值为空字符串;\n    * 循环结束,返回 `this` ,实现链式编程.\n\n```js\nempty: function() {\n    return this.each(function() {\n        this.innerHTML = '';\n    });\n}\n```\n\n<b>以上接第四部分 `dom` 操作模块</b>\n\n***\n\n<b>事件部分begin</b>\n\n## 事件绑定\n\n1. DOM 0方式\n    * 通过 `dom` 元素的 `on + 事件名` 属性来绑定事件,并且赋值为 一个字符串;\n    * 上述字符串为 执行该事件的代码块(逻辑);\n    * 缺点:可读性以及可维护性不好.\n\n2. DOM 0方式的加强版\n    * 通过 `dom` 元素的 `on + 事件名` 属性来绑定事件,并且赋值为 一个事件处理函数;\n    * 缺点:定义很多的全局函数,容易造成内存过大的损耗,依然没有解决 `js` 代码和 `html` 的耦合度关系;\n\n3. IE标准\n    * 通过 `attachEvent` 来绑定事件;\n    * 语法: `dom.attachEvent(type, callback)`;\n    * 移除事件: `detachEvent(type, callback)`;\n        * 注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的\n\n4. W3C标准\n    * 通过 `addEventListener` 方法来给dom元素绑定事件;\n    * 语法: `dom.addEventListener(type, callback, useCapture默认值为false)`;\n    * 移除事件: `removEventListener(type, callback)`;\n        * 注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的\n\n5. 事件流\n    * 概念: 用户在触发某一动作时,页面所做相关反映的过程\n    * 三个阶段:\n        * 事件捕获阶段\n        * 处于事件源阶段\n        * 冒泡阶段\n    * 事件流种类\n        * 捕获型事件流: 事件处理函数是在事件的捕获阶段执行\n        * 冒泡型事件流: 事件处理函数是在事件的冒泡阶段执行\n\n6. attachEvent 和 addEventListener 区别\n    * 参数个数不同\n    * 事件类型传值不同\n        * `IE` 标准需要加 `on` 前缀\n        * `W3C` 标准不加 `on` 前缀\n    * 在绑定多个事件处理函数时，`IE` 在执行事件处理函数时,顺序不定(根据版本),而 `W3C`按照对垒结构来一次执行事件的处理函数\n    * 在事件处理函数内 `this` 指向不同\n        * IE: `window`\n        * W3C: 返回正在执行事件的处理函数的 `dom` 元素\n\n## addEvent 方法\n\n1. 根据浏览器能力,提前返回事件绑定方法\n2. 如果浏览器符合 `W3C` 标准,使用 `addEventListener` 来绑定事件\n3. 否则就使用 `attachEvent` 来绑定事件\n\n```js\n//提前返回\nvar addEvent = function() {\n    // 如果符合W3C标准，使用addEvnetListener绑定事件\n    if (global.addEventListener) {\n        return function(elem, type, callback, useCapture) {\n            elem.addEventListener(type, callback, useCapture || false);\n        };\n    } else { // 否则就使用IE标准的 attachEvent绑定事件\n        return function(elem, type, callback) {\n            elem.attachEvent('on' + type, callback);\n        };\n    }\n}();\n```\n\n## removeEvent 方法\n\n1. 根据浏览器能力,提前返回事件移除方法\n2. 如果浏览器符合 `W3C` 标准,使用 `removeEventListener` 来移除事件处理函数\n3. 否则就使用 `detachEvent` 来移除事件处理函数\n\n```js\n//提前返回\nvar removeEvent = function() {\n    if (global.removeEventListener) {\n        return function(elem, type, callback) {\n            elem.removeEventListener(type, callback);\n        };\n    } else {\n        return function(elem, type, callback) {\n            elem.detachEvent('on' + type, callback);\n        };\n    }\n}();\n```\n\n## on 方法\n\n1. 功能:给 `itcast` 对象上的所有的 `dom` 元素绑定事件\n2. 实现思路\n    * 遍历 `this` 上所有 `dom` 元素\n    * 调用 `addEvent` 给当前遍历到的 `dom` 元素绑定事件\n    * 返回 `this` ，实现链式编程\n\n```js\non: function(type, callback, capture) {\n    return this.each(function() {\n        addEvent(this, type, callback, capture);\n    });\n},\n```\n\n## off 方法\n\n1.  功能：移除 `itcast` 对象上所有 `dom` 元素的事件处理函数\n2. 实现思路\n    * 遍历 `this` 上所有 `dom` 元素\n    * 调用 `removeEvent` 给当前遍历到的 `dom` 元素移除相应事件的处理函数\n    * 返回 `this` ，实现链式编程\n\n```js\noff: function(type, callback) {\n    return this.each(function() {\n        removeEvent(this, type, callback);\n    });\n}\n```\n\n## click 方法\n\n1. 功能: 给 `itcast` 对象上的所有的 `dom` 元素绑定单击事件处理函数的\n2. 语法: `itcast对象.click(callback)`;\n3. 实现思路\n    * 遍历 `this` 上的所有 `dom` 元素\n    * 调用 `addEventListener` 分别传值即可\n    * `return this` 实现链式编程\n\n```js\nclick: function(callback, capture) {\n    return this.each(function() {\n        addEvent(this, 'click', callback, capture);\n    });\n}\n```\n\n## 快捷绑定事件方法\n\n```js\nitcast.each(['click', 'dblclick', 'keypress', 'keyup', 'keydown', 'mouseover', 'mouseout',\n'mouseenter', 'mouseleave', 'mousemove', 'mouseup', 'mousedown'], function(type) {\n    itcast.fn[type] = function(callback, capture) {\n        return this.on(type, callback, capture);\n    };\n});\n```\n\n","slug":"javascript-jquery-part5","published":1,"updated":"2016-11-24T01:37:37.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprj8000o9wg7vhgnuasf","content":"<p>JQuery模块分析及其实现第五部分事件部分功能及实现,接第四部分!</p>\n<a id=\"more\"></a>\n<h2 id=\"remove-方法\"><a href=\"#remove-方法\" class=\"headerlink\" title=\"remove 方法\"></a>remove 方法</h2><ol>\n<li>功能:将筛选出来的所有 <code>dom</code> 元素删除掉</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素;</li>\n<li>获取当前 <code>dom</code> 元素的父节点,调用 <code>removeChild</code> 方法删除自己;</li>\n<li>循环结束,返回 <code>this</code> .</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">remove: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.parentNode.removeChild(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"empty-方法\"><a href=\"#empty-方法\" class=\"headerlink\" title=\"empty 方法\"></a>empty 方法</h2><ol>\n<li>功能:将筛选出来的所有 <code>dom</code> 元素,清空后代节点</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素;</li>\n<li>直接给当前 <code>dom</code> 元素的 <code>innerHTML</code> 属性赋值为空字符串;</li>\n<li>循环结束,返回 <code>this</code> ,实现链式编程.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">empty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.innerHTML = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><b>以上接第四部分 <code>dom</code> 操作模块</b></p>\n<hr>\n<p><b>事件部分begin</b></p>\n<h2 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h2><ol>\n<li><p>DOM 0方式</p>\n<ul>\n<li>通过 <code>dom</code> 元素的 <code>on + 事件名</code> 属性来绑定事件,并且赋值为 一个字符串;</li>\n<li>上述字符串为 执行该事件的代码块(逻辑);</li>\n<li>缺点:可读性以及可维护性不好.</li>\n</ul>\n</li>\n<li><p>DOM 0方式的加强版</p>\n<ul>\n<li>通过 <code>dom</code> 元素的 <code>on + 事件名</code> 属性来绑定事件,并且赋值为 一个事件处理函数;</li>\n<li>缺点:定义很多的全局函数,容易造成内存过大的损耗,依然没有解决 <code>js</code> 代码和 <code>html</code> 的耦合度关系;</li>\n</ul>\n</li>\n<li><p>IE标准</p>\n<ul>\n<li>通过 <code>attachEvent</code> 来绑定事件;</li>\n<li>语法: <code>dom.attachEvent(type, callback)</code>;</li>\n<li>移除事件: <code>detachEvent(type, callback)</code>;<ul>\n<li>注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>W3C标准</p>\n<ul>\n<li>通过 <code>addEventListener</code> 方法来给dom元素绑定事件;</li>\n<li>语法: <code>dom.addEventListener(type, callback, useCapture默认值为false)</code>;</li>\n<li>移除事件: <code>removEventListener(type, callback)</code>;<ul>\n<li>注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>事件流</p>\n<ul>\n<li>概念: 用户在触发某一动作时,页面所做相关反映的过程</li>\n<li>三个阶段:<ul>\n<li>事件捕获阶段</li>\n<li>处于事件源阶段</li>\n<li>冒泡阶段</li>\n</ul>\n</li>\n<li>事件流种类<ul>\n<li>捕获型事件流: 事件处理函数是在事件的捕获阶段执行</li>\n<li>冒泡型事件流: 事件处理函数是在事件的冒泡阶段执行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>attachEvent 和 addEventListener 区别</p>\n<ul>\n<li>参数个数不同</li>\n<li>事件类型传值不同<ul>\n<li><code>IE</code> 标准需要加 <code>on</code> 前缀</li>\n<li><code>W3C</code> 标准不加 <code>on</code> 前缀</li>\n</ul>\n</li>\n<li>在绑定多个事件处理函数时，<code>IE</code> 在执行事件处理函数时,顺序不定(根据版本),而 <code>W3C</code>按照对垒结构来一次执行事件的处理函数</li>\n<li>在事件处理函数内 <code>this</code> 指向不同<ul>\n<li>IE: <code>window</code></li>\n<li>W3C: 返回正在执行事件的处理函数的 <code>dom</code> 元素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"addEvent-方法\"><a href=\"#addEvent-方法\" class=\"headerlink\" title=\"addEvent 方法\"></a>addEvent 方法</h2><ol>\n<li>根据浏览器能力,提前返回事件绑定方法</li>\n<li>如果浏览器符合 <code>W3C</code> 标准,使用 <code>addEventListener</code> 来绑定事件</li>\n<li>否则就使用 <code>attachEvent</code> 来绑定事件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//提前返回</span></div><div class=\"line\"><span class=\"keyword\">var</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 如果符合W3C标准，使用addEvnetListener绑定事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (global.addEventListener) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback, useCapture</span>) </span>&#123;</div><div class=\"line\">            elem.addEventListener(type, callback, useCapture || <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则就使用IE标准的 attachEvent绑定事件</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback</span>) </span>&#123;</div><div class=\"line\">            elem.attachEvent(<span class=\"string\">'on'</span> + type, callback);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<h2 id=\"removeEvent-方法\"><a href=\"#removeEvent-方法\" class=\"headerlink\" title=\"removeEvent 方法\"></a>removeEvent 方法</h2><ol>\n<li>根据浏览器能力,提前返回事件移除方法</li>\n<li>如果浏览器符合 <code>W3C</code> 标准,使用 <code>removeEventListener</code> 来移除事件处理函数</li>\n<li>否则就使用 <code>detachEvent</code> 来移除事件处理函数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//提前返回</span></div><div class=\"line\"><span class=\"keyword\">var</span> removeEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (global.removeEventListener) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback</span>) </span>&#123;</div><div class=\"line\">            elem.removeEventListener(type, callback);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback</span>) </span>&#123;</div><div class=\"line\">            elem.detachEvent(<span class=\"string\">'on'</span> + type, callback);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<h2 id=\"on-方法\"><a href=\"#on-方法\" class=\"headerlink\" title=\"on 方法\"></a>on 方法</h2><ol>\n<li>功能:给 <code>itcast</code> 对象上的所有的 <code>dom</code> 元素绑定事件</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上所有 <code>dom</code> 元素</li>\n<li>调用 <code>addEvent</code> 给当前遍历到的 <code>dom</code> 元素绑定事件</li>\n<li>返回 <code>this</code> ，实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">on: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, callback, capture</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        addEvent(<span class=\"keyword\">this</span>, type, callback, capture);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"off-方法\"><a href=\"#off-方法\" class=\"headerlink\" title=\"off 方法\"></a>off 方法</h2><ol>\n<li>功能：移除 <code>itcast</code> 对象上所有 <code>dom</code> 元素的事件处理函数</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上所有 <code>dom</code> 元素</li>\n<li>调用 <code>removeEvent</code> 给当前遍历到的 <code>dom</code> 元素移除相应事件的处理函数</li>\n<li>返回 <code>this</code> ，实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">off: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        removeEvent(<span class=\"keyword\">this</span>, type, callback);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"click-方法\"><a href=\"#click-方法\" class=\"headerlink\" title=\"click 方法\"></a>click 方法</h2><ol>\n<li>功能: 给 <code>itcast</code> 对象上的所有的 <code>dom</code> 元素绑定单击事件处理函数的</li>\n<li>语法: <code>itcast对象.click(callback)</code>;</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>调用 <code>addEventListener</code> 分别传值即可</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">click: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, capture</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        addEvent(<span class=\"keyword\">this</span>, <span class=\"string\">'click'</span>, callback, capture);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快捷绑定事件方法\"><a href=\"#快捷绑定事件方法\" class=\"headerlink\" title=\"快捷绑定事件方法\"></a>快捷绑定事件方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">itcast.each([<span class=\"string\">'click'</span>, <span class=\"string\">'dblclick'</span>, <span class=\"string\">'keypress'</span>, <span class=\"string\">'keyup'</span>, <span class=\"string\">'keydown'</span>, <span class=\"string\">'mouseover'</span>, <span class=\"string\">'mouseout'</span>,</div><div class=\"line\"><span class=\"string\">'mouseenter'</span>, <span class=\"string\">'mouseleave'</span>, <span class=\"string\">'mousemove'</span>, <span class=\"string\">'mouseup'</span>, <span class=\"string\">'mousedown'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>) </span>&#123;</div><div class=\"line\">    itcast.fn[type] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, capture</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.on(type, callback, capture);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"<p>JQuery模块分析及其实现第五部分事件部分功能及实现,接第四部分!</p>","more":"<h2 id=\"remove-方法\"><a href=\"#remove-方法\" class=\"headerlink\" title=\"remove 方法\"></a>remove 方法</h2><ol>\n<li>功能:将筛选出来的所有 <code>dom</code> 元素删除掉</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素;</li>\n<li>获取当前 <code>dom</code> 元素的父节点,调用 <code>removeChild</code> 方法删除自己;</li>\n<li>循环结束,返回 <code>this</code> .</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">remove: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.parentNode.removeChild(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"empty-方法\"><a href=\"#empty-方法\" class=\"headerlink\" title=\"empty 方法\"></a>empty 方法</h2><ol>\n<li>功能:将筛选出来的所有 <code>dom</code> 元素,清空后代节点</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素;</li>\n<li>直接给当前 <code>dom</code> 元素的 <code>innerHTML</code> 属性赋值为空字符串;</li>\n<li>循环结束,返回 <code>this</code> ,实现链式编程.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">empty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.innerHTML = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><b>以上接第四部分 <code>dom</code> 操作模块</b></p>\n<hr>\n<p><b>事件部分begin</b></p>\n<h2 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h2><ol>\n<li><p>DOM 0方式</p>\n<ul>\n<li>通过 <code>dom</code> 元素的 <code>on + 事件名</code> 属性来绑定事件,并且赋值为 一个字符串;</li>\n<li>上述字符串为 执行该事件的代码块(逻辑);</li>\n<li>缺点:可读性以及可维护性不好.</li>\n</ul>\n</li>\n<li><p>DOM 0方式的加强版</p>\n<ul>\n<li>通过 <code>dom</code> 元素的 <code>on + 事件名</code> 属性来绑定事件,并且赋值为 一个事件处理函数;</li>\n<li>缺点:定义很多的全局函数,容易造成内存过大的损耗,依然没有解决 <code>js</code> 代码和 <code>html</code> 的耦合度关系;</li>\n</ul>\n</li>\n<li><p>IE标准</p>\n<ul>\n<li>通过 <code>attachEvent</code> 来绑定事件;</li>\n<li>语法: <code>dom.attachEvent(type, callback)</code>;</li>\n<li>移除事件: <code>detachEvent(type, callback)</code>;<ul>\n<li>注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>W3C标准</p>\n<ul>\n<li>通过 <code>addEventListener</code> 方法来给dom元素绑定事件;</li>\n<li>语法: <code>dom.addEventListener(type, callback, useCapture默认值为false)</code>;</li>\n<li>移除事件: <code>removEventListener(type, callback)</code>;<ul>\n<li>注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>事件流</p>\n<ul>\n<li>概念: 用户在触发某一动作时,页面所做相关反映的过程</li>\n<li>三个阶段:<ul>\n<li>事件捕获阶段</li>\n<li>处于事件源阶段</li>\n<li>冒泡阶段</li>\n</ul>\n</li>\n<li>事件流种类<ul>\n<li>捕获型事件流: 事件处理函数是在事件的捕获阶段执行</li>\n<li>冒泡型事件流: 事件处理函数是在事件的冒泡阶段执行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>attachEvent 和 addEventListener 区别</p>\n<ul>\n<li>参数个数不同</li>\n<li>事件类型传值不同<ul>\n<li><code>IE</code> 标准需要加 <code>on</code> 前缀</li>\n<li><code>W3C</code> 标准不加 <code>on</code> 前缀</li>\n</ul>\n</li>\n<li>在绑定多个事件处理函数时，<code>IE</code> 在执行事件处理函数时,顺序不定(根据版本),而 <code>W3C</code>按照对垒结构来一次执行事件的处理函数</li>\n<li>在事件处理函数内 <code>this</code> 指向不同<ul>\n<li>IE: <code>window</code></li>\n<li>W3C: 返回正在执行事件的处理函数的 <code>dom</code> 元素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"addEvent-方法\"><a href=\"#addEvent-方法\" class=\"headerlink\" title=\"addEvent 方法\"></a>addEvent 方法</h2><ol>\n<li>根据浏览器能力,提前返回事件绑定方法</li>\n<li>如果浏览器符合 <code>W3C</code> 标准,使用 <code>addEventListener</code> 来绑定事件</li>\n<li>否则就使用 <code>attachEvent</code> 来绑定事件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//提前返回</span></div><div class=\"line\"><span class=\"keyword\">var</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 如果符合W3C标准，使用addEvnetListener绑定事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (global.addEventListener) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback, useCapture</span>) </span>&#123;</div><div class=\"line\">            elem.addEventListener(type, callback, useCapture || <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则就使用IE标准的 attachEvent绑定事件</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback</span>) </span>&#123;</div><div class=\"line\">            elem.attachEvent(<span class=\"string\">'on'</span> + type, callback);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<h2 id=\"removeEvent-方法\"><a href=\"#removeEvent-方法\" class=\"headerlink\" title=\"removeEvent 方法\"></a>removeEvent 方法</h2><ol>\n<li>根据浏览器能力,提前返回事件移除方法</li>\n<li>如果浏览器符合 <code>W3C</code> 标准,使用 <code>removeEventListener</code> 来移除事件处理函数</li>\n<li>否则就使用 <code>detachEvent</code> 来移除事件处理函数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//提前返回</span></div><div class=\"line\"><span class=\"keyword\">var</span> removeEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (global.removeEventListener) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback</span>) </span>&#123;</div><div class=\"line\">            elem.removeEventListener(type, callback);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, type, callback</span>) </span>&#123;</div><div class=\"line\">            elem.detachEvent(<span class=\"string\">'on'</span> + type, callback);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>\n<h2 id=\"on-方法\"><a href=\"#on-方法\" class=\"headerlink\" title=\"on 方法\"></a>on 方法</h2><ol>\n<li>功能:给 <code>itcast</code> 对象上的所有的 <code>dom</code> 元素绑定事件</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上所有 <code>dom</code> 元素</li>\n<li>调用 <code>addEvent</code> 给当前遍历到的 <code>dom</code> 元素绑定事件</li>\n<li>返回 <code>this</code> ，实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">on: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, callback, capture</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        addEvent(<span class=\"keyword\">this</span>, type, callback, capture);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"off-方法\"><a href=\"#off-方法\" class=\"headerlink\" title=\"off 方法\"></a>off 方法</h2><ol>\n<li>功能：移除 <code>itcast</code> 对象上所有 <code>dom</code> 元素的事件处理函数</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上所有 <code>dom</code> 元素</li>\n<li>调用 <code>removeEvent</code> 给当前遍历到的 <code>dom</code> 元素移除相应事件的处理函数</li>\n<li>返回 <code>this</code> ，实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">off: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        removeEvent(<span class=\"keyword\">this</span>, type, callback);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"click-方法\"><a href=\"#click-方法\" class=\"headerlink\" title=\"click 方法\"></a>click 方法</h2><ol>\n<li>功能: 给 <code>itcast</code> 对象上的所有的 <code>dom</code> 元素绑定单击事件处理函数的</li>\n<li>语法: <code>itcast对象.click(callback)</code>;</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>调用 <code>addEventListener</code> 分别传值即可</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">click: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, capture</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        addEvent(<span class=\"keyword\">this</span>, <span class=\"string\">'click'</span>, callback, capture);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快捷绑定事件方法\"><a href=\"#快捷绑定事件方法\" class=\"headerlink\" title=\"快捷绑定事件方法\"></a>快捷绑定事件方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">itcast.each([<span class=\"string\">'click'</span>, <span class=\"string\">'dblclick'</span>, <span class=\"string\">'keypress'</span>, <span class=\"string\">'keyup'</span>, <span class=\"string\">'keydown'</span>, <span class=\"string\">'mouseover'</span>, <span class=\"string\">'mouseout'</span>,</div><div class=\"line\"><span class=\"string\">'mouseenter'</span>, <span class=\"string\">'mouseleave'</span>, <span class=\"string\">'mousemove'</span>, <span class=\"string\">'mouseup'</span>, <span class=\"string\">'mousedown'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type</span>) </span>&#123;</div><div class=\"line\">    itcast.fn[type] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, capture</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.on(type, callback, capture);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"JavaScript高级篇之part1","date":"2016-05-08T09:31:48.000Z","_content":"\njavascript高级与面向对象笔记整理，第一篇！！\n\n<!-- more -->\n\n## JavaScript基础知识复习\n\n### JavaScript的基本组成\n\n* `ECMAScript`     规定了 `JavaScript` 的语法规范\n* `DOM`            提供了访问页面元素的 `API`\n* `BOM`            提供了访问浏览器相关信息的 `API`\n\n### JavaScript的数据类型\n\n#### 简单类型\n\n* `string`\n* `number`\n* `boolean`\n* `undefined`\n\n#### 复杂类型\n\n* `Object`\n* `function`\n* `Array`\n* `Date`\n* `RegExp`\n* `Math`（对象）\n* `String`\n* `Number`\n* `Boolean`\n* `null(特殊的)`\n\n#### 获取类型的关键字 `typeof`\n\n```js\ntypeof 变量名（表达式）\n//返回值为字符串类型\n```\n\n#### 引用类型 值类型\n\n##### 引用类型\n\n存储的是数据的地址的数据就是引用类型的数据\n\t\n##### 值类型\n\n存储的数据本身的数据就是值类型的数据\n\n##### 赋值特征\n\n* 值类型进行赋值的时候，直接将数据复制一份赋值给新的变量，两份数据互不影响\n* 引用类型进行赋值的时候，将数据的地址复制一份赋值给新的变量，两个变量指向同一个对象，两个互相影响\n\n### `in` 关键字\n\n#### `for-in`\n\n用来遍历对象的属性的，每次遍历到的属性是字符串类型的\n\t\n```js\n\tfor(var k in obj){\n\t\t//这里的k就是每个键\n\t}\n```\n\n#### `in`\n\n检测对象中是否存在某个属性\n\t\n```js\n属性名 in 对象名\n```\n\n### 逻辑中断\n\n#### ||\n\n `表达式1 || 表达式2`\n如果表达式 `1` 为真，就返回表达式 `1` ，如果表达式 `1` 位假，则返回表达式 `2`\n\t\n#### &&\n\n `表达式1 && 表达式2`\n如果表达式 `1` 为真，就返回表达式 `2` ，如果表达式 `1` 为假，则返回表达式 `1`\n\n### delete关键字\n\n* 删除未使用 `var` 声明的变量\n* 删除对象的属性\n*  `window` 有自带的属性 `name` \n\n### `continue` 和 `break`\n\n*  `continue ` 跳出本次循环，继续下次循环\n*  `break` 跳出整个循环，继续执行循环之后的代码\n\n### 对象的动态特性\n\n对象在创建出来之后，可以随时的新增成员（方法和属性），这就是对象的动态特性\n\n### 调试工具的使用\n\n* 普通断点\n* 条件断点\n* `Elements`  审查元素 做 `css`\n* `Console`  跟页面在同一个 `js` 的运行环境中，可以写任何的 `js` 代码，也可以用 `js` 操作页面元素\n* `Sources`  所有的资源文件都在这里，最重要的就是可以在这里对 `js`代码进行断点调试\n\n### 异常处理\n\n```js\ntry{\n    //可能出现异常的代码\n}catch(e){\n    //e 异常对象，异常信息\n    //捕获异常后的处理代码\n}finally{\n    //不论是否发生异常，都会执行的代码\n}\n```\n\n## 面向对象简单介绍\n\n### 面向对象的基本概念\n\n面向对象是一种思维方式，他是将解决问题的关注点放到了解决问题所需要的一些列对象身上\n\n### 面向过程的基本概念\n\n面向过程是一种思维方式，他是将解决问题的关注点放到了解决问题的每一个详细的步骤上\n\n### 面向对象就是对面向过程的封装","source":"_posts/javascript-part1.md","raw":"---\ntitle: JavaScript高级篇之part1\ndate: 2016-05-08 17:31:48\ntags: javascript\ncategories: javascript\n---\n\njavascript高级与面向对象笔记整理，第一篇！！\n\n<!-- more -->\n\n## JavaScript基础知识复习\n\n### JavaScript的基本组成\n\n* `ECMAScript`     规定了 `JavaScript` 的语法规范\n* `DOM`            提供了访问页面元素的 `API`\n* `BOM`            提供了访问浏览器相关信息的 `API`\n\n### JavaScript的数据类型\n\n#### 简单类型\n\n* `string`\n* `number`\n* `boolean`\n* `undefined`\n\n#### 复杂类型\n\n* `Object`\n* `function`\n* `Array`\n* `Date`\n* `RegExp`\n* `Math`（对象）\n* `String`\n* `Number`\n* `Boolean`\n* `null(特殊的)`\n\n#### 获取类型的关键字 `typeof`\n\n```js\ntypeof 变量名（表达式）\n//返回值为字符串类型\n```\n\n#### 引用类型 值类型\n\n##### 引用类型\n\n存储的是数据的地址的数据就是引用类型的数据\n\t\n##### 值类型\n\n存储的数据本身的数据就是值类型的数据\n\n##### 赋值特征\n\n* 值类型进行赋值的时候，直接将数据复制一份赋值给新的变量，两份数据互不影响\n* 引用类型进行赋值的时候，将数据的地址复制一份赋值给新的变量，两个变量指向同一个对象，两个互相影响\n\n### `in` 关键字\n\n#### `for-in`\n\n用来遍历对象的属性的，每次遍历到的属性是字符串类型的\n\t\n```js\n\tfor(var k in obj){\n\t\t//这里的k就是每个键\n\t}\n```\n\n#### `in`\n\n检测对象中是否存在某个属性\n\t\n```js\n属性名 in 对象名\n```\n\n### 逻辑中断\n\n#### ||\n\n `表达式1 || 表达式2`\n如果表达式 `1` 为真，就返回表达式 `1` ，如果表达式 `1` 位假，则返回表达式 `2`\n\t\n#### &&\n\n `表达式1 && 表达式2`\n如果表达式 `1` 为真，就返回表达式 `2` ，如果表达式 `1` 为假，则返回表达式 `1`\n\n### delete关键字\n\n* 删除未使用 `var` 声明的变量\n* 删除对象的属性\n*  `window` 有自带的属性 `name` \n\n### `continue` 和 `break`\n\n*  `continue ` 跳出本次循环，继续下次循环\n*  `break` 跳出整个循环，继续执行循环之后的代码\n\n### 对象的动态特性\n\n对象在创建出来之后，可以随时的新增成员（方法和属性），这就是对象的动态特性\n\n### 调试工具的使用\n\n* 普通断点\n* 条件断点\n* `Elements`  审查元素 做 `css`\n* `Console`  跟页面在同一个 `js` 的运行环境中，可以写任何的 `js` 代码，也可以用 `js` 操作页面元素\n* `Sources`  所有的资源文件都在这里，最重要的就是可以在这里对 `js`代码进行断点调试\n\n### 异常处理\n\n```js\ntry{\n    //可能出现异常的代码\n}catch(e){\n    //e 异常对象，异常信息\n    //捕获异常后的处理代码\n}finally{\n    //不论是否发生异常，都会执行的代码\n}\n```\n\n## 面向对象简单介绍\n\n### 面向对象的基本概念\n\n面向对象是一种思维方式，他是将解决问题的关注点放到了解决问题所需要的一些列对象身上\n\n### 面向过程的基本概念\n\n面向过程是一种思维方式，他是将解决问题的关注点放到了解决问题的每一个详细的步骤上\n\n### 面向对象就是对面向过程的封装","slug":"javascript-part1","published":1,"updated":"2016-11-24T01:21:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprjj000r9wg73fmgdgyf","content":"<p>javascript高级与面向对象笔记整理，第一篇！！</p>\n<a id=\"more\"></a>\n<h2 id=\"JavaScript基础知识复习\"><a href=\"#JavaScript基础知识复习\" class=\"headerlink\" title=\"JavaScript基础知识复习\"></a>JavaScript基础知识复习</h2><h3 id=\"JavaScript的基本组成\"><a href=\"#JavaScript的基本组成\" class=\"headerlink\" title=\"JavaScript的基本组成\"></a>JavaScript的基本组成</h3><ul>\n<li><code>ECMAScript</code>     规定了 <code>JavaScript</code> 的语法规范</li>\n<li><code>DOM</code>            提供了访问页面元素的 <code>API</code></li>\n<li><code>BOM</code>            提供了访问浏览器相关信息的 <code>API</code></li>\n</ul>\n<h3 id=\"JavaScript的数据类型\"><a href=\"#JavaScript的数据类型\" class=\"headerlink\" title=\"JavaScript的数据类型\"></a>JavaScript的数据类型</h3><h4 id=\"简单类型\"><a href=\"#简单类型\" class=\"headerlink\" title=\"简单类型\"></a>简单类型</h4><ul>\n<li><code>string</code></li>\n<li><code>number</code></li>\n<li><code>boolean</code></li>\n<li><code>undefined</code></li>\n</ul>\n<h4 id=\"复杂类型\"><a href=\"#复杂类型\" class=\"headerlink\" title=\"复杂类型\"></a>复杂类型</h4><ul>\n<li><code>Object</code></li>\n<li><code>function</code></li>\n<li><code>Array</code></li>\n<li><code>Date</code></li>\n<li><code>RegExp</code></li>\n<li><code>Math</code>（对象）</li>\n<li><code>String</code></li>\n<li><code>Number</code></li>\n<li><code>Boolean</code></li>\n<li><code>null(特殊的)</code></li>\n</ul>\n<h4 id=\"获取类型的关键字-typeof\"><a href=\"#获取类型的关键字-typeof\" class=\"headerlink\" title=\"获取类型的关键字 typeof\"></a>获取类型的关键字 <code>typeof</code></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> 变量名（表达式）</div><div class=\"line\"><span class=\"comment\">//返回值为字符串类型</span></div></pre></td></tr></table></figure>\n<h4 id=\"引用类型-值类型\"><a href=\"#引用类型-值类型\" class=\"headerlink\" title=\"引用类型 值类型\"></a>引用类型 值类型</h4><h5 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h5><p>存储的是数据的地址的数据就是引用类型的数据</p>\n<h5 id=\"值类型\"><a href=\"#值类型\" class=\"headerlink\" title=\"值类型\"></a>值类型</h5><p>存储的数据本身的数据就是值类型的数据</p>\n<h5 id=\"赋值特征\"><a href=\"#赋值特征\" class=\"headerlink\" title=\"赋值特征\"></a>赋值特征</h5><ul>\n<li>值类型进行赋值的时候，直接将数据复制一份赋值给新的变量，两份数据互不影响</li>\n<li>引用类型进行赋值的时候，将数据的地址复制一份赋值给新的变量，两个变量指向同一个对象，两个互相影响</li>\n</ul>\n<h3 id=\"in-关键字\"><a href=\"#in-关键字\" class=\"headerlink\" title=\"in 关键字\"></a><code>in</code> 关键字</h3><h4 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for-in\"></a><code>for-in</code></h4><p>用来遍历对象的属性的，每次遍历到的属性是字符串类型的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj)&#123;</div><div class=\"line\">\t<span class=\"comment\">//这里的k就是每个键</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a><code>in</code></h4><p>检测对象中是否存在某个属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">属性名 <span class=\"keyword\">in</span> 对象名</div></pre></td></tr></table></figure>\n<h3 id=\"逻辑中断\"><a href=\"#逻辑中断\" class=\"headerlink\" title=\"逻辑中断\"></a>逻辑中断</h3><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"||\"></a>||</h4><p> <code>表达式1 || 表达式2</code><br>如果表达式 <code>1</code> 为真，就返回表达式 <code>1</code> ，如果表达式 <code>1</code> 位假，则返回表达式 <code>2</code></p>\n<h4 id=\"amp-amp\"><a href=\"#amp-amp\" class=\"headerlink\" title=\"&amp;&amp;\"></a>&amp;&amp;</h4><p> <code>表达式1 &amp;&amp; 表达式2</code><br>如果表达式 <code>1</code> 为真，就返回表达式 <code>2</code> ，如果表达式 <code>1</code> 为假，则返回表达式 <code>1</code></p>\n<h3 id=\"delete关键字\"><a href=\"#delete关键字\" class=\"headerlink\" title=\"delete关键字\"></a>delete关键字</h3><ul>\n<li>删除未使用 <code>var</code> 声明的变量</li>\n<li>删除对象的属性</li>\n<li><code>window</code> 有自带的属性 <code>name</code> </li>\n</ul>\n<h3 id=\"continue-和-break\"><a href=\"#continue-和-break\" class=\"headerlink\" title=\"continue 和 break\"></a><code>continue</code> 和 <code>break</code></h3><ul>\n<li><code>continue</code> 跳出本次循环，继续下次循环</li>\n<li><code>break</code> 跳出整个循环，继续执行循环之后的代码</li>\n</ul>\n<h3 id=\"对象的动态特性\"><a href=\"#对象的动态特性\" class=\"headerlink\" title=\"对象的动态特性\"></a>对象的动态特性</h3><p>对象在创建出来之后，可以随时的新增成员（方法和属性），这就是对象的动态特性</p>\n<h3 id=\"调试工具的使用\"><a href=\"#调试工具的使用\" class=\"headerlink\" title=\"调试工具的使用\"></a>调试工具的使用</h3><ul>\n<li>普通断点</li>\n<li>条件断点</li>\n<li><code>Elements</code>  审查元素 做 <code>css</code></li>\n<li><code>Console</code>  跟页面在同一个 <code>js</code> 的运行环境中，可以写任何的 <code>js</code> 代码，也可以用 <code>js</code> 操作页面元素</li>\n<li><code>Sources</code>  所有的资源文件都在这里，最重要的就是可以在这里对 <code>js</code>代码进行断点调试</li>\n</ul>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//可能出现异常的代码</span></div><div class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</div><div class=\"line\">    <span class=\"comment\">//e 异常对象，异常信息</span></div><div class=\"line\">    <span class=\"comment\">//捕获异常后的处理代码</span></div><div class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//不论是否发生异常，都会执行的代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"面向对象简单介绍\"><a href=\"#面向对象简单介绍\" class=\"headerlink\" title=\"面向对象简单介绍\"></a>面向对象简单介绍</h2><h3 id=\"面向对象的基本概念\"><a href=\"#面向对象的基本概念\" class=\"headerlink\" title=\"面向对象的基本概念\"></a>面向对象的基本概念</h3><p>面向对象是一种思维方式，他是将解决问题的关注点放到了解决问题所需要的一些列对象身上</p>\n<h3 id=\"面向过程的基本概念\"><a href=\"#面向过程的基本概念\" class=\"headerlink\" title=\"面向过程的基本概念\"></a>面向过程的基本概念</h3><p>面向过程是一种思维方式，他是将解决问题的关注点放到了解决问题的每一个详细的步骤上</p>\n<h3 id=\"面向对象就是对面向过程的封装\"><a href=\"#面向对象就是对面向过程的封装\" class=\"headerlink\" title=\"面向对象就是对面向过程的封装\"></a>面向对象就是对面向过程的封装</h3>","excerpt":"<p>javascript高级与面向对象笔记整理，第一篇！！</p>","more":"<h2 id=\"JavaScript基础知识复习\"><a href=\"#JavaScript基础知识复习\" class=\"headerlink\" title=\"JavaScript基础知识复习\"></a>JavaScript基础知识复习</h2><h3 id=\"JavaScript的基本组成\"><a href=\"#JavaScript的基本组成\" class=\"headerlink\" title=\"JavaScript的基本组成\"></a>JavaScript的基本组成</h3><ul>\n<li><code>ECMAScript</code>     规定了 <code>JavaScript</code> 的语法规范</li>\n<li><code>DOM</code>            提供了访问页面元素的 <code>API</code></li>\n<li><code>BOM</code>            提供了访问浏览器相关信息的 <code>API</code></li>\n</ul>\n<h3 id=\"JavaScript的数据类型\"><a href=\"#JavaScript的数据类型\" class=\"headerlink\" title=\"JavaScript的数据类型\"></a>JavaScript的数据类型</h3><h4 id=\"简单类型\"><a href=\"#简单类型\" class=\"headerlink\" title=\"简单类型\"></a>简单类型</h4><ul>\n<li><code>string</code></li>\n<li><code>number</code></li>\n<li><code>boolean</code></li>\n<li><code>undefined</code></li>\n</ul>\n<h4 id=\"复杂类型\"><a href=\"#复杂类型\" class=\"headerlink\" title=\"复杂类型\"></a>复杂类型</h4><ul>\n<li><code>Object</code></li>\n<li><code>function</code></li>\n<li><code>Array</code></li>\n<li><code>Date</code></li>\n<li><code>RegExp</code></li>\n<li><code>Math</code>（对象）</li>\n<li><code>String</code></li>\n<li><code>Number</code></li>\n<li><code>Boolean</code></li>\n<li><code>null(特殊的)</code></li>\n</ul>\n<h4 id=\"获取类型的关键字-typeof\"><a href=\"#获取类型的关键字-typeof\" class=\"headerlink\" title=\"获取类型的关键字 typeof\"></a>获取类型的关键字 <code>typeof</code></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> 变量名（表达式）</div><div class=\"line\"><span class=\"comment\">//返回值为字符串类型</span></div></pre></td></tr></table></figure>\n<h4 id=\"引用类型-值类型\"><a href=\"#引用类型-值类型\" class=\"headerlink\" title=\"引用类型 值类型\"></a>引用类型 值类型</h4><h5 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h5><p>存储的是数据的地址的数据就是引用类型的数据</p>\n<h5 id=\"值类型\"><a href=\"#值类型\" class=\"headerlink\" title=\"值类型\"></a>值类型</h5><p>存储的数据本身的数据就是值类型的数据</p>\n<h5 id=\"赋值特征\"><a href=\"#赋值特征\" class=\"headerlink\" title=\"赋值特征\"></a>赋值特征</h5><ul>\n<li>值类型进行赋值的时候，直接将数据复制一份赋值给新的变量，两份数据互不影响</li>\n<li>引用类型进行赋值的时候，将数据的地址复制一份赋值给新的变量，两个变量指向同一个对象，两个互相影响</li>\n</ul>\n<h3 id=\"in-关键字\"><a href=\"#in-关键字\" class=\"headerlink\" title=\"in 关键字\"></a><code>in</code> 关键字</h3><h4 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for-in\"></a><code>for-in</code></h4><p>用来遍历对象的属性的，每次遍历到的属性是字符串类型的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj)&#123;</div><div class=\"line\">\t<span class=\"comment\">//这里的k就是每个键</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a><code>in</code></h4><p>检测对象中是否存在某个属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">属性名 <span class=\"keyword\">in</span> 对象名</div></pre></td></tr></table></figure>\n<h3 id=\"逻辑中断\"><a href=\"#逻辑中断\" class=\"headerlink\" title=\"逻辑中断\"></a>逻辑中断</h3><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"||\"></a>||</h4><p> <code>表达式1 || 表达式2</code><br>如果表达式 <code>1</code> 为真，就返回表达式 <code>1</code> ，如果表达式 <code>1</code> 位假，则返回表达式 <code>2</code></p>\n<h4 id=\"amp-amp\"><a href=\"#amp-amp\" class=\"headerlink\" title=\"&amp;&amp;\"></a>&amp;&amp;</h4><p> <code>表达式1 &amp;&amp; 表达式2</code><br>如果表达式 <code>1</code> 为真，就返回表达式 <code>2</code> ，如果表达式 <code>1</code> 为假，则返回表达式 <code>1</code></p>\n<h3 id=\"delete关键字\"><a href=\"#delete关键字\" class=\"headerlink\" title=\"delete关键字\"></a>delete关键字</h3><ul>\n<li>删除未使用 <code>var</code> 声明的变量</li>\n<li>删除对象的属性</li>\n<li><code>window</code> 有自带的属性 <code>name</code> </li>\n</ul>\n<h3 id=\"continue-和-break\"><a href=\"#continue-和-break\" class=\"headerlink\" title=\"continue 和 break\"></a><code>continue</code> 和 <code>break</code></h3><ul>\n<li><code>continue</code> 跳出本次循环，继续下次循环</li>\n<li><code>break</code> 跳出整个循环，继续执行循环之后的代码</li>\n</ul>\n<h3 id=\"对象的动态特性\"><a href=\"#对象的动态特性\" class=\"headerlink\" title=\"对象的动态特性\"></a>对象的动态特性</h3><p>对象在创建出来之后，可以随时的新增成员（方法和属性），这就是对象的动态特性</p>\n<h3 id=\"调试工具的使用\"><a href=\"#调试工具的使用\" class=\"headerlink\" title=\"调试工具的使用\"></a>调试工具的使用</h3><ul>\n<li>普通断点</li>\n<li>条件断点</li>\n<li><code>Elements</code>  审查元素 做 <code>css</code></li>\n<li><code>Console</code>  跟页面在同一个 <code>js</code> 的运行环境中，可以写任何的 <code>js</code> 代码，也可以用 <code>js</code> 操作页面元素</li>\n<li><code>Sources</code>  所有的资源文件都在这里，最重要的就是可以在这里对 <code>js</code>代码进行断点调试</li>\n</ul>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//可能出现异常的代码</span></div><div class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</div><div class=\"line\">    <span class=\"comment\">//e 异常对象，异常信息</span></div><div class=\"line\">    <span class=\"comment\">//捕获异常后的处理代码</span></div><div class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//不论是否发生异常，都会执行的代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"面向对象简单介绍\"><a href=\"#面向对象简单介绍\" class=\"headerlink\" title=\"面向对象简单介绍\"></a>面向对象简单介绍</h2><h3 id=\"面向对象的基本概念\"><a href=\"#面向对象的基本概念\" class=\"headerlink\" title=\"面向对象的基本概念\"></a>面向对象的基本概念</h3><p>面向对象是一种思维方式，他是将解决问题的关注点放到了解决问题所需要的一些列对象身上</p>\n<h3 id=\"面向过程的基本概念\"><a href=\"#面向过程的基本概念\" class=\"headerlink\" title=\"面向过程的基本概念\"></a>面向过程的基本概念</h3><p>面向过程是一种思维方式，他是将解决问题的关注点放到了解决问题的每一个详细的步骤上</p>\n<h3 id=\"面向对象就是对面向过程的封装\"><a href=\"#面向对象就是对面向过程的封装\" class=\"headerlink\" title=\"面向对象就是对面向过程的封装\"></a>面向对象就是对面向过程的封装</h3>"},{"title":"JQuery分析及实现part2之css部分功能及实现","date":"2016-11-19T11:02:01.000Z","_content":"\nJQuery模块分析及其实现第二部分css部分功能及实现,接第一部分!\n\n<!-- more -->\n\n## hasClass方法\n\n1. 功能:如果结果集里只要有一个 `dom` 元素,具有指定的样式类,就返回 `true` \n2. 实现思路\n\t* 定义结果变量 `ret` ,默认值为 `false`\n\t* 遍历结果集的每一个 `dom` 元素,如果当前 `dom` 元素具有指定的样式类,将 `ret=true` 结束循环\n\t* 返回 `ret` .\n\n\t* 如何判断 `dom` 元素具有指定的样式类?\n\t在 `dom` 元素所有的样式类的 `首位 + 空格` ;在用户指定的样式类 `首位 + 空格` 调用indexOf方法,如果返回值 = -1,表示没有;否则就具有指定样式类\n\n```js\nhasClass: function(className) {\n\t// 默认结果false\n\tvar ret = false;\n\t// 遍历this上的每一个dom元素\t\t\t\t\t\n\t// for(var i = 0, l = this.length;i < l;i++){\n\t// \t// 如果当前dom元素具有指定的样式类\n\t// \t// 返回值为true，结束循环\n\t// if((' ' + this[i].className + ' ')\n\t// \t.indexOf(' ' + className + ' ') !== -1) {\n\t// \tret = true;\n\t// \tbreak;\n\t// }\n\t// }\n\tthis.each(function(v) {\n\t\tif ((' ' + v.className + ' ')\n\t\t\t.indexOf(' ' + className + ' ') !== -1) {\n\t\t\tret = true;\n\t\t\treturn false;\n\t\t}\n\t});\n\n\treturn ret;\n},\n```\n\n## $.each方法\n\n1. 功能:实现遍历数组或者伪数组,通过第二个参数(回调函数)来处理遍历到的每一个元素\n\t在回调函数中, `this` 是指向当前遍历的元素.\n2. 语法: `$.each([数组/伪数组], callback)` ;\n3. 实现思路\n\t* 声明 `each` 函数,定义两个形参,第一个 遍历的(伪)数组;第二: 回调函数\n\t* 使用 `for` 循环,遍历(伪)数组,再循环体内部执行回调函数. 在执行时,给回调函数传实参\n\t* 实现回调函数内部 `this` 指向,当前遍历到的元素\n\t* 通过回调函数的返回值,判断是否结束循环. 规定:当返回值为 `false` ,结束循环\n```js\neach: function(obj, callback) {\n\tvar i = 0,\n\t\tl = obj.length;\n\t// 遍历数组元素\n\tfor (; i < l; i++) {\n\t\t// 执行用户指定回调函数\n\t\t// 将当前遍历到的元素以及索引传入回调函数\n\t\tif (callback.call(obj[i], obj[i], i) === false) break;\n\t}\n}\n```\n\n## itcast中链式编程的实现\n\n1. 返回当前方法的调用者: `return this;`\n\n## get方法\n\n1. 功能:根据参数 `index` ,获取相应 `dom` 元素\n2. 实现思路\n\t* 将字符串类型转换成数字\n\t*  `index < 0 ==> index +length`\n\t*  `return this[index]`\n\n```js\nget: function(index) {\n\tindex = index - 0;\n\tindex = index < 0 ? index + this.length : index;\n\treturn this[index];\n},\n```\n\n## eq方法\n\n1. 功能:根据参数 `index` ,获取相应 `dom` 元素,转换成 `itcast` 对象,并且返回\n\n```js\neq: function(index) {\n\treturn itcast(this.get(index));\n},\n```\n\n## first方法\n\n```js\nfirst: function() {\n\treturn this.eq(0);\n},\n```\n\n## last方法\n\n```js\nlast: function() {\n\treturn this.eq(-1);\n}\n```\n\n## css方法\n\n1. 功能:\n\t* 获取:如果只传一个参数并且类型不为对象,获取相应的样式属性值\n\t* 设置:a,如果只传一个参数并且类型为对象,设置多个样式值; b,传入两个参数,设置单个样式.\n2. 实现思路\n\t* 给 `itcast` 原型添加 `css` 方法,定义两个参数.\n\t* 如果只传入一个参数\n\t\t* 类型为对象的话,同时设置多个样式属性\n\t\t* 类型不为对象,获取指定的样式值\n\t* 如果只传入两个参数,设置单个样式值\n```js\ncss: function(name, value) {\n\t// 只传入一个参数\n\tif (value == undefined) {\n\t\t// 如果name类型为对象，同时设置多个样式\n\t\tif (typeof name === 'object') {\n\t\t\t// 遍历this上的每一个dom元素\n\t\t\tthis.each(function(v) {\n\t\t\t\t// 枚举name上的每个属性值\n\t\t\t\tfor (var k in name) {\n\t\t\t\t\t// 给当前遍历到的dom元素设置样式\n\t\t\t\t\tv.style[k] = name[k];\n\t\t\t\t}\n\t\t\t});\n\t\t} else { // 如果name不为对象\n\t\t\t// 默认获取this上的第一个dom元素的指定样式值\n\t\t\t// 如果浏览器支持getComputedStyle，使用该方法获取指定样式值\n\t\t\t// if(window.getComputedStyle){\n\t\t\t// \treturn window.getComputedStyle(this[0])[name];\n\t\t\t// } else { //否则使用currentStyle获取\n\t\t\t// \treturn this[0].currentStyle[name];\n\t\t\t// }\n\t\t\t// 如果this上没有任何dom元素， 就返回null\n\t\t\tif (!this[0]) return null;\n\t\t\treturn window.getComputedStyle ?\n\t\t\t\twindow.getComputedStyle(this[0])[name] :\n\t\t\t\tthis[0].currentStyle[name];\n\n\t\t}\n\t} else { // 如果传入两个参数\n\t\tthis.each(function(v) {\n\t\t\tv.style[name] = value;\n\t\t});\n\t}\n\t// 实现链式编程\n\treturn this;\n},\n```\n\t\n## addClass方法\n\n1. 功能:给结果集中的每一个 `dom` 元素添加指定样式类.\n2. 实现思路\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 首先判断当前遍历到的 `dom` 元素是否含有样式类.\n\n```js\naddClass: function(className) {\n\t// 遍历this上的每一个dom元素，并实现链式编程\n\treturn this.each(function(v) {\n\t\t// 判断当前dom元素v是否具有className\n\t\t// 如果不具有，给其添加指定的样式类\n\t\tif(!itcast(v).hasClass(className)){\n\t\t\tv.className += ' ' + className;\n\t\t}\n\t});\n},\n```\n\n## removeClass方法\n\n1. 功能:删除结果集中的每一个 `dom` 元素的指定样式类.\n2. 实现思路\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* `(' ' + v.className + ' ').replace(' ' + className + ' ',' ');`\n```js\nremoveClass:function(className) {\n\t// 遍历this上的每一个dom元素，并实现链式编程\n\treturn this.each(function(v) {\n\t\t// 删除当前dom元素的样式类className\n\t\tv.className = (' ' + v.className + ' ').\n\t\t\treplace(' ' + className + ' ', ' ');\n\t});\n}\n```\n\n## toggleClass方法\n\n1. 功能: 切换指定的样式类,如果有,就删除,没有就添加     \n2. 实现思路\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 判断当前遍历到的 `dom` 元素是否含有指定的样式类\n\t* 如果有,就删除\n\t* 如果没有,就添加\n```js\ntoggleClass: function(className) {\n\t// 遍历this上的每一个dom元素，并实现链式编程\n\treturn this.each(function(v) {\n\t\t// 将当前遍历到的元素转换成itcast对象\n\t\tvar $v = itcast(v);\n\t\t// 如果具有指定的样式类，就删除该样式类\n\t\tif($v.hasClass(className)){\t\t\t\t\t\n\t\t\t$v.removeClass(className);\n\t\t} else { // 如果没有指定的样式类，就添加该样式类\n\t\t\t$v.addClass(className);\n\t\t}\n\t});\n}\n```","source":"_posts/javascript-jquery-part2.md","raw":"---\ntitle: JQuery分析及实现part2之css部分功能及实现\ndate: 2016-11-19 19:02:01\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第二部分css部分功能及实现,接第一部分!\n\n<!-- more -->\n\n## hasClass方法\n\n1. 功能:如果结果集里只要有一个 `dom` 元素,具有指定的样式类,就返回 `true` \n2. 实现思路\n\t* 定义结果变量 `ret` ,默认值为 `false`\n\t* 遍历结果集的每一个 `dom` 元素,如果当前 `dom` 元素具有指定的样式类,将 `ret=true` 结束循环\n\t* 返回 `ret` .\n\n\t* 如何判断 `dom` 元素具有指定的样式类?\n\t在 `dom` 元素所有的样式类的 `首位 + 空格` ;在用户指定的样式类 `首位 + 空格` 调用indexOf方法,如果返回值 = -1,表示没有;否则就具有指定样式类\n\n```js\nhasClass: function(className) {\n\t// 默认结果false\n\tvar ret = false;\n\t// 遍历this上的每一个dom元素\t\t\t\t\t\n\t// for(var i = 0, l = this.length;i < l;i++){\n\t// \t// 如果当前dom元素具有指定的样式类\n\t// \t// 返回值为true，结束循环\n\t// if((' ' + this[i].className + ' ')\n\t// \t.indexOf(' ' + className + ' ') !== -1) {\n\t// \tret = true;\n\t// \tbreak;\n\t// }\n\t// }\n\tthis.each(function(v) {\n\t\tif ((' ' + v.className + ' ')\n\t\t\t.indexOf(' ' + className + ' ') !== -1) {\n\t\t\tret = true;\n\t\t\treturn false;\n\t\t}\n\t});\n\n\treturn ret;\n},\n```\n\n## $.each方法\n\n1. 功能:实现遍历数组或者伪数组,通过第二个参数(回调函数)来处理遍历到的每一个元素\n\t在回调函数中, `this` 是指向当前遍历的元素.\n2. 语法: `$.each([数组/伪数组], callback)` ;\n3. 实现思路\n\t* 声明 `each` 函数,定义两个形参,第一个 遍历的(伪)数组;第二: 回调函数\n\t* 使用 `for` 循环,遍历(伪)数组,再循环体内部执行回调函数. 在执行时,给回调函数传实参\n\t* 实现回调函数内部 `this` 指向,当前遍历到的元素\n\t* 通过回调函数的返回值,判断是否结束循环. 规定:当返回值为 `false` ,结束循环\n```js\neach: function(obj, callback) {\n\tvar i = 0,\n\t\tl = obj.length;\n\t// 遍历数组元素\n\tfor (; i < l; i++) {\n\t\t// 执行用户指定回调函数\n\t\t// 将当前遍历到的元素以及索引传入回调函数\n\t\tif (callback.call(obj[i], obj[i], i) === false) break;\n\t}\n}\n```\n\n## itcast中链式编程的实现\n\n1. 返回当前方法的调用者: `return this;`\n\n## get方法\n\n1. 功能:根据参数 `index` ,获取相应 `dom` 元素\n2. 实现思路\n\t* 将字符串类型转换成数字\n\t*  `index < 0 ==> index +length`\n\t*  `return this[index]`\n\n```js\nget: function(index) {\n\tindex = index - 0;\n\tindex = index < 0 ? index + this.length : index;\n\treturn this[index];\n},\n```\n\n## eq方法\n\n1. 功能:根据参数 `index` ,获取相应 `dom` 元素,转换成 `itcast` 对象,并且返回\n\n```js\neq: function(index) {\n\treturn itcast(this.get(index));\n},\n```\n\n## first方法\n\n```js\nfirst: function() {\n\treturn this.eq(0);\n},\n```\n\n## last方法\n\n```js\nlast: function() {\n\treturn this.eq(-1);\n}\n```\n\n## css方法\n\n1. 功能:\n\t* 获取:如果只传一个参数并且类型不为对象,获取相应的样式属性值\n\t* 设置:a,如果只传一个参数并且类型为对象,设置多个样式值; b,传入两个参数,设置单个样式.\n2. 实现思路\n\t* 给 `itcast` 原型添加 `css` 方法,定义两个参数.\n\t* 如果只传入一个参数\n\t\t* 类型为对象的话,同时设置多个样式属性\n\t\t* 类型不为对象,获取指定的样式值\n\t* 如果只传入两个参数,设置单个样式值\n```js\ncss: function(name, value) {\n\t// 只传入一个参数\n\tif (value == undefined) {\n\t\t// 如果name类型为对象，同时设置多个样式\n\t\tif (typeof name === 'object') {\n\t\t\t// 遍历this上的每一个dom元素\n\t\t\tthis.each(function(v) {\n\t\t\t\t// 枚举name上的每个属性值\n\t\t\t\tfor (var k in name) {\n\t\t\t\t\t// 给当前遍历到的dom元素设置样式\n\t\t\t\t\tv.style[k] = name[k];\n\t\t\t\t}\n\t\t\t});\n\t\t} else { // 如果name不为对象\n\t\t\t// 默认获取this上的第一个dom元素的指定样式值\n\t\t\t// 如果浏览器支持getComputedStyle，使用该方法获取指定样式值\n\t\t\t// if(window.getComputedStyle){\n\t\t\t// \treturn window.getComputedStyle(this[0])[name];\n\t\t\t// } else { //否则使用currentStyle获取\n\t\t\t// \treturn this[0].currentStyle[name];\n\t\t\t// }\n\t\t\t// 如果this上没有任何dom元素， 就返回null\n\t\t\tif (!this[0]) return null;\n\t\t\treturn window.getComputedStyle ?\n\t\t\t\twindow.getComputedStyle(this[0])[name] :\n\t\t\t\tthis[0].currentStyle[name];\n\n\t\t}\n\t} else { // 如果传入两个参数\n\t\tthis.each(function(v) {\n\t\t\tv.style[name] = value;\n\t\t});\n\t}\n\t// 实现链式编程\n\treturn this;\n},\n```\n\t\n## addClass方法\n\n1. 功能:给结果集中的每一个 `dom` 元素添加指定样式类.\n2. 实现思路\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 首先判断当前遍历到的 `dom` 元素是否含有样式类.\n\n```js\naddClass: function(className) {\n\t// 遍历this上的每一个dom元素，并实现链式编程\n\treturn this.each(function(v) {\n\t\t// 判断当前dom元素v是否具有className\n\t\t// 如果不具有，给其添加指定的样式类\n\t\tif(!itcast(v).hasClass(className)){\n\t\t\tv.className += ' ' + className;\n\t\t}\n\t});\n},\n```\n\n## removeClass方法\n\n1. 功能:删除结果集中的每一个 `dom` 元素的指定样式类.\n2. 实现思路\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* `(' ' + v.className + ' ').replace(' ' + className + ' ',' ');`\n```js\nremoveClass:function(className) {\n\t// 遍历this上的每一个dom元素，并实现链式编程\n\treturn this.each(function(v) {\n\t\t// 删除当前dom元素的样式类className\n\t\tv.className = (' ' + v.className + ' ').\n\t\t\treplace(' ' + className + ' ', ' ');\n\t});\n}\n```\n\n## toggleClass方法\n\n1. 功能: 切换指定的样式类,如果有,就删除,没有就添加     \n2. 实现思路\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 判断当前遍历到的 `dom` 元素是否含有指定的样式类\n\t* 如果有,就删除\n\t* 如果没有,就添加\n```js\ntoggleClass: function(className) {\n\t// 遍历this上的每一个dom元素，并实现链式编程\n\treturn this.each(function(v) {\n\t\t// 将当前遍历到的元素转换成itcast对象\n\t\tvar $v = itcast(v);\n\t\t// 如果具有指定的样式类，就删除该样式类\n\t\tif($v.hasClass(className)){\t\t\t\t\t\n\t\t\t$v.removeClass(className);\n\t\t} else { // 如果没有指定的样式类，就添加该样式类\n\t\t\t$v.addClass(className);\n\t\t}\n\t});\n}\n```","slug":"javascript-jquery-part2","published":1,"updated":"2016-11-24T01:36:18.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprjn000v9wg71r948liz","content":"<p>JQuery模块分析及其实现第二部分css部分功能及实现,接第一部分!</p>\n<a id=\"more\"></a>\n<h2 id=\"hasClass方法\"><a href=\"#hasClass方法\" class=\"headerlink\" title=\"hasClass方法\"></a>hasClass方法</h2><ol>\n<li>功能:如果结果集里只要有一个 <code>dom</code> 元素,具有指定的样式类,就返回 <code>true</code> </li>\n<li><p>实现思路</p>\n<ul>\n<li>定义结果变量 <code>ret</code> ,默认值为 <code>false</code></li>\n<li>遍历结果集的每一个 <code>dom</code> 元素,如果当前 <code>dom</code> 元素具有指定的样式类,将 <code>ret=true</code> 结束循环</li>\n<li><p>返回 <code>ret</code> .</p>\n</li>\n<li><p>如何判断 <code>dom</code> 元素具有指定的样式类?<br>在 <code>dom</code> 元素所有的样式类的 <code>首位 + 空格</code> ;在用户指定的样式类 <code>首位 + 空格</code> 调用indexOf方法,如果返回值 = -1,表示没有;否则就具有指定样式类</p>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">hasClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 默认结果false</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素\t\t\t\t\t</span></div><div class=\"line\">\t<span class=\"comment\">// for(var i = 0, l = this.length;i &lt; l;i++)&#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \t// 如果当前dom元素具有指定的样式类</span></div><div class=\"line\">\t<span class=\"comment\">// \t// 返回值为true，结束循环</span></div><div class=\"line\">\t<span class=\"comment\">// if((' ' + this[i].className + ' ')</span></div><div class=\"line\">\t<span class=\"comment\">// \t.indexOf(' ' + className + ' ') !== -1) &#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \tret = true;</span></div><div class=\"line\">\t<span class=\"comment\">// \tbreak;</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((<span class=\"string\">' '</span> + v.className + <span class=\"string\">' '</span>)</div><div class=\"line\">\t\t\t.indexOf(<span class=\"string\">' '</span> + className + <span class=\"string\">' '</span>) !== <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\tret = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"each方法\"><a href=\"#each方法\" class=\"headerlink\" title=\"$.each方法\"></a>$.each方法</h2><ol>\n<li>功能:实现遍历数组或者伪数组,通过第二个参数(回调函数)来处理遍历到的每一个元素<br> 在回调函数中, <code>this</code> 是指向当前遍历的元素.</li>\n<li>语法: <code>$.each([数组/伪数组], callback)</code> ;</li>\n<li>实现思路<ul>\n<li>声明 <code>each</code> 函数,定义两个形参,第一个 遍历的(伪)数组;第二: 回调函数</li>\n<li>使用 <code>for</code> 循环,遍历(伪)数组,再循环体内部执行回调函数. 在执行时,给回调函数传实参</li>\n<li>实现回调函数内部 <code>this</code> 指向,当前遍历到的元素</li>\n<li>通过回调函数的返回值,判断是否结束循环. 规定:当返回值为 <code>false</code> ,结束循环<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">each: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, callback</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</div><div class=\"line\">\t\tl = obj.length;</div><div class=\"line\">\t<span class=\"comment\">// 遍历数组元素</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (; i &lt; l; i++) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 执行用户指定回调函数</span></div><div class=\"line\">\t\t<span class=\"comment\">// 将当前遍历到的元素以及索引传入回调函数</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (callback.call(obj[i], obj[i], i) === <span class=\"literal\">false</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"itcast中链式编程的实现\"><a href=\"#itcast中链式编程的实现\" class=\"headerlink\" title=\"itcast中链式编程的实现\"></a>itcast中链式编程的实现</h2><ol>\n<li>返回当前方法的调用者: <code>return this;</code></li>\n</ol>\n<h2 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h2><ol>\n<li>功能:根据参数 <code>index</code> ,获取相应 <code>dom</code> 元素</li>\n<li>实现思路<ul>\n<li>将字符串类型转换成数字</li>\n<li><code>index &lt; 0 ==&gt; index +length</code></li>\n<li><code>return this[index]</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">\tindex = index - <span class=\"number\">0</span>;</div><div class=\"line\">\tindex = index &lt; <span class=\"number\">0</span> ? index + <span class=\"keyword\">this</span>.length : index;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[index];</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"eq方法\"><a href=\"#eq方法\" class=\"headerlink\" title=\"eq方法\"></a>eq方法</h2><ol>\n<li>功能:根据参数 <code>index</code> ,获取相应 <code>dom</code> 元素,转换成 <code>itcast</code> 对象,并且返回</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">eq: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(<span class=\"keyword\">this</span>.get(index));</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"first方法\"><a href=\"#first方法\" class=\"headerlink\" title=\"first方法\"></a>first方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">first: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.eq(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"last方法\"><a href=\"#last方法\" class=\"headerlink\" title=\"last方法\"></a>last方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">last: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.eq(<span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"css方法\"><a href=\"#css方法\" class=\"headerlink\" title=\"css方法\"></a>css方法</h2><ol>\n<li>功能:<ul>\n<li>获取:如果只传一个参数并且类型不为对象,获取相应的样式属性值</li>\n<li>设置:a,如果只传一个参数并且类型为对象,设置多个样式值; b,传入两个参数,设置单个样式.</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>给 <code>itcast</code> 原型添加 <code>css</code> 方法,定义两个参数.</li>\n<li>如果只传入一个参数<ul>\n<li>类型为对象的话,同时设置多个样式属性</li>\n<li>类型不为对象,获取指定的样式值</li>\n</ul>\n</li>\n<li>如果只传入两个参数,设置单个样式值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">css: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, value</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 只传入一个参数</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (value == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果name类型为对象，同时设置多个样式</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 遍历this上的每一个dom元素</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 枚举name上的每个属性值</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> name) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 给当前遍历到的dom元素设置样式</span></div><div class=\"line\">\t\t\t\t\tv.style[k] = name[k];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果name不为对象</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 默认获取this上的第一个dom元素的指定样式值</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果浏览器支持getComputedStyle，使用该方法获取指定样式值</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// if(window.getComputedStyle)&#123;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// \treturn window.getComputedStyle(this[0])[name];</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// &#125; else &#123; //否则使用currentStyle获取</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// \treturn this[0].currentStyle[name];</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果this上没有任何dom元素， 就返回null</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.getComputedStyle ?</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">window</span>.getComputedStyle(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>])[name] :</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>[<span class=\"number\">0</span>].currentStyle[name];</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果传入两个参数</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\tv.style[name] = value;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"addClass方法\"><a href=\"#addClass方法\" class=\"headerlink\" title=\"addClass方法\"></a>addClass方法</h2><ol>\n<li>功能:给结果集中的每一个 <code>dom</code> 元素添加指定样式类.</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>首先判断当前遍历到的 <code>dom</code> 元素是否含有样式类.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">addClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 判断当前dom元素v是否具有className</span></div><div class=\"line\">\t\t<span class=\"comment\">// 如果不具有，给其添加指定的样式类</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!itcast(v).hasClass(className))&#123;</div><div class=\"line\">\t\t\tv.className += <span class=\"string\">' '</span> + className;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"removeClass方法\"><a href=\"#removeClass方法\" class=\"headerlink\" title=\"removeClass方法\"></a>removeClass方法</h2><ol>\n<li>功能:删除结果集中的每一个 <code>dom</code> 元素的指定样式类.</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li><code>(&#39; &#39; + v.className + &#39; &#39;).replace(&#39; &#39; + className + &#39; &#39;,&#39; &#39;);</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">removeClass:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 删除当前dom元素的样式类className</span></div><div class=\"line\">\t\tv.className = (<span class=\"string\">' '</span> + v.className + <span class=\"string\">' '</span>).</div><div class=\"line\">\t\t\treplace(<span class=\"string\">' '</span> + className + <span class=\"string\">' '</span>, <span class=\"string\">' '</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"toggleClass方法\"><a href=\"#toggleClass方法\" class=\"headerlink\" title=\"toggleClass方法\"></a>toggleClass方法</h2><ol>\n<li>功能: 切换指定的样式类,如果有,就删除,没有就添加     </li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历到的 <code>dom</code> 元素是否含有指定的样式类</li>\n<li>如果有,就删除</li>\n<li>如果没有,就添加<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">toggleClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 将当前遍历到的元素转换成itcast对象</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> $v = itcast(v);</div><div class=\"line\">\t\t<span class=\"comment\">// 如果具有指定的样式类，就删除该样式类</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>($v.hasClass(className))&#123;\t\t\t\t\t</div><div class=\"line\">\t\t\t$v.removeClass(className);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果没有指定的样式类，就添加该样式类</span></div><div class=\"line\">\t\t\t$v.addClass(className);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n","excerpt":"<p>JQuery模块分析及其实现第二部分css部分功能及实现,接第一部分!</p>","more":"<h2 id=\"hasClass方法\"><a href=\"#hasClass方法\" class=\"headerlink\" title=\"hasClass方法\"></a>hasClass方法</h2><ol>\n<li>功能:如果结果集里只要有一个 <code>dom</code> 元素,具有指定的样式类,就返回 <code>true</code> </li>\n<li><p>实现思路</p>\n<ul>\n<li>定义结果变量 <code>ret</code> ,默认值为 <code>false</code></li>\n<li>遍历结果集的每一个 <code>dom</code> 元素,如果当前 <code>dom</code> 元素具有指定的样式类,将 <code>ret=true</code> 结束循环</li>\n<li><p>返回 <code>ret</code> .</p>\n</li>\n<li><p>如何判断 <code>dom</code> 元素具有指定的样式类?<br>在 <code>dom</code> 元素所有的样式类的 <code>首位 + 空格</code> ;在用户指定的样式类 <code>首位 + 空格</code> 调用indexOf方法,如果返回值 = -1,表示没有;否则就具有指定样式类</p>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">hasClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 默认结果false</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = <span class=\"literal\">false</span>;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素\t\t\t\t\t</span></div><div class=\"line\">\t<span class=\"comment\">// for(var i = 0, l = this.length;i &lt; l;i++)&#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \t// 如果当前dom元素具有指定的样式类</span></div><div class=\"line\">\t<span class=\"comment\">// \t// 返回值为true，结束循环</span></div><div class=\"line\">\t<span class=\"comment\">// if((' ' + this[i].className + ' ')</span></div><div class=\"line\">\t<span class=\"comment\">// \t.indexOf(' ' + className + ' ') !== -1) &#123;</span></div><div class=\"line\">\t<span class=\"comment\">// \tret = true;</span></div><div class=\"line\">\t<span class=\"comment\">// \tbreak;</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((<span class=\"string\">' '</span> + v.className + <span class=\"string\">' '</span>)</div><div class=\"line\">\t\t\t.indexOf(<span class=\"string\">' '</span> + className + <span class=\"string\">' '</span>) !== <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">\t\t\tret = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"each方法\"><a href=\"#each方法\" class=\"headerlink\" title=\"$.each方法\"></a>$.each方法</h2><ol>\n<li>功能:实现遍历数组或者伪数组,通过第二个参数(回调函数)来处理遍历到的每一个元素<br> 在回调函数中, <code>this</code> 是指向当前遍历的元素.</li>\n<li>语法: <code>$.each([数组/伪数组], callback)</code> ;</li>\n<li>实现思路<ul>\n<li>声明 <code>each</code> 函数,定义两个形参,第一个 遍历的(伪)数组;第二: 回调函数</li>\n<li>使用 <code>for</code> 循环,遍历(伪)数组,再循环体内部执行回调函数. 在执行时,给回调函数传实参</li>\n<li>实现回调函数内部 <code>this</code> 指向,当前遍历到的元素</li>\n<li>通过回调函数的返回值,判断是否结束循环. 规定:当返回值为 <code>false</code> ,结束循环<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">each: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, callback</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</div><div class=\"line\">\t\tl = obj.length;</div><div class=\"line\">\t<span class=\"comment\">// 遍历数组元素</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> (; i &lt; l; i++) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 执行用户指定回调函数</span></div><div class=\"line\">\t\t<span class=\"comment\">// 将当前遍历到的元素以及索引传入回调函数</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (callback.call(obj[i], obj[i], i) === <span class=\"literal\">false</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"itcast中链式编程的实现\"><a href=\"#itcast中链式编程的实现\" class=\"headerlink\" title=\"itcast中链式编程的实现\"></a>itcast中链式编程的实现</h2><ol>\n<li>返回当前方法的调用者: <code>return this;</code></li>\n</ol>\n<h2 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h2><ol>\n<li>功能:根据参数 <code>index</code> ,获取相应 <code>dom</code> 元素</li>\n<li>实现思路<ul>\n<li>将字符串类型转换成数字</li>\n<li><code>index &lt; 0 ==&gt; index +length</code></li>\n<li><code>return this[index]</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">\tindex = index - <span class=\"number\">0</span>;</div><div class=\"line\">\tindex = index &lt; <span class=\"number\">0</span> ? index + <span class=\"keyword\">this</span>.length : index;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[index];</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"eq方法\"><a href=\"#eq方法\" class=\"headerlink\" title=\"eq方法\"></a>eq方法</h2><ol>\n<li>功能:根据参数 <code>index</code> ,获取相应 <code>dom</code> 元素,转换成 <code>itcast</code> 对象,并且返回</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">eq: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(<span class=\"keyword\">this</span>.get(index));</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"first方法\"><a href=\"#first方法\" class=\"headerlink\" title=\"first方法\"></a>first方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">first: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.eq(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"last方法\"><a href=\"#last方法\" class=\"headerlink\" title=\"last方法\"></a>last方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">last: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.eq(<span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"css方法\"><a href=\"#css方法\" class=\"headerlink\" title=\"css方法\"></a>css方法</h2><ol>\n<li>功能:<ul>\n<li>获取:如果只传一个参数并且类型不为对象,获取相应的样式属性值</li>\n<li>设置:a,如果只传一个参数并且类型为对象,设置多个样式值; b,传入两个参数,设置单个样式.</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>给 <code>itcast</code> 原型添加 <code>css</code> 方法,定义两个参数.</li>\n<li>如果只传入一个参数<ul>\n<li>类型为对象的话,同时设置多个样式属性</li>\n<li>类型不为对象,获取指定的样式值</li>\n</ul>\n</li>\n<li>如果只传入两个参数,设置单个样式值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">css: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, value</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 只传入一个参数</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (value == <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果name类型为对象，同时设置多个样式</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 遍历this上的每一个dom元素</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 枚举name上的每个属性值</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> name) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 给当前遍历到的dom元素设置样式</span></div><div class=\"line\">\t\t\t\t\tv.style[k] = name[k];</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果name不为对象</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 默认获取this上的第一个dom元素的指定样式值</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果浏览器支持getComputedStyle，使用该方法获取指定样式值</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// if(window.getComputedStyle)&#123;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// \treturn window.getComputedStyle(this[0])[name];</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// &#125; else &#123; //否则使用currentStyle获取</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// \treturn this[0].currentStyle[name];</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// &#125;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果this上没有任何dom元素， 就返回null</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.getComputedStyle ?</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">window</span>.getComputedStyle(<span class=\"keyword\">this</span>[<span class=\"number\">0</span>])[name] :</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>[<span class=\"number\">0</span>].currentStyle[name];</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果传入两个参数</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\tv.style[name] = value;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"addClass方法\"><a href=\"#addClass方法\" class=\"headerlink\" title=\"addClass方法\"></a>addClass方法</h2><ol>\n<li>功能:给结果集中的每一个 <code>dom</code> 元素添加指定样式类.</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>首先判断当前遍历到的 <code>dom</code> 元素是否含有样式类.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">addClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 判断当前dom元素v是否具有className</span></div><div class=\"line\">\t\t<span class=\"comment\">// 如果不具有，给其添加指定的样式类</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(!itcast(v).hasClass(className))&#123;</div><div class=\"line\">\t\t\tv.className += <span class=\"string\">' '</span> + className;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"removeClass方法\"><a href=\"#removeClass方法\" class=\"headerlink\" title=\"removeClass方法\"></a>removeClass方法</h2><ol>\n<li>功能:删除结果集中的每一个 <code>dom</code> 元素的指定样式类.</li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li><code>(&#39; &#39; + v.className + &#39; &#39;).replace(&#39; &#39; + className + &#39; &#39;,&#39; &#39;);</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">removeClass:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 删除当前dom元素的样式类className</span></div><div class=\"line\">\t\tv.className = (<span class=\"string\">' '</span> + v.className + <span class=\"string\">' '</span>).</div><div class=\"line\">\t\t\treplace(<span class=\"string\">' '</span> + className + <span class=\"string\">' '</span>, <span class=\"string\">' '</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"toggleClass方法\"><a href=\"#toggleClass方法\" class=\"headerlink\" title=\"toggleClass方法\"></a>toggleClass方法</h2><ol>\n<li>功能: 切换指定的样式类,如果有,就删除,没有就添加     </li>\n<li>实现思路<ul>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历到的 <code>dom</code> 元素是否含有指定的样式类</li>\n<li>如果有,就删除</li>\n<li>如果没有,就添加<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">toggleClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 将当前遍历到的元素转换成itcast对象</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> $v = itcast(v);</div><div class=\"line\">\t\t<span class=\"comment\">// 如果具有指定的样式类，就删除该样式类</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>($v.hasClass(className))&#123;\t\t\t\t\t</div><div class=\"line\">\t\t\t$v.removeClass(className);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果没有指定的样式类，就添加该样式类</span></div><div class=\"line\">\t\t\t$v.addClass(className);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>"},{"title":"JQuery分析及实现part4之DOM操作模块功能及实现","date":"2016-11-21T11:08:10.000Z","_content":"\nJQuery模块分析及其实现第四部分属性部分功能及实现,接第三部分!\n\n<!-- more -->\n\n## appendTo 方法\n\n1. 功能:将结果集中的元素 追加到指定的 `dom` 元素上.\n2. 语法:`<target对象>.appendTo(target)`\n3. 实现思路\n\t* 定义 `appendTo` 方法,声明一个形参 `target` .追加到目标 `dom` 元素\n\t\t* 选择器\n\t\t* `dom` 元素\n\t\t* `dom` 数组\n\t* 为了操作方便,将 `target` 类型统一为 `itcast` 对象,去 `itcast` 函数走一圈,出来就是 `itcast` 对象.\n\t* 遍历 `this` 上的每一个 `dom` 元素,再遍历 `target` 上的每一个 `dom` 元素\n\t* 将 `this` 上的 `dom` 元素追加到 `target` 上\n\t* 注意:\n\t\t在追加节点时,如果遍历的是第一个目标 `dom` 元素,不需要拷贝节点;否则要深拷贝节点,并将上述得到的节点储存到 `ret` 内\n\t* 将 `ret` 数组转换成 `itcast` 对象,作为 `appendTo` 方法的返回值\n\t\t* 如果不这样做的话,就会在添加样式时,只有没拷贝的节点有样式\n\n```js\nappendTo: function(target) {\n\tvar node, \n\t\tret = [];\n\t// 统一target类型 为itcast对象（为了方便操作）\n\ttarget = itcast(target);\n\t// 遍历this上的每一个dom元素\n\tthis.each(function(v) {\n\t\t// 在遍历目标dom元素\n\t\ttarget.each(function(t, i) {\n\t\t\t// 如果当前dom元素为 目标上的第一个.不拷贝节点\n\t\t\t// 否则拷贝节点\n\t\t\tnode = i === 0 ? v : v.cloneNode(true);\n\t\t\t// 将被追加的节点,添加到ret内\n\t\t\tret.push(node);\n\t\t\t// 将节点追加到指定的目标dom元素上.\n\t\t\tt.appendChild(node);\n\t\t});\n\t});\n\t// 将每一个添加的dom元素,转换成itcast对象返回,实现链式编程\n\t// 原因:在添加样式时,如果不这样做的话,只会给没克隆的节点添加样式.\n\treturn itcast(ret);\n}\n```\n\n## append 方法\n\n1. 语法: `<itcast对象>.append(source)` ;\n2. 功能: 将 `source` 上的所有 `dom` 元素,追加到 `itcast` 对象上\n2. 实现思路\n\t* 统一 `source` 类型,为 `itcast` 对象.\n\t* `source.appendTo(this)`\n\t* `return this;`\n\n```js\nappend: function(source) {\n\t//统一source类型,为itcast对象\n\tsource = itcast(source);\n\tsource.appendTo(this);\n\treturn this;\n},\n```\n\n## prependTo 方法\n\n1. 语法: `<itcast对象>.prependTo(target);`\n2. 功能:将 `itcast` 对象上的每一个 `dom` 元素,追加到 `target` 最前边 `insertBefore`\n3. 实现思路\n\t* 统一 `target` 类型,为 `itcast` 对象\n\t* 定义 `node` 变量,临时存储被追加的结点.定义 `ret` 数组,存储所有被追加的节点\n\t* 先遍历 `target` 上的每一个 `dom` 元素\n\t* 定义变量 `firstChild` ,临时存储当前目标 `dom` 元素的第一个子节点,再遍历 `this` 上的每一个 `dom` 元素\n\t* 判断当前遍历的 `dom` 是否为 `target` 上的第一个 `dom` 元素\n\t* 如果为真,此时不需要克隆节点\n\t* 否则,要深克隆节点\n\t* 将上述的到的节点, `push` 到 `ret` 内\n\t* 调用 `insertBefore` 方法追加节点,此时第一个参数为追加新的节点,第二个参数为 `firstChild` ,在 `firstChild` 之前追加新节点.\n\t* 两层循环结束,操作完成\n\t* 将 `ret` 转换成 `itcast` 对象,作为 `prependTo` 方法的返回值,实现链式编程.\n\n```js\nprependTo: function(target) {\n\t//定义变量node,临时存储被追加的节点\n\tvar node,\n\t//定义变量firstChild,临时存储当前dom元素的第一个子节点\n\t\tfirstChild,\n\t\tself = this,\n\t\t//定义ret数组,存储所有被追加的节点\n\t\tret = [];\n   //统一类型为itcast对象\n\ttarget = itcast(target);\n\t//遍历target上的每一个dom元素\n\ttarget.each(function(elem, i) {\n\t\t// 缓存当前目标dom元素的第一个子节点\n\t\tfirstChild = elem.firstChild;\n\t\t//遍历this上的每一个dom元素\n\t\tself.each(function(dom) {\n\t\t\t//判断当前遍历的dom是否为target上的每一个dom元素\n\t\t\t//若为真,则不需要克隆节点,否则,要深克隆节点\n\t\t\t// 将得到的节点赋值给node\n\t\t\tnode = i === 0 ? dom : dom.cloneNode(true);\n\t\t\t//将节点push到ret内\n\t\t\tret.push(node);\n\t\t\t//调用insertBefore方法,追加节点(追加的新节点,firstChild)\n\t\t\telem.insertBefore(node, firstChild);\n\t\t});\n\t});\n    //将ret作为itcast对象,并且返回\n\treturn itcast(ret);\n}\n```\n\n## prepend 方法\n\n1. 语法: `<itcast对象>.prepend(source);`\n2. 功能:把 `source` 上的所有的 `dom` 元素,添加到 `this` 上的最前边\n3. 实现思路: \n\t* 统一 `source` 类型,为 `itcast` 对象\n\t* 通过 `source` 调用 `prependTo` 方法,将 `source` 上的所有 `dom` 添加到 `this` 上的最前边\n\t*  `return this` 实现链式编程\n\n```js\nprepend: function(source) {\n\tsource = itcast(source);\n\tsource.prependTo(this);\n\treturn this;\n}\n```\n\n## next 方法\n\n1. 功能:获取 `itcast` 对象上所有 `dom` 元素的下一个兄弟元素 `(nextSiling)`\n2. 语法: `<itcast对象>.next();` 返回值类型, `itcast` 对象\n3. 实现思路\n\t* 定义 `ret` 数组，存储所有 `dom` 的下一个兄弟元素\n\t* 遍历 `this` 上的所有 `dom` 元素\n\t* 遍历当前 `dom` 元素下面的所有兄弟，如果类型为 元素，将此元素存储 `ret` 内，结束循环。\n\t* 两层循环结束，将 `ret` 转换成 `itcast` 对象，作为 `next` 方法的返回值。\n\n```js\nnext: function() {\n\t// 存储所用dom的下一个兄弟元素\n\tvar ret = [];\n\t// 遍历this上的所有dom元素\n\tthis.each(function() {\n\t\t// 在遍历当前dom元素下面所有的兄弟元素\n\t\tfor(var node = this.nextSibling; node ; node = node.nextSibling){\n\t\t\t// 如果当前兄弟节点,为元素节点\n\t\t\t// 即为结果,将其添加ret内,并结束循环\n\t\t\tif(node.nodeType === 1){\n\t\t\t\tret.push(node);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t// 将ret转换成itcast对象,返回\n\treturn itcast(ret);\n},\n```\n\n## nextAll  \n\n1. 功能:获取 `itcast` 对象上所有 `dom` 元素下面的所有兄弟元素 `(nextSiling)`\n2. 语法: `<itcast对象>.nextAll();` 返回值类型, `itcast` 对象\n3. 实现思路\n\t* 定义 `ret` 数组，存储所有 `dom` 的下一个兄弟元素\n\t* 遍历 `this` 上的所有 `dom` 元素\n\t* 遍历当前 `dom` 元素下面的所有兄弟，如果类型为 元素，将此元素存储 `ret` 内，结束循环。\n\t* 两层循环结束，将 `ret` 转换成 `itcast` 对象，作为 `nextAll` 方法的返回值。\n\n```js\nnextAll: function() {\n\tvar ret = [],\n\t\tnode;\n\tthis.each(function() {\n\t\tfor(node = this.nextSibling; node ; node = node.nextSibling){\n\t\t\tif(node.nodeType === 1) ret.push(node);\n\t\t}\n\t});\n\treturn itcast(itcast.unique(ret));\n}\n```\n\n## before 方法\n\n1. 功能:\n2. 语法: `<itcast对象>.before(source)`\n3. 实现思路\n\t* 统一 `source` 类型为 `itcast` 对象\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 再遍历 `source` 上的每一个 `dom` 元素\n\t* 判断当前遍历 `this`的 `dom` 元素的索引是否为0\n\t* 如果是 `0` ,不需要拷贝节点\n\t* 否则要深拷贝节点\n\t* 先拿到当前遍历 `this` 的 `dom` 元素的父节点,调用 `insertBefore` 方法在其前面添加上面的到的新节点\n\t* 两层循环完毕,操作完成\n\t*  `return this` 实现链式编程\n\n```js\nbefore: function(source) {\n\tvar node;\n\tsource = itcast(source);\n\tthis.each(function(dom, i) {\n\t\tsource.each(function(elem) {\n\t\t\tnode = i === 0 ? elem : elem.cloneNode(true);\n\t\t\t// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node\n\t\t\tdom.parentNode.insertBefore(node, dom);\n\t\t});\n\t});\n\treturn this;\n},\n```\n\n## after 方法\n\n1. 功能:\n2. 语法: `<itcast对象>.after(source)`\n3. 实现思路\n\t* 定义 `nextSiling` 变量,存储 `dom` 元素的下一个兄弟节点\n\t* 统一 `source` 类型为 `itcast` 对象\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 再遍历`source` 上的每一个 `dom` 元素\n\t* 判断当前遍历 `this` 的 `dom` 元素的索引是否为 `0`\n\t* 如果是 `0` ,不需要拷贝节点\n\t* 否则要深拷贝节点\n\t* 先拿到当前遍历 `this` 的 `dom` 元素的父节点,调用 `insertBefore` 方法在其前面添加上面的到的新节点\n\t* 两层循环完毕,操作完成\n\t*  `return this` 实现链式编程\n\n```js\nafter: function(source) {\n\tvar node,\n\t\tnextSibling;\n\tsource = itcast(source);\n\tthis.each(function(dom, i) {\n\t\tnextSibling = dom.nextSibling;\n\t\tsource.each(function(elem) {\n\t\t\tnode = i === 0 ? elem : elem.cloneNode(true);\n\t\t\t// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node\n\t\t\tdom.parentNode.insertBefore(node, nextSibling);\n\t\t});\n\t});\n\treturn this;\n}\n```\n\n## unique 方法\n\n1. 功能:实现数组元素去重\n2. 语法: `var newRet = itcast.unique(arr);`\n3. 实现思路\n\t* 定义空数组对象 `ret` .存储去重后的元素\n\t* 遍历原数组,如果当前遍历到的元素在 `ret` 中不存在,就添加 `ret` 内\n\t* 循环结束, `ret` 存储的就是去重后的元素\n\t* 返回 `ret`\n4. <a href=\"#code\">兼容IE8 indexof 方法</a>\n\t* 首先判断当前浏览器是否支持 `indexof` 方法\n\t* 如果不支持就给数组对象的原型添加 `indexof` 方法\n\t* 遍历 `this` 上的所有元素\n\t* 如果遍历到的当前元素和指定参数值相同就直接返回其索引值.结束循环\n\t* 如果在整个上述循环都没有返回值,那么表示不存在指定参数值就返回 `-1` .\n\n```js\nunique: function(arr) {\n\t// 存储去重后的结果\n\tvar ret = [];\n\t// 遍历原数组arr\n\titcast.each(arr, function() {\n\t\t// 判断ret是否存在当前遍历到的元素\n\t\t// 如果不存在将其添加到ret中\n\t\tif(ret.indexOf(this) === -1) ret.push(this);\n\t});\n\t// 将ret返回\n\treturn ret;\n}\n```\n\n<p id=\"code\">兼容 `IE8` `indexof` 方法</p>\n\n```js\n// 兼容数组对象的indexOf方法\n(function() {\n\t// 如果浏览器不支持indexOf方法\n\t// 那么就给数组对象的原型添加indexOf方法\n\tif(!Array.prototype.indexOf){\n\t\tArray.prototype.indexOf = function(val) {\n\t\t\t// 遍历this\n\t\t\tfor(var i = 0,l = this.length; i < l; i++){\n\t\t\t\t// 如果遍历到的当前元素和val相同，返回其索引值\n\t\t\t\tif(this[i] == val) return i;\n\t\t\t}\n\t\t\t// 那么表示不存在指定参数值就返回 -1 \n\t\t\treturn -1;\n\t\t};\n\t}\n}());\n```\n\n## prev 方法\n\n1. 功能: 获取 `itcast` 对象上所有 `dom` 元素的前一个兄弟元素 `(previousSibling)`\n2. 语法: `<itcast对象>.prev();` 返回值类型: `itcast对象`\n3. 实现思路\n\t* 定义 `ret` 数组,存储所有 `dom` 的前一个兄弟元素\n\t* 遍历 `this` 上的所有 `dom` 元素\n\t* 遍历当前 `dom` 元素之前的所有兄弟,如果类型为元素,将此元素存储 `ret` 内,结束循环\n\t* 两层循环结束,将 `ret` 转换成 `itcast` 对象,作为 `next` 方法的返回值\n\n```js\nprev:function(){\n\t//存储所有dom的前一个兄弟元素\n\tvar ret=[];\n\t//遍历this上的所有dom元素\n\tthis.each(function(){\n\t\t//在遍历当前dom元素之前所有的兄弟元素\n\t\tfor(var node=this.previousSibling;node;node=node.previousSibling){\n\t\t\t//如果当前兄弟节点为元素节点\n\t\t\t//即为结果,将其添加到ret内,并结束循环\n\t\t\tif(node.nodeType===1){\n\t\t\t\tret.push(node);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t//将ret转换成itcast对象,返回\n\treturn itcast(ret);\n},\n```\n\n## prevAll 方法\n\n1. 功能: 获取 `itcast` 对象上所有 `dom` 元素的之前的所有兄弟元素 `(nextSibling)`\n2. 语法: `<itcast对象>.nextAll();` 返回值类型: `itcast对象`\n3. 实现思路\n\t* 定义 `ret数组` ,存储所有 `dom` 之前的所有兄弟元素\n\t* 遍历 `this` 上的所有 `dom元素`\n\t* 遍历当前 `dom` 元素之前的所有兄弟,如果类型为元素,将此元素存储 `ret` 内,结束循环\n\t* 两层循环结束,将 `ret` 转换成 `itcast对象` ,作为 `nextAll` 方法的返回值\n\n```js\nprevAll:function(){\n\tvar ret=[];\n\tthis.each(function() {\n\t\tfor(var node=this.previousSibling;node;node=node.previousSibling){\n\t\t\tif(node.nodeType===1) ret.push(node);\n\t\t}\n\t\t\n\t});\n\treturn itcast(itcast.unique(ret));\n}\n```","source":"_posts/javascript-jquery-part4.md","raw":"---\ntitle: JQuery分析及实现part4之DOM操作模块功能及实现\ndate: 2016-11-21 19:08:10\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第四部分属性部分功能及实现,接第三部分!\n\n<!-- more -->\n\n## appendTo 方法\n\n1. 功能:将结果集中的元素 追加到指定的 `dom` 元素上.\n2. 语法:`<target对象>.appendTo(target)`\n3. 实现思路\n\t* 定义 `appendTo` 方法,声明一个形参 `target` .追加到目标 `dom` 元素\n\t\t* 选择器\n\t\t* `dom` 元素\n\t\t* `dom` 数组\n\t* 为了操作方便,将 `target` 类型统一为 `itcast` 对象,去 `itcast` 函数走一圈,出来就是 `itcast` 对象.\n\t* 遍历 `this` 上的每一个 `dom` 元素,再遍历 `target` 上的每一个 `dom` 元素\n\t* 将 `this` 上的 `dom` 元素追加到 `target` 上\n\t* 注意:\n\t\t在追加节点时,如果遍历的是第一个目标 `dom` 元素,不需要拷贝节点;否则要深拷贝节点,并将上述得到的节点储存到 `ret` 内\n\t* 将 `ret` 数组转换成 `itcast` 对象,作为 `appendTo` 方法的返回值\n\t\t* 如果不这样做的话,就会在添加样式时,只有没拷贝的节点有样式\n\n```js\nappendTo: function(target) {\n\tvar node, \n\t\tret = [];\n\t// 统一target类型 为itcast对象（为了方便操作）\n\ttarget = itcast(target);\n\t// 遍历this上的每一个dom元素\n\tthis.each(function(v) {\n\t\t// 在遍历目标dom元素\n\t\ttarget.each(function(t, i) {\n\t\t\t// 如果当前dom元素为 目标上的第一个.不拷贝节点\n\t\t\t// 否则拷贝节点\n\t\t\tnode = i === 0 ? v : v.cloneNode(true);\n\t\t\t// 将被追加的节点,添加到ret内\n\t\t\tret.push(node);\n\t\t\t// 将节点追加到指定的目标dom元素上.\n\t\t\tt.appendChild(node);\n\t\t});\n\t});\n\t// 将每一个添加的dom元素,转换成itcast对象返回,实现链式编程\n\t// 原因:在添加样式时,如果不这样做的话,只会给没克隆的节点添加样式.\n\treturn itcast(ret);\n}\n```\n\n## append 方法\n\n1. 语法: `<itcast对象>.append(source)` ;\n2. 功能: 将 `source` 上的所有 `dom` 元素,追加到 `itcast` 对象上\n2. 实现思路\n\t* 统一 `source` 类型,为 `itcast` 对象.\n\t* `source.appendTo(this)`\n\t* `return this;`\n\n```js\nappend: function(source) {\n\t//统一source类型,为itcast对象\n\tsource = itcast(source);\n\tsource.appendTo(this);\n\treturn this;\n},\n```\n\n## prependTo 方法\n\n1. 语法: `<itcast对象>.prependTo(target);`\n2. 功能:将 `itcast` 对象上的每一个 `dom` 元素,追加到 `target` 最前边 `insertBefore`\n3. 实现思路\n\t* 统一 `target` 类型,为 `itcast` 对象\n\t* 定义 `node` 变量,临时存储被追加的结点.定义 `ret` 数组,存储所有被追加的节点\n\t* 先遍历 `target` 上的每一个 `dom` 元素\n\t* 定义变量 `firstChild` ,临时存储当前目标 `dom` 元素的第一个子节点,再遍历 `this` 上的每一个 `dom` 元素\n\t* 判断当前遍历的 `dom` 是否为 `target` 上的第一个 `dom` 元素\n\t* 如果为真,此时不需要克隆节点\n\t* 否则,要深克隆节点\n\t* 将上述的到的节点, `push` 到 `ret` 内\n\t* 调用 `insertBefore` 方法追加节点,此时第一个参数为追加新的节点,第二个参数为 `firstChild` ,在 `firstChild` 之前追加新节点.\n\t* 两层循环结束,操作完成\n\t* 将 `ret` 转换成 `itcast` 对象,作为 `prependTo` 方法的返回值,实现链式编程.\n\n```js\nprependTo: function(target) {\n\t//定义变量node,临时存储被追加的节点\n\tvar node,\n\t//定义变量firstChild,临时存储当前dom元素的第一个子节点\n\t\tfirstChild,\n\t\tself = this,\n\t\t//定义ret数组,存储所有被追加的节点\n\t\tret = [];\n   //统一类型为itcast对象\n\ttarget = itcast(target);\n\t//遍历target上的每一个dom元素\n\ttarget.each(function(elem, i) {\n\t\t// 缓存当前目标dom元素的第一个子节点\n\t\tfirstChild = elem.firstChild;\n\t\t//遍历this上的每一个dom元素\n\t\tself.each(function(dom) {\n\t\t\t//判断当前遍历的dom是否为target上的每一个dom元素\n\t\t\t//若为真,则不需要克隆节点,否则,要深克隆节点\n\t\t\t// 将得到的节点赋值给node\n\t\t\tnode = i === 0 ? dom : dom.cloneNode(true);\n\t\t\t//将节点push到ret内\n\t\t\tret.push(node);\n\t\t\t//调用insertBefore方法,追加节点(追加的新节点,firstChild)\n\t\t\telem.insertBefore(node, firstChild);\n\t\t});\n\t});\n    //将ret作为itcast对象,并且返回\n\treturn itcast(ret);\n}\n```\n\n## prepend 方法\n\n1. 语法: `<itcast对象>.prepend(source);`\n2. 功能:把 `source` 上的所有的 `dom` 元素,添加到 `this` 上的最前边\n3. 实现思路: \n\t* 统一 `source` 类型,为 `itcast` 对象\n\t* 通过 `source` 调用 `prependTo` 方法,将 `source` 上的所有 `dom` 添加到 `this` 上的最前边\n\t*  `return this` 实现链式编程\n\n```js\nprepend: function(source) {\n\tsource = itcast(source);\n\tsource.prependTo(this);\n\treturn this;\n}\n```\n\n## next 方法\n\n1. 功能:获取 `itcast` 对象上所有 `dom` 元素的下一个兄弟元素 `(nextSiling)`\n2. 语法: `<itcast对象>.next();` 返回值类型, `itcast` 对象\n3. 实现思路\n\t* 定义 `ret` 数组，存储所有 `dom` 的下一个兄弟元素\n\t* 遍历 `this` 上的所有 `dom` 元素\n\t* 遍历当前 `dom` 元素下面的所有兄弟，如果类型为 元素，将此元素存储 `ret` 内，结束循环。\n\t* 两层循环结束，将 `ret` 转换成 `itcast` 对象，作为 `next` 方法的返回值。\n\n```js\nnext: function() {\n\t// 存储所用dom的下一个兄弟元素\n\tvar ret = [];\n\t// 遍历this上的所有dom元素\n\tthis.each(function() {\n\t\t// 在遍历当前dom元素下面所有的兄弟元素\n\t\tfor(var node = this.nextSibling; node ; node = node.nextSibling){\n\t\t\t// 如果当前兄弟节点,为元素节点\n\t\t\t// 即为结果,将其添加ret内,并结束循环\n\t\t\tif(node.nodeType === 1){\n\t\t\t\tret.push(node);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t// 将ret转换成itcast对象,返回\n\treturn itcast(ret);\n},\n```\n\n## nextAll  \n\n1. 功能:获取 `itcast` 对象上所有 `dom` 元素下面的所有兄弟元素 `(nextSiling)`\n2. 语法: `<itcast对象>.nextAll();` 返回值类型, `itcast` 对象\n3. 实现思路\n\t* 定义 `ret` 数组，存储所有 `dom` 的下一个兄弟元素\n\t* 遍历 `this` 上的所有 `dom` 元素\n\t* 遍历当前 `dom` 元素下面的所有兄弟，如果类型为 元素，将此元素存储 `ret` 内，结束循环。\n\t* 两层循环结束，将 `ret` 转换成 `itcast` 对象，作为 `nextAll` 方法的返回值。\n\n```js\nnextAll: function() {\n\tvar ret = [],\n\t\tnode;\n\tthis.each(function() {\n\t\tfor(node = this.nextSibling; node ; node = node.nextSibling){\n\t\t\tif(node.nodeType === 1) ret.push(node);\n\t\t}\n\t});\n\treturn itcast(itcast.unique(ret));\n}\n```\n\n## before 方法\n\n1. 功能:\n2. 语法: `<itcast对象>.before(source)`\n3. 实现思路\n\t* 统一 `source` 类型为 `itcast` 对象\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 再遍历 `source` 上的每一个 `dom` 元素\n\t* 判断当前遍历 `this`的 `dom` 元素的索引是否为0\n\t* 如果是 `0` ,不需要拷贝节点\n\t* 否则要深拷贝节点\n\t* 先拿到当前遍历 `this` 的 `dom` 元素的父节点,调用 `insertBefore` 方法在其前面添加上面的到的新节点\n\t* 两层循环完毕,操作完成\n\t*  `return this` 实现链式编程\n\n```js\nbefore: function(source) {\n\tvar node;\n\tsource = itcast(source);\n\tthis.each(function(dom, i) {\n\t\tsource.each(function(elem) {\n\t\t\tnode = i === 0 ? elem : elem.cloneNode(true);\n\t\t\t// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node\n\t\t\tdom.parentNode.insertBefore(node, dom);\n\t\t});\n\t});\n\treturn this;\n},\n```\n\n## after 方法\n\n1. 功能:\n2. 语法: `<itcast对象>.after(source)`\n3. 实现思路\n\t* 定义 `nextSiling` 变量,存储 `dom` 元素的下一个兄弟节点\n\t* 统一 `source` 类型为 `itcast` 对象\n\t* 遍历 `this` 上的每一个 `dom` 元素\n\t* 再遍历`source` 上的每一个 `dom` 元素\n\t* 判断当前遍历 `this` 的 `dom` 元素的索引是否为 `0`\n\t* 如果是 `0` ,不需要拷贝节点\n\t* 否则要深拷贝节点\n\t* 先拿到当前遍历 `this` 的 `dom` 元素的父节点,调用 `insertBefore` 方法在其前面添加上面的到的新节点\n\t* 两层循环完毕,操作完成\n\t*  `return this` 实现链式编程\n\n```js\nafter: function(source) {\n\tvar node,\n\t\tnextSibling;\n\tsource = itcast(source);\n\tthis.each(function(dom, i) {\n\t\tnextSibling = dom.nextSibling;\n\t\tsource.each(function(elem) {\n\t\t\tnode = i === 0 ? elem : elem.cloneNode(true);\n\t\t\t// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node\n\t\t\tdom.parentNode.insertBefore(node, nextSibling);\n\t\t});\n\t});\n\treturn this;\n}\n```\n\n## unique 方法\n\n1. 功能:实现数组元素去重\n2. 语法: `var newRet = itcast.unique(arr);`\n3. 实现思路\n\t* 定义空数组对象 `ret` .存储去重后的元素\n\t* 遍历原数组,如果当前遍历到的元素在 `ret` 中不存在,就添加 `ret` 内\n\t* 循环结束, `ret` 存储的就是去重后的元素\n\t* 返回 `ret`\n4. <a href=\"#code\">兼容IE8 indexof 方法</a>\n\t* 首先判断当前浏览器是否支持 `indexof` 方法\n\t* 如果不支持就给数组对象的原型添加 `indexof` 方法\n\t* 遍历 `this` 上的所有元素\n\t* 如果遍历到的当前元素和指定参数值相同就直接返回其索引值.结束循环\n\t* 如果在整个上述循环都没有返回值,那么表示不存在指定参数值就返回 `-1` .\n\n```js\nunique: function(arr) {\n\t// 存储去重后的结果\n\tvar ret = [];\n\t// 遍历原数组arr\n\titcast.each(arr, function() {\n\t\t// 判断ret是否存在当前遍历到的元素\n\t\t// 如果不存在将其添加到ret中\n\t\tif(ret.indexOf(this) === -1) ret.push(this);\n\t});\n\t// 将ret返回\n\treturn ret;\n}\n```\n\n<p id=\"code\">兼容 `IE8` `indexof` 方法</p>\n\n```js\n// 兼容数组对象的indexOf方法\n(function() {\n\t// 如果浏览器不支持indexOf方法\n\t// 那么就给数组对象的原型添加indexOf方法\n\tif(!Array.prototype.indexOf){\n\t\tArray.prototype.indexOf = function(val) {\n\t\t\t// 遍历this\n\t\t\tfor(var i = 0,l = this.length; i < l; i++){\n\t\t\t\t// 如果遍历到的当前元素和val相同，返回其索引值\n\t\t\t\tif(this[i] == val) return i;\n\t\t\t}\n\t\t\t// 那么表示不存在指定参数值就返回 -1 \n\t\t\treturn -1;\n\t\t};\n\t}\n}());\n```\n\n## prev 方法\n\n1. 功能: 获取 `itcast` 对象上所有 `dom` 元素的前一个兄弟元素 `(previousSibling)`\n2. 语法: `<itcast对象>.prev();` 返回值类型: `itcast对象`\n3. 实现思路\n\t* 定义 `ret` 数组,存储所有 `dom` 的前一个兄弟元素\n\t* 遍历 `this` 上的所有 `dom` 元素\n\t* 遍历当前 `dom` 元素之前的所有兄弟,如果类型为元素,将此元素存储 `ret` 内,结束循环\n\t* 两层循环结束,将 `ret` 转换成 `itcast` 对象,作为 `next` 方法的返回值\n\n```js\nprev:function(){\n\t//存储所有dom的前一个兄弟元素\n\tvar ret=[];\n\t//遍历this上的所有dom元素\n\tthis.each(function(){\n\t\t//在遍历当前dom元素之前所有的兄弟元素\n\t\tfor(var node=this.previousSibling;node;node=node.previousSibling){\n\t\t\t//如果当前兄弟节点为元素节点\n\t\t\t//即为结果,将其添加到ret内,并结束循环\n\t\t\tif(node.nodeType===1){\n\t\t\t\tret.push(node);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t//将ret转换成itcast对象,返回\n\treturn itcast(ret);\n},\n```\n\n## prevAll 方法\n\n1. 功能: 获取 `itcast` 对象上所有 `dom` 元素的之前的所有兄弟元素 `(nextSibling)`\n2. 语法: `<itcast对象>.nextAll();` 返回值类型: `itcast对象`\n3. 实现思路\n\t* 定义 `ret数组` ,存储所有 `dom` 之前的所有兄弟元素\n\t* 遍历 `this` 上的所有 `dom元素`\n\t* 遍历当前 `dom` 元素之前的所有兄弟,如果类型为元素,将此元素存储 `ret` 内,结束循环\n\t* 两层循环结束,将 `ret` 转换成 `itcast对象` ,作为 `nextAll` 方法的返回值\n\n```js\nprevAll:function(){\n\tvar ret=[];\n\tthis.each(function() {\n\t\tfor(var node=this.previousSibling;node;node=node.previousSibling){\n\t\t\tif(node.nodeType===1) ret.push(node);\n\t\t}\n\t\t\n\t});\n\treturn itcast(itcast.unique(ret));\n}\n```","slug":"javascript-jquery-part4","published":1,"updated":"2016-11-24T01:37:29.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprjp000y9wg70nw2rki1","content":"<p>JQuery模块分析及其实现第四部分属性部分功能及实现,接第三部分!</p>\n<a id=\"more\"></a>\n<h2 id=\"appendTo-方法\"><a href=\"#appendTo-方法\" class=\"headerlink\" title=\"appendTo 方法\"></a>appendTo 方法</h2><ol>\n<li>功能:将结果集中的元素 追加到指定的 <code>dom</code> 元素上.</li>\n<li>语法:<code>&lt;target对象&gt;.appendTo(target)</code></li>\n<li>实现思路<ul>\n<li>定义 <code>appendTo</code> 方法,声明一个形参 <code>target</code> .追加到目标 <code>dom</code> 元素<ul>\n<li>选择器</li>\n<li><code>dom</code> 元素</li>\n<li><code>dom</code> 数组</li>\n</ul>\n</li>\n<li>为了操作方便,将 <code>target</code> 类型统一为 <code>itcast</code> 对象,去 <code>itcast</code> 函数走一圈,出来就是 <code>itcast</code> 对象.</li>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素,再遍历 <code>target</code> 上的每一个 <code>dom</code> 元素</li>\n<li>将 <code>this</code> 上的 <code>dom</code> 元素追加到 <code>target</code> 上</li>\n<li>注意:<br>  在追加节点时,如果遍历的是第一个目标 <code>dom</code> 元素,不需要拷贝节点;否则要深拷贝节点,并将上述得到的节点储存到 <code>ret</code> 内</li>\n<li>将 <code>ret</code> 数组转换成 <code>itcast</code> 对象,作为 <code>appendTo</code> 方法的返回值<ul>\n<li>如果不这样做的话,就会在添加样式时,只有没拷贝的节点有样式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> node, </div><div class=\"line\">\t\tret = [];</div><div class=\"line\">\t<span class=\"comment\">// 统一target类型 为itcast对象（为了方便操作）</span></div><div class=\"line\">\ttarget = itcast(target);</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 在遍历目标dom元素</span></div><div class=\"line\">\t\ttarget.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t, i</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前dom元素为 目标上的第一个.不拷贝节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 否则拷贝节点</span></div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? v : v.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将被追加的节点,添加到ret内</span></div><div class=\"line\">\t\t\tret.push(node);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将节点追加到指定的目标dom元素上.</span></div><div class=\"line\">\t\t\tt.appendChild(node);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 将每一个添加的dom元素,转换成itcast对象返回,实现链式编程</span></div><div class=\"line\">\t<span class=\"comment\">// 原因:在添加样式时,如果不这样做的话,只会给没克隆的节点添加样式.</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"append-方法\"><a href=\"#append-方法\" class=\"headerlink\" title=\"append 方法\"></a>append 方法</h2><ol>\n<li>语法: <code>&lt;itcast对象&gt;.append(source)</code> ;</li>\n<li>功能: 将 <code>source</code> 上的所有 <code>dom</code> 元素,追加到 <code>itcast</code> 对象上</li>\n<li>实现思路<ul>\n<li>统一 <code>source</code> 类型,为 <code>itcast</code> 对象.</li>\n<li><code>source.appendTo(this)</code></li>\n<li><code>return this;</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">append: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//统一source类型,为itcast对象</span></div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\tsource.appendTo(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"prependTo-方法\"><a href=\"#prependTo-方法\" class=\"headerlink\" title=\"prependTo 方法\"></a>prependTo 方法</h2><ol>\n<li>语法: <code>&lt;itcast对象&gt;.prependTo(target);</code></li>\n<li>功能:将 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素,追加到 <code>target</code> 最前边 <code>insertBefore</code></li>\n<li>实现思路<ul>\n<li>统一 <code>target</code> 类型,为 <code>itcast</code> 对象</li>\n<li>定义 <code>node</code> 变量,临时存储被追加的结点.定义 <code>ret</code> 数组,存储所有被追加的节点</li>\n<li>先遍历 <code>target</code> 上的每一个 <code>dom</code> 元素</li>\n<li>定义变量 <code>firstChild</code> ,临时存储当前目标 <code>dom</code> 元素的第一个子节点,再遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历的 <code>dom</code> 是否为 <code>target</code> 上的第一个 <code>dom</code> 元素</li>\n<li>如果为真,此时不需要克隆节点</li>\n<li>否则,要深克隆节点</li>\n<li>将上述的到的节点, <code>push</code> 到 <code>ret</code> 内</li>\n<li>调用 <code>insertBefore</code> 方法追加节点,此时第一个参数为追加新的节点,第二个参数为 <code>firstChild</code> ,在 <code>firstChild</code> 之前追加新节点.</li>\n<li>两层循环结束,操作完成</li>\n<li>将 <code>ret</code> 转换成 <code>itcast</code> 对象,作为 <code>prependTo</code> 方法的返回值,实现链式编程.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">prependTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//定义变量node,临时存储被追加的节点</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> node,</div><div class=\"line\">\t<span class=\"comment\">//定义变量firstChild,临时存储当前dom元素的第一个子节点</span></div><div class=\"line\">\t\tfirstChild,</div><div class=\"line\">\t\tself = <span class=\"keyword\">this</span>,</div><div class=\"line\">\t\t<span class=\"comment\">//定义ret数组,存储所有被追加的节点</span></div><div class=\"line\">\t\tret = [];</div><div class=\"line\">   <span class=\"comment\">//统一类型为itcast对象</span></div><div class=\"line\">\ttarget = itcast(target);</div><div class=\"line\">\t<span class=\"comment\">//遍历target上的每一个dom元素</span></div><div class=\"line\">\ttarget.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, i</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 缓存当前目标dom元素的第一个子节点</span></div><div class=\"line\">\t\tfirstChild = elem.firstChild;</div><div class=\"line\">\t\t<span class=\"comment\">//遍历this上的每一个dom元素</span></div><div class=\"line\">\t\tself.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//判断当前遍历的dom是否为target上的每一个dom元素</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//若为真,则不需要克隆节点,否则,要深克隆节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 将得到的节点赋值给node</span></div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? dom : dom.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">//将节点push到ret内</span></div><div class=\"line\">\t\t\tret.push(node);</div><div class=\"line\">\t\t\t<span class=\"comment\">//调用insertBefore方法,追加节点(追加的新节点,firstChild)</span></div><div class=\"line\">\t\t\telem.insertBefore(node, firstChild);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">    <span class=\"comment\">//将ret作为itcast对象,并且返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"prepend-方法\"><a href=\"#prepend-方法\" class=\"headerlink\" title=\"prepend 方法\"></a>prepend 方法</h2><ol>\n<li>语法: <code>&lt;itcast对象&gt;.prepend(source);</code></li>\n<li>功能:把 <code>source</code> 上的所有的 <code>dom</code> 元素,添加到 <code>this</code> 上的最前边</li>\n<li>实现思路: <ul>\n<li>统一 <code>source</code> 类型,为 <code>itcast</code> 对象</li>\n<li>通过 <code>source</code> 调用 <code>prependTo</code> 方法,将 <code>source</code> 上的所有 <code>dom</code> 添加到 <code>this</code> 上的最前边</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">prepend: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\tsource.prependTo(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"next-方法\"><a href=\"#next-方法\" class=\"headerlink\" title=\"next 方法\"></a>next 方法</h2><ol>\n<li>功能:获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的下一个兄弟元素 <code>(nextSiling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.next();</code> 返回值类型, <code>itcast</code> 对象</li>\n<li>实现思路<ul>\n<li>定义 <code>ret</code> 数组，存储所有 <code>dom</code> 的下一个兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>遍历当前 <code>dom</code> 元素下面的所有兄弟，如果类型为 元素，将此元素存储 <code>ret</code> 内，结束循环。</li>\n<li>两层循环结束，将 <code>ret</code> 转换成 <code>itcast</code> 对象，作为 <code>next</code> 方法的返回值。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 存储所用dom的下一个兄弟元素</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [];</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的所有dom元素</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 在遍历当前dom元素下面所有的兄弟元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> node = <span class=\"keyword\">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前兄弟节点,为元素节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 即为结果,将其添加ret内,并结束循环</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t\tret.push(node);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 将ret转换成itcast对象,返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"nextAll\"><a href=\"#nextAll\" class=\"headerlink\" title=\"nextAll\"></a>nextAll</h2><ol>\n<li>功能:获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素下面的所有兄弟元素 <code>(nextSiling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code> 返回值类型, <code>itcast</code> 对象</li>\n<li>实现思路<ul>\n<li>定义 <code>ret</code> 数组，存储所有 <code>dom</code> 的下一个兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>遍历当前 <code>dom</code> 元素下面的所有兄弟，如果类型为 元素，将此元素存储 <code>ret</code> 内，结束循环。</li>\n<li>两层循环结束，将 <code>ret</code> 转换成 <code>itcast</code> 对象，作为 <code>nextAll</code> 方法的返回值。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">nextAll: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\tnode;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(node = <span class=\"keyword\">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType === <span class=\"number\">1</span>) ret.push(node);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(itcast.unique(ret));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"before-方法\"><a href=\"#before-方法\" class=\"headerlink\" title=\"before 方法\"></a>before 方法</h2><ol>\n<li>功能:</li>\n<li>语法: <code>&lt;itcast对象&gt;.before(source)</code></li>\n<li>实现思路<ul>\n<li>统一 <code>source</code> 类型为 <code>itcast</code> 对象</li>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>再遍历 <code>source</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历 <code>this</code>的 <code>dom</code> 元素的索引是否为0</li>\n<li>如果是 <code>0</code> ,不需要拷贝节点</li>\n<li>否则要深拷贝节点</li>\n<li>先拿到当前遍历 <code>this</code> 的 <code>dom</code> 元素的父节点,调用 <code>insertBefore</code> 方法在其前面添加上面的到的新节点</li>\n<li>两层循环完毕,操作完成</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">before: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> node;</div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom, i</span>) </span>&#123;</div><div class=\"line\">\t\tsource.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? elem : elem.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class=\"line\">\t\t\tdom.parentNode.insertBefore(node, dom);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"after-方法\"><a href=\"#after-方法\" class=\"headerlink\" title=\"after 方法\"></a>after 方法</h2><ol>\n<li>功能:</li>\n<li>语法: <code>&lt;itcast对象&gt;.after(source)</code></li>\n<li>实现思路<ul>\n<li>定义 <code>nextSiling</code> 变量,存储 <code>dom</code> 元素的下一个兄弟节点</li>\n<li>统一 <code>source</code> 类型为 <code>itcast</code> 对象</li>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>再遍历<code>source</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历 <code>this</code> 的 <code>dom</code> 元素的索引是否为 <code>0</code></li>\n<li>如果是 <code>0</code> ,不需要拷贝节点</li>\n<li>否则要深拷贝节点</li>\n<li>先拿到当前遍历 <code>this</code> 的 <code>dom</code> 元素的父节点,调用 <code>insertBefore</code> 方法在其前面添加上面的到的新节点</li>\n<li>两层循环完毕,操作完成</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">after: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> node,</div><div class=\"line\">\t\tnextSibling;</div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom, i</span>) </span>&#123;</div><div class=\"line\">\t\tnextSibling = dom.nextSibling;</div><div class=\"line\">\t\tsource.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? elem : elem.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class=\"line\">\t\t\tdom.parentNode.insertBefore(node, nextSibling);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"unique-方法\"><a href=\"#unique-方法\" class=\"headerlink\" title=\"unique 方法\"></a>unique 方法</h2><ol>\n<li>功能:实现数组元素去重</li>\n<li>语法: <code>var newRet = itcast.unique(arr);</code></li>\n<li>实现思路<ul>\n<li>定义空数组对象 <code>ret</code> .存储去重后的元素</li>\n<li>遍历原数组,如果当前遍历到的元素在 <code>ret</code> 中不存在,就添加 <code>ret</code> 内</li>\n<li>循环结束, <code>ret</code> 存储的就是去重后的元素</li>\n<li>返回 <code>ret</code></li>\n</ul>\n</li>\n<li><a href=\"#code\">兼容IE8 indexof 方法</a><ul>\n<li>首先判断当前浏览器是否支持 <code>indexof</code> 方法</li>\n<li>如果不支持就给数组对象的原型添加 <code>indexof</code> 方法</li>\n<li>遍历 <code>this</code> 上的所有元素</li>\n<li>如果遍历到的当前元素和指定参数值相同就直接返回其索引值.结束循环</li>\n<li>如果在整个上述循环都没有返回值,那么表示不存在指定参数值就返回 <code>-1</code> .</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">unique: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 存储去重后的结果</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [];</div><div class=\"line\">\t<span class=\"comment\">// 遍历原数组arr</span></div><div class=\"line\">\titcast.each(arr, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 判断ret是否存在当前遍历到的元素</span></div><div class=\"line\">\t\t<span class=\"comment\">// 如果不存在将其添加到ret中</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(ret.indexOf(<span class=\"keyword\">this</span>) === <span class=\"number\">-1</span>) ret.push(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 将ret返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p id=\"code\">兼容 <code>IE8</code> <code>indexof</code> 方法</p>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 兼容数组对象的indexOf方法</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果浏览器不支持indexOf方法</span></div><div class=\"line\">\t<span class=\"comment\">// 那么就给数组对象的原型添加indexOf方法</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.prototype.indexOf)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">Array</span>.prototype.indexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 遍历this</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,l = <span class=\"keyword\">this</span>.length; i &lt; l; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 如果遍历到的当前元素和val相同，返回其索引值</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] == val) <span class=\"keyword\">return</span> i;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 那么表示不存在指定参数值就返回 -1 </span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<h2 id=\"prev-方法\"><a href=\"#prev-方法\" class=\"headerlink\" title=\"prev 方法\"></a>prev 方法</h2><ol>\n<li>功能: 获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的前一个兄弟元素 <code>(previousSibling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.prev();</code> 返回值类型: <code>itcast对象</code></li>\n<li>实现思路<ul>\n<li>定义 <code>ret</code> 数组,存储所有 <code>dom</code> 的前一个兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>遍历当前 <code>dom</code> 元素之前的所有兄弟,如果类型为元素,将此元素存储 <code>ret</code> 内,结束循环</li>\n<li>两层循环结束,将 <code>ret</code> 转换成 <code>itcast</code> 对象,作为 <code>next</code> 方法的返回值</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">prev:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//存储所有dom的前一个兄弟元素</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret=[];</div><div class=\"line\">\t<span class=\"comment\">//遍历this上的所有dom元素</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//在遍历当前dom元素之前所有的兄弟元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> node=<span class=\"keyword\">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//如果当前兄弟节点为元素节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//即为结果,将其添加到ret内,并结束循环</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType===<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t\tret.push(node);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">//将ret转换成itcast对象,返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"prevAll-方法\"><a href=\"#prevAll-方法\" class=\"headerlink\" title=\"prevAll 方法\"></a>prevAll 方法</h2><ol>\n<li>功能: 获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的之前的所有兄弟元素 <code>(nextSibling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code> 返回值类型: <code>itcast对象</code></li>\n<li>实现思路<ul>\n<li>定义 <code>ret数组</code> ,存储所有 <code>dom</code> 之前的所有兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom元素</code></li>\n<li>遍历当前 <code>dom</code> 元素之前的所有兄弟,如果类型为元素,将此元素存储 <code>ret</code> 内,结束循环</li>\n<li>两层循环结束,将 <code>ret</code> 转换成 <code>itcast对象</code> ,作为 <code>nextAll</code> 方法的返回值</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">prevAll:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret=[];</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> node=<span class=\"keyword\">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType===<span class=\"number\">1</span>) ret.push(node);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(itcast.unique(ret));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>JQuery模块分析及其实现第四部分属性部分功能及实现,接第三部分!</p>","more":"<h2 id=\"appendTo-方法\"><a href=\"#appendTo-方法\" class=\"headerlink\" title=\"appendTo 方法\"></a>appendTo 方法</h2><ol>\n<li>功能:将结果集中的元素 追加到指定的 <code>dom</code> 元素上.</li>\n<li>语法:<code>&lt;target对象&gt;.appendTo(target)</code></li>\n<li>实现思路<ul>\n<li>定义 <code>appendTo</code> 方法,声明一个形参 <code>target</code> .追加到目标 <code>dom</code> 元素<ul>\n<li>选择器</li>\n<li><code>dom</code> 元素</li>\n<li><code>dom</code> 数组</li>\n</ul>\n</li>\n<li>为了操作方便,将 <code>target</code> 类型统一为 <code>itcast</code> 对象,去 <code>itcast</code> 函数走一圈,出来就是 <code>itcast</code> 对象.</li>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素,再遍历 <code>target</code> 上的每一个 <code>dom</code> 元素</li>\n<li>将 <code>this</code> 上的 <code>dom</code> 元素追加到 <code>target</code> 上</li>\n<li>注意:<br>  在追加节点时,如果遍历的是第一个目标 <code>dom</code> 元素,不需要拷贝节点;否则要深拷贝节点,并将上述得到的节点储存到 <code>ret</code> 内</li>\n<li>将 <code>ret</code> 数组转换成 <code>itcast</code> 对象,作为 <code>appendTo</code> 方法的返回值<ul>\n<li>如果不这样做的话,就会在添加样式时,只有没拷贝的节点有样式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">appendTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> node, </div><div class=\"line\">\t\tret = [];</div><div class=\"line\">\t<span class=\"comment\">// 统一target类型 为itcast对象（为了方便操作）</span></div><div class=\"line\">\ttarget = itcast(target);</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的每一个dom元素</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 在遍历目标dom元素</span></div><div class=\"line\">\t\ttarget.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t, i</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前dom元素为 目标上的第一个.不拷贝节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 否则拷贝节点</span></div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? v : v.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将被追加的节点,添加到ret内</span></div><div class=\"line\">\t\t\tret.push(node);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将节点追加到指定的目标dom元素上.</span></div><div class=\"line\">\t\t\tt.appendChild(node);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 将每一个添加的dom元素,转换成itcast对象返回,实现链式编程</span></div><div class=\"line\">\t<span class=\"comment\">// 原因:在添加样式时,如果不这样做的话,只会给没克隆的节点添加样式.</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"append-方法\"><a href=\"#append-方法\" class=\"headerlink\" title=\"append 方法\"></a>append 方法</h2><ol>\n<li>语法: <code>&lt;itcast对象&gt;.append(source)</code> ;</li>\n<li>功能: 将 <code>source</code> 上的所有 <code>dom</code> 元素,追加到 <code>itcast</code> 对象上</li>\n<li>实现思路<ul>\n<li>统一 <code>source</code> 类型,为 <code>itcast</code> 对象.</li>\n<li><code>source.appendTo(this)</code></li>\n<li><code>return this;</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">append: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//统一source类型,为itcast对象</span></div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\tsource.appendTo(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"prependTo-方法\"><a href=\"#prependTo-方法\" class=\"headerlink\" title=\"prependTo 方法\"></a>prependTo 方法</h2><ol>\n<li>语法: <code>&lt;itcast对象&gt;.prependTo(target);</code></li>\n<li>功能:将 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素,追加到 <code>target</code> 最前边 <code>insertBefore</code></li>\n<li>实现思路<ul>\n<li>统一 <code>target</code> 类型,为 <code>itcast</code> 对象</li>\n<li>定义 <code>node</code> 变量,临时存储被追加的结点.定义 <code>ret</code> 数组,存储所有被追加的节点</li>\n<li>先遍历 <code>target</code> 上的每一个 <code>dom</code> 元素</li>\n<li>定义变量 <code>firstChild</code> ,临时存储当前目标 <code>dom</code> 元素的第一个子节点,再遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历的 <code>dom</code> 是否为 <code>target</code> 上的第一个 <code>dom</code> 元素</li>\n<li>如果为真,此时不需要克隆节点</li>\n<li>否则,要深克隆节点</li>\n<li>将上述的到的节点, <code>push</code> 到 <code>ret</code> 内</li>\n<li>调用 <code>insertBefore</code> 方法追加节点,此时第一个参数为追加新的节点,第二个参数为 <code>firstChild</code> ,在 <code>firstChild</code> 之前追加新节点.</li>\n<li>两层循环结束,操作完成</li>\n<li>将 <code>ret</code> 转换成 <code>itcast</code> 对象,作为 <code>prependTo</code> 方法的返回值,实现链式编程.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">prependTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//定义变量node,临时存储被追加的节点</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> node,</div><div class=\"line\">\t<span class=\"comment\">//定义变量firstChild,临时存储当前dom元素的第一个子节点</span></div><div class=\"line\">\t\tfirstChild,</div><div class=\"line\">\t\tself = <span class=\"keyword\">this</span>,</div><div class=\"line\">\t\t<span class=\"comment\">//定义ret数组,存储所有被追加的节点</span></div><div class=\"line\">\t\tret = [];</div><div class=\"line\">   <span class=\"comment\">//统一类型为itcast对象</span></div><div class=\"line\">\ttarget = itcast(target);</div><div class=\"line\">\t<span class=\"comment\">//遍历target上的每一个dom元素</span></div><div class=\"line\">\ttarget.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, i</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 缓存当前目标dom元素的第一个子节点</span></div><div class=\"line\">\t\tfirstChild = elem.firstChild;</div><div class=\"line\">\t\t<span class=\"comment\">//遍历this上的每一个dom元素</span></div><div class=\"line\">\t\tself.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//判断当前遍历的dom是否为target上的每一个dom元素</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//若为真,则不需要克隆节点,否则,要深克隆节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 将得到的节点赋值给node</span></div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? dom : dom.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">//将节点push到ret内</span></div><div class=\"line\">\t\t\tret.push(node);</div><div class=\"line\">\t\t\t<span class=\"comment\">//调用insertBefore方法,追加节点(追加的新节点,firstChild)</span></div><div class=\"line\">\t\t\telem.insertBefore(node, firstChild);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">    <span class=\"comment\">//将ret作为itcast对象,并且返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"prepend-方法\"><a href=\"#prepend-方法\" class=\"headerlink\" title=\"prepend 方法\"></a>prepend 方法</h2><ol>\n<li>语法: <code>&lt;itcast对象&gt;.prepend(source);</code></li>\n<li>功能:把 <code>source</code> 上的所有的 <code>dom</code> 元素,添加到 <code>this</code> 上的最前边</li>\n<li>实现思路: <ul>\n<li>统一 <code>source</code> 类型,为 <code>itcast</code> 对象</li>\n<li>通过 <code>source</code> 调用 <code>prependTo</code> 方法,将 <code>source</code> 上的所有 <code>dom</code> 添加到 <code>this</code> 上的最前边</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">prepend: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\tsource.prependTo(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"next-方法\"><a href=\"#next-方法\" class=\"headerlink\" title=\"next 方法\"></a>next 方法</h2><ol>\n<li>功能:获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的下一个兄弟元素 <code>(nextSiling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.next();</code> 返回值类型, <code>itcast</code> 对象</li>\n<li>实现思路<ul>\n<li>定义 <code>ret</code> 数组，存储所有 <code>dom</code> 的下一个兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>遍历当前 <code>dom</code> 元素下面的所有兄弟，如果类型为 元素，将此元素存储 <code>ret</code> 内，结束循环。</li>\n<li>两层循环结束，将 <code>ret</code> 转换成 <code>itcast</code> 对象，作为 <code>next</code> 方法的返回值。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 存储所用dom的下一个兄弟元素</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [];</div><div class=\"line\">\t<span class=\"comment\">// 遍历this上的所有dom元素</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 在遍历当前dom元素下面所有的兄弟元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> node = <span class=\"keyword\">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前兄弟节点,为元素节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 即为结果,将其添加ret内,并结束循环</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t\tret.push(node);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 将ret转换成itcast对象,返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"nextAll\"><a href=\"#nextAll\" class=\"headerlink\" title=\"nextAll\"></a>nextAll</h2><ol>\n<li>功能:获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素下面的所有兄弟元素 <code>(nextSiling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code> 返回值类型, <code>itcast</code> 对象</li>\n<li>实现思路<ul>\n<li>定义 <code>ret</code> 数组，存储所有 <code>dom</code> 的下一个兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>遍历当前 <code>dom</code> 元素下面的所有兄弟，如果类型为 元素，将此元素存储 <code>ret</code> 内，结束循环。</li>\n<li>两层循环结束，将 <code>ret</code> 转换成 <code>itcast</code> 对象，作为 <code>nextAll</code> 方法的返回值。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">nextAll: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [],</div><div class=\"line\">\t\tnode;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(node = <span class=\"keyword\">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType === <span class=\"number\">1</span>) ret.push(node);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(itcast.unique(ret));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"before-方法\"><a href=\"#before-方法\" class=\"headerlink\" title=\"before 方法\"></a>before 方法</h2><ol>\n<li>功能:</li>\n<li>语法: <code>&lt;itcast对象&gt;.before(source)</code></li>\n<li>实现思路<ul>\n<li>统一 <code>source</code> 类型为 <code>itcast</code> 对象</li>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>再遍历 <code>source</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历 <code>this</code>的 <code>dom</code> 元素的索引是否为0</li>\n<li>如果是 <code>0</code> ,不需要拷贝节点</li>\n<li>否则要深拷贝节点</li>\n<li>先拿到当前遍历 <code>this</code> 的 <code>dom</code> 元素的父节点,调用 <code>insertBefore</code> 方法在其前面添加上面的到的新节点</li>\n<li>两层循环完毕,操作完成</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">before: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> node;</div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom, i</span>) </span>&#123;</div><div class=\"line\">\t\tsource.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? elem : elem.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class=\"line\">\t\t\tdom.parentNode.insertBefore(node, dom);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"after-方法\"><a href=\"#after-方法\" class=\"headerlink\" title=\"after 方法\"></a>after 方法</h2><ol>\n<li>功能:</li>\n<li>语法: <code>&lt;itcast对象&gt;.after(source)</code></li>\n<li>实现思路<ul>\n<li>定义 <code>nextSiling</code> 变量,存储 <code>dom</code> 元素的下一个兄弟节点</li>\n<li>统一 <code>source</code> 类型为 <code>itcast</code> 对象</li>\n<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>\n<li>再遍历<code>source</code> 上的每一个 <code>dom</code> 元素</li>\n<li>判断当前遍历 <code>this</code> 的 <code>dom</code> 元素的索引是否为 <code>0</code></li>\n<li>如果是 <code>0</code> ,不需要拷贝节点</li>\n<li>否则要深拷贝节点</li>\n<li>先拿到当前遍历 <code>this</code> 的 <code>dom</code> 元素的父节点,调用 <code>insertBefore</code> 方法在其前面添加上面的到的新节点</li>\n<li>两层循环完毕,操作完成</li>\n<li><code>return this</code> 实现链式编程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">after: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> node,</div><div class=\"line\">\t\tnextSibling;</div><div class=\"line\">\tsource = itcast(source);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom, i</span>) </span>&#123;</div><div class=\"line\">\t\tnextSibling = dom.nextSibling;</div><div class=\"line\">\t\tsource.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</div><div class=\"line\">\t\t\tnode = i === <span class=\"number\">0</span> ? elem : elem.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class=\"line\">\t\t\tdom.parentNode.insertBefore(node, nextSibling);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"unique-方法\"><a href=\"#unique-方法\" class=\"headerlink\" title=\"unique 方法\"></a>unique 方法</h2><ol>\n<li>功能:实现数组元素去重</li>\n<li>语法: <code>var newRet = itcast.unique(arr);</code></li>\n<li>实现思路<ul>\n<li>定义空数组对象 <code>ret</code> .存储去重后的元素</li>\n<li>遍历原数组,如果当前遍历到的元素在 <code>ret</code> 中不存在,就添加 <code>ret</code> 内</li>\n<li>循环结束, <code>ret</code> 存储的就是去重后的元素</li>\n<li>返回 <code>ret</code></li>\n</ul>\n</li>\n<li><a href=\"#code\">兼容IE8 indexof 方法</a><ul>\n<li>首先判断当前浏览器是否支持 <code>indexof</code> 方法</li>\n<li>如果不支持就给数组对象的原型添加 <code>indexof</code> 方法</li>\n<li>遍历 <code>this</code> 上的所有元素</li>\n<li>如果遍历到的当前元素和指定参数值相同就直接返回其索引值.结束循环</li>\n<li>如果在整个上述循环都没有返回值,那么表示不存在指定参数值就返回 <code>-1</code> .</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">unique: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 存储去重后的结果</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret = [];</div><div class=\"line\">\t<span class=\"comment\">// 遍历原数组arr</span></div><div class=\"line\">\titcast.each(arr, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 判断ret是否存在当前遍历到的元素</span></div><div class=\"line\">\t\t<span class=\"comment\">// 如果不存在将其添加到ret中</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(ret.indexOf(<span class=\"keyword\">this</span>) === <span class=\"number\">-1</span>) ret.push(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">// 将ret返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p id=\"code\">兼容 <code>IE8</code> <code>indexof</code> 方法</p>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 兼容数组对象的indexOf方法</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 如果浏览器不支持indexOf方法</span></div><div class=\"line\">\t<span class=\"comment\">// 那么就给数组对象的原型添加indexOf方法</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.prototype.indexOf)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">Array</span>.prototype.indexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 遍历this</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,l = <span class=\"keyword\">this</span>.length; i &lt; l; i++)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 如果遍历到的当前元素和val相同，返回其索引值</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>[i] == val) <span class=\"keyword\">return</span> i;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 那么表示不存在指定参数值就返回 -1 </span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<h2 id=\"prev-方法\"><a href=\"#prev-方法\" class=\"headerlink\" title=\"prev 方法\"></a>prev 方法</h2><ol>\n<li>功能: 获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的前一个兄弟元素 <code>(previousSibling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.prev();</code> 返回值类型: <code>itcast对象</code></li>\n<li>实现思路<ul>\n<li>定义 <code>ret</code> 数组,存储所有 <code>dom</code> 的前一个兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>\n<li>遍历当前 <code>dom</code> 元素之前的所有兄弟,如果类型为元素,将此元素存储 <code>ret</code> 内,结束循环</li>\n<li>两层循环结束,将 <code>ret</code> 转换成 <code>itcast</code> 对象,作为 <code>next</code> 方法的返回值</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">prev:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//存储所有dom的前一个兄弟元素</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> ret=[];</div><div class=\"line\">\t<span class=\"comment\">//遍历this上的所有dom元素</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//在遍历当前dom元素之前所有的兄弟元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> node=<span class=\"keyword\">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//如果当前兄弟节点为元素节点</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//即为结果,将其添加到ret内,并结束循环</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType===<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\t\tret.push(node);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">//将ret转换成itcast对象,返回</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(ret);</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<h2 id=\"prevAll-方法\"><a href=\"#prevAll-方法\" class=\"headerlink\" title=\"prevAll 方法\"></a>prevAll 方法</h2><ol>\n<li>功能: 获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的之前的所有兄弟元素 <code>(nextSibling)</code></li>\n<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code> 返回值类型: <code>itcast对象</code></li>\n<li>实现思路<ul>\n<li>定义 <code>ret数组</code> ,存储所有 <code>dom</code> 之前的所有兄弟元素</li>\n<li>遍历 <code>this</code> 上的所有 <code>dom元素</code></li>\n<li>遍历当前 <code>dom</code> 元素之前的所有兄弟,如果类型为元素,将此元素存储 <code>ret</code> 内,结束循环</li>\n<li>两层循环结束,将 <code>ret</code> 转换成 <code>itcast对象</code> ,作为 <code>nextAll</code> 方法的返回值</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">prevAll:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> ret=[];</div><div class=\"line\">\t<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> node=<span class=\"keyword\">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node.nodeType===<span class=\"number\">1</span>) ret.push(node);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> itcast(itcast.unique(ret));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JavaScript高级篇之part2","date":"2016-05-18T10:29:33.000Z","_content":"\njavascript高级与面向对象笔记整理，接part1篇！！\n\n<!-- more -->\n\n## 面向对象编程举例\n\n### 1.面向过程的思维方式\n\n代码重复性太高，几乎没有复用性。\n\t\n### 2.使用函数进行封装\n\n提升的代码的复用性\n全局变量污染\n结构混乱，后期维护不便\n\n### 3.使用对象进行封装\n\n使用对象进行封装，在外界之暴露一个对象名，不会造成全局污染\n在对象内部使用对象的属性，进行模块的划分，让代码的结构更加的清晰，便于维护\n\t\n## 创建对象的三种方式\n\n### 字面量创建对象\n\n```js\nvar obj = {\n    key: value,\n    key: value\n}\n```\n\n只能创建一次对象，复用性太差\n\n### 内置构造函数创建对象\n\n```js\nvar obj = new Object();\n```\n\n每次创建出来的对象都是空对象，需要手动的去添加成员\n\n### 自定义构造函数创建对象\n\n自己创建的构造函数就是自定构造函数\n\n## 自定义构造函数\n\n### 构造函数的特点\n\n* 函数的首字母大写\n* 一般和 `new` 关键字配合使用\n* 没有 `return` 语句，返回值默认为创建出来的对象\n* 手动添加 `return` 语句的时候\n* 如果 `return` 的是基本类型的数据，则不会对默认的返回有任何的影响\n* 如果 `return` 的是对象类型的数据，则会替换掉默认的返回值\n\n### 构造函数的执行步骤\n\n* 使用 `new` 关键字创建对象\n* 调用构造函数，将 `this` 赋值为 `new` 关键字创建出来的对象\n* 在构造函数中，使用 `this` 为新创建的对象新增成员\n* 默认返回新创建的这个对象\n\n## 面向对象的三大特性\n\n### 封装\n\n将数据和方法进行封装，对外界只提供指定的接口，外部使用只要调用相应的接口，而不需要关心内部的具体实现\n\t\n### 继承\n\n一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承\n\t\n### 多态\n\nJS中没有多态\n父类的指针指向子类的对象\n\t\n## 原型\n\n### 构造函数存在的问题\n\n如果将方法的定义写在构造函数中，每次创建对象的时候，都会重新的创建一个新的方法，每个对象独占一个方法，但是所有对象的该方法都是一样的，会造成资源浪费\n\n* 在外部声明函数，每次创建对象的时候，将外部的函数引用赋值给当前对象的方法，这样就能保证所有的对象都指向构造函数外部的这个函数\n* 使用原型\n\n### 原型是什么\n\n在构造函数创建出来的时候，系统会默认的为构造函数创建并关联一个空对象，这个的对象就是原型\n\n### 原型的作用\n\n所用通过构造函数创建出来的对象，都能访问原型中的成员，也就是说原型中的成员被所有的对象共享\n\n### 如何访问原型对象\n\n* 构造函数 `.prototype` \n* 对象 `.__proto__` (不推荐使用，因为有兼容性问题，调试的时候可以使用)\n\n### 原型的使用方式\n\n* 利用对象的动态特性为原型添加成员\n* 直接替换原型对象\n\n### 原型的使用注意事项\n\n* 一般情况只将方法放在原型中，属性放在对象中\n* 对象在获取属性的时候，会现在自身查找，如果找到了直接使用，如果没有找到，就去原型中查找，如果找到了就使用\n* 对象在设置属性的时候，不会去原型中查找了，只在自身进行查找，如果找到了，就修改，如果没有找到，就新增\n* 在替换原型对象的时候，需要注意：替换之前创建的对象和替换之后创建的对象的原型不一致\n\n## 继承的实现方式\n\n### 混入式继承（ `mix-in` ）\n\n```js\nvar obj = {};\nvar obj1 = {name:\"adsf\",age:18};\nfor(var k in obj1){\n    obj[k] = obj1[k];\n}\n```\n\n### 原型继承\n\n#### 1.使用混入的方式为原型对象添加成员、\n\n```js\nvar human = {name:\"\",age:18}\nfunction Person(){};\n\nfor(var k in human){\n    Person.prototype[k] = human[k];\n}\n```\n\n#### 2.直接修改原型对象\n\n```js\nfunction Person(){}\nPerson.prototype.name = \"\";\nPerson.prototype.age = 18;\n```\n\n#### 3.替换原型对象\n\n```js\nvar human = {name:\"\",age:18}\nfunction Person(){};\nPerson.prototype = human;\n```\n\n### 经典继承\n\n```js\nvar obj = Object.create(obj1);\n//创建出来一个新的对象obj继承自obj1\n//原理就是把obj1设置为obj的原型\n```\n\n#### 经典继承的兼容性问题\n\n```js\nfunction myCreate(obj){\n    //判断浏览器有没有Object.create方法\n    if(Object.create){\n        //如果有，直接调用\n        return Object.create(obj);\n    }else{\n        function F(){}\n        F.prototype = obj;\n        return new F();\n    }\n}\n```\n\n##### 为什么不能修改原生对象?\n\n因为原生对象是公用的，在多人开发的时候，可能会出现冲突，你修改了，他也修改了，谁的生效呢？","source":"_posts/javascript-part2.md","raw":"---\ntitle: JavaScript高级篇之part2\ndate: 2016-05-18 18:29:33\ntags: javascript\ncategories: javascript\n---\n\njavascript高级与面向对象笔记整理，接part1篇！！\n\n<!-- more -->\n\n## 面向对象编程举例\n\n### 1.面向过程的思维方式\n\n代码重复性太高，几乎没有复用性。\n\t\n### 2.使用函数进行封装\n\n提升的代码的复用性\n全局变量污染\n结构混乱，后期维护不便\n\n### 3.使用对象进行封装\n\n使用对象进行封装，在外界之暴露一个对象名，不会造成全局污染\n在对象内部使用对象的属性，进行模块的划分，让代码的结构更加的清晰，便于维护\n\t\n## 创建对象的三种方式\n\n### 字面量创建对象\n\n```js\nvar obj = {\n    key: value,\n    key: value\n}\n```\n\n只能创建一次对象，复用性太差\n\n### 内置构造函数创建对象\n\n```js\nvar obj = new Object();\n```\n\n每次创建出来的对象都是空对象，需要手动的去添加成员\n\n### 自定义构造函数创建对象\n\n自己创建的构造函数就是自定构造函数\n\n## 自定义构造函数\n\n### 构造函数的特点\n\n* 函数的首字母大写\n* 一般和 `new` 关键字配合使用\n* 没有 `return` 语句，返回值默认为创建出来的对象\n* 手动添加 `return` 语句的时候\n* 如果 `return` 的是基本类型的数据，则不会对默认的返回有任何的影响\n* 如果 `return` 的是对象类型的数据，则会替换掉默认的返回值\n\n### 构造函数的执行步骤\n\n* 使用 `new` 关键字创建对象\n* 调用构造函数，将 `this` 赋值为 `new` 关键字创建出来的对象\n* 在构造函数中，使用 `this` 为新创建的对象新增成员\n* 默认返回新创建的这个对象\n\n## 面向对象的三大特性\n\n### 封装\n\n将数据和方法进行封装，对外界只提供指定的接口，外部使用只要调用相应的接口，而不需要关心内部的具体实现\n\t\n### 继承\n\n一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承\n\t\n### 多态\n\nJS中没有多态\n父类的指针指向子类的对象\n\t\n## 原型\n\n### 构造函数存在的问题\n\n如果将方法的定义写在构造函数中，每次创建对象的时候，都会重新的创建一个新的方法，每个对象独占一个方法，但是所有对象的该方法都是一样的，会造成资源浪费\n\n* 在外部声明函数，每次创建对象的时候，将外部的函数引用赋值给当前对象的方法，这样就能保证所有的对象都指向构造函数外部的这个函数\n* 使用原型\n\n### 原型是什么\n\n在构造函数创建出来的时候，系统会默认的为构造函数创建并关联一个空对象，这个的对象就是原型\n\n### 原型的作用\n\n所用通过构造函数创建出来的对象，都能访问原型中的成员，也就是说原型中的成员被所有的对象共享\n\n### 如何访问原型对象\n\n* 构造函数 `.prototype` \n* 对象 `.__proto__` (不推荐使用，因为有兼容性问题，调试的时候可以使用)\n\n### 原型的使用方式\n\n* 利用对象的动态特性为原型添加成员\n* 直接替换原型对象\n\n### 原型的使用注意事项\n\n* 一般情况只将方法放在原型中，属性放在对象中\n* 对象在获取属性的时候，会现在自身查找，如果找到了直接使用，如果没有找到，就去原型中查找，如果找到了就使用\n* 对象在设置属性的时候，不会去原型中查找了，只在自身进行查找，如果找到了，就修改，如果没有找到，就新增\n* 在替换原型对象的时候，需要注意：替换之前创建的对象和替换之后创建的对象的原型不一致\n\n## 继承的实现方式\n\n### 混入式继承（ `mix-in` ）\n\n```js\nvar obj = {};\nvar obj1 = {name:\"adsf\",age:18};\nfor(var k in obj1){\n    obj[k] = obj1[k];\n}\n```\n\n### 原型继承\n\n#### 1.使用混入的方式为原型对象添加成员、\n\n```js\nvar human = {name:\"\",age:18}\nfunction Person(){};\n\nfor(var k in human){\n    Person.prototype[k] = human[k];\n}\n```\n\n#### 2.直接修改原型对象\n\n```js\nfunction Person(){}\nPerson.prototype.name = \"\";\nPerson.prototype.age = 18;\n```\n\n#### 3.替换原型对象\n\n```js\nvar human = {name:\"\",age:18}\nfunction Person(){};\nPerson.prototype = human;\n```\n\n### 经典继承\n\n```js\nvar obj = Object.create(obj1);\n//创建出来一个新的对象obj继承自obj1\n//原理就是把obj1设置为obj的原型\n```\n\n#### 经典继承的兼容性问题\n\n```js\nfunction myCreate(obj){\n    //判断浏览器有没有Object.create方法\n    if(Object.create){\n        //如果有，直接调用\n        return Object.create(obj);\n    }else{\n        function F(){}\n        F.prototype = obj;\n        return new F();\n    }\n}\n```\n\n##### 为什么不能修改原生对象?\n\n因为原生对象是公用的，在多人开发的时候，可能会出现冲突，你修改了，他也修改了，谁的生效呢？","slug":"javascript-part2","published":1,"updated":"2016-11-24T01:25:17.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprjt00129wg7e1ydailq","content":"<p>javascript高级与面向对象笔记整理，接part1篇！！</p>\n<a id=\"more\"></a>\n<h2 id=\"面向对象编程举例\"><a href=\"#面向对象编程举例\" class=\"headerlink\" title=\"面向对象编程举例\"></a>面向对象编程举例</h2><h3 id=\"1-面向过程的思维方式\"><a href=\"#1-面向过程的思维方式\" class=\"headerlink\" title=\"1.面向过程的思维方式\"></a>1.面向过程的思维方式</h3><p>代码重复性太高，几乎没有复用性。</p>\n<h3 id=\"2-使用函数进行封装\"><a href=\"#2-使用函数进行封装\" class=\"headerlink\" title=\"2.使用函数进行封装\"></a>2.使用函数进行封装</h3><p>提升的代码的复用性<br>全局变量污染<br>结构混乱，后期维护不便</p>\n<h3 id=\"3-使用对象进行封装\"><a href=\"#3-使用对象进行封装\" class=\"headerlink\" title=\"3.使用对象进行封装\"></a>3.使用对象进行封装</h3><p>使用对象进行封装，在外界之暴露一个对象名，不会造成全局污染<br>在对象内部使用对象的属性，进行模块的划分，让代码的结构更加的清晰，便于维护</p>\n<h2 id=\"创建对象的三种方式\"><a href=\"#创建对象的三种方式\" class=\"headerlink\" title=\"创建对象的三种方式\"></a>创建对象的三种方式</h2><h3 id=\"字面量创建对象\"><a href=\"#字面量创建对象\" class=\"headerlink\" title=\"字面量创建对象\"></a>字面量创建对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">key</span>: value,</div><div class=\"line\">    <span class=\"attr\">key</span>: value</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>只能创建一次对象，复用性太差</p>\n<h3 id=\"内置构造函数创建对象\"><a href=\"#内置构造函数创建对象\" class=\"headerlink\" title=\"内置构造函数创建对象\"></a>内置构造函数创建对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div></pre></td></tr></table></figure>\n<p>每次创建出来的对象都是空对象，需要手动的去添加成员</p>\n<h3 id=\"自定义构造函数创建对象\"><a href=\"#自定义构造函数创建对象\" class=\"headerlink\" title=\"自定义构造函数创建对象\"></a>自定义构造函数创建对象</h3><p>自己创建的构造函数就是自定构造函数</p>\n<h2 id=\"自定义构造函数\"><a href=\"#自定义构造函数\" class=\"headerlink\" title=\"自定义构造函数\"></a>自定义构造函数</h2><h3 id=\"构造函数的特点\"><a href=\"#构造函数的特点\" class=\"headerlink\" title=\"构造函数的特点\"></a>构造函数的特点</h3><ul>\n<li>函数的首字母大写</li>\n<li>一般和 <code>new</code> 关键字配合使用</li>\n<li>没有 <code>return</code> 语句，返回值默认为创建出来的对象</li>\n<li>手动添加 <code>return</code> 语句的时候</li>\n<li>如果 <code>return</code> 的是基本类型的数据，则不会对默认的返回有任何的影响</li>\n<li>如果 <code>return</code> 的是对象类型的数据，则会替换掉默认的返回值</li>\n</ul>\n<h3 id=\"构造函数的执行步骤\"><a href=\"#构造函数的执行步骤\" class=\"headerlink\" title=\"构造函数的执行步骤\"></a>构造函数的执行步骤</h3><ul>\n<li>使用 <code>new</code> 关键字创建对象</li>\n<li>调用构造函数，将 <code>this</code> 赋值为 <code>new</code> 关键字创建出来的对象</li>\n<li>在构造函数中，使用 <code>this</code> 为新创建的对象新增成员</li>\n<li>默认返回新创建的这个对象</li>\n</ul>\n<h2 id=\"面向对象的三大特性\"><a href=\"#面向对象的三大特性\" class=\"headerlink\" title=\"面向对象的三大特性\"></a>面向对象的三大特性</h2><h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>将数据和方法进行封装，对外界只提供指定的接口，外部使用只要调用相应的接口，而不需要关心内部的具体实现</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承</p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>JS中没有多态<br>父类的指针指向子类的对象</p>\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><h3 id=\"构造函数存在的问题\"><a href=\"#构造函数存在的问题\" class=\"headerlink\" title=\"构造函数存在的问题\"></a>构造函数存在的问题</h3><p>如果将方法的定义写在构造函数中，每次创建对象的时候，都会重新的创建一个新的方法，每个对象独占一个方法，但是所有对象的该方法都是一样的，会造成资源浪费</p>\n<ul>\n<li>在外部声明函数，每次创建对象的时候，将外部的函数引用赋值给当前对象的方法，这样就能保证所有的对象都指向构造函数外部的这个函数</li>\n<li>使用原型</li>\n</ul>\n<h3 id=\"原型是什么\"><a href=\"#原型是什么\" class=\"headerlink\" title=\"原型是什么\"></a>原型是什么</h3><p>在构造函数创建出来的时候，系统会默认的为构造函数创建并关联一个空对象，这个的对象就是原型</p>\n<h3 id=\"原型的作用\"><a href=\"#原型的作用\" class=\"headerlink\" title=\"原型的作用\"></a>原型的作用</h3><p>所用通过构造函数创建出来的对象，都能访问原型中的成员，也就是说原型中的成员被所有的对象共享</p>\n<h3 id=\"如何访问原型对象\"><a href=\"#如何访问原型对象\" class=\"headerlink\" title=\"如何访问原型对象\"></a>如何访问原型对象</h3><ul>\n<li>构造函数 <code>.prototype</code> </li>\n<li>对象 <code>.__proto__</code> (不推荐使用，因为有兼容性问题，调试的时候可以使用)</li>\n</ul>\n<h3 id=\"原型的使用方式\"><a href=\"#原型的使用方式\" class=\"headerlink\" title=\"原型的使用方式\"></a>原型的使用方式</h3><ul>\n<li>利用对象的动态特性为原型添加成员</li>\n<li>直接替换原型对象</li>\n</ul>\n<h3 id=\"原型的使用注意事项\"><a href=\"#原型的使用注意事项\" class=\"headerlink\" title=\"原型的使用注意事项\"></a>原型的使用注意事项</h3><ul>\n<li>一般情况只将方法放在原型中，属性放在对象中</li>\n<li>对象在获取属性的时候，会现在自身查找，如果找到了直接使用，如果没有找到，就去原型中查找，如果找到了就使用</li>\n<li>对象在设置属性的时候，不会去原型中查找了，只在自身进行查找，如果找到了，就修改，如果没有找到，就新增</li>\n<li>在替换原型对象的时候，需要注意：替换之前创建的对象和替换之后创建的对象的原型不一致</li>\n</ul>\n<h2 id=\"继承的实现方式\"><a href=\"#继承的实现方式\" class=\"headerlink\" title=\"继承的实现方式\"></a>继承的实现方式</h2><h3 id=\"混入式继承（-mix-in-）\"><a href=\"#混入式继承（-mix-in-）\" class=\"headerlink\" title=\"混入式继承（ mix-in ）\"></a>混入式继承（ <code>mix-in</code> ）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"adsf\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj1)&#123;</div><div class=\"line\">    obj[k] = obj1[k];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><h4 id=\"1-使用混入的方式为原型对象添加成员、\"><a href=\"#1-使用混入的方式为原型对象添加成员、\" class=\"headerlink\" title=\"1.使用混入的方式为原型对象添加成员、\"></a>1.使用混入的方式为原型对象添加成员、</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> human)&#123;</div><div class=\"line\">    Person.prototype[k] = human[k];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-直接修改原型对象\"><a href=\"#2-直接修改原型对象\" class=\"headerlink\" title=\"2.直接修改原型对象\"></a>2.直接修改原型对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">Person.prototype.age = <span class=\"number\">18</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"3-替换原型对象\"><a href=\"#3-替换原型对象\" class=\"headerlink\" title=\"3.替换原型对象\"></a>3.替换原型对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">Person.prototype = human;</div></pre></td></tr></table></figure>\n<h3 id=\"经典继承\"><a href=\"#经典继承\" class=\"headerlink\" title=\"经典继承\"></a>经典继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(obj1);</div><div class=\"line\"><span class=\"comment\">//创建出来一个新的对象obj继承自obj1</span></div><div class=\"line\"><span class=\"comment\">//原理就是把obj1设置为obj的原型</span></div></pre></td></tr></table></figure>\n<h4 id=\"经典继承的兼容性问题\"><a href=\"#经典继承的兼容性问题\" class=\"headerlink\" title=\"经典继承的兼容性问题\"></a>经典继承的兼容性问题</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myCreate</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//判断浏览器有没有Object.create方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.create)&#123;</div><div class=\"line\">        <span class=\"comment\">//如果有，直接调用</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(obj);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">        F.prototype = obj;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"为什么不能修改原生对象\"><a href=\"#为什么不能修改原生对象\" class=\"headerlink\" title=\"为什么不能修改原生对象?\"></a>为什么不能修改原生对象?</h5><p>因为原生对象是公用的，在多人开发的时候，可能会出现冲突，你修改了，他也修改了，谁的生效呢？</p>\n","excerpt":"<p>javascript高级与面向对象笔记整理，接part1篇！！</p>","more":"<h2 id=\"面向对象编程举例\"><a href=\"#面向对象编程举例\" class=\"headerlink\" title=\"面向对象编程举例\"></a>面向对象编程举例</h2><h3 id=\"1-面向过程的思维方式\"><a href=\"#1-面向过程的思维方式\" class=\"headerlink\" title=\"1.面向过程的思维方式\"></a>1.面向过程的思维方式</h3><p>代码重复性太高，几乎没有复用性。</p>\n<h3 id=\"2-使用函数进行封装\"><a href=\"#2-使用函数进行封装\" class=\"headerlink\" title=\"2.使用函数进行封装\"></a>2.使用函数进行封装</h3><p>提升的代码的复用性<br>全局变量污染<br>结构混乱，后期维护不便</p>\n<h3 id=\"3-使用对象进行封装\"><a href=\"#3-使用对象进行封装\" class=\"headerlink\" title=\"3.使用对象进行封装\"></a>3.使用对象进行封装</h3><p>使用对象进行封装，在外界之暴露一个对象名，不会造成全局污染<br>在对象内部使用对象的属性，进行模块的划分，让代码的结构更加的清晰，便于维护</p>\n<h2 id=\"创建对象的三种方式\"><a href=\"#创建对象的三种方式\" class=\"headerlink\" title=\"创建对象的三种方式\"></a>创建对象的三种方式</h2><h3 id=\"字面量创建对象\"><a href=\"#字面量创建对象\" class=\"headerlink\" title=\"字面量创建对象\"></a>字面量创建对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">key</span>: value,</div><div class=\"line\">    <span class=\"attr\">key</span>: value</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>只能创建一次对象，复用性太差</p>\n<h3 id=\"内置构造函数创建对象\"><a href=\"#内置构造函数创建对象\" class=\"headerlink\" title=\"内置构造函数创建对象\"></a>内置构造函数创建对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div></pre></td></tr></table></figure>\n<p>每次创建出来的对象都是空对象，需要手动的去添加成员</p>\n<h3 id=\"自定义构造函数创建对象\"><a href=\"#自定义构造函数创建对象\" class=\"headerlink\" title=\"自定义构造函数创建对象\"></a>自定义构造函数创建对象</h3><p>自己创建的构造函数就是自定构造函数</p>\n<h2 id=\"自定义构造函数\"><a href=\"#自定义构造函数\" class=\"headerlink\" title=\"自定义构造函数\"></a>自定义构造函数</h2><h3 id=\"构造函数的特点\"><a href=\"#构造函数的特点\" class=\"headerlink\" title=\"构造函数的特点\"></a>构造函数的特点</h3><ul>\n<li>函数的首字母大写</li>\n<li>一般和 <code>new</code> 关键字配合使用</li>\n<li>没有 <code>return</code> 语句，返回值默认为创建出来的对象</li>\n<li>手动添加 <code>return</code> 语句的时候</li>\n<li>如果 <code>return</code> 的是基本类型的数据，则不会对默认的返回有任何的影响</li>\n<li>如果 <code>return</code> 的是对象类型的数据，则会替换掉默认的返回值</li>\n</ul>\n<h3 id=\"构造函数的执行步骤\"><a href=\"#构造函数的执行步骤\" class=\"headerlink\" title=\"构造函数的执行步骤\"></a>构造函数的执行步骤</h3><ul>\n<li>使用 <code>new</code> 关键字创建对象</li>\n<li>调用构造函数，将 <code>this</code> 赋值为 <code>new</code> 关键字创建出来的对象</li>\n<li>在构造函数中，使用 <code>this</code> 为新创建的对象新增成员</li>\n<li>默认返回新创建的这个对象</li>\n</ul>\n<h2 id=\"面向对象的三大特性\"><a href=\"#面向对象的三大特性\" class=\"headerlink\" title=\"面向对象的三大特性\"></a>面向对象的三大特性</h2><h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>将数据和方法进行封装，对外界只提供指定的接口，外部使用只要调用相应的接口，而不需要关心内部的具体实现</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承</p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>JS中没有多态<br>父类的指针指向子类的对象</p>\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><h3 id=\"构造函数存在的问题\"><a href=\"#构造函数存在的问题\" class=\"headerlink\" title=\"构造函数存在的问题\"></a>构造函数存在的问题</h3><p>如果将方法的定义写在构造函数中，每次创建对象的时候，都会重新的创建一个新的方法，每个对象独占一个方法，但是所有对象的该方法都是一样的，会造成资源浪费</p>\n<ul>\n<li>在外部声明函数，每次创建对象的时候，将外部的函数引用赋值给当前对象的方法，这样就能保证所有的对象都指向构造函数外部的这个函数</li>\n<li>使用原型</li>\n</ul>\n<h3 id=\"原型是什么\"><a href=\"#原型是什么\" class=\"headerlink\" title=\"原型是什么\"></a>原型是什么</h3><p>在构造函数创建出来的时候，系统会默认的为构造函数创建并关联一个空对象，这个的对象就是原型</p>\n<h3 id=\"原型的作用\"><a href=\"#原型的作用\" class=\"headerlink\" title=\"原型的作用\"></a>原型的作用</h3><p>所用通过构造函数创建出来的对象，都能访问原型中的成员，也就是说原型中的成员被所有的对象共享</p>\n<h3 id=\"如何访问原型对象\"><a href=\"#如何访问原型对象\" class=\"headerlink\" title=\"如何访问原型对象\"></a>如何访问原型对象</h3><ul>\n<li>构造函数 <code>.prototype</code> </li>\n<li>对象 <code>.__proto__</code> (不推荐使用，因为有兼容性问题，调试的时候可以使用)</li>\n</ul>\n<h3 id=\"原型的使用方式\"><a href=\"#原型的使用方式\" class=\"headerlink\" title=\"原型的使用方式\"></a>原型的使用方式</h3><ul>\n<li>利用对象的动态特性为原型添加成员</li>\n<li>直接替换原型对象</li>\n</ul>\n<h3 id=\"原型的使用注意事项\"><a href=\"#原型的使用注意事项\" class=\"headerlink\" title=\"原型的使用注意事项\"></a>原型的使用注意事项</h3><ul>\n<li>一般情况只将方法放在原型中，属性放在对象中</li>\n<li>对象在获取属性的时候，会现在自身查找，如果找到了直接使用，如果没有找到，就去原型中查找，如果找到了就使用</li>\n<li>对象在设置属性的时候，不会去原型中查找了，只在自身进行查找，如果找到了，就修改，如果没有找到，就新增</li>\n<li>在替换原型对象的时候，需要注意：替换之前创建的对象和替换之后创建的对象的原型不一致</li>\n</ul>\n<h2 id=\"继承的实现方式\"><a href=\"#继承的实现方式\" class=\"headerlink\" title=\"继承的实现方式\"></a>继承的实现方式</h2><h3 id=\"混入式继承（-mix-in-）\"><a href=\"#混入式继承（-mix-in-）\" class=\"headerlink\" title=\"混入式继承（ mix-in ）\"></a>混入式继承（ <code>mix-in</code> ）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"adsf\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj1)&#123;</div><div class=\"line\">    obj[k] = obj1[k];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><h4 id=\"1-使用混入的方式为原型对象添加成员、\"><a href=\"#1-使用混入的方式为原型对象添加成员、\" class=\"headerlink\" title=\"1.使用混入的方式为原型对象添加成员、\"></a>1.使用混入的方式为原型对象添加成员、</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> human)&#123;</div><div class=\"line\">    Person.prototype[k] = human[k];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-直接修改原型对象\"><a href=\"#2-直接修改原型对象\" class=\"headerlink\" title=\"2.直接修改原型对象\"></a>2.直接修改原型对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">Person.prototype.age = <span class=\"number\">18</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"3-替换原型对象\"><a href=\"#3-替换原型对象\" class=\"headerlink\" title=\"3.替换原型对象\"></a>3.替换原型对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> human = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">Person.prototype = human;</div></pre></td></tr></table></figure>\n<h3 id=\"经典继承\"><a href=\"#经典继承\" class=\"headerlink\" title=\"经典继承\"></a>经典继承</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(obj1);</div><div class=\"line\"><span class=\"comment\">//创建出来一个新的对象obj继承自obj1</span></div><div class=\"line\"><span class=\"comment\">//原理就是把obj1设置为obj的原型</span></div></pre></td></tr></table></figure>\n<h4 id=\"经典继承的兼容性问题\"><a href=\"#经典继承的兼容性问题\" class=\"headerlink\" title=\"经典继承的兼容性问题\"></a>经典继承的兼容性问题</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myCreate</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//判断浏览器有没有Object.create方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Object</span>.create)&#123;</div><div class=\"line\">        <span class=\"comment\">//如果有，直接调用</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(obj);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">        F.prototype = obj;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"为什么不能修改原生对象\"><a href=\"#为什么不能修改原生对象\" class=\"headerlink\" title=\"为什么不能修改原生对象?\"></a>为什么不能修改原生对象?</h5><p>因为原生对象是公用的，在多人开发的时候，可能会出现冲突，你修改了，他也修改了，谁的生效呢？</p>"},{"title":"JavaScript高级篇之part4","date":"2016-11-09T13:19:05.000Z","_content":"javascript高级与面向对象笔记整理，接part3篇！！\n\n<!-- more -->\n\n## 绘制原型三角\n\n## 原型链\n\n## 原型链图\n\n## 属性搜索原则\n\n只有获取属性的时候会遵守这个原则\n\n## `instanceof`\n\n## `Object.prototype` 的成员\n\n* `constructor` 属性\n\t指向原型相关的构造函数\n* `hasOwnProperty` 方法\n\t对象 `.hasOwnProperty`（属性名）\n* `isPrototypeOf` 方法\n\t对象`.isPrototypeOf`（对象1）判断对象是否是对象1的原型\n* `propertyIsEnmerable` 方法\n\t对象`.propertyIsEnmerable`(属性)\n* `toSting`  `toLocaleSting` 方法\n\t转换成字符串，`toLocaleSting`会将对象转换成\n* `valueOf` 方法\n\t胡i去兑现的值，再回去运算的时候先调用`valueOf`方法\n* `__proto__` 属性\n\t指向对象的原型\n* 双下划线开头的属性都是属于非标准属性\n* 单下划线开头 一般框架中的私有属性\n\n## `.Function`\n\n## `eval`\n\n## 静态成员和实例成员\n\n### 静态成员\n\n* 通过构造函数访问成员的就是静态成员\n* 构造函数 `.prototype`\n* 构造函数 `.name`\n* 构造函数 `.length` （形参的个数）\n\n### 实例成员\n\n通过对象访问的成员就是实例成员\n\n* 只要是通过对象访问到的都是实例成员\n* 比如 `p.name`\t`p.age`\t`p.__proto__`……\n\n## `arguments` 对象\n\n只能在函数内部使用\n\n* 当函数调用的时候会将所有的输惨存入 `arguments` 对象\n*  `arguments.length` （实参的个数）\n*  `arguments.callee` 指向函数本身。用在匿名函数递归\n* 构造函数 `.arguments` 和函数里面的 `arguments` 不是一回事儿\n* 构造函数 `.arguments` 已被弃用","source":"_posts/javascript-part4.md","raw":"---\ntitle: JavaScript高级篇之part4\ndate: 2016-11-09 21:19:05\ntags: javascript\ncategories: javascript\n---\njavascript高级与面向对象笔记整理，接part3篇！！\n\n<!-- more -->\n\n## 绘制原型三角\n\n## 原型链\n\n## 原型链图\n\n## 属性搜索原则\n\n只有获取属性的时候会遵守这个原则\n\n## `instanceof`\n\n## `Object.prototype` 的成员\n\n* `constructor` 属性\n\t指向原型相关的构造函数\n* `hasOwnProperty` 方法\n\t对象 `.hasOwnProperty`（属性名）\n* `isPrototypeOf` 方法\n\t对象`.isPrototypeOf`（对象1）判断对象是否是对象1的原型\n* `propertyIsEnmerable` 方法\n\t对象`.propertyIsEnmerable`(属性)\n* `toSting`  `toLocaleSting` 方法\n\t转换成字符串，`toLocaleSting`会将对象转换成\n* `valueOf` 方法\n\t胡i去兑现的值，再回去运算的时候先调用`valueOf`方法\n* `__proto__` 属性\n\t指向对象的原型\n* 双下划线开头的属性都是属于非标准属性\n* 单下划线开头 一般框架中的私有属性\n\n## `.Function`\n\n## `eval`\n\n## 静态成员和实例成员\n\n### 静态成员\n\n* 通过构造函数访问成员的就是静态成员\n* 构造函数 `.prototype`\n* 构造函数 `.name`\n* 构造函数 `.length` （形参的个数）\n\n### 实例成员\n\n通过对象访问的成员就是实例成员\n\n* 只要是通过对象访问到的都是实例成员\n* 比如 `p.name`\t`p.age`\t`p.__proto__`……\n\n## `arguments` 对象\n\n只能在函数内部使用\n\n* 当函数调用的时候会将所有的输惨存入 `arguments` 对象\n*  `arguments.length` （实参的个数）\n*  `arguments.callee` 指向函数本身。用在匿名函数递归\n* 构造函数 `.arguments` 和函数里面的 `arguments` 不是一回事儿\n* 构造函数 `.arguments` 已被弃用","slug":"javascript-part4","published":1,"updated":"2016-11-24T01:30:05.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprjz00149wg7ti681lrp","content":"<p>javascript高级与面向对象笔记整理，接part3篇！！</p>\n<a id=\"more\"></a>\n<h2 id=\"绘制原型三角\"><a href=\"#绘制原型三角\" class=\"headerlink\" title=\"绘制原型三角\"></a>绘制原型三角</h2><h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><h2 id=\"原型链图\"><a href=\"#原型链图\" class=\"headerlink\" title=\"原型链图\"></a>原型链图</h2><h2 id=\"属性搜索原则\"><a href=\"#属性搜索原则\" class=\"headerlink\" title=\"属性搜索原则\"></a>属性搜索原则</h2><p>只有获取属性的时候会遵守这个原则</p>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a><code>instanceof</code></h2><h2 id=\"Object-prototype-的成员\"><a href=\"#Object-prototype-的成员\" class=\"headerlink\" title=\"Object.prototype 的成员\"></a><code>Object.prototype</code> 的成员</h2><ul>\n<li><code>constructor</code> 属性<br>  指向原型相关的构造函数</li>\n<li><code>hasOwnProperty</code> 方法<br>  对象 <code>.hasOwnProperty</code>（属性名）</li>\n<li><code>isPrototypeOf</code> 方法<br>  对象<code>.isPrototypeOf</code>（对象1）判断对象是否是对象1的原型</li>\n<li><code>propertyIsEnmerable</code> 方法<br>  对象<code>.propertyIsEnmerable</code>(属性)</li>\n<li><code>toSting</code>  <code>toLocaleSting</code> 方法<br>  转换成字符串，<code>toLocaleSting</code>会将对象转换成</li>\n<li><code>valueOf</code> 方法<br>  胡i去兑现的值，再回去运算的时候先调用<code>valueOf</code>方法</li>\n<li><code>__proto__</code> 属性<br>  指向对象的原型</li>\n<li>双下划线开头的属性都是属于非标准属性</li>\n<li>单下划线开头 一般框架中的私有属性</li>\n</ul>\n<h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\".Function\"></a><code>.Function</code></h2><h2 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a><code>eval</code></h2><h2 id=\"静态成员和实例成员\"><a href=\"#静态成员和实例成员\" class=\"headerlink\" title=\"静态成员和实例成员\"></a>静态成员和实例成员</h2><h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><ul>\n<li>通过构造函数访问成员的就是静态成员</li>\n<li>构造函数 <code>.prototype</code></li>\n<li>构造函数 <code>.name</code></li>\n<li>构造函数 <code>.length</code> （形参的个数）</li>\n</ul>\n<h3 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h3><p>通过对象访问的成员就是实例成员</p>\n<ul>\n<li>只要是通过对象访问到的都是实例成员</li>\n<li>比如 <code>p.name</code>    <code>p.age</code>    <code>p.__proto__</code>……</li>\n</ul>\n<h2 id=\"arguments-对象\"><a href=\"#arguments-对象\" class=\"headerlink\" title=\"arguments 对象\"></a><code>arguments</code> 对象</h2><p>只能在函数内部使用</p>\n<ul>\n<li>当函数调用的时候会将所有的输惨存入 <code>arguments</code> 对象</li>\n<li><code>arguments.length</code> （实参的个数）</li>\n<li><code>arguments.callee</code> 指向函数本身。用在匿名函数递归</li>\n<li>构造函数 <code>.arguments</code> 和函数里面的 <code>arguments</code> 不是一回事儿</li>\n<li>构造函数 <code>.arguments</code> 已被弃用</li>\n</ul>\n","excerpt":"<p>javascript高级与面向对象笔记整理，接part3篇！！</p>","more":"<h2 id=\"绘制原型三角\"><a href=\"#绘制原型三角\" class=\"headerlink\" title=\"绘制原型三角\"></a>绘制原型三角</h2><h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><h2 id=\"原型链图\"><a href=\"#原型链图\" class=\"headerlink\" title=\"原型链图\"></a>原型链图</h2><h2 id=\"属性搜索原则\"><a href=\"#属性搜索原则\" class=\"headerlink\" title=\"属性搜索原则\"></a>属性搜索原则</h2><p>只有获取属性的时候会遵守这个原则</p>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a><code>instanceof</code></h2><h2 id=\"Object-prototype-的成员\"><a href=\"#Object-prototype-的成员\" class=\"headerlink\" title=\"Object.prototype 的成员\"></a><code>Object.prototype</code> 的成员</h2><ul>\n<li><code>constructor</code> 属性<br>  指向原型相关的构造函数</li>\n<li><code>hasOwnProperty</code> 方法<br>  对象 <code>.hasOwnProperty</code>（属性名）</li>\n<li><code>isPrototypeOf</code> 方法<br>  对象<code>.isPrototypeOf</code>（对象1）判断对象是否是对象1的原型</li>\n<li><code>propertyIsEnmerable</code> 方法<br>  对象<code>.propertyIsEnmerable</code>(属性)</li>\n<li><code>toSting</code>  <code>toLocaleSting</code> 方法<br>  转换成字符串，<code>toLocaleSting</code>会将对象转换成</li>\n<li><code>valueOf</code> 方法<br>  胡i去兑现的值，再回去运算的时候先调用<code>valueOf</code>方法</li>\n<li><code>__proto__</code> 属性<br>  指向对象的原型</li>\n<li>双下划线开头的属性都是属于非标准属性</li>\n<li>单下划线开头 一般框架中的私有属性</li>\n</ul>\n<h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\".Function\"></a><code>.Function</code></h2><h2 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a><code>eval</code></h2><h2 id=\"静态成员和实例成员\"><a href=\"#静态成员和实例成员\" class=\"headerlink\" title=\"静态成员和实例成员\"></a>静态成员和实例成员</h2><h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><ul>\n<li>通过构造函数访问成员的就是静态成员</li>\n<li>构造函数 <code>.prototype</code></li>\n<li>构造函数 <code>.name</code></li>\n<li>构造函数 <code>.length</code> （形参的个数）</li>\n</ul>\n<h3 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h3><p>通过对象访问的成员就是实例成员</p>\n<ul>\n<li>只要是通过对象访问到的都是实例成员</li>\n<li>比如 <code>p.name</code>    <code>p.age</code>    <code>p.__proto__</code>……</li>\n</ul>\n<h2 id=\"arguments-对象\"><a href=\"#arguments-对象\" class=\"headerlink\" title=\"arguments 对象\"></a><code>arguments</code> 对象</h2><p>只能在函数内部使用</p>\n<ul>\n<li>当函数调用的时候会将所有的输惨存入 <code>arguments</code> 对象</li>\n<li><code>arguments.length</code> （实参的个数）</li>\n<li><code>arguments.callee</code> 指向函数本身。用在匿名函数递归</li>\n<li>构造函数 <code>.arguments</code> 和函数里面的 <code>arguments</code> 不是一回事儿</li>\n<li>构造函数 <code>.arguments</code> 已被弃用</li>\n</ul>"},{"title":"JavaScript高级篇之part3","date":"2016-11-08T11:39:35.000Z","_content":"javascript高级与面向对象笔记整理，接part2篇！！\n\n<!-- more -->\n\n## 绘制原型三角\n\n1. 先画构造函数\n2. 因为有构造函数就有原型，所以画原型\n3. 画构造函数和原型之间的关系\n4. 画实例化出来的对象\n5. 画实例和构造函数以及原型之间的关系\n\n## constructor属性\n\n1. 原型中的属性\n2. 是在构造函数创建出来的时候，系统创建原型的时候，默认的让原型中的 `constructor` 属性指向构造函数本身\n3. 这个属性基本用不到\n\t\n## 原型链\n\n对象都有原型，原型也是对象，所以原型也有原型，所以就形成了一条链式结构，这个结构就叫做原型链\n\t\n### 绘制原型链图\n\n1. 先画构造函数\n2. 因为有构造函数就有原型，所以画原型\n3. 画构造函数和原型之间的关系\n4. 画实例化出来的对象\n5. 画实例和构造函数以及原型之间的关系\n6. 把原型当做对象来对待，找到原型的构造函数，将构造函数画出来\n7. 画出上一步中构造函数的原型\n8. 把第6步和第7不步中的构造函数和原型之间的关系画出来\n9. 把第6步中的原型和其构造函数还有原型之间的关系画出来\n10. 重复 `6-9` 直到画到 `Object.prototype` 让其原型指向 `null` 就结束了\n\t\n### 属性搜索原则\n\n1. 现在对象本身中进行查找，如果找到了就直接使用\n2. 如果没有，就去原型中查找，如果找到了就直接使用\n3. 如果没有找到，就去原型的原型中查找，以此往复，直到找到 `null`\n\n### `Array.prototype` 是一个空数组\n\n```js\n//arr---->Array.prototype----->Object.Prototype----->null\nvar arr = [];\n```\n\n## `instanceof` 关键字\n\n```js\n对象  instanceof 构造函数\n//返回值为boolean类型\n//功能： 判断构造函数的原型是不是在该对象的原型链上\n```\n\n## `Object.prototype` 的成员\n\n* `constructor` 原型中的属性指向和原型相关的构造函数\n* `hasOwnProperty`\n\n```js\n对象.hasOwnProperty(属性名)\n//返回值为boolean类型\n//功能：判断属性是否存在对象本身中\n```\n* `isPrototypeOf`\n\n```js\n对象.isPrototypeof(对象1)\n//返回值为boolean\n//功能：判断对象是否是对象1的原型对象\n```\n\n* `propertyIsEnumerable`\n\n```js\n对象.propertyIsEnumberable(属性名)\n//返回值为boolean\n//功能：判断属性是否属于对象本身并且能够被遍历（`for-in`）\n```\n\n* `toString toLocaleString`\n\n都是将对象转换成字符串类型\n`toLocaleString` 会将字符串转换成本地格式的字符串， 本地格式为系统设置\n\n* `valueOf`\n\n    在对象参与运算的时候，会首先调用 `valueOf` 方法，如果获取到的值能够参与运算就直接使用，\n    如果不能参与运算，就调用 `toString` 方法\n\n```js\n    []==![] true\n    {}==!{} false\n```\n\n## Function\n\n用来创建函数的\n\n* 如果不传参数，创建出来的是空函数\n* 如果传一个参数，创建出来的时候有函数体，但是没有形参的函数\n* 如果传多个参数，最后参数会被作为函数体，之前所有的参数都会被作为形参\n\n可以把字符串转换成代码\n\n## eval\n\n也可以将字符串转换成代码并且执行\n\n### `Function`和`eval`的区别\n\n* `Funtion`创建出来的是函数，函数需要手动调用，里面的代码才会执行\n* `eval`直接回将字符串转换成代码，并且执行\n\n### `Function`和`eval`的共同点\n\n* 都可以将字符串转换成代码\n* 都不安全\n\t\n### `eval`处理`JSON`格式字符串的时候\n\n* 会把JSON格式字符串中的{}当做代码段来处理，所以会报错\n* 处理方式两种\n* 给JSON字符串前后拼接小括号()\n* 将变量的声明以及等号 拼接在JSON格式字符串的前面\n\n## 静态成员和实例成员\n\n* 静态成员：通过构造函数去访问的成员就是静态成员\n* 实例成员：通过实例去访问的成员就是实例成员\n\n## arguments对象\n\n`arguments` 对象是函数中的一个对象，在函数调用的时候，会将所有传入的实参依次存入该对象\n\n* `length`  获取传入实参的个数\n* `callee`  指向函数本身   匿名函数的递归","source":"_posts/javascript-part3.md","raw":"---\ntitle: JavaScript高级篇之part3\ndate: 2016-11-08 19:39:35\ntags: javascript\ncategories: javascript\n---\njavascript高级与面向对象笔记整理，接part2篇！！\n\n<!-- more -->\n\n## 绘制原型三角\n\n1. 先画构造函数\n2. 因为有构造函数就有原型，所以画原型\n3. 画构造函数和原型之间的关系\n4. 画实例化出来的对象\n5. 画实例和构造函数以及原型之间的关系\n\n## constructor属性\n\n1. 原型中的属性\n2. 是在构造函数创建出来的时候，系统创建原型的时候，默认的让原型中的 `constructor` 属性指向构造函数本身\n3. 这个属性基本用不到\n\t\n## 原型链\n\n对象都有原型，原型也是对象，所以原型也有原型，所以就形成了一条链式结构，这个结构就叫做原型链\n\t\n### 绘制原型链图\n\n1. 先画构造函数\n2. 因为有构造函数就有原型，所以画原型\n3. 画构造函数和原型之间的关系\n4. 画实例化出来的对象\n5. 画实例和构造函数以及原型之间的关系\n6. 把原型当做对象来对待，找到原型的构造函数，将构造函数画出来\n7. 画出上一步中构造函数的原型\n8. 把第6步和第7不步中的构造函数和原型之间的关系画出来\n9. 把第6步中的原型和其构造函数还有原型之间的关系画出来\n10. 重复 `6-9` 直到画到 `Object.prototype` 让其原型指向 `null` 就结束了\n\t\n### 属性搜索原则\n\n1. 现在对象本身中进行查找，如果找到了就直接使用\n2. 如果没有，就去原型中查找，如果找到了就直接使用\n3. 如果没有找到，就去原型的原型中查找，以此往复，直到找到 `null`\n\n### `Array.prototype` 是一个空数组\n\n```js\n//arr---->Array.prototype----->Object.Prototype----->null\nvar arr = [];\n```\n\n## `instanceof` 关键字\n\n```js\n对象  instanceof 构造函数\n//返回值为boolean类型\n//功能： 判断构造函数的原型是不是在该对象的原型链上\n```\n\n## `Object.prototype` 的成员\n\n* `constructor` 原型中的属性指向和原型相关的构造函数\n* `hasOwnProperty`\n\n```js\n对象.hasOwnProperty(属性名)\n//返回值为boolean类型\n//功能：判断属性是否存在对象本身中\n```\n* `isPrototypeOf`\n\n```js\n对象.isPrototypeof(对象1)\n//返回值为boolean\n//功能：判断对象是否是对象1的原型对象\n```\n\n* `propertyIsEnumerable`\n\n```js\n对象.propertyIsEnumberable(属性名)\n//返回值为boolean\n//功能：判断属性是否属于对象本身并且能够被遍历（`for-in`）\n```\n\n* `toString toLocaleString`\n\n都是将对象转换成字符串类型\n`toLocaleString` 会将字符串转换成本地格式的字符串， 本地格式为系统设置\n\n* `valueOf`\n\n    在对象参与运算的时候，会首先调用 `valueOf` 方法，如果获取到的值能够参与运算就直接使用，\n    如果不能参与运算，就调用 `toString` 方法\n\n```js\n    []==![] true\n    {}==!{} false\n```\n\n## Function\n\n用来创建函数的\n\n* 如果不传参数，创建出来的是空函数\n* 如果传一个参数，创建出来的时候有函数体，但是没有形参的函数\n* 如果传多个参数，最后参数会被作为函数体，之前所有的参数都会被作为形参\n\n可以把字符串转换成代码\n\n## eval\n\n也可以将字符串转换成代码并且执行\n\n### `Function`和`eval`的区别\n\n* `Funtion`创建出来的是函数，函数需要手动调用，里面的代码才会执行\n* `eval`直接回将字符串转换成代码，并且执行\n\n### `Function`和`eval`的共同点\n\n* 都可以将字符串转换成代码\n* 都不安全\n\t\n### `eval`处理`JSON`格式字符串的时候\n\n* 会把JSON格式字符串中的{}当做代码段来处理，所以会报错\n* 处理方式两种\n* 给JSON字符串前后拼接小括号()\n* 将变量的声明以及等号 拼接在JSON格式字符串的前面\n\n## 静态成员和实例成员\n\n* 静态成员：通过构造函数去访问的成员就是静态成员\n* 实例成员：通过实例去访问的成员就是实例成员\n\n## arguments对象\n\n`arguments` 对象是函数中的一个对象，在函数调用的时候，会将所有传入的实参依次存入该对象\n\n* `length`  获取传入实参的个数\n* `callee`  指向函数本身   匿名函数的递归","slug":"javascript-part3","published":1,"updated":"2016-11-24T01:29:36.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprk400189wg7rjnfjf5j","content":"<p>javascript高级与面向对象笔记整理，接part2篇！！</p>\n<a id=\"more\"></a>\n<h2 id=\"绘制原型三角\"><a href=\"#绘制原型三角\" class=\"headerlink\" title=\"绘制原型三角\"></a>绘制原型三角</h2><ol>\n<li>先画构造函数</li>\n<li>因为有构造函数就有原型，所以画原型</li>\n<li>画构造函数和原型之间的关系</li>\n<li>画实例化出来的对象</li>\n<li>画实例和构造函数以及原型之间的关系</li>\n</ol>\n<h2 id=\"constructor属性\"><a href=\"#constructor属性\" class=\"headerlink\" title=\"constructor属性\"></a>constructor属性</h2><ol>\n<li>原型中的属性</li>\n<li>是在构造函数创建出来的时候，系统创建原型的时候，默认的让原型中的 <code>constructor</code> 属性指向构造函数本身</li>\n<li>这个属性基本用不到</li>\n</ol>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>对象都有原型，原型也是对象，所以原型也有原型，所以就形成了一条链式结构，这个结构就叫做原型链</p>\n<h3 id=\"绘制原型链图\"><a href=\"#绘制原型链图\" class=\"headerlink\" title=\"绘制原型链图\"></a>绘制原型链图</h3><ol>\n<li>先画构造函数</li>\n<li>因为有构造函数就有原型，所以画原型</li>\n<li>画构造函数和原型之间的关系</li>\n<li>画实例化出来的对象</li>\n<li>画实例和构造函数以及原型之间的关系</li>\n<li>把原型当做对象来对待，找到原型的构造函数，将构造函数画出来</li>\n<li>画出上一步中构造函数的原型</li>\n<li>把第6步和第7不步中的构造函数和原型之间的关系画出来</li>\n<li>把第6步中的原型和其构造函数还有原型之间的关系画出来</li>\n<li>重复 <code>6-9</code> 直到画到 <code>Object.prototype</code> 让其原型指向 <code>null</code> 就结束了</li>\n</ol>\n<h3 id=\"属性搜索原则\"><a href=\"#属性搜索原则\" class=\"headerlink\" title=\"属性搜索原则\"></a>属性搜索原则</h3><ol>\n<li>现在对象本身中进行查找，如果找到了就直接使用</li>\n<li>如果没有，就去原型中查找，如果找到了就直接使用</li>\n<li>如果没有找到，就去原型的原型中查找，以此往复，直到找到 <code>null</code></li>\n</ol>\n<h3 id=\"Array-prototype-是一个空数组\"><a href=\"#Array-prototype-是一个空数组\" class=\"headerlink\" title=\"Array.prototype 是一个空数组\"></a><code>Array.prototype</code> 是一个空数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//arr----&gt;Array.prototype-----&gt;Object.Prototype-----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div></pre></td></tr></table></figure>\n<h2 id=\"instanceof-关键字\"><a href=\"#instanceof-关键字\" class=\"headerlink\" title=\"instanceof 关键字\"></a><code>instanceof</code> 关键字</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象  <span class=\"keyword\">instanceof</span> 构造函数</div><div class=\"line\"><span class=\"comment\">//返回值为boolean类型</span></div><div class=\"line\"><span class=\"comment\">//功能： 判断构造函数的原型是不是在该对象的原型链上</span></div></pre></td></tr></table></figure>\n<h2 id=\"Object-prototype-的成员\"><a href=\"#Object-prototype-的成员\" class=\"headerlink\" title=\"Object.prototype 的成员\"></a><code>Object.prototype</code> 的成员</h2><ul>\n<li><code>constructor</code> 原型中的属性指向和原型相关的构造函数</li>\n<li><code>hasOwnProperty</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象.hasOwnProperty(属性名)</div><div class=\"line\"><span class=\"comment\">//返回值为boolean类型</span></div><div class=\"line\"><span class=\"comment\">//功能：判断属性是否存在对象本身中</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>isPrototypeOf</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象.isPrototypeof(对象<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\">//返回值为boolean</span></div><div class=\"line\"><span class=\"comment\">//功能：判断对象是否是对象1的原型对象</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>propertyIsEnumerable</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象.propertyIsEnumberable(属性名)</div><div class=\"line\"><span class=\"comment\">//返回值为boolean</span></div><div class=\"line\"><span class=\"comment\">//功能：判断属性是否属于对象本身并且能够被遍历（`for-in`）</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>toString toLocaleString</code></li>\n</ul>\n<p>都是将对象转换成字符串类型<br><code>toLocaleString</code> 会将字符串转换成本地格式的字符串， 本地格式为系统设置</p>\n<ul>\n<li><p><code>valueOf</code></p>\n<p>  在对象参与运算的时候，会首先调用 <code>valueOf</code> 方法，如果获取到的值能够参与运算就直接使用，<br>  如果不能参与运算，就调用 <code>toString</code> 方法</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[]==![] <span class=\"literal\">true</span></div><div class=\"line\">&#123;&#125;==!&#123;&#125; <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h2><p>用来创建函数的</p>\n<ul>\n<li>如果不传参数，创建出来的是空函数</li>\n<li>如果传一个参数，创建出来的时候有函数体，但是没有形参的函数</li>\n<li>如果传多个参数，最后参数会被作为函数体，之前所有的参数都会被作为形参</li>\n</ul>\n<p>可以把字符串转换成代码</p>\n<h2 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h2><p>也可以将字符串转换成代码并且执行</p>\n<h3 id=\"Function和eval的区别\"><a href=\"#Function和eval的区别\" class=\"headerlink\" title=\"Function和eval的区别\"></a><code>Function</code>和<code>eval</code>的区别</h3><ul>\n<li><code>Funtion</code>创建出来的是函数，函数需要手动调用，里面的代码才会执行</li>\n<li><code>eval</code>直接回将字符串转换成代码，并且执行</li>\n</ul>\n<h3 id=\"Function和eval的共同点\"><a href=\"#Function和eval的共同点\" class=\"headerlink\" title=\"Function和eval的共同点\"></a><code>Function</code>和<code>eval</code>的共同点</h3><ul>\n<li>都可以将字符串转换成代码</li>\n<li>都不安全</li>\n</ul>\n<h3 id=\"eval处理JSON格式字符串的时候\"><a href=\"#eval处理JSON格式字符串的时候\" class=\"headerlink\" title=\"eval处理JSON格式字符串的时候\"></a><code>eval</code>处理<code>JSON</code>格式字符串的时候</h3><ul>\n<li>会把JSON格式字符串中的{}当做代码段来处理，所以会报错</li>\n<li>处理方式两种</li>\n<li>给JSON字符串前后拼接小括号()</li>\n<li>将变量的声明以及等号 拼接在JSON格式字符串的前面</li>\n</ul>\n<h2 id=\"静态成员和实例成员\"><a href=\"#静态成员和实例成员\" class=\"headerlink\" title=\"静态成员和实例成员\"></a>静态成员和实例成员</h2><ul>\n<li>静态成员：通过构造函数去访问的成员就是静态成员</li>\n<li>实例成员：通过实例去访问的成员就是实例成员</li>\n</ul>\n<h2 id=\"arguments对象\"><a href=\"#arguments对象\" class=\"headerlink\" title=\"arguments对象\"></a>arguments对象</h2><p><code>arguments</code> 对象是函数中的一个对象，在函数调用的时候，会将所有传入的实参依次存入该对象</p>\n<ul>\n<li><code>length</code>  获取传入实参的个数</li>\n<li><code>callee</code>  指向函数本身   匿名函数的递归</li>\n</ul>\n","excerpt":"<p>javascript高级与面向对象笔记整理，接part2篇！！</p>","more":"<h2 id=\"绘制原型三角\"><a href=\"#绘制原型三角\" class=\"headerlink\" title=\"绘制原型三角\"></a>绘制原型三角</h2><ol>\n<li>先画构造函数</li>\n<li>因为有构造函数就有原型，所以画原型</li>\n<li>画构造函数和原型之间的关系</li>\n<li>画实例化出来的对象</li>\n<li>画实例和构造函数以及原型之间的关系</li>\n</ol>\n<h2 id=\"constructor属性\"><a href=\"#constructor属性\" class=\"headerlink\" title=\"constructor属性\"></a>constructor属性</h2><ol>\n<li>原型中的属性</li>\n<li>是在构造函数创建出来的时候，系统创建原型的时候，默认的让原型中的 <code>constructor</code> 属性指向构造函数本身</li>\n<li>这个属性基本用不到</li>\n</ol>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>对象都有原型，原型也是对象，所以原型也有原型，所以就形成了一条链式结构，这个结构就叫做原型链</p>\n<h3 id=\"绘制原型链图\"><a href=\"#绘制原型链图\" class=\"headerlink\" title=\"绘制原型链图\"></a>绘制原型链图</h3><ol>\n<li>先画构造函数</li>\n<li>因为有构造函数就有原型，所以画原型</li>\n<li>画构造函数和原型之间的关系</li>\n<li>画实例化出来的对象</li>\n<li>画实例和构造函数以及原型之间的关系</li>\n<li>把原型当做对象来对待，找到原型的构造函数，将构造函数画出来</li>\n<li>画出上一步中构造函数的原型</li>\n<li>把第6步和第7不步中的构造函数和原型之间的关系画出来</li>\n<li>把第6步中的原型和其构造函数还有原型之间的关系画出来</li>\n<li>重复 <code>6-9</code> 直到画到 <code>Object.prototype</code> 让其原型指向 <code>null</code> 就结束了</li>\n</ol>\n<h3 id=\"属性搜索原则\"><a href=\"#属性搜索原则\" class=\"headerlink\" title=\"属性搜索原则\"></a>属性搜索原则</h3><ol>\n<li>现在对象本身中进行查找，如果找到了就直接使用</li>\n<li>如果没有，就去原型中查找，如果找到了就直接使用</li>\n<li>如果没有找到，就去原型的原型中查找，以此往复，直到找到 <code>null</code></li>\n</ol>\n<h3 id=\"Array-prototype-是一个空数组\"><a href=\"#Array-prototype-是一个空数组\" class=\"headerlink\" title=\"Array.prototype 是一个空数组\"></a><code>Array.prototype</code> 是一个空数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//arr----&gt;Array.prototype-----&gt;Object.Prototype-----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div></pre></td></tr></table></figure>\n<h2 id=\"instanceof-关键字\"><a href=\"#instanceof-关键字\" class=\"headerlink\" title=\"instanceof 关键字\"></a><code>instanceof</code> 关键字</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象  <span class=\"keyword\">instanceof</span> 构造函数</div><div class=\"line\"><span class=\"comment\">//返回值为boolean类型</span></div><div class=\"line\"><span class=\"comment\">//功能： 判断构造函数的原型是不是在该对象的原型链上</span></div></pre></td></tr></table></figure>\n<h2 id=\"Object-prototype-的成员\"><a href=\"#Object-prototype-的成员\" class=\"headerlink\" title=\"Object.prototype 的成员\"></a><code>Object.prototype</code> 的成员</h2><ul>\n<li><code>constructor</code> 原型中的属性指向和原型相关的构造函数</li>\n<li><code>hasOwnProperty</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象.hasOwnProperty(属性名)</div><div class=\"line\"><span class=\"comment\">//返回值为boolean类型</span></div><div class=\"line\"><span class=\"comment\">//功能：判断属性是否存在对象本身中</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>isPrototypeOf</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象.isPrototypeof(对象<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\">//返回值为boolean</span></div><div class=\"line\"><span class=\"comment\">//功能：判断对象是否是对象1的原型对象</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>propertyIsEnumerable</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象.propertyIsEnumberable(属性名)</div><div class=\"line\"><span class=\"comment\">//返回值为boolean</span></div><div class=\"line\"><span class=\"comment\">//功能：判断属性是否属于对象本身并且能够被遍历（`for-in`）</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>toString toLocaleString</code></li>\n</ul>\n<p>都是将对象转换成字符串类型<br><code>toLocaleString</code> 会将字符串转换成本地格式的字符串， 本地格式为系统设置</p>\n<ul>\n<li><p><code>valueOf</code></p>\n<p>  在对象参与运算的时候，会首先调用 <code>valueOf</code> 方法，如果获取到的值能够参与运算就直接使用，<br>  如果不能参与运算，就调用 <code>toString</code> 方法</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[]==![] <span class=\"literal\">true</span></div><div class=\"line\">&#123;&#125;==!&#123;&#125; <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h2><p>用来创建函数的</p>\n<ul>\n<li>如果不传参数，创建出来的是空函数</li>\n<li>如果传一个参数，创建出来的时候有函数体，但是没有形参的函数</li>\n<li>如果传多个参数，最后参数会被作为函数体，之前所有的参数都会被作为形参</li>\n</ul>\n<p>可以把字符串转换成代码</p>\n<h2 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h2><p>也可以将字符串转换成代码并且执行</p>\n<h3 id=\"Function和eval的区别\"><a href=\"#Function和eval的区别\" class=\"headerlink\" title=\"Function和eval的区别\"></a><code>Function</code>和<code>eval</code>的区别</h3><ul>\n<li><code>Funtion</code>创建出来的是函数，函数需要手动调用，里面的代码才会执行</li>\n<li><code>eval</code>直接回将字符串转换成代码，并且执行</li>\n</ul>\n<h3 id=\"Function和eval的共同点\"><a href=\"#Function和eval的共同点\" class=\"headerlink\" title=\"Function和eval的共同点\"></a><code>Function</code>和<code>eval</code>的共同点</h3><ul>\n<li>都可以将字符串转换成代码</li>\n<li>都不安全</li>\n</ul>\n<h3 id=\"eval处理JSON格式字符串的时候\"><a href=\"#eval处理JSON格式字符串的时候\" class=\"headerlink\" title=\"eval处理JSON格式字符串的时候\"></a><code>eval</code>处理<code>JSON</code>格式字符串的时候</h3><ul>\n<li>会把JSON格式字符串中的{}当做代码段来处理，所以会报错</li>\n<li>处理方式两种</li>\n<li>给JSON字符串前后拼接小括号()</li>\n<li>将变量的声明以及等号 拼接在JSON格式字符串的前面</li>\n</ul>\n<h2 id=\"静态成员和实例成员\"><a href=\"#静态成员和实例成员\" class=\"headerlink\" title=\"静态成员和实例成员\"></a>静态成员和实例成员</h2><ul>\n<li>静态成员：通过构造函数去访问的成员就是静态成员</li>\n<li>实例成员：通过实例去访问的成员就是实例成员</li>\n</ul>\n<h2 id=\"arguments对象\"><a href=\"#arguments对象\" class=\"headerlink\" title=\"arguments对象\"></a>arguments对象</h2><p><code>arguments</code> 对象是函数中的一个对象，在函数调用的时候，会将所有传入的实参依次存入该对象</p>\n<ul>\n<li><code>length</code>  获取传入实参的个数</li>\n<li><code>callee</code>  指向函数本身   匿名函数的递归</li>\n</ul>"},{"title":"JavaScript高级篇之part5","date":"2016-11-10T13:43:36.000Z","_content":"javascript高级与面向对象笔记整理，接part4篇！！\n\n<!-- more -->\n\n## 词法作用域\n\n### 词法作用域的概念\n\n变量的作用域在代码写好的时候就已经可以确定，这种作用域就是词法作用域\n\n*  `JavaScript` 中没有动态作用域\n*  `JavaScript` 中没有块级作用域\n\n## 变量提升\n\nJS代码执行分两个阶段，首先进行预解析，再执行\n在预解析阶段，系统会将所有的变量声明以及函数声明提升到当前作用域的最顶上\n\n* 当函数同名的时候，都会提升，但是后面的函数会将前面的函数覆盖\n* 当函数和变量同名的时候，只会提升函数声明，变量声明会被忽略\n* 变量提升是分作用域的\n* 变量提升是分段（ `script` 标签）\n* 函数表达式是不会被提升,提升的只是变量的声明。  `var func= function(){};`\n* 条件式函数声明，根据浏览器不同，提升的情况不同，最新的浏览器中都不会进行提升\n\n## 作用域链\n\n在 `js` 中只有函数可以限定作用域，然后，函数中又可以声明函数，这样就形成了一个由内向外进行访问的链式结构，这个结构就叫做作用域链\n\n### 如何绘制作用域链\n\n1. 先画一条直线，表示0级作用域链，也就是全局作用域\n2. 再在全局作用域中查找变量以及函数的声明，将所有找到的这些成员以小方块的形式放在0级作用域链上\n3. 如果全局作用域中有函数成员，那就从该函数中在引出一条线，表示1级作用域链\n4. 再去1级作用域中进行查找变量以及函数的声明，在把他们画出来，\n5. 如果还有函数，就接着去找。。。。直到没有函数为止\n\n### 变量的搜索原则\n\n1. 首先在当前作用域中进行查找，如果找到了就直接使用\n2. 如果没有找到，就去上一级作用域中进行查找，如果找到了就直接使用\n3. 果没有找到，就继续往上查找，直到找到全局作用域为止\n\n### 如何分析面试题\n\n1. 先进行提升处理（把提升后的代码写出来）\n2. 然后根据作用域及作用域链还有变量搜索原则进行分析\n\n## 闭包\n\n* 语文解释：封闭的包裹结构\n* js的解释：函数就是一个闭包\n\n### 闭包要解决的问题是什么？\n\n函数内部的数据无法被外界直接访问！\n\n### 如何解决？\n\n在函数内部返回一个函数，用来操作该函数内部的数据。\n\n### 闭包的原理（作用域）\n\n函数中的变量无法被上一级作用域访问，但是可以被下一级作用域访问。\n\n### 闭包的基本模型\n\n```js\nfunction func(){\n    var name = \"\";\n    return function(){\n        return name;\n    }\n}\n```\n\n### 如何访问多个数据？\n\n返回一个对象，对象中包含对所有数据的设置和访问的方法，在函数外部接收到该对象之后，就可以操作函数内部的数据\n\n### 点击事件的注册问题\n\n如果在`for`循环中使用循环的控制变量i来处理点击事件中的内容，那么这个 `i` 在点击事件触发的时候，循环已经结束，`i` 已经变成了最后一个值，所以会不准确\n\n#### 如何解决\n\n在点击事件的处理函数内部，访问的时候，不要去使用 `i`，而是使用这个函数自己的一个私有的数据。\n所以需要使用一个拥有自己的变量的函数来做点击事件的处理函数。\n\n\t这个函数需要通过闭包来创建。\n\n```js\nfunction f1(j){\n    return function(){\n        console.log(j);  //这里的j就是只有这个函数可以访问的一个私有的变量\n    }\n}\n\n```\n\n\t上面的函数调用之后的返回值，就拥有了自己独立的变量，我们可以使用它来做点击事件的处理函数\n\n### setTimeout的回调函数执行时间问题\n\n`setTimeout` 和 `setInterval` 中的回调函数，会在所有的主逻辑代码执行完之后，才依次检查执行时间是不是到了，到了就会执行\n\n当把 `setTimeout` 放在一个for循环语句中的时候，如果在回调函数中使用了循环中变量i\n那么，当 `setTimeout` 的回调函数执行的时候， `for` 循环已经执行完毕，i已经是最后一个值\n\n#### 解决办法\n\n回调函数不应该去使用 `for` 循环中的 `i` ，而是使用自己的一个私有变量\n\n```js\nfunction f(j){\n    return fucntion(){\n        console.log(j)\n    }\n}\nsetTimeout(f(i),0);\n```","source":"_posts/javascript-part5.md","raw":"---\ntitle: JavaScript高级篇之part5\ndate: 2016-11-10 21:43:36\ntags: javascript\ncategories: javascript\n---\njavascript高级与面向对象笔记整理，接part4篇！！\n\n<!-- more -->\n\n## 词法作用域\n\n### 词法作用域的概念\n\n变量的作用域在代码写好的时候就已经可以确定，这种作用域就是词法作用域\n\n*  `JavaScript` 中没有动态作用域\n*  `JavaScript` 中没有块级作用域\n\n## 变量提升\n\nJS代码执行分两个阶段，首先进行预解析，再执行\n在预解析阶段，系统会将所有的变量声明以及函数声明提升到当前作用域的最顶上\n\n* 当函数同名的时候，都会提升，但是后面的函数会将前面的函数覆盖\n* 当函数和变量同名的时候，只会提升函数声明，变量声明会被忽略\n* 变量提升是分作用域的\n* 变量提升是分段（ `script` 标签）\n* 函数表达式是不会被提升,提升的只是变量的声明。  `var func= function(){};`\n* 条件式函数声明，根据浏览器不同，提升的情况不同，最新的浏览器中都不会进行提升\n\n## 作用域链\n\n在 `js` 中只有函数可以限定作用域，然后，函数中又可以声明函数，这样就形成了一个由内向外进行访问的链式结构，这个结构就叫做作用域链\n\n### 如何绘制作用域链\n\n1. 先画一条直线，表示0级作用域链，也就是全局作用域\n2. 再在全局作用域中查找变量以及函数的声明，将所有找到的这些成员以小方块的形式放在0级作用域链上\n3. 如果全局作用域中有函数成员，那就从该函数中在引出一条线，表示1级作用域链\n4. 再去1级作用域中进行查找变量以及函数的声明，在把他们画出来，\n5. 如果还有函数，就接着去找。。。。直到没有函数为止\n\n### 变量的搜索原则\n\n1. 首先在当前作用域中进行查找，如果找到了就直接使用\n2. 如果没有找到，就去上一级作用域中进行查找，如果找到了就直接使用\n3. 果没有找到，就继续往上查找，直到找到全局作用域为止\n\n### 如何分析面试题\n\n1. 先进行提升处理（把提升后的代码写出来）\n2. 然后根据作用域及作用域链还有变量搜索原则进行分析\n\n## 闭包\n\n* 语文解释：封闭的包裹结构\n* js的解释：函数就是一个闭包\n\n### 闭包要解决的问题是什么？\n\n函数内部的数据无法被外界直接访问！\n\n### 如何解决？\n\n在函数内部返回一个函数，用来操作该函数内部的数据。\n\n### 闭包的原理（作用域）\n\n函数中的变量无法被上一级作用域访问，但是可以被下一级作用域访问。\n\n### 闭包的基本模型\n\n```js\nfunction func(){\n    var name = \"\";\n    return function(){\n        return name;\n    }\n}\n```\n\n### 如何访问多个数据？\n\n返回一个对象，对象中包含对所有数据的设置和访问的方法，在函数外部接收到该对象之后，就可以操作函数内部的数据\n\n### 点击事件的注册问题\n\n如果在`for`循环中使用循环的控制变量i来处理点击事件中的内容，那么这个 `i` 在点击事件触发的时候，循环已经结束，`i` 已经变成了最后一个值，所以会不准确\n\n#### 如何解决\n\n在点击事件的处理函数内部，访问的时候，不要去使用 `i`，而是使用这个函数自己的一个私有的数据。\n所以需要使用一个拥有自己的变量的函数来做点击事件的处理函数。\n\n\t这个函数需要通过闭包来创建。\n\n```js\nfunction f1(j){\n    return function(){\n        console.log(j);  //这里的j就是只有这个函数可以访问的一个私有的变量\n    }\n}\n\n```\n\n\t上面的函数调用之后的返回值，就拥有了自己独立的变量，我们可以使用它来做点击事件的处理函数\n\n### setTimeout的回调函数执行时间问题\n\n`setTimeout` 和 `setInterval` 中的回调函数，会在所有的主逻辑代码执行完之后，才依次检查执行时间是不是到了，到了就会执行\n\n当把 `setTimeout` 放在一个for循环语句中的时候，如果在回调函数中使用了循环中变量i\n那么，当 `setTimeout` 的回调函数执行的时候， `for` 循环已经执行完毕，i已经是最后一个值\n\n#### 解决办法\n\n回调函数不应该去使用 `for` 循环中的 `i` ，而是使用自己的一个私有变量\n\n```js\nfunction f(j){\n    return fucntion(){\n        console.log(j)\n    }\n}\nsetTimeout(f(i),0);\n```","slug":"javascript-part5","published":1,"updated":"2016-11-24T01:30:21.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprk8001b9wg7du1oo7kq","content":"<p>javascript高级与面向对象笔记整理，接part4篇！！</p>\n<a id=\"more\"></a>\n<h2 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h2><h3 id=\"词法作用域的概念\"><a href=\"#词法作用域的概念\" class=\"headerlink\" title=\"词法作用域的概念\"></a>词法作用域的概念</h3><p>变量的作用域在代码写好的时候就已经可以确定，这种作用域就是词法作用域</p>\n<ul>\n<li><code>JavaScript</code> 中没有动态作用域</li>\n<li><code>JavaScript</code> 中没有块级作用域</li>\n</ul>\n<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><p>JS代码执行分两个阶段，首先进行预解析，再执行<br>在预解析阶段，系统会将所有的变量声明以及函数声明提升到当前作用域的最顶上</p>\n<ul>\n<li>当函数同名的时候，都会提升，但是后面的函数会将前面的函数覆盖</li>\n<li>当函数和变量同名的时候，只会提升函数声明，变量声明会被忽略</li>\n<li>变量提升是分作用域的</li>\n<li>变量提升是分段（ <code>script</code> 标签）</li>\n<li>函数表达式是不会被提升,提升的只是变量的声明。  <code>var func= function(){};</code></li>\n<li>条件式函数声明，根据浏览器不同，提升的情况不同，最新的浏览器中都不会进行提升</li>\n</ul>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p>在 <code>js</code> 中只有函数可以限定作用域，然后，函数中又可以声明函数，这样就形成了一个由内向外进行访问的链式结构，这个结构就叫做作用域链</p>\n<h3 id=\"如何绘制作用域链\"><a href=\"#如何绘制作用域链\" class=\"headerlink\" title=\"如何绘制作用域链\"></a>如何绘制作用域链</h3><ol>\n<li>先画一条直线，表示0级作用域链，也就是全局作用域</li>\n<li>再在全局作用域中查找变量以及函数的声明，将所有找到的这些成员以小方块的形式放在0级作用域链上</li>\n<li>如果全局作用域中有函数成员，那就从该函数中在引出一条线，表示1级作用域链</li>\n<li>再去1级作用域中进行查找变量以及函数的声明，在把他们画出来，</li>\n<li>如果还有函数，就接着去找。。。。直到没有函数为止</li>\n</ol>\n<h3 id=\"变量的搜索原则\"><a href=\"#变量的搜索原则\" class=\"headerlink\" title=\"变量的搜索原则\"></a>变量的搜索原则</h3><ol>\n<li>首先在当前作用域中进行查找，如果找到了就直接使用</li>\n<li>如果没有找到，就去上一级作用域中进行查找，如果找到了就直接使用</li>\n<li>果没有找到，就继续往上查找，直到找到全局作用域为止</li>\n</ol>\n<h3 id=\"如何分析面试题\"><a href=\"#如何分析面试题\" class=\"headerlink\" title=\"如何分析面试题\"></a>如何分析面试题</h3><ol>\n<li>先进行提升处理（把提升后的代码写出来）</li>\n<li>然后根据作用域及作用域链还有变量搜索原则进行分析</li>\n</ol>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><ul>\n<li>语文解释：封闭的包裹结构</li>\n<li>js的解释：函数就是一个闭包</li>\n</ul>\n<h3 id=\"闭包要解决的问题是什么？\"><a href=\"#闭包要解决的问题是什么？\" class=\"headerlink\" title=\"闭包要解决的问题是什么？\"></a>闭包要解决的问题是什么？</h3><p>函数内部的数据无法被外界直接访问！</p>\n<h3 id=\"如何解决？\"><a href=\"#如何解决？\" class=\"headerlink\" title=\"如何解决？\"></a>如何解决？</h3><p>在函数内部返回一个函数，用来操作该函数内部的数据。</p>\n<h3 id=\"闭包的原理（作用域）\"><a href=\"#闭包的原理（作用域）\" class=\"headerlink\" title=\"闭包的原理（作用域）\"></a>闭包的原理（作用域）</h3><p>函数中的变量无法被上一级作用域访问，但是可以被下一级作用域访问。</p>\n<h3 id=\"闭包的基本模型\"><a href=\"#闭包的基本模型\" class=\"headerlink\" title=\"闭包的基本模型\"></a>闭包的基本模型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"如何访问多个数据？\"><a href=\"#如何访问多个数据？\" class=\"headerlink\" title=\"如何访问多个数据？\"></a>如何访问多个数据？</h3><p>返回一个对象，对象中包含对所有数据的设置和访问的方法，在函数外部接收到该对象之后，就可以操作函数内部的数据</p>\n<h3 id=\"点击事件的注册问题\"><a href=\"#点击事件的注册问题\" class=\"headerlink\" title=\"点击事件的注册问题\"></a>点击事件的注册问题</h3><p>如果在<code>for</code>循环中使用循环的控制变量i来处理点击事件中的内容，那么这个 <code>i</code> 在点击事件触发的时候，循环已经结束，<code>i</code> 已经变成了最后一个值，所以会不准确</p>\n<h4 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h4><p>在点击事件的处理函数内部，访问的时候，不要去使用 <code>i</code>，而是使用这个函数自己的一个私有的数据。<br>所以需要使用一个拥有自己的变量的函数来做点击事件的处理函数。</p>\n<pre><code>这个函数需要通过闭包来创建。\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">j</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(j);  <span class=\"comment\">//这里的j就是只有这个函数可以访问的一个私有的变量</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>上面的函数调用之后的返回值，就拥有了自己独立的变量，我们可以使用它来做点击事件的处理函数\n</code></pre><h3 id=\"setTimeout的回调函数执行时间问题\"><a href=\"#setTimeout的回调函数执行时间问题\" class=\"headerlink\" title=\"setTimeout的回调函数执行时间问题\"></a>setTimeout的回调函数执行时间问题</h3><p><code>setTimeout</code> 和 <code>setInterval</code> 中的回调函数，会在所有的主逻辑代码执行完之后，才依次检查执行时间是不是到了，到了就会执行</p>\n<p>当把 <code>setTimeout</code> 放在一个for循环语句中的时候，如果在回调函数中使用了循环中变量i<br>那么，当 <code>setTimeout</code> 的回调函数执行的时候， <code>for</code> 循环已经执行完毕，i已经是最后一个值</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>回调函数不应该去使用 <code>for</code> 循环中的 <code>i</code> ，而是使用自己的一个私有变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">j</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fucntion()&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(j)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">setTimeout(f(i),<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>","excerpt":"<p>javascript高级与面向对象笔记整理，接part4篇！！</p>","more":"<h2 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h2><h3 id=\"词法作用域的概念\"><a href=\"#词法作用域的概念\" class=\"headerlink\" title=\"词法作用域的概念\"></a>词法作用域的概念</h3><p>变量的作用域在代码写好的时候就已经可以确定，这种作用域就是词法作用域</p>\n<ul>\n<li><code>JavaScript</code> 中没有动态作用域</li>\n<li><code>JavaScript</code> 中没有块级作用域</li>\n</ul>\n<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><p>JS代码执行分两个阶段，首先进行预解析，再执行<br>在预解析阶段，系统会将所有的变量声明以及函数声明提升到当前作用域的最顶上</p>\n<ul>\n<li>当函数同名的时候，都会提升，但是后面的函数会将前面的函数覆盖</li>\n<li>当函数和变量同名的时候，只会提升函数声明，变量声明会被忽略</li>\n<li>变量提升是分作用域的</li>\n<li>变量提升是分段（ <code>script</code> 标签）</li>\n<li>函数表达式是不会被提升,提升的只是变量的声明。  <code>var func= function(){};</code></li>\n<li>条件式函数声明，根据浏览器不同，提升的情况不同，最新的浏览器中都不会进行提升</li>\n</ul>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p>在 <code>js</code> 中只有函数可以限定作用域，然后，函数中又可以声明函数，这样就形成了一个由内向外进行访问的链式结构，这个结构就叫做作用域链</p>\n<h3 id=\"如何绘制作用域链\"><a href=\"#如何绘制作用域链\" class=\"headerlink\" title=\"如何绘制作用域链\"></a>如何绘制作用域链</h3><ol>\n<li>先画一条直线，表示0级作用域链，也就是全局作用域</li>\n<li>再在全局作用域中查找变量以及函数的声明，将所有找到的这些成员以小方块的形式放在0级作用域链上</li>\n<li>如果全局作用域中有函数成员，那就从该函数中在引出一条线，表示1级作用域链</li>\n<li>再去1级作用域中进行查找变量以及函数的声明，在把他们画出来，</li>\n<li>如果还有函数，就接着去找。。。。直到没有函数为止</li>\n</ol>\n<h3 id=\"变量的搜索原则\"><a href=\"#变量的搜索原则\" class=\"headerlink\" title=\"变量的搜索原则\"></a>变量的搜索原则</h3><ol>\n<li>首先在当前作用域中进行查找，如果找到了就直接使用</li>\n<li>如果没有找到，就去上一级作用域中进行查找，如果找到了就直接使用</li>\n<li>果没有找到，就继续往上查找，直到找到全局作用域为止</li>\n</ol>\n<h3 id=\"如何分析面试题\"><a href=\"#如何分析面试题\" class=\"headerlink\" title=\"如何分析面试题\"></a>如何分析面试题</h3><ol>\n<li>先进行提升处理（把提升后的代码写出来）</li>\n<li>然后根据作用域及作用域链还有变量搜索原则进行分析</li>\n</ol>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><ul>\n<li>语文解释：封闭的包裹结构</li>\n<li>js的解释：函数就是一个闭包</li>\n</ul>\n<h3 id=\"闭包要解决的问题是什么？\"><a href=\"#闭包要解决的问题是什么？\" class=\"headerlink\" title=\"闭包要解决的问题是什么？\"></a>闭包要解决的问题是什么？</h3><p>函数内部的数据无法被外界直接访问！</p>\n<h3 id=\"如何解决？\"><a href=\"#如何解决？\" class=\"headerlink\" title=\"如何解决？\"></a>如何解决？</h3><p>在函数内部返回一个函数，用来操作该函数内部的数据。</p>\n<h3 id=\"闭包的原理（作用域）\"><a href=\"#闭包的原理（作用域）\" class=\"headerlink\" title=\"闭包的原理（作用域）\"></a>闭包的原理（作用域）</h3><p>函数中的变量无法被上一级作用域访问，但是可以被下一级作用域访问。</p>\n<h3 id=\"闭包的基本模型\"><a href=\"#闭包的基本模型\" class=\"headerlink\" title=\"闭包的基本模型\"></a>闭包的基本模型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"如何访问多个数据？\"><a href=\"#如何访问多个数据？\" class=\"headerlink\" title=\"如何访问多个数据？\"></a>如何访问多个数据？</h3><p>返回一个对象，对象中包含对所有数据的设置和访问的方法，在函数外部接收到该对象之后，就可以操作函数内部的数据</p>\n<h3 id=\"点击事件的注册问题\"><a href=\"#点击事件的注册问题\" class=\"headerlink\" title=\"点击事件的注册问题\"></a>点击事件的注册问题</h3><p>如果在<code>for</code>循环中使用循环的控制变量i来处理点击事件中的内容，那么这个 <code>i</code> 在点击事件触发的时候，循环已经结束，<code>i</code> 已经变成了最后一个值，所以会不准确</p>\n<h4 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h4><p>在点击事件的处理函数内部，访问的时候，不要去使用 <code>i</code>，而是使用这个函数自己的一个私有的数据。<br>所以需要使用一个拥有自己的变量的函数来做点击事件的处理函数。</p>\n<pre><code>这个函数需要通过闭包来创建。\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">j</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(j);  <span class=\"comment\">//这里的j就是只有这个函数可以访问的一个私有的变量</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>上面的函数调用之后的返回值，就拥有了自己独立的变量，我们可以使用它来做点击事件的处理函数\n</code></pre><h3 id=\"setTimeout的回调函数执行时间问题\"><a href=\"#setTimeout的回调函数执行时间问题\" class=\"headerlink\" title=\"setTimeout的回调函数执行时间问题\"></a>setTimeout的回调函数执行时间问题</h3><p><code>setTimeout</code> 和 <code>setInterval</code> 中的回调函数，会在所有的主逻辑代码执行完之后，才依次检查执行时间是不是到了，到了就会执行</p>\n<p>当把 <code>setTimeout</code> 放在一个for循环语句中的时候，如果在回调函数中使用了循环中变量i<br>那么，当 <code>setTimeout</code> 的回调函数执行的时候， <code>for</code> 循环已经执行完毕，i已经是最后一个值</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>回调函数不应该去使用 <code>for</code> 循环中的 <code>i</code> ，而是使用自己的一个私有变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">j</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fucntion()&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(j)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">setTimeout(f(i),<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>"},{"title":"JavaScript高级篇之part6","date":"2016-11-11T11:35:55.000Z","_content":"javascript高级与面向对象笔记整理，接part5篇！！\n\n<!-- more -->\n\n## 闭包的练习\n\n### for循环中注册点击事件\n\n### for循环中是用setTimeout\n\n## 缓存\n\n缓存就是将一些数据，剧院，进行临时的存储，以提高访问效率\n\n* 浏览器缓存\n* CDN\n* JS中的缓存\n\n## 使用缓存解决斐波那契数列的性能问题\n\n### 有什么性能问题\n\n使用递归去计算斐波那契数列存在大量的重复的计算，导致计算效率十分底下\n\n### 如何解决性能问题\n\n使用缓存\n\n1. 创建一个数组充当缓存容器\n2. 每次需要计算斐波那契数列的时候，先去缓存中进行查找\n3. 如果有就直接返回\n4. 如果没有，就去计算，算出来结果之后\n5. 将结果存入缓存中\n6. 将结果返回\n\n```js\n//1.创建一个数组充当缓存容器\nvar arr = [];\nfunction fibnacci(n){\n//2.每次需要计算斐波那契数列的时候，先去缓存中进行查找\n\tvar num = arr[n];\n\tif(num){\n\t\t//3.如果有就直接返回\n\t\treturn num;\n\t}else{\n\t\t//4.如果没有，就去计算，算出来结果之后\n\t\tif(n <= 2){\n\t\t\tnum=1;\n\t\t}else{\n\t\tnum = fibnacci(n-1)+fibnacci(n-2);\n\t\t}\n\t\t//5.将结果存入缓存中\n\t\tarr[n] = num;\n\t\t//6.将结果返回\n\t\treturn num;\n\t}\n}\n```\n\n优化后的代码\n\n```js\nfunction createFib(){\n    //1.创建一个数组充当缓存容器\n    var arr = [];\n    function fibnacci(n){\n    //2.每次需要计算斐波那契数字的时候，先去缓存中进行查找\n        var num = arr[n];\n        if(!num){\n            //4.如果没有，就去就算，算出来结果之后，\n            if(n <= 2){\n                num = 1;\n            }else{\n                num = fibnacci(n-1)+fibnacci(n-2);\n            }\n            //5.将结果存入缓存中\n            arr[n] = num;\n        }\n        //6.将结果返回\n        return num;\n    }\n    return fibnacci;\n}\n\n```\n\n## jQuery缓存实现分析\n\n```js\nfunction createCache(){\n\t//需要一个能够存储数据的容器\n\tvar cache = {};\n\t//用来存储 键，并且记录键存入的顺序\n\tvar keys = [];\n\treturn function(key,value){\n\t\tif(value){\n\t\t\tcache[key] = value;\n\t\t\tkeys.push(key);\n\t\t\tif(keys.length > 50){\n\t\t\t\tdelete cache[keys.shift()];\n\t\t\t}\n\t\t}else{\n\t\t\treturn cache[key];\n\t\t}\n\t}\n}\n```\n\n## Jquery缓存源码分析\n\n```js\nfunction createCache(){\n\tvar keys = [];\n\tfunction cache(key,value){\n\t\tif(keys.push(key + \" \") > 10){\n\t\t \tdelete cache[keys.shift()];\n\t\t}\n\t\treturn (cache[key + \" \"] = value);\n\t}\n\treturn cache;\n}\nvar cache = createCache();\ncache(\"name\",\"mengyan\");\ncache[\"name\" + \" \"];\n\n```\n\n## 函数的四种调用形式\n\n### 函数调用模式\n\n形式：函数名（）；\n`this：window`\n\n### 方法调用模式\n\n形式：对项目.方法名（）；\nthis：调用该方法的对象\n\n### 构造函数调用模式\n\n形式 `new` 函数名（）\nthis：new创建出来的对象\n\n#### 工厂模式\n\n```js\nfunction createPerson(){\n    var o = new Object();\n    o.name = \"zs\";\n    o.age = 18;\n    return o;\n}\n\nvar p = createPerson();\n```\n\n#### 寄生模式\n\n```js\nfunction Person(){\n    var o = new Object();\n    o.name = \"zs\";\n    o.age = 18;\n    return o;\n}\n\nvar p = new Person();\n```\n\n### 上下文调用模式\n\n在其他的调用模式中， `this` 不可以赋值，也就不可以改变\n在上下文调用模式中，可以进行手动的设置 `this` 。\n\n#### call\n\n```js\n//函数名.call(对象, 参数1, 参数2, 参数3...)\n```\n\n1. 调用函数\n2. 将函数内的 `this` 指向第一个参数中的对象\n3. 将除第一个参数外的所有参数依次传给函数，做为实参\n\n#### apply\n\n```js\n//函数名.apply(对象, 数组)\n```\n\n1. 调用函数\n2. 将函数内的 `this` 指向第一个参数中的对象\n3. 将第二个参数中的数组拆解开，将数组中的元素依次的传给函数当做实参\n\n#### 借用构造函数继承\n\n```js\nfunction Parent(){\n    this.money = 100000000000000;\n}\n\nfunction Son(){\n    Parent.call(this);\n    this.wife = \"凤姐\";\n}\n\nvar s = new Son();\n```\n\n1. 使用 `new` 关键字创建了一个对象\n2. 调用构造函数 `Son` ，将 `Son` 中的 `this` 指向刚才创建的对象\n3. 在 `Son` 构造函数中，是用上下文调用模式去调用 `Parent` 函数，\n4. 调用 `Person` 函数，将 `Parent` 中的 `this` 指向 `song` 中的 `this` ，也就是用 `new` 创建出来的那个对象\n5.  `Parent` 中会使用 `this` 给对象添加成员\n6.  `Parent` 调用结束， `Son` 中的 `this` 也就有了 `Parent` 中添加的那些个成员\n\n将伪数组转换成数组\n\n```js\nvar fakeArr = {\n    0:\"a\",\n    1:\"b\",\n    2:\"c\",\n    length:3\n}\n\nvar arr = [];\n\nArray.prototype.push.apply(arr, fakeArr);\nArray.prototype.concat.apply(arr, fakeArr);\n\n\narr.concat.apply(arr, fakeArr);\n\n```\n\n求数组的最大值\n\n```js\nvar arr = [1 ,2,3,3,4,4,34,3,43,43,43,4,34,3];\n\nvar max = Math.max.apply(null, arr);\n//Math.max(1,2,3,43,4,3,43,43,43)\n```","source":"_posts/javascript-part6.md","raw":"---\ntitle: JavaScript高级篇之part6\ndate: 2016-11-11 19:35:55\ntags: javascript\ncategories: javascript\n---\njavascript高级与面向对象笔记整理，接part5篇！！\n\n<!-- more -->\n\n## 闭包的练习\n\n### for循环中注册点击事件\n\n### for循环中是用setTimeout\n\n## 缓存\n\n缓存就是将一些数据，剧院，进行临时的存储，以提高访问效率\n\n* 浏览器缓存\n* CDN\n* JS中的缓存\n\n## 使用缓存解决斐波那契数列的性能问题\n\n### 有什么性能问题\n\n使用递归去计算斐波那契数列存在大量的重复的计算，导致计算效率十分底下\n\n### 如何解决性能问题\n\n使用缓存\n\n1. 创建一个数组充当缓存容器\n2. 每次需要计算斐波那契数列的时候，先去缓存中进行查找\n3. 如果有就直接返回\n4. 如果没有，就去计算，算出来结果之后\n5. 将结果存入缓存中\n6. 将结果返回\n\n```js\n//1.创建一个数组充当缓存容器\nvar arr = [];\nfunction fibnacci(n){\n//2.每次需要计算斐波那契数列的时候，先去缓存中进行查找\n\tvar num = arr[n];\n\tif(num){\n\t\t//3.如果有就直接返回\n\t\treturn num;\n\t}else{\n\t\t//4.如果没有，就去计算，算出来结果之后\n\t\tif(n <= 2){\n\t\t\tnum=1;\n\t\t}else{\n\t\tnum = fibnacci(n-1)+fibnacci(n-2);\n\t\t}\n\t\t//5.将结果存入缓存中\n\t\tarr[n] = num;\n\t\t//6.将结果返回\n\t\treturn num;\n\t}\n}\n```\n\n优化后的代码\n\n```js\nfunction createFib(){\n    //1.创建一个数组充当缓存容器\n    var arr = [];\n    function fibnacci(n){\n    //2.每次需要计算斐波那契数字的时候，先去缓存中进行查找\n        var num = arr[n];\n        if(!num){\n            //4.如果没有，就去就算，算出来结果之后，\n            if(n <= 2){\n                num = 1;\n            }else{\n                num = fibnacci(n-1)+fibnacci(n-2);\n            }\n            //5.将结果存入缓存中\n            arr[n] = num;\n        }\n        //6.将结果返回\n        return num;\n    }\n    return fibnacci;\n}\n\n```\n\n## jQuery缓存实现分析\n\n```js\nfunction createCache(){\n\t//需要一个能够存储数据的容器\n\tvar cache = {};\n\t//用来存储 键，并且记录键存入的顺序\n\tvar keys = [];\n\treturn function(key,value){\n\t\tif(value){\n\t\t\tcache[key] = value;\n\t\t\tkeys.push(key);\n\t\t\tif(keys.length > 50){\n\t\t\t\tdelete cache[keys.shift()];\n\t\t\t}\n\t\t}else{\n\t\t\treturn cache[key];\n\t\t}\n\t}\n}\n```\n\n## Jquery缓存源码分析\n\n```js\nfunction createCache(){\n\tvar keys = [];\n\tfunction cache(key,value){\n\t\tif(keys.push(key + \" \") > 10){\n\t\t \tdelete cache[keys.shift()];\n\t\t}\n\t\treturn (cache[key + \" \"] = value);\n\t}\n\treturn cache;\n}\nvar cache = createCache();\ncache(\"name\",\"mengyan\");\ncache[\"name\" + \" \"];\n\n```\n\n## 函数的四种调用形式\n\n### 函数调用模式\n\n形式：函数名（）；\n`this：window`\n\n### 方法调用模式\n\n形式：对项目.方法名（）；\nthis：调用该方法的对象\n\n### 构造函数调用模式\n\n形式 `new` 函数名（）\nthis：new创建出来的对象\n\n#### 工厂模式\n\n```js\nfunction createPerson(){\n    var o = new Object();\n    o.name = \"zs\";\n    o.age = 18;\n    return o;\n}\n\nvar p = createPerson();\n```\n\n#### 寄生模式\n\n```js\nfunction Person(){\n    var o = new Object();\n    o.name = \"zs\";\n    o.age = 18;\n    return o;\n}\n\nvar p = new Person();\n```\n\n### 上下文调用模式\n\n在其他的调用模式中， `this` 不可以赋值，也就不可以改变\n在上下文调用模式中，可以进行手动的设置 `this` 。\n\n#### call\n\n```js\n//函数名.call(对象, 参数1, 参数2, 参数3...)\n```\n\n1. 调用函数\n2. 将函数内的 `this` 指向第一个参数中的对象\n3. 将除第一个参数外的所有参数依次传给函数，做为实参\n\n#### apply\n\n```js\n//函数名.apply(对象, 数组)\n```\n\n1. 调用函数\n2. 将函数内的 `this` 指向第一个参数中的对象\n3. 将第二个参数中的数组拆解开，将数组中的元素依次的传给函数当做实参\n\n#### 借用构造函数继承\n\n```js\nfunction Parent(){\n    this.money = 100000000000000;\n}\n\nfunction Son(){\n    Parent.call(this);\n    this.wife = \"凤姐\";\n}\n\nvar s = new Son();\n```\n\n1. 使用 `new` 关键字创建了一个对象\n2. 调用构造函数 `Son` ，将 `Son` 中的 `this` 指向刚才创建的对象\n3. 在 `Son` 构造函数中，是用上下文调用模式去调用 `Parent` 函数，\n4. 调用 `Person` 函数，将 `Parent` 中的 `this` 指向 `song` 中的 `this` ，也就是用 `new` 创建出来的那个对象\n5.  `Parent` 中会使用 `this` 给对象添加成员\n6.  `Parent` 调用结束， `Son` 中的 `this` 也就有了 `Parent` 中添加的那些个成员\n\n将伪数组转换成数组\n\n```js\nvar fakeArr = {\n    0:\"a\",\n    1:\"b\",\n    2:\"c\",\n    length:3\n}\n\nvar arr = [];\n\nArray.prototype.push.apply(arr, fakeArr);\nArray.prototype.concat.apply(arr, fakeArr);\n\n\narr.concat.apply(arr, fakeArr);\n\n```\n\n求数组的最大值\n\n```js\nvar arr = [1 ,2,3,3,4,4,34,3,43,43,43,4,34,3];\n\nvar max = Math.max.apply(null, arr);\n//Math.max(1,2,3,43,4,3,43,43,43)\n```","slug":"javascript-part6","published":1,"updated":"2016-11-24T01:31:31.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprkc001g9wg7rpl1zdvh","content":"<p>javascript高级与面向对象笔记整理，接part5篇！！</p>\n<a id=\"more\"></a>\n<h2 id=\"闭包的练习\"><a href=\"#闭包的练习\" class=\"headerlink\" title=\"闭包的练习\"></a>闭包的练习</h2><h3 id=\"for循环中注册点击事件\"><a href=\"#for循环中注册点击事件\" class=\"headerlink\" title=\"for循环中注册点击事件\"></a>for循环中注册点击事件</h3><h3 id=\"for循环中是用setTimeout\"><a href=\"#for循环中是用setTimeout\" class=\"headerlink\" title=\"for循环中是用setTimeout\"></a>for循环中是用setTimeout</h3><h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>缓存就是将一些数据，剧院，进行临时的存储，以提高访问效率</p>\n<ul>\n<li>浏览器缓存</li>\n<li>CDN</li>\n<li>JS中的缓存</li>\n</ul>\n<h2 id=\"使用缓存解决斐波那契数列的性能问题\"><a href=\"#使用缓存解决斐波那契数列的性能问题\" class=\"headerlink\" title=\"使用缓存解决斐波那契数列的性能问题\"></a>使用缓存解决斐波那契数列的性能问题</h2><h3 id=\"有什么性能问题\"><a href=\"#有什么性能问题\" class=\"headerlink\" title=\"有什么性能问题\"></a>有什么性能问题</h3><p>使用递归去计算斐波那契数列存在大量的重复的计算，导致计算效率十分底下</p>\n<h3 id=\"如何解决性能问题\"><a href=\"#如何解决性能问题\" class=\"headerlink\" title=\"如何解决性能问题\"></a>如何解决性能问题</h3><p>使用缓存</p>\n<ol>\n<li>创建一个数组充当缓存容器</li>\n<li>每次需要计算斐波那契数列的时候，先去缓存中进行查找</li>\n<li>如果有就直接返回</li>\n<li>如果没有，就去计算，算出来结果之后</li>\n<li>将结果存入缓存中</li>\n<li>将结果返回</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.创建一个数组充当缓存容器</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibnacci</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\"><span class=\"comment\">//2.每次需要计算斐波那契数列的时候，先去缓存中进行查找</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> num = arr[n];</div><div class=\"line\">\t<span class=\"keyword\">if</span>(num)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//3.如果有就直接返回</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> num;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//4.如果没有，就去计算，算出来结果之后</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t\tnum=<span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\tnum = fibnacci(n<span class=\"number\">-1</span>)+fibnacci(n<span class=\"number\">-2</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//5.将结果存入缓存中</span></div><div class=\"line\">\t\tarr[n] = num;</div><div class=\"line\">\t\t<span class=\"comment\">//6.将结果返回</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> num;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优化后的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFib</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建一个数组充当缓存容器</span></div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibnacci</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//2.每次需要计算斐波那契数字的时候，先去缓存中进行查找</span></div><div class=\"line\">        <span class=\"keyword\">var</span> num = arr[n];</div><div class=\"line\">        <span class=\"keyword\">if</span>(!num)&#123;</div><div class=\"line\">            <span class=\"comment\">//4.如果没有，就去就算，算出来结果之后，</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">                num = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                num = fibnacci(n<span class=\"number\">-1</span>)+fibnacci(n<span class=\"number\">-2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//5.将结果存入缓存中</span></div><div class=\"line\">            arr[n] = num;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//6.将结果返回</span></div><div class=\"line\">        <span class=\"keyword\">return</span> num;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> fibnacci;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"jQuery缓存实现分析\"><a href=\"#jQuery缓存实现分析\" class=\"headerlink\" title=\"jQuery缓存实现分析\"></a>jQuery缓存实现分析</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//需要一个能够存储数据的容器</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\">\t<span class=\"comment\">//用来存储 键，并且记录键存入的顺序</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(value)&#123;</div><div class=\"line\">\t\t\tcache[key] = value;</div><div class=\"line\">\t\t\tkeys.push(key);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(keys.length &gt; <span class=\"number\">50</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">delete</span> cache[keys.shift()];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> cache[key];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery缓存源码分析\"><a href=\"#Jquery缓存源码分析\" class=\"headerlink\" title=\"Jquery缓存源码分析\"></a>Jquery缓存源码分析</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cache</span>(<span class=\"params\">key,value</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(keys.push(key + <span class=\"string\">\" \"</span>) &gt; <span class=\"number\">10</span>)&#123;</div><div class=\"line\">\t\t \t<span class=\"keyword\">delete</span> cache[keys.shift()];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (cache[key + <span class=\"string\">\" \"</span>] = value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> cache;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> cache = createCache();</div><div class=\"line\">cache(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"mengyan\"</span>);</div><div class=\"line\">cache[<span class=\"string\">\"name\"</span> + <span class=\"string\">\" \"</span>];</div></pre></td></tr></table></figure>\n<h2 id=\"函数的四种调用形式\"><a href=\"#函数的四种调用形式\" class=\"headerlink\" title=\"函数的四种调用形式\"></a>函数的四种调用形式</h2><h3 id=\"函数调用模式\"><a href=\"#函数调用模式\" class=\"headerlink\" title=\"函数调用模式\"></a>函数调用模式</h3><p>形式：函数名（）；<br><code>this：window</code></p>\n<h3 id=\"方法调用模式\"><a href=\"#方法调用模式\" class=\"headerlink\" title=\"方法调用模式\"></a>方法调用模式</h3><p>形式：对项目.方法名（）；<br>this：调用该方法的对象</p>\n<h3 id=\"构造函数调用模式\"><a href=\"#构造函数调用模式\" class=\"headerlink\" title=\"构造函数调用模式\"></a>构造函数调用模式</h3><p>形式 <code>new</code> 函数名（）<br>this：new创建出来的对象</p>\n<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.name = <span class=\"string\">\"zs\"</span>;</div><div class=\"line\">    o.age = <span class=\"number\">18</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = createPerson();</div></pre></td></tr></table></figure>\n<h4 id=\"寄生模式\"><a href=\"#寄生模式\" class=\"headerlink\" title=\"寄生模式\"></a>寄生模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.name = <span class=\"string\">\"zs\"</span>;</div><div class=\"line\">    o.age = <span class=\"number\">18</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure>\n<h3 id=\"上下文调用模式\"><a href=\"#上下文调用模式\" class=\"headerlink\" title=\"上下文调用模式\"></a>上下文调用模式</h3><p>在其他的调用模式中， <code>this</code> 不可以赋值，也就不可以改变<br>在上下文调用模式中，可以进行手动的设置 <code>this</code> 。</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数名.call(对象, 参数1, 参数2, 参数3...)</span></div></pre></td></tr></table></figure>\n<ol>\n<li>调用函数</li>\n<li>将函数内的 <code>this</code> 指向第一个参数中的对象</li>\n<li>将除第一个参数外的所有参数依次传给函数，做为实参</li>\n</ol>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数名.apply(对象, 数组)</span></div></pre></td></tr></table></figure>\n<ol>\n<li>调用函数</li>\n<li>将函数内的 <code>this</code> 指向第一个参数中的对象</li>\n<li>将第二个参数中的数组拆解开，将数组中的元素依次的传给函数当做实参</li>\n</ol>\n<h4 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.money = <span class=\"number\">100000000000000</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    Parent.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.wife = <span class=\"string\">\"凤姐\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Son();</div></pre></td></tr></table></figure>\n<ol>\n<li>使用 <code>new</code> 关键字创建了一个对象</li>\n<li>调用构造函数 <code>Son</code> ，将 <code>Son</code> 中的 <code>this</code> 指向刚才创建的对象</li>\n<li>在 <code>Son</code> 构造函数中，是用上下文调用模式去调用 <code>Parent</code> 函数，</li>\n<li>调用 <code>Person</code> 函数，将 <code>Parent</code> 中的 <code>this</code> 指向 <code>song</code> 中的 <code>this</code> ，也就是用 <code>new</code> 创建出来的那个对象</li>\n<li><code>Parent</code> 中会使用 <code>this</code> 给对象添加成员</li>\n<li><code>Parent</code> 调用结束， <code>Son</code> 中的 <code>this</code> 也就有了 <code>Parent</code> 中添加的那些个成员</li>\n</ol>\n<p>将伪数组转换成数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fakeArr = &#123;</div><div class=\"line\">    <span class=\"number\">0</span>:<span class=\"string\">\"a\"</span>,</div><div class=\"line\">    <span class=\"number\">1</span>:<span class=\"string\">\"b\"</span>,</div><div class=\"line\">    <span class=\"number\">2</span>:<span class=\"string\">\"c\"</span>,</div><div class=\"line\">    <span class=\"attr\">length</span>:<span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr, fakeArr);</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.concat.apply(arr, fakeArr);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">arr.concat.apply(arr, fakeArr);</div></pre></td></tr></table></figure>\n<p>求数组的最大值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span> ,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">34</span>,<span class=\"number\">3</span>,<span class=\"number\">43</span>,<span class=\"number\">43</span>,<span class=\"number\">43</span>,<span class=\"number\">4</span>,<span class=\"number\">34</span>,<span class=\"number\">3</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, arr);</div><div class=\"line\"><span class=\"comment\">//Math.max(1,2,3,43,4,3,43,43,43)</span></div></pre></td></tr></table></figure>","excerpt":"<p>javascript高级与面向对象笔记整理，接part5篇！！</p>","more":"<h2 id=\"闭包的练习\"><a href=\"#闭包的练习\" class=\"headerlink\" title=\"闭包的练习\"></a>闭包的练习</h2><h3 id=\"for循环中注册点击事件\"><a href=\"#for循环中注册点击事件\" class=\"headerlink\" title=\"for循环中注册点击事件\"></a>for循环中注册点击事件</h3><h3 id=\"for循环中是用setTimeout\"><a href=\"#for循环中是用setTimeout\" class=\"headerlink\" title=\"for循环中是用setTimeout\"></a>for循环中是用setTimeout</h3><h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>缓存就是将一些数据，剧院，进行临时的存储，以提高访问效率</p>\n<ul>\n<li>浏览器缓存</li>\n<li>CDN</li>\n<li>JS中的缓存</li>\n</ul>\n<h2 id=\"使用缓存解决斐波那契数列的性能问题\"><a href=\"#使用缓存解决斐波那契数列的性能问题\" class=\"headerlink\" title=\"使用缓存解决斐波那契数列的性能问题\"></a>使用缓存解决斐波那契数列的性能问题</h2><h3 id=\"有什么性能问题\"><a href=\"#有什么性能问题\" class=\"headerlink\" title=\"有什么性能问题\"></a>有什么性能问题</h3><p>使用递归去计算斐波那契数列存在大量的重复的计算，导致计算效率十分底下</p>\n<h3 id=\"如何解决性能问题\"><a href=\"#如何解决性能问题\" class=\"headerlink\" title=\"如何解决性能问题\"></a>如何解决性能问题</h3><p>使用缓存</p>\n<ol>\n<li>创建一个数组充当缓存容器</li>\n<li>每次需要计算斐波那契数列的时候，先去缓存中进行查找</li>\n<li>如果有就直接返回</li>\n<li>如果没有，就去计算，算出来结果之后</li>\n<li>将结果存入缓存中</li>\n<li>将结果返回</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.创建一个数组充当缓存容器</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibnacci</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\"><span class=\"comment\">//2.每次需要计算斐波那契数列的时候，先去缓存中进行查找</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> num = arr[n];</div><div class=\"line\">\t<span class=\"keyword\">if</span>(num)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//3.如果有就直接返回</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> num;</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//4.如果没有，就去计算，算出来结果之后</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t\tnum=<span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\tnum = fibnacci(n<span class=\"number\">-1</span>)+fibnacci(n<span class=\"number\">-2</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//5.将结果存入缓存中</span></div><div class=\"line\">\t\tarr[n] = num;</div><div class=\"line\">\t\t<span class=\"comment\">//6.将结果返回</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> num;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优化后的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFib</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建一个数组充当缓存容器</span></div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibnacci</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//2.每次需要计算斐波那契数字的时候，先去缓存中进行查找</span></div><div class=\"line\">        <span class=\"keyword\">var</span> num = arr[n];</div><div class=\"line\">        <span class=\"keyword\">if</span>(!num)&#123;</div><div class=\"line\">            <span class=\"comment\">//4.如果没有，就去就算，算出来结果之后，</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">                num = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                num = fibnacci(n<span class=\"number\">-1</span>)+fibnacci(n<span class=\"number\">-2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//5.将结果存入缓存中</span></div><div class=\"line\">            arr[n] = num;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//6.将结果返回</span></div><div class=\"line\">        <span class=\"keyword\">return</span> num;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> fibnacci;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"jQuery缓存实现分析\"><a href=\"#jQuery缓存实现分析\" class=\"headerlink\" title=\"jQuery缓存实现分析\"></a>jQuery缓存实现分析</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//需要一个能够存储数据的容器</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\">\t<span class=\"comment\">//用来存储 键，并且记录键存入的顺序</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(value)&#123;</div><div class=\"line\">\t\t\tcache[key] = value;</div><div class=\"line\">\t\t\tkeys.push(key);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(keys.length &gt; <span class=\"number\">50</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">delete</span> cache[keys.shift()];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> cache[key];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery缓存源码分析\"><a href=\"#Jquery缓存源码分析\" class=\"headerlink\" title=\"Jquery缓存源码分析\"></a>Jquery缓存源码分析</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cache</span>(<span class=\"params\">key,value</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(keys.push(key + <span class=\"string\">\" \"</span>) &gt; <span class=\"number\">10</span>)&#123;</div><div class=\"line\">\t\t \t<span class=\"keyword\">delete</span> cache[keys.shift()];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (cache[key + <span class=\"string\">\" \"</span>] = value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> cache;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> cache = createCache();</div><div class=\"line\">cache(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"mengyan\"</span>);</div><div class=\"line\">cache[<span class=\"string\">\"name\"</span> + <span class=\"string\">\" \"</span>];</div></pre></td></tr></table></figure>\n<h2 id=\"函数的四种调用形式\"><a href=\"#函数的四种调用形式\" class=\"headerlink\" title=\"函数的四种调用形式\"></a>函数的四种调用形式</h2><h3 id=\"函数调用模式\"><a href=\"#函数调用模式\" class=\"headerlink\" title=\"函数调用模式\"></a>函数调用模式</h3><p>形式：函数名（）；<br><code>this：window</code></p>\n<h3 id=\"方法调用模式\"><a href=\"#方法调用模式\" class=\"headerlink\" title=\"方法调用模式\"></a>方法调用模式</h3><p>形式：对项目.方法名（）；<br>this：调用该方法的对象</p>\n<h3 id=\"构造函数调用模式\"><a href=\"#构造函数调用模式\" class=\"headerlink\" title=\"构造函数调用模式\"></a>构造函数调用模式</h3><p>形式 <code>new</code> 函数名（）<br>this：new创建出来的对象</p>\n<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.name = <span class=\"string\">\"zs\"</span>;</div><div class=\"line\">    o.age = <span class=\"number\">18</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = createPerson();</div></pre></td></tr></table></figure>\n<h4 id=\"寄生模式\"><a href=\"#寄生模式\" class=\"headerlink\" title=\"寄生模式\"></a>寄生模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.name = <span class=\"string\">\"zs\"</span>;</div><div class=\"line\">    o.age = <span class=\"number\">18</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure>\n<h3 id=\"上下文调用模式\"><a href=\"#上下文调用模式\" class=\"headerlink\" title=\"上下文调用模式\"></a>上下文调用模式</h3><p>在其他的调用模式中， <code>this</code> 不可以赋值，也就不可以改变<br>在上下文调用模式中，可以进行手动的设置 <code>this</code> 。</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数名.call(对象, 参数1, 参数2, 参数3...)</span></div></pre></td></tr></table></figure>\n<ol>\n<li>调用函数</li>\n<li>将函数内的 <code>this</code> 指向第一个参数中的对象</li>\n<li>将除第一个参数外的所有参数依次传给函数，做为实参</li>\n</ol>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数名.apply(对象, 数组)</span></div></pre></td></tr></table></figure>\n<ol>\n<li>调用函数</li>\n<li>将函数内的 <code>this</code> 指向第一个参数中的对象</li>\n<li>将第二个参数中的数组拆解开，将数组中的元素依次的传给函数当做实参</li>\n</ol>\n<h4 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.money = <span class=\"number\">100000000000000</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    Parent.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.wife = <span class=\"string\">\"凤姐\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Son();</div></pre></td></tr></table></figure>\n<ol>\n<li>使用 <code>new</code> 关键字创建了一个对象</li>\n<li>调用构造函数 <code>Son</code> ，将 <code>Son</code> 中的 <code>this</code> 指向刚才创建的对象</li>\n<li>在 <code>Son</code> 构造函数中，是用上下文调用模式去调用 <code>Parent</code> 函数，</li>\n<li>调用 <code>Person</code> 函数，将 <code>Parent</code> 中的 <code>this</code> 指向 <code>song</code> 中的 <code>this</code> ，也就是用 <code>new</code> 创建出来的那个对象</li>\n<li><code>Parent</code> 中会使用 <code>this</code> 给对象添加成员</li>\n<li><code>Parent</code> 调用结束， <code>Son</code> 中的 <code>this</code> 也就有了 <code>Parent</code> 中添加的那些个成员</li>\n</ol>\n<p>将伪数组转换成数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fakeArr = &#123;</div><div class=\"line\">    <span class=\"number\">0</span>:<span class=\"string\">\"a\"</span>,</div><div class=\"line\">    <span class=\"number\">1</span>:<span class=\"string\">\"b\"</span>,</div><div class=\"line\">    <span class=\"number\">2</span>:<span class=\"string\">\"c\"</span>,</div><div class=\"line\">    <span class=\"attr\">length</span>:<span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr, fakeArr);</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.concat.apply(arr, fakeArr);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">arr.concat.apply(arr, fakeArr);</div></pre></td></tr></table></figure>\n<p>求数组的最大值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span> ,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">34</span>,<span class=\"number\">3</span>,<span class=\"number\">43</span>,<span class=\"number\">43</span>,<span class=\"number\">43</span>,<span class=\"number\">4</span>,<span class=\"number\">34</span>,<span class=\"number\">3</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, arr);</div><div class=\"line\"><span class=\"comment\">//Math.max(1,2,3,43,4,3,43,43,43)</span></div></pre></td></tr></table></figure>"},{"title":"JQuery分析及实现part6之动画模块功能及实现","date":"2016-11-24T01:38:13.000Z","_content":"\nJQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!\n\n<!-- more -->\n\n## 动画原理\n\n* 根据人眼具有 `0.1` 秒的视觉残留,只有在一秒切换至少 `24` 个画面就会产生动画\n\n## 动画的基本结构\n\n```js\nfunction animate() {\n\tfunction render() {\n\t\t//动画\n\t}\n\twindow.setInterval(render, time);\n}\n```\n\n## 小动画案例\n\n* 奔跑的小矩形\n\n```html\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>奔跑吧矩形</title>\n\t<script src=\"itcast.js\"></script>\n\t<style>\n\t\tdiv {\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tborder: 5px solid yellowgreen;\n\t\t\tposition: relative;\n\t\t}\n\t</style>\n\t<script>\n\tvar animate = function(elem, step, target) {\n\t\tvar left,//起始位置\n\t\t\ttimer;//定时器id\n\t\tfunction render() {//用来计算动画当前位移，并制定动画元素的位置\n\t\t\tleft = elem.offsetLeft;\n\t\t\tif( left + step >= target ){\n\t\t\t\telem.style.left = target + 'px';\n\t\t\t\twindow.clearInterval(timer);\n\t\t\t} else {\n\t\t\t\telem.style.left = left + step + 'px';\n\t\t\t}\n\t\t}\n\t\t// 启动定时器 开始动画\n\t\ttimer = window.setInterval(render, 1000 / 60);\n\t};\n\t$(function() {\n\t\t$('#start').click(function() {\n\t\t\tanimate(document.getElementById('dv'), 3, 1000);\n\t\t});\n\t});\n\t</script>\n</head>\n<body>\n\t<div id=\"dv\"></div>\n\t<button id=\"start\">开始动画</button>\n</body>\n</html>\n```\n\n## 匀速直线动画\n\n1. 固定时间\n2. 固定距离\n3. 如何判断动画结束的时机?\n\t* 使用时间来判断是否结束动画\n\t* 如果动画时间到达指定时间,那么就结束动画,并让动画元素到达终点\n4. 实现思路\n\t* 定义动画函数, `animate` 函数. 当调用 `animate` 函数时, 即动画开始的时间\n\t* 定义 `render` 函数. 用来给动画元素设置属性值\n\t\t* 计算当前动画元素所在的位置, 然后累计到其对应属性值上.\n\t\t* 首先计算动画的时间间隔\n\t\t* 如果时间间隔大于或等于指定的总时间, 那么就停止动画并设置动画元素到达终点\n\t\t* 否则, 根据速度, 动画时间间隔计算出位移. 再将其于起始位置累加后赋值给 `elem` \n\t* 定义定时器, 开始动画. \n\n```js\nvar animate = function(elem, target, duration) {\n\tvar timer, // 定时器id\n\t\tspeed, // 速度\n\t\tlocation, // 起始位置\n\t\tdistance, // 动画总距离\n\t\tstartTime,// 动画开始时间\n\t\tcurrentTime,// 动画当前时间\n\t\ttime; // 当前动画经过总时间间隔\n\n\tlocation = elem.offsetLeft;\n\tdistance = target - location;\n\tspeed = distance / duration;\n\tstartTime = +new Date;  // 转换毫秒值\n\t// 用来计算动画当前位移，并制定动画元素的位置\n\tvar render = function() {\n\t\tcurrentTime = +new Date;\n\t\ttime = currentTime - startTime;\n\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t// 停止动画,并设置动画元素到达终点\n\t\tif(time >= duration){\n\t\t\t// console.log(time);\n\t\t\t// 1 设置动画元素到达终点\n\t\t\telem.style.left = target + 'px';\n\t\t\t// 2 停止动画，即清楚定时器\n\t\t\twindow.clearInterval(timer);\n\t\t} else { // 否则，根据速度 和 时间间隔求出动画位移\n\t\t\t// 指定动画元素的位置\n\t\t\t// 注意： 要加上 起始位置\n\t\t\telem.style.left = speed * time + location + 'px';\n\t\t}\n\t};\n\t// 启动定时器 开始动画\n\ttimer = window.setInterval(render, 1000 / 60);\n};\n$(function() {\n\t$('#start').click(function() {\n\t\tanimate(document.getElementById('dv'), 1000, 2000);\n\t});\n});\n```\n\n## 匀减速直线动画\n\n1. 物理公式\n\t* a：\t加速度\n\t* t：\t时间间隔\n\t* v0：\t初始速度\n\t* vt：\t末速度\n\t* S：\t位移\n\t* 正方向：\tS = v0 * t + a + t * t / 2;\n2. S ==> target - location <br> t ==> duration <br> v0 = 0\n3. 正方向 <br> a = 2 * ( S - v0 * t) / ( t * t) <br> ==> = 2 * S / ( t * t) <br> ==> = 2 * ( target - location ) / ( duration * duration ) <br> vt = 2 * ( target - location ) / duration \n4. time 时间间隔内的 匀减速位移 <br> tween = v0 * t - a * t * t / 2 <br> ==> tween = 2 * ( target - location ) * time / duration <br> - (target - location ) * time * time / ( duration * duration )\n\n```js\nvar animate = function(elem, target, duration) {\n\tvar timer, // 定时器id\n\t\ttween, // 单位时间间隔的位移\n\t\tlocation, // 起始位置\n\t\tdistance, // 动画总距离\n\t\tstartTime, // 动画开始时间\n\t\tcurrentTime, // 动画当前时间\n\t\ttime; // 当前动画经过总时间间隔\n\n\tlocation = elem.offsetLeft;\n\tdistance = target - location;\n\tstartTime = +new Date; // 转换毫秒值\n\t// 用来计算动画当前位移，并制定动画元素的位置\n\tvar render = function() {\n\t\tcurrentTime = +new Date;\n\t\ttime = currentTime - startTime;\n\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t// 停止动画,并设置动画元素到达终点\n\t\tif (time >= duration) {\n\t\t\t// console.log(time);\n\t\t\t// 1 设置动画元素到达终点\n\t\t\ttween = distance;\n\t\t\t// 2 停止动画，即清楚定时器\n\t\t\twindow.clearInterval(timer);\n\t\t} else { // 否则，根据速度 和 时间间隔求出动画位移\n\t\t\t// 指定动画元素的位置\n\t\t\t// 注意： 要加上 起始位置\n\t\t\ttween = 2 * distance * time / duration - distance * time * time / (duration * duration);\n\t\t}\n\n\t\telem.style.left = tween + location + 'px';\n\t};\n\t// 启动定时器 开始动画\n\ttimer = window.setInterval(render, 1000 / 60);\n};\n$(function() {\n\t$('#start').click(function() {\n\t\tanimate(document.getElementById('dv'), 1000, 1500);\n\t});\n});\n```\n\n## 使用对象封装缓动函数\n\n```js\n/*\n\tx: null,\n\tt: 时间间隔\n\tb: 起始位置\n\tc: 终止位置\n\td: 总时间\n*/\n\nvar easing = {\t\t\n\tlinear: function(x, t, b, c, d) {\n\t\treturn (c - b) * t / d;\n\t},\n\tminusspeed: function(x, t, b, c, d) {\n\t\treturn 2 * (c - b) * t / d - (c - b) * t * t / (d * d);\n\t},\n\teaseInQuad: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t + b;\n\t},\n\teaseOutQuad: function(x, t, b, c, d) {\n\t\treturn -c * (t /= d) * (t - 2) + b;\n\t},\n\teaseInOutQuad: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t + b;\n\t\treturn -c / 2 * ((--t) * (t - 2) - 1) + b;\n\t},\n\teaseInCubic: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t * t + b;\n\t},\n\teaseOutCubic: function(x, t, b, c, d) {\n\t\treturn c * ((t = t / d - 1) * t * t + 1) + b;\n\t},\n\teaseInOutCubic: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t * t + b;\n\t\treturn c / 2 * ((t -= 2) * t * t + 2) + b;\n\t},\n\teaseInQuart: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t * t * t + b;\n\t},\n\teaseOutQuart: function(x, t, b, c, d) {\n\t\treturn -c * ((t = t / d - 1) * t * t * t - 1) + b;\n\t},\n\teaseInOutQuart: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;\n\t\treturn -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n\t},\n\teaseInQuint: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t * t * t * t + b;\n\t},\n\teaseOutQuint: function(x, t, b, c, d) {\n\t\treturn c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n\t},\n\teaseInOutQuint: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;\n\t\treturn c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n\t},\n\teaseInSine: function(x, t, b, c, d) {\n\t\treturn -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n\t},\n\teaseOutSine: function(x, t, b, c, d) {\n\t\treturn c * Math.sin(t / d * (Math.PI / 2)) + b;\n\t},\n\teaseInOutSine: function(x, t, b, c, d) {\n\t\treturn -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n\t},\n\teaseInExpo: function(x, t, b, c, d) {\n\t\treturn (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n\t},\n\teaseOutExpo: function(x, t, b, c, d) {\n\t\treturn (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n\t},\n\teaseInOutExpo: function(x, t, b, c, d) {\n\t\tif (t == 0) return b;\n\t\tif (t == d) return b + c;\n\t\tif ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n\t\treturn c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n\t},\n\teaseInCirc: function(x, t, b, c, d) {\n\t\treturn -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\t},\n\teaseOutCirc: function(x, t, b, c, d) {\n\t\treturn c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\t},\n\teaseInOutCirc: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n\t\treturn c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n\t},\n\teaseInElastic: function(x, t, b, c, d) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = c;\n\t\tif (t == 0) return b;\n\t\tif ((t /= d) == 1) return b + c;\n\t\tif (!p) p = d * .3;\n\t\tif (a < Math.abs(c)) {\n\t\t\ta = c;\n\t\t\tvar s = p / 4;\n\t\t} else var s = p / (2 * Math.PI) * Math.asin(c / a);\n\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n\t},\n\teaseOutElastic: function(x, t, b, c, d) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = c;\n\t\tif (t == 0) return b;\n\t\tif ((t /= d) == 1) return b + c;\n\t\tif (!p) p = d * .3;\n\t\tif (a < Math.abs(c)) {\n\t\t\ta = c;\n\t\t\tvar s = p / 4;\n\t\t} else var s = p / (2 * Math.PI) * Math.asin(c / a);\n\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n\t},\n\teaseInOutElastic: function(x, t, b, c, d) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = c;\n\t\tif (t == 0) return b;\n\t\tif ((t /= d / 2) == 2) return b + c;\n\t\tif (!p) p = d * (.3 * 1.5);\n\t\tif (a < Math.abs(c)) {\n\t\t\ta = c;\n\t\t\tvar s = p / 4;\n\t\t} else var s = p / (2 * Math.PI) * Math.asin(c / a);\n\t\tif (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n\t},\n\teaseInBack: function(x, t, b, c, d, s) {\n\t\tif (s == undefined) s = 1.70158;\n\t\treturn c * (t /= d) * t * ((s + 1) * t - s) + b;\n\t},\n\teaseOutBack: function(x, t, b, c, d, s) {\n\t\tif (s == undefined) s = 1.70158;\n\t\treturn c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\t},\n\teaseInOutBack: function(x, t, b, c, d, s) {\n\t\tif (s == undefined) s = 1.70158;\n\t\tif ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n\t\treturn c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n\t},\n\teaseOutBounce: function(x, t, b, c, d) {\n\t\tif ((t /= d) < (1 / 2.75)) {\n\t\t\treturn c * (7.5625 * t * t) + b;\n\t\t} else if (t < (2 / 2.75)) {\n\t\t\treturn c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;\n\t\t} else if (t < (2.5 / 2.75)) {\n\t\t\treturn c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;\n\t\t} else {\n\t\t\treturn c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;\n\t\t}\n\t}\n};\n```\n\n## 抽取缓动函数\n\n将缓动函数的可变变量抽取出来,以便于封装\n\n```js\nvar animate = function(elem, target, duration, easingName) {\n\t\tvar timer, // 定时器id\n\t\t\ttween, // 单位时间间隔的位移\n\t\t\tlocation, // 起始位置\n\t\t\tdistance, // 动画总距离\n\t\t\tstartTime,// 动画开始时间\n\t\t\tcurrentTime,// 动画当前时间\n\t\t\ttime; // 当前动画经过总时间间隔\n\n\t\tlocation = elem.offsetLeft;\n\t\tdistance = target - location;\t\t\t\t\n\t\tstartTime = +new Date;  // 转换毫秒值\n\t\t// 用来计算动画当前位移，并制定动画元素的位置\n\t\tvar render = function() {\n\t\t\tcurrentTime = +new Date;\n\t\t\ttime = currentTime - startTime;\n\t\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t\t// 停止动画,并设置动画元素到达终点\n\t\t\tif(time >= duration){\n\t\t\t\t// console.log(time);\n\t\t\t\t// 1 设置动画元素到达终点\n\t\t\t\ttween = distance;\n\t\t\t\t// 2 停止动画，即清楚定时器\n\t\t\t\twindow.clearInterval(timer);\n\t\t\t} else { // 否则, 根据匀减速运动公式来求time时间间隔内的位移\n\t\t\t\t// 指定动画元素的位置\n\t\t\t\t// 注意： 要加上 起始位置\n\t\t\t\ttween = easing[easingName](null, time, location, target, duration);\n\t\t\t}\n\n\t\t\telem.style.left = tween + location + 'px';\n\t\t};\n\t\t// 启动定时器 开始动画\n\t\ttimer = window.setInterval(render, 1000 / 60);\n\t};\n$(function() {\n\t$('#start').click(function() {\n\t\tanimate(document.getElementById('dv'), 1000, 1500, 'easeInOutElastic');\n\t});\n});\n\n```\n\n## 多属性动画的实现\n\n到此我们就可以继续进行框架的封装了\n\n```js\n// 获取所有动画属性的起始值\nvar kv = {\n\t'left': 'offsetLeft',\n\t'top': 'offsetTop',\n\t'width': 'offsetWidth',\n\t'height': 'offsetHeight'\n};\n\nfunction getLocation(elem, target) {\n\tvar obj = {};\n\tfor (var k in target) {\n\t\tobj[k] = elem[kv[k]];\n\t}\n\treturn obj;\n}\n\nfunction getDistance(location, target) {\n\tvar obj = {};\n\tfor (var k in target) {\n\t\tobj[k] = parseFloat(target[k]) - location[k];\n\t}\n\treturn obj;\n}\n\nfunction getTween(time, location, target, duration, easingName) {\n\tvar obj = {};\n\tfor (var k in target) {\n\t\tobj[k] = easing[easingName](null, time, location[k], target[k], duration);\n\t}\n\n\treturn obj;\n}\n\nfunction setStyles(elem, location, tween) {\n\tvar k;\n\tfor (k in location) {\n\t\telem.style[k] = location[k] + tween[k] + 'px';\n\t}\n}\nvar animate = function(elem, target, duration, easingName) {\n\tvar timer, // 定时器id\n\t\ttween, // 单位时间间隔的位移{left: 800, top:400}\n\t\tlocation, // 起始位置{left: 8,top: 8}\n\t\tdistance, // 动画总距离{left: 992, top: 792}\n\t\tstartTime, // 动画开始时间\n\t\tcurrentTime, // 动画当前时间\n\t\ttime; // 当前动画经过总时间间隔\n\n\tlocation = getLocation(elem, target);\n\tdistance = getDistance(location, target);\n\tstartTime = +new Date; // 转换毫秒值\n\t// 用来计算动画当前位移，并制定动画元素的位置\n\tvar render = function() {\n\t\tcurrentTime = +new Date;\n\t\ttime = currentTime - startTime;\n\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t// 停止动画,并设置动画元素到达终点\n\t\tif (time >= duration) {\n\t\t\t// console.log(time);\n\t\t\t// 1 设置动画元素到达终点\n\t\t\ttween = distance;\n\t\t\t// 2 停止动画，即清楚定时器\n\t\t\tglobal.clearInterval(timer);\n\t\t\t// 3 删除动画元素的timerId属性\n\t\t\tdelete elem.timerId;\n\t\t} else { // 否则, 根据匀减速运动公式来求time时间间隔内的位移\n\t\t\t// 指定动画元素的位置\n\t\t\t// 注意： 要加上 起始位置\n\t\t\ttween = getTween(time, location, target, duration, easingName);\n\t\t}\n\t\t// 设置动画属性值\n\t\tsetStyles(elem, location, tween);\n\t};\n\t// 启动定时器 开始动画\n\ttimer = global.setInterval(render, 1000 / 60);\n\t// 把定时器id存储在动画元素上（以自定义属性）\n\telem.timerId = timer;\n};\n\n```\n\n## 实现animate和stop方法\n\n```js\nitcast.fn.extend({\n\tanimate: function(target, duration, easingName) {\n\t\teasingName = easingName || 'linear';\n\t\treturn this.each(function() {\n\t\t\tif(!('timerId' in this)){\n\t\t\t\tanimate(this, target, duration, easingName);\n\t\t\t}\n\t\t});\n\t},\n\tstop: function() {\n\t\treturn this.each(function() {\n\t\t\tif('timerId' in this){\n\t\t\t\tglobal.clearInterval(this.timerId);\n\t\t\t\tdelete this.timerId;\n\t\t\t}\n\t\t});\n\t}\n});\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>动画模块的实现</title>\n\t<script src=\"itcast.js\"></script>\n\t<style>\n\t\tdiv {\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tborder: 5px solid yellowgreen;\n\t\t\tposition: relative;\n\t\t}\n\t</style>\n\t<script>\n\t\t$(function() {\n\t\t\t$('#start').click(function() {\n\t\t\t\t$('#dv').animate({left : 1000}, 1500);\n\t\t\t});\n\t\t\t$('#stop').click(function() {\n\t\t\t\t$('#dv').stop();\n\t\t\t});\n\t\t});\n\t</script>\n</head>\n<body>\n\t<div id=\"dv\"></div>\n\t<button id=\"start\">开始\t动画</button>\n\t<button id=\"stop\">停止\t动画</button>\n</body>\n</html>\n```","source":"_posts/javascript-jquery-part6.md","raw":"---\ntitle: JQuery分析及实现part6之动画模块功能及实现\ndate: 2016-11-24 09:38:13\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!\n\n<!-- more -->\n\n## 动画原理\n\n* 根据人眼具有 `0.1` 秒的视觉残留,只有在一秒切换至少 `24` 个画面就会产生动画\n\n## 动画的基本结构\n\n```js\nfunction animate() {\n\tfunction render() {\n\t\t//动画\n\t}\n\twindow.setInterval(render, time);\n}\n```\n\n## 小动画案例\n\n* 奔跑的小矩形\n\n```html\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>奔跑吧矩形</title>\n\t<script src=\"itcast.js\"></script>\n\t<style>\n\t\tdiv {\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tborder: 5px solid yellowgreen;\n\t\t\tposition: relative;\n\t\t}\n\t</style>\n\t<script>\n\tvar animate = function(elem, step, target) {\n\t\tvar left,//起始位置\n\t\t\ttimer;//定时器id\n\t\tfunction render() {//用来计算动画当前位移，并制定动画元素的位置\n\t\t\tleft = elem.offsetLeft;\n\t\t\tif( left + step >= target ){\n\t\t\t\telem.style.left = target + 'px';\n\t\t\t\twindow.clearInterval(timer);\n\t\t\t} else {\n\t\t\t\telem.style.left = left + step + 'px';\n\t\t\t}\n\t\t}\n\t\t// 启动定时器 开始动画\n\t\ttimer = window.setInterval(render, 1000 / 60);\n\t};\n\t$(function() {\n\t\t$('#start').click(function() {\n\t\t\tanimate(document.getElementById('dv'), 3, 1000);\n\t\t});\n\t});\n\t</script>\n</head>\n<body>\n\t<div id=\"dv\"></div>\n\t<button id=\"start\">开始动画</button>\n</body>\n</html>\n```\n\n## 匀速直线动画\n\n1. 固定时间\n2. 固定距离\n3. 如何判断动画结束的时机?\n\t* 使用时间来判断是否结束动画\n\t* 如果动画时间到达指定时间,那么就结束动画,并让动画元素到达终点\n4. 实现思路\n\t* 定义动画函数, `animate` 函数. 当调用 `animate` 函数时, 即动画开始的时间\n\t* 定义 `render` 函数. 用来给动画元素设置属性值\n\t\t* 计算当前动画元素所在的位置, 然后累计到其对应属性值上.\n\t\t* 首先计算动画的时间间隔\n\t\t* 如果时间间隔大于或等于指定的总时间, 那么就停止动画并设置动画元素到达终点\n\t\t* 否则, 根据速度, 动画时间间隔计算出位移. 再将其于起始位置累加后赋值给 `elem` \n\t* 定义定时器, 开始动画. \n\n```js\nvar animate = function(elem, target, duration) {\n\tvar timer, // 定时器id\n\t\tspeed, // 速度\n\t\tlocation, // 起始位置\n\t\tdistance, // 动画总距离\n\t\tstartTime,// 动画开始时间\n\t\tcurrentTime,// 动画当前时间\n\t\ttime; // 当前动画经过总时间间隔\n\n\tlocation = elem.offsetLeft;\n\tdistance = target - location;\n\tspeed = distance / duration;\n\tstartTime = +new Date;  // 转换毫秒值\n\t// 用来计算动画当前位移，并制定动画元素的位置\n\tvar render = function() {\n\t\tcurrentTime = +new Date;\n\t\ttime = currentTime - startTime;\n\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t// 停止动画,并设置动画元素到达终点\n\t\tif(time >= duration){\n\t\t\t// console.log(time);\n\t\t\t// 1 设置动画元素到达终点\n\t\t\telem.style.left = target + 'px';\n\t\t\t// 2 停止动画，即清楚定时器\n\t\t\twindow.clearInterval(timer);\n\t\t} else { // 否则，根据速度 和 时间间隔求出动画位移\n\t\t\t// 指定动画元素的位置\n\t\t\t// 注意： 要加上 起始位置\n\t\t\telem.style.left = speed * time + location + 'px';\n\t\t}\n\t};\n\t// 启动定时器 开始动画\n\ttimer = window.setInterval(render, 1000 / 60);\n};\n$(function() {\n\t$('#start').click(function() {\n\t\tanimate(document.getElementById('dv'), 1000, 2000);\n\t});\n});\n```\n\n## 匀减速直线动画\n\n1. 物理公式\n\t* a：\t加速度\n\t* t：\t时间间隔\n\t* v0：\t初始速度\n\t* vt：\t末速度\n\t* S：\t位移\n\t* 正方向：\tS = v0 * t + a + t * t / 2;\n2. S ==> target - location <br> t ==> duration <br> v0 = 0\n3. 正方向 <br> a = 2 * ( S - v0 * t) / ( t * t) <br> ==> = 2 * S / ( t * t) <br> ==> = 2 * ( target - location ) / ( duration * duration ) <br> vt = 2 * ( target - location ) / duration \n4. time 时间间隔内的 匀减速位移 <br> tween = v0 * t - a * t * t / 2 <br> ==> tween = 2 * ( target - location ) * time / duration <br> - (target - location ) * time * time / ( duration * duration )\n\n```js\nvar animate = function(elem, target, duration) {\n\tvar timer, // 定时器id\n\t\ttween, // 单位时间间隔的位移\n\t\tlocation, // 起始位置\n\t\tdistance, // 动画总距离\n\t\tstartTime, // 动画开始时间\n\t\tcurrentTime, // 动画当前时间\n\t\ttime; // 当前动画经过总时间间隔\n\n\tlocation = elem.offsetLeft;\n\tdistance = target - location;\n\tstartTime = +new Date; // 转换毫秒值\n\t// 用来计算动画当前位移，并制定动画元素的位置\n\tvar render = function() {\n\t\tcurrentTime = +new Date;\n\t\ttime = currentTime - startTime;\n\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t// 停止动画,并设置动画元素到达终点\n\t\tif (time >= duration) {\n\t\t\t// console.log(time);\n\t\t\t// 1 设置动画元素到达终点\n\t\t\ttween = distance;\n\t\t\t// 2 停止动画，即清楚定时器\n\t\t\twindow.clearInterval(timer);\n\t\t} else { // 否则，根据速度 和 时间间隔求出动画位移\n\t\t\t// 指定动画元素的位置\n\t\t\t// 注意： 要加上 起始位置\n\t\t\ttween = 2 * distance * time / duration - distance * time * time / (duration * duration);\n\t\t}\n\n\t\telem.style.left = tween + location + 'px';\n\t};\n\t// 启动定时器 开始动画\n\ttimer = window.setInterval(render, 1000 / 60);\n};\n$(function() {\n\t$('#start').click(function() {\n\t\tanimate(document.getElementById('dv'), 1000, 1500);\n\t});\n});\n```\n\n## 使用对象封装缓动函数\n\n```js\n/*\n\tx: null,\n\tt: 时间间隔\n\tb: 起始位置\n\tc: 终止位置\n\td: 总时间\n*/\n\nvar easing = {\t\t\n\tlinear: function(x, t, b, c, d) {\n\t\treturn (c - b) * t / d;\n\t},\n\tminusspeed: function(x, t, b, c, d) {\n\t\treturn 2 * (c - b) * t / d - (c - b) * t * t / (d * d);\n\t},\n\teaseInQuad: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t + b;\n\t},\n\teaseOutQuad: function(x, t, b, c, d) {\n\t\treturn -c * (t /= d) * (t - 2) + b;\n\t},\n\teaseInOutQuad: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t + b;\n\t\treturn -c / 2 * ((--t) * (t - 2) - 1) + b;\n\t},\n\teaseInCubic: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t * t + b;\n\t},\n\teaseOutCubic: function(x, t, b, c, d) {\n\t\treturn c * ((t = t / d - 1) * t * t + 1) + b;\n\t},\n\teaseInOutCubic: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t * t + b;\n\t\treturn c / 2 * ((t -= 2) * t * t + 2) + b;\n\t},\n\teaseInQuart: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t * t * t + b;\n\t},\n\teaseOutQuart: function(x, t, b, c, d) {\n\t\treturn -c * ((t = t / d - 1) * t * t * t - 1) + b;\n\t},\n\teaseInOutQuart: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;\n\t\treturn -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n\t},\n\teaseInQuint: function(x, t, b, c, d) {\n\t\treturn c * (t /= d) * t * t * t * t + b;\n\t},\n\teaseOutQuint: function(x, t, b, c, d) {\n\t\treturn c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n\t},\n\teaseInOutQuint: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;\n\t\treturn c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n\t},\n\teaseInSine: function(x, t, b, c, d) {\n\t\treturn -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n\t},\n\teaseOutSine: function(x, t, b, c, d) {\n\t\treturn c * Math.sin(t / d * (Math.PI / 2)) + b;\n\t},\n\teaseInOutSine: function(x, t, b, c, d) {\n\t\treturn -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n\t},\n\teaseInExpo: function(x, t, b, c, d) {\n\t\treturn (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n\t},\n\teaseOutExpo: function(x, t, b, c, d) {\n\t\treturn (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n\t},\n\teaseInOutExpo: function(x, t, b, c, d) {\n\t\tif (t == 0) return b;\n\t\tif (t == d) return b + c;\n\t\tif ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n\t\treturn c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n\t},\n\teaseInCirc: function(x, t, b, c, d) {\n\t\treturn -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\t},\n\teaseOutCirc: function(x, t, b, c, d) {\n\t\treturn c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\t},\n\teaseInOutCirc: function(x, t, b, c, d) {\n\t\tif ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n\t\treturn c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n\t},\n\teaseInElastic: function(x, t, b, c, d) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = c;\n\t\tif (t == 0) return b;\n\t\tif ((t /= d) == 1) return b + c;\n\t\tif (!p) p = d * .3;\n\t\tif (a < Math.abs(c)) {\n\t\t\ta = c;\n\t\t\tvar s = p / 4;\n\t\t} else var s = p / (2 * Math.PI) * Math.asin(c / a);\n\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n\t},\n\teaseOutElastic: function(x, t, b, c, d) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = c;\n\t\tif (t == 0) return b;\n\t\tif ((t /= d) == 1) return b + c;\n\t\tif (!p) p = d * .3;\n\t\tif (a < Math.abs(c)) {\n\t\t\ta = c;\n\t\t\tvar s = p / 4;\n\t\t} else var s = p / (2 * Math.PI) * Math.asin(c / a);\n\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n\t},\n\teaseInOutElastic: function(x, t, b, c, d) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = c;\n\t\tif (t == 0) return b;\n\t\tif ((t /= d / 2) == 2) return b + c;\n\t\tif (!p) p = d * (.3 * 1.5);\n\t\tif (a < Math.abs(c)) {\n\t\t\ta = c;\n\t\t\tvar s = p / 4;\n\t\t} else var s = p / (2 * Math.PI) * Math.asin(c / a);\n\t\tif (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;\n\t},\n\teaseInBack: function(x, t, b, c, d, s) {\n\t\tif (s == undefined) s = 1.70158;\n\t\treturn c * (t /= d) * t * ((s + 1) * t - s) + b;\n\t},\n\teaseOutBack: function(x, t, b, c, d, s) {\n\t\tif (s == undefined) s = 1.70158;\n\t\treturn c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\t},\n\teaseInOutBack: function(x, t, b, c, d, s) {\n\t\tif (s == undefined) s = 1.70158;\n\t\tif ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n\t\treturn c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n\t},\n\teaseOutBounce: function(x, t, b, c, d) {\n\t\tif ((t /= d) < (1 / 2.75)) {\n\t\t\treturn c * (7.5625 * t * t) + b;\n\t\t} else if (t < (2 / 2.75)) {\n\t\t\treturn c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;\n\t\t} else if (t < (2.5 / 2.75)) {\n\t\t\treturn c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;\n\t\t} else {\n\t\t\treturn c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;\n\t\t}\n\t}\n};\n```\n\n## 抽取缓动函数\n\n将缓动函数的可变变量抽取出来,以便于封装\n\n```js\nvar animate = function(elem, target, duration, easingName) {\n\t\tvar timer, // 定时器id\n\t\t\ttween, // 单位时间间隔的位移\n\t\t\tlocation, // 起始位置\n\t\t\tdistance, // 动画总距离\n\t\t\tstartTime,// 动画开始时间\n\t\t\tcurrentTime,// 动画当前时间\n\t\t\ttime; // 当前动画经过总时间间隔\n\n\t\tlocation = elem.offsetLeft;\n\t\tdistance = target - location;\t\t\t\t\n\t\tstartTime = +new Date;  // 转换毫秒值\n\t\t// 用来计算动画当前位移，并制定动画元素的位置\n\t\tvar render = function() {\n\t\t\tcurrentTime = +new Date;\n\t\t\ttime = currentTime - startTime;\n\t\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t\t// 停止动画,并设置动画元素到达终点\n\t\t\tif(time >= duration){\n\t\t\t\t// console.log(time);\n\t\t\t\t// 1 设置动画元素到达终点\n\t\t\t\ttween = distance;\n\t\t\t\t// 2 停止动画，即清楚定时器\n\t\t\t\twindow.clearInterval(timer);\n\t\t\t} else { // 否则, 根据匀减速运动公式来求time时间间隔内的位移\n\t\t\t\t// 指定动画元素的位置\n\t\t\t\t// 注意： 要加上 起始位置\n\t\t\t\ttween = easing[easingName](null, time, location, target, duration);\n\t\t\t}\n\n\t\t\telem.style.left = tween + location + 'px';\n\t\t};\n\t\t// 启动定时器 开始动画\n\t\ttimer = window.setInterval(render, 1000 / 60);\n\t};\n$(function() {\n\t$('#start').click(function() {\n\t\tanimate(document.getElementById('dv'), 1000, 1500, 'easeInOutElastic');\n\t});\n});\n\n```\n\n## 多属性动画的实现\n\n到此我们就可以继续进行框架的封装了\n\n```js\n// 获取所有动画属性的起始值\nvar kv = {\n\t'left': 'offsetLeft',\n\t'top': 'offsetTop',\n\t'width': 'offsetWidth',\n\t'height': 'offsetHeight'\n};\n\nfunction getLocation(elem, target) {\n\tvar obj = {};\n\tfor (var k in target) {\n\t\tobj[k] = elem[kv[k]];\n\t}\n\treturn obj;\n}\n\nfunction getDistance(location, target) {\n\tvar obj = {};\n\tfor (var k in target) {\n\t\tobj[k] = parseFloat(target[k]) - location[k];\n\t}\n\treturn obj;\n}\n\nfunction getTween(time, location, target, duration, easingName) {\n\tvar obj = {};\n\tfor (var k in target) {\n\t\tobj[k] = easing[easingName](null, time, location[k], target[k], duration);\n\t}\n\n\treturn obj;\n}\n\nfunction setStyles(elem, location, tween) {\n\tvar k;\n\tfor (k in location) {\n\t\telem.style[k] = location[k] + tween[k] + 'px';\n\t}\n}\nvar animate = function(elem, target, duration, easingName) {\n\tvar timer, // 定时器id\n\t\ttween, // 单位时间间隔的位移{left: 800, top:400}\n\t\tlocation, // 起始位置{left: 8,top: 8}\n\t\tdistance, // 动画总距离{left: 992, top: 792}\n\t\tstartTime, // 动画开始时间\n\t\tcurrentTime, // 动画当前时间\n\t\ttime; // 当前动画经过总时间间隔\n\n\tlocation = getLocation(elem, target);\n\tdistance = getDistance(location, target);\n\tstartTime = +new Date; // 转换毫秒值\n\t// 用来计算动画当前位移，并制定动画元素的位置\n\tvar render = function() {\n\t\tcurrentTime = +new Date;\n\t\ttime = currentTime - startTime;\n\t\t// 如果当前动画经过总时间间隔大于或等于 指定总时间\n\t\t// 停止动画,并设置动画元素到达终点\n\t\tif (time >= duration) {\n\t\t\t// console.log(time);\n\t\t\t// 1 设置动画元素到达终点\n\t\t\ttween = distance;\n\t\t\t// 2 停止动画，即清楚定时器\n\t\t\tglobal.clearInterval(timer);\n\t\t\t// 3 删除动画元素的timerId属性\n\t\t\tdelete elem.timerId;\n\t\t} else { // 否则, 根据匀减速运动公式来求time时间间隔内的位移\n\t\t\t// 指定动画元素的位置\n\t\t\t// 注意： 要加上 起始位置\n\t\t\ttween = getTween(time, location, target, duration, easingName);\n\t\t}\n\t\t// 设置动画属性值\n\t\tsetStyles(elem, location, tween);\n\t};\n\t// 启动定时器 开始动画\n\ttimer = global.setInterval(render, 1000 / 60);\n\t// 把定时器id存储在动画元素上（以自定义属性）\n\telem.timerId = timer;\n};\n\n```\n\n## 实现animate和stop方法\n\n```js\nitcast.fn.extend({\n\tanimate: function(target, duration, easingName) {\n\t\teasingName = easingName || 'linear';\n\t\treturn this.each(function() {\n\t\t\tif(!('timerId' in this)){\n\t\t\t\tanimate(this, target, duration, easingName);\n\t\t\t}\n\t\t});\n\t},\n\tstop: function() {\n\t\treturn this.each(function() {\n\t\t\tif('timerId' in this){\n\t\t\t\tglobal.clearInterval(this.timerId);\n\t\t\t\tdelete this.timerId;\n\t\t\t}\n\t\t});\n\t}\n});\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>动画模块的实现</title>\n\t<script src=\"itcast.js\"></script>\n\t<style>\n\t\tdiv {\n\t\t\twidth: 100px;\n\t\t\theight: 100px;\n\t\t\tborder: 5px solid yellowgreen;\n\t\t\tposition: relative;\n\t\t}\n\t</style>\n\t<script>\n\t\t$(function() {\n\t\t\t$('#start').click(function() {\n\t\t\t\t$('#dv').animate({left : 1000}, 1500);\n\t\t\t});\n\t\t\t$('#stop').click(function() {\n\t\t\t\t$('#dv').stop();\n\t\t\t});\n\t\t});\n\t</script>\n</head>\n<body>\n\t<div id=\"dv\"></div>\n\t<button id=\"start\">开始\t动画</button>\n\t<button id=\"stop\">停止\t动画</button>\n</body>\n</html>\n```","slug":"javascript-jquery-part6","published":1,"updated":"2016-11-24T13:13:53.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprkg001j9wg7p1ghgw6b","content":"<p>JQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!</p>\n<a id=\"more\"></a>\n<h2 id=\"动画原理\"><a href=\"#动画原理\" class=\"headerlink\" title=\"动画原理\"></a>动画原理</h2><ul>\n<li>根据人眼具有 <code>0.1</code> 秒的视觉残留,只有在一秒切换至少 <code>24</code> 个画面就会产生动画</li>\n</ul>\n<h2 id=\"动画的基本结构\"><a href=\"#动画的基本结构\" class=\"headerlink\" title=\"动画的基本结构\"></a>动画的基本结构</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//动画</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">window</span>.setInterval(render, time);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"小动画案例\"><a href=\"#小动画案例\" class=\"headerlink\" title=\"小动画案例\"></a>小动画案例</h2><ul>\n<li>奔跑的小矩形</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>奔跑吧矩形<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"itcast.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">\t\tdiv &#123;</div><div class=\"line\">\t\t\twidth: 100px;</div><div class=\"line\">\t\t\theight: 100px;</div><div class=\"line\">\t\t\tborder: 5px solid yellowgreen;</div><div class=\"line\">\t\t\tposition: relative;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">\t<span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, step, target</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> left,<span class=\"comment\">//起始位置</span></div><div class=\"line\">\t\t\ttimer;<span class=\"comment\">//定时器id</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">//用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t\t\tleft = elem.offsetLeft;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>( left + step &gt;= target )&#123;</div><div class=\"line\">\t\t\t\telem.style.left = target + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\telem.style.left = left + step + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\t\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">3</span>, <span class=\"number\">1000</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"start\"</span>&gt;</span>开始动画<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"匀速直线动画\"><a href=\"#匀速直线动画\" class=\"headerlink\" title=\"匀速直线动画\"></a>匀速直线动画</h2><ol>\n<li>固定时间</li>\n<li>固定距离</li>\n<li>如何判断动画结束的时机?<ul>\n<li>使用时间来判断是否结束动画</li>\n<li>如果动画时间到达指定时间,那么就结束动画,并让动画元素到达终点</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>定义动画函数, <code>animate</code> 函数. 当调用 <code>animate</code> 函数时, 即动画开始的时间</li>\n<li>定义 <code>render</code> 函数. 用来给动画元素设置属性值<ul>\n<li>计算当前动画元素所在的位置, 然后累计到其对应属性值上.</li>\n<li>首先计算动画的时间间隔</li>\n<li>如果时间间隔大于或等于指定的总时间, 那么就停止动画并设置动画元素到达终点</li>\n<li>否则, 根据速度, 动画时间间隔计算出位移. 再将其于起始位置累加后赋值给 <code>elem</code> </li>\n</ul>\n</li>\n<li>定义定时器, 开始动画. </li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\tspeed, <span class=\"comment\">// 速度</span></div><div class=\"line\">\t\tlocation, <span class=\"comment\">// 起始位置</span></div><div class=\"line\">\t\tdistance, <span class=\"comment\">// 动画总距离</span></div><div class=\"line\">\t\tstartTime,<span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\tcurrentTime,<span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\tlocation = elem.offsetLeft;</div><div class=\"line\">\tdistance = target - location;</div><div class=\"line\">\tspeed = distance / duration;</div><div class=\"line\">\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;  <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(time &gt;= duration)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\telem.style.left = target + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\telem.style.left = speed * time + location + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">1000</span>, <span class=\"number\">2000</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"匀减速直线动画\"><a href=\"#匀减速直线动画\" class=\"headerlink\" title=\"匀减速直线动画\"></a>匀减速直线动画</h2><ol>\n<li>物理公式<ul>\n<li>a：    加速度</li>\n<li>t：    时间间隔</li>\n<li>v0：    初始速度</li>\n<li>vt：    末速度</li>\n<li>S：    位移</li>\n<li>正方向：    S = v0 <em> t + a + t </em> t / 2;</li>\n</ul>\n</li>\n<li>S ==&gt; target - location <br> t ==&gt; duration <br> v0 = 0</li>\n<li>正方向 <br> a = 2 <em> ( S - v0 </em> t) / ( t <em> t) <br> ==&gt; = 2 </em> S / ( t <em> t) <br> ==&gt; = 2 </em> ( target - location ) / ( duration <em> duration ) <br> vt = 2 </em> ( target - location ) / duration </li>\n<li>time 时间间隔内的 匀减速位移 <br> tween = v0 <em> t - a </em> t <em> t / 2 <br> ==&gt; tween = 2 </em> ( target - location ) <em> time / duration <br> - (target - location ) </em> time <em> time / ( duration </em> duration )</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\ttween, <span class=\"comment\">// 单位时间间隔的位移</span></div><div class=\"line\">\t\tlocation, <span class=\"comment\">// 起始位置</span></div><div class=\"line\">\t\tdistance, <span class=\"comment\">// 动画总距离</span></div><div class=\"line\">\t\tstartTime, <span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\tcurrentTime, <span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\tlocation = elem.offsetLeft;</div><div class=\"line\">\tdistance = target - location;</div><div class=\"line\">\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>; <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (time &gt;= duration) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\ttween = distance;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\ttween = <span class=\"number\">2</span> * distance * time / duration - distance * time * time / (duration * duration);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\telem.style.left = tween + location + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">1000</span>, <span class=\"number\">1500</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"使用对象封装缓动函数\"><a href=\"#使用对象封装缓动函数\" class=\"headerlink\" title=\"使用对象封装缓动函数\"></a>使用对象封装缓动函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">\tx: null,</div><div class=\"line\">\tt: 时间间隔</div><div class=\"line\">\tb: 起始位置</div><div class=\"line\">\tc: 终止位置</div><div class=\"line\">\td: 总时间</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> easing = &#123;\t\t</div><div class=\"line\">\t<span class=\"attr\">linear</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (c - b) * t / d;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">minusspeed</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span> * (c - b) * t / d - (c - b) * t * t / (d * d);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInQuad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutQuad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * (t /= d) * (t - <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutQuad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * ((--t) * (t - <span class=\"number\">2</span>) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInCubic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutCubic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * ((t = t / d - <span class=\"number\">1</span>) * t * t + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutCubic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * t + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInQuart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * t * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutQuart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * ((t = t / d - <span class=\"number\">1</span>) * t * t * t - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutQuart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * t * t - <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInQuint</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * t * t * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutQuint</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * ((t = t / d - <span class=\"number\">1</span>) * t * t * t * t + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutQuint</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t * t * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * t * t * t + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInSine</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * <span class=\"built_in\">Math</span>.cos(t / d * (<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>)) + c + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutSine</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * <span class=\"built_in\">Math</span>.sin(t / d * (<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>)) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutSine</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI * t / d) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInExpo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (t == <span class=\"number\">0</span>) ? b : c * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t / d - <span class=\"number\">1</span>)) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutExpo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (t == d) ? b + c : c * (-<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * t / d) + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutExpo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == d) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t - <span class=\"number\">1</span>)) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * (-<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * --t) + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInCirc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * (<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - (t /= d) * t) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutCirc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - (t = t / d - <span class=\"number\">1</span>) * t) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutCirc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - t * t) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - (t -= <span class=\"number\">2</span>) * t) + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInElastic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> a = c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d) == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!p) p = d * <span class=\"number\">.3</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"built_in\">Math</span>.abs(c)) &#123;</div><div class=\"line\">\t\t\ta = c;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s = p / <span class=\"number\">4</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">var</span> s = p / (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) * <span class=\"built_in\">Math</span>.asin(c / a);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -(a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t -= <span class=\"number\">1</span>)) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p)) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutElastic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> a = c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d) == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!p) p = d * <span class=\"number\">.3</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"built_in\">Math</span>.abs(c)) &#123;</div><div class=\"line\">\t\t\ta = c;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s = p / <span class=\"number\">4</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">var</span> s = p / (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) * <span class=\"built_in\">Math</span>.asin(c / a);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * t) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p) + c + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutElastic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> a = c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!p) p = d * (<span class=\"number\">.3</span> * <span class=\"number\">1.5</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"built_in\">Math</span>.abs(c)) &#123;</div><div class=\"line\">\t\t\ta = c;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s = p / <span class=\"number\">4</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">var</span> s = p / (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) * <span class=\"built_in\">Math</span>.asin(c / a);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-.5</span> * (a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t -= <span class=\"number\">1</span>)) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p)) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * (t -= <span class=\"number\">1</span>)) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p) * <span class=\"number\">.5</span> + c + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInBack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d, s</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">undefined</span>) s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * ((s + <span class=\"number\">1</span>) * t - s) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutBack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d, s</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">undefined</span>) s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * ((t = t / d - <span class=\"number\">1</span>) * t * ((s + <span class=\"number\">1</span>) * t + s) + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutBack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d, s</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">undefined</span>) s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * (t * t * (((s *= (<span class=\"number\">1.525</span>)) + <span class=\"number\">1</span>) * t - s)) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * (((s *= (<span class=\"number\">1.525</span>)) + <span class=\"number\">1</span>) * t + s) + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutBounce</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d) &lt; (<span class=\"number\">1</span> / <span class=\"number\">2.75</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * t * t) + b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; (<span class=\"number\">2</span> / <span class=\"number\">2.75</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * (t -= (<span class=\"number\">1.5</span> / <span class=\"number\">2.75</span>)) * t + <span class=\"number\">.75</span>) + b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; (<span class=\"number\">2.5</span> / <span class=\"number\">2.75</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * (t -= (<span class=\"number\">2.25</span> / <span class=\"number\">2.75</span>)) * t + <span class=\"number\">.9375</span>) + b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * (t -= (<span class=\"number\">2.625</span> / <span class=\"number\">2.75</span>)) * t + <span class=\"number\">.984375</span>) + b;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"抽取缓动函数\"><a href=\"#抽取缓动函数\" class=\"headerlink\" title=\"抽取缓动函数\"></a>抽取缓动函数</h2><p>将缓动函数的可变变量抽取出来,以便于封装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\t\ttween, <span class=\"comment\">// 单位时间间隔的位移</span></div><div class=\"line\">\t\t\tlocation, <span class=\"comment\">// 起始位置</span></div><div class=\"line\">\t\t\tdistance, <span class=\"comment\">// 动画总距离</span></div><div class=\"line\">\t\t\tstartTime,<span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\t\tcurrentTime,<span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\t\tlocation = elem.offsetLeft;</div><div class=\"line\">\t\tdistance = target - location;\t\t\t\t</div><div class=\"line\">\t\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;  <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(time &gt;= duration)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\t\ttween = distance;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\t\ttween = easing[easingName](<span class=\"literal\">null</span>, time, location, target, duration);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\telem.style.left = tween + location + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\t\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">1000</span>, <span class=\"number\">1500</span>, <span class=\"string\">'easeInOutElastic'</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"多属性动画的实现\"><a href=\"#多属性动画的实现\" class=\"headerlink\" title=\"多属性动画的实现\"></a>多属性动画的实现</h2><p>到此我们就可以继续进行框架的封装了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取所有动画属性的起始值</span></div><div class=\"line\"><span class=\"keyword\">var</span> kv = &#123;</div><div class=\"line\">\t<span class=\"string\">'left'</span>: <span class=\"string\">'offsetLeft'</span>,</div><div class=\"line\">\t<span class=\"string\">'top'</span>: <span class=\"string\">'offsetTop'</span>,</div><div class=\"line\">\t<span class=\"string\">'width'</span>: <span class=\"string\">'offsetWidth'</span>,</div><div class=\"line\">\t<span class=\"string\">'height'</span>: <span class=\"string\">'offsetHeight'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLocation</span>(<span class=\"params\">elem, target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> target) &#123;</div><div class=\"line\">\t\tobj[k] = elem[kv[k]];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDistance</span>(<span class=\"params\">location, target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> target) &#123;</div><div class=\"line\">\t\tobj[k] = <span class=\"built_in\">parseFloat</span>(target[k]) - location[k];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTween</span>(<span class=\"params\">time, location, target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> target) &#123;</div><div class=\"line\">\t\tobj[k] = easing[easingName](<span class=\"literal\">null</span>, time, location[k], target[k], duration);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setStyles</span>(<span class=\"params\">elem, location, tween</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> k;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (k <span class=\"keyword\">in</span> location) &#123;</div><div class=\"line\">\t\telem.style[k] = location[k] + tween[k] + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\ttween, <span class=\"comment\">// 单位时间间隔的位移&#123;left: 800, top:400&#125;</span></div><div class=\"line\">\t\tlocation, <span class=\"comment\">// 起始位置&#123;left: 8,top: 8&#125;</span></div><div class=\"line\">\t\tdistance, <span class=\"comment\">// 动画总距离&#123;left: 992, top: 792&#125;</span></div><div class=\"line\">\t\tstartTime, <span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\tcurrentTime, <span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\tlocation = getLocation(elem, target);</div><div class=\"line\">\tdistance = getDistance(location, target);</div><div class=\"line\">\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>; <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (time &gt;= duration) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\ttween = distance;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\tglobal.clearInterval(timer);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 3 删除动画元素的timerId属性</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> elem.timerId;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\ttween = getTween(time, location, target, duration, easingName);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 设置动画属性值</span></div><div class=\"line\">\t\tsetStyles(elem, location, tween);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\ttimer = global.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">\t<span class=\"comment\">// 把定时器id存储在动画元素上（以自定义属性）</span></div><div class=\"line\">\telem.timerId = timer;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"实现animate和stop方法\"><a href=\"#实现animate和stop方法\" class=\"headerlink\" title=\"实现animate和stop方法\"></a>实现animate和stop方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">itcast.fn.extend(&#123;</div><div class=\"line\">\t<span class=\"attr\">animate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t\teasingName = easingName || <span class=\"string\">'linear'</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!(<span class=\"string\">'timerId'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>))&#123;</div><div class=\"line\">\t\t\t\tanimate(<span class=\"keyword\">this</span>, target, duration, easingName);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">stop</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"string\">'timerId'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)&#123;</div><div class=\"line\">\t\t\t\tglobal.clearInterval(<span class=\"keyword\">this</span>.timerId);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.timerId;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>动画模块的实现<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"itcast.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">\t\tdiv &#123;</div><div class=\"line\">\t\t\twidth: 100px;</div><div class=\"line\">\t\t\theight: 100px;</div><div class=\"line\">\t\t\tborder: 5px solid yellowgreen;</div><div class=\"line\">\t\t\tposition: relative;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">\t\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t$(<span class=\"string\">'#dv'</span>).animate(&#123;<span class=\"attr\">left</span> : <span class=\"number\">1000</span>&#125;, <span class=\"number\">1500</span>);</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#stop'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t$(<span class=\"string\">'#dv'</span>).stop();</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"start\"</span>&gt;</span>开始\t动画<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"stop\"</span>&gt;</span>停止\t动画<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"<p>JQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!</p>","more":"<h2 id=\"动画原理\"><a href=\"#动画原理\" class=\"headerlink\" title=\"动画原理\"></a>动画原理</h2><ul>\n<li>根据人眼具有 <code>0.1</code> 秒的视觉残留,只有在一秒切换至少 <code>24</code> 个画面就会产生动画</li>\n</ul>\n<h2 id=\"动画的基本结构\"><a href=\"#动画的基本结构\" class=\"headerlink\" title=\"动画的基本结构\"></a>动画的基本结构</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//动画</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">window</span>.setInterval(render, time);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"小动画案例\"><a href=\"#小动画案例\" class=\"headerlink\" title=\"小动画案例\"></a>小动画案例</h2><ul>\n<li>奔跑的小矩形</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>奔跑吧矩形<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"itcast.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">\t\tdiv &#123;</div><div class=\"line\">\t\t\twidth: 100px;</div><div class=\"line\">\t\t\theight: 100px;</div><div class=\"line\">\t\t\tborder: 5px solid yellowgreen;</div><div class=\"line\">\t\t\tposition: relative;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, step, target</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> left,<span class=\"comment\">//起始位置</span></div><div class=\"line\">\t\t\ttimer;<span class=\"comment\">//定时器id</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">//用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t\t\tleft = elem.offsetLeft;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>( left + step &gt;= target )&#123;</div><div class=\"line\">\t\t\t\telem.style.left = target + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\telem.style.left = left + step + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\t\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">3</span>, <span class=\"number\">1000</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"start\"</span>&gt;</span>开始动画<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"匀速直线动画\"><a href=\"#匀速直线动画\" class=\"headerlink\" title=\"匀速直线动画\"></a>匀速直线动画</h2><ol>\n<li>固定时间</li>\n<li>固定距离</li>\n<li>如何判断动画结束的时机?<ul>\n<li>使用时间来判断是否结束动画</li>\n<li>如果动画时间到达指定时间,那么就结束动画,并让动画元素到达终点</li>\n</ul>\n</li>\n<li>实现思路<ul>\n<li>定义动画函数, <code>animate</code> 函数. 当调用 <code>animate</code> 函数时, 即动画开始的时间</li>\n<li>定义 <code>render</code> 函数. 用来给动画元素设置属性值<ul>\n<li>计算当前动画元素所在的位置, 然后累计到其对应属性值上.</li>\n<li>首先计算动画的时间间隔</li>\n<li>如果时间间隔大于或等于指定的总时间, 那么就停止动画并设置动画元素到达终点</li>\n<li>否则, 根据速度, 动画时间间隔计算出位移. 再将其于起始位置累加后赋值给 <code>elem</code> </li>\n</ul>\n</li>\n<li>定义定时器, 开始动画. </li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\tspeed, <span class=\"comment\">// 速度</span></div><div class=\"line\">\t\tlocation, <span class=\"comment\">// 起始位置</span></div><div class=\"line\">\t\tdistance, <span class=\"comment\">// 动画总距离</span></div><div class=\"line\">\t\tstartTime,<span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\tcurrentTime,<span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\tlocation = elem.offsetLeft;</div><div class=\"line\">\tdistance = target - location;</div><div class=\"line\">\tspeed = distance / duration;</div><div class=\"line\">\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;  <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(time &gt;= duration)&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\telem.style.left = target + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\telem.style.left = speed * time + location + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">1000</span>, <span class=\"number\">2000</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"匀减速直线动画\"><a href=\"#匀减速直线动画\" class=\"headerlink\" title=\"匀减速直线动画\"></a>匀减速直线动画</h2><ol>\n<li>物理公式<ul>\n<li>a：    加速度</li>\n<li>t：    时间间隔</li>\n<li>v0：    初始速度</li>\n<li>vt：    末速度</li>\n<li>S：    位移</li>\n<li>正方向：    S = v0 <em> t + a + t </em> t / 2;</li>\n</ul>\n</li>\n<li>S ==&gt; target - location <br> t ==&gt; duration <br> v0 = 0</li>\n<li>正方向 <br> a = 2 <em> ( S - v0 </em> t) / ( t <em> t) <br> ==&gt; = 2 </em> S / ( t <em> t) <br> ==&gt; = 2 </em> ( target - location ) / ( duration <em> duration ) <br> vt = 2 </em> ( target - location ) / duration </li>\n<li>time 时间间隔内的 匀减速位移 <br> tween = v0 <em> t - a </em> t <em> t / 2 <br> ==&gt; tween = 2 </em> ( target - location ) <em> time / duration <br> - (target - location ) </em> time <em> time / ( duration </em> duration )</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\ttween, <span class=\"comment\">// 单位时间间隔的位移</span></div><div class=\"line\">\t\tlocation, <span class=\"comment\">// 起始位置</span></div><div class=\"line\">\t\tdistance, <span class=\"comment\">// 动画总距离</span></div><div class=\"line\">\t\tstartTime, <span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\tcurrentTime, <span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\tlocation = elem.offsetLeft;</div><div class=\"line\">\tdistance = target - location;</div><div class=\"line\">\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>; <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (time &gt;= duration) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\ttween = distance;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\ttween = <span class=\"number\">2</span> * distance * time / duration - distance * time * time / (duration * duration);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\telem.style.left = tween + location + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">1000</span>, <span class=\"number\">1500</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"使用对象封装缓动函数\"><a href=\"#使用对象封装缓动函数\" class=\"headerlink\" title=\"使用对象封装缓动函数\"></a>使用对象封装缓动函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">\tx: null,</div><div class=\"line\">\tt: 时间间隔</div><div class=\"line\">\tb: 起始位置</div><div class=\"line\">\tc: 终止位置</div><div class=\"line\">\td: 总时间</div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> easing = &#123;\t\t</div><div class=\"line\">\t<span class=\"attr\">linear</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (c - b) * t / d;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">minusspeed</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span> * (c - b) * t / d - (c - b) * t * t / (d * d);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInQuad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutQuad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * (t /= d) * (t - <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutQuad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * ((--t) * (t - <span class=\"number\">2</span>) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInCubic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutCubic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * ((t = t / d - <span class=\"number\">1</span>) * t * t + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutCubic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * t + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInQuart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * t * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutQuart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * ((t = t / d - <span class=\"number\">1</span>) * t * t * t - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutQuart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * t * t - <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInQuint</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * t * t * t + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutQuint</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * ((t = t / d - <span class=\"number\">1</span>) * t * t * t * t + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutQuint</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * t * t * t * t * t + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * t * t * t + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInSine</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * <span class=\"built_in\">Math</span>.cos(t / d * (<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>)) + c + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutSine</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * <span class=\"built_in\">Math</span>.sin(t / d * (<span class=\"built_in\">Math</span>.PI / <span class=\"number\">2</span>)) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutSine</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.cos(<span class=\"built_in\">Math</span>.PI * t / d) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInExpo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (t == <span class=\"number\">0</span>) ? b : c * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t / d - <span class=\"number\">1</span>)) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutExpo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (t == d) ? b + c : c * (-<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * t / d) + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutExpo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == d) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t - <span class=\"number\">1</span>)) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * (-<span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * --t) + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInCirc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -c * (<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - (t /= d) * t) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutCirc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - (t = t / d - <span class=\"number\">1</span>) * t) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutCirc</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> -c / <span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - t * t) - <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * (<span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">1</span> - (t -= <span class=\"number\">2</span>) * t) + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInElastic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> a = c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d) == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!p) p = d * <span class=\"number\">.3</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"built_in\">Math</span>.abs(c)) &#123;</div><div class=\"line\">\t\t\ta = c;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s = p / <span class=\"number\">4</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">var</span> s = p / (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) * <span class=\"built_in\">Math</span>.asin(c / a);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -(a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t -= <span class=\"number\">1</span>)) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p)) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutElastic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> a = c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d) == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!p) p = d * <span class=\"number\">.3</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"built_in\">Math</span>.abs(c)) &#123;</div><div class=\"line\">\t\t\ta = c;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s = p / <span class=\"number\">4</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">var</span> s = p / (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) * <span class=\"built_in\">Math</span>.asin(c / a);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * t) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p) + c + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutElastic</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> a = c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> b;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> b + c;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!p) p = d * (<span class=\"number\">.3</span> * <span class=\"number\">1.5</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (a &lt; <span class=\"built_in\">Math</span>.abs(c)) &#123;</div><div class=\"line\">\t\t\ta = c;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s = p / <span class=\"number\">4</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">var</span> s = p / (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) * <span class=\"built_in\">Math</span>.asin(c / a);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (t &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-.5</span> * (a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">10</span> * (t -= <span class=\"number\">1</span>)) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p)) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">-10</span> * (t -= <span class=\"number\">1</span>)) * <span class=\"built_in\">Math</span>.sin((t * d - s) * (<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI) / p) * <span class=\"number\">.5</span> + c + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInBack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d, s</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">undefined</span>) s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * (t /= d) * t * ((s + <span class=\"number\">1</span>) * t - s) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutBack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d, s</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">undefined</span>) s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c * ((t = t / d - <span class=\"number\">1</span>) * t * ((s + <span class=\"number\">1</span>) * t + s) + <span class=\"number\">1</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeInOutBack</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d, s</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (s == <span class=\"literal\">undefined</span>) s = <span class=\"number\">1.70158</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d / <span class=\"number\">2</span>) &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * (t * t * (((s *= (<span class=\"number\">1.525</span>)) + <span class=\"number\">1</span>) * t - s)) + b;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c / <span class=\"number\">2</span> * ((t -= <span class=\"number\">2</span>) * t * (((s *= (<span class=\"number\">1.525</span>)) + <span class=\"number\">1</span>) * t + s) + <span class=\"number\">2</span>) + b;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">easeOutBounce</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, t, b, c, d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((t /= d) &lt; (<span class=\"number\">1</span> / <span class=\"number\">2.75</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * t * t) + b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; (<span class=\"number\">2</span> / <span class=\"number\">2.75</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * (t -= (<span class=\"number\">1.5</span> / <span class=\"number\">2.75</span>)) * t + <span class=\"number\">.75</span>) + b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &lt; (<span class=\"number\">2.5</span> / <span class=\"number\">2.75</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * (t -= (<span class=\"number\">2.25</span> / <span class=\"number\">2.75</span>)) * t + <span class=\"number\">.9375</span>) + b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> c * (<span class=\"number\">7.5625</span> * (t -= (<span class=\"number\">2.625</span> / <span class=\"number\">2.75</span>)) * t + <span class=\"number\">.984375</span>) + b;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"抽取缓动函数\"><a href=\"#抽取缓动函数\" class=\"headerlink\" title=\"抽取缓动函数\"></a>抽取缓动函数</h2><p>将缓动函数的可变变量抽取出来,以便于封装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\t\ttween, <span class=\"comment\">// 单位时间间隔的位移</span></div><div class=\"line\">\t\t\tlocation, <span class=\"comment\">// 起始位置</span></div><div class=\"line\">\t\t\tdistance, <span class=\"comment\">// 动画总距离</span></div><div class=\"line\">\t\t\tstartTime,<span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\t\tcurrentTime,<span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\t\tlocation = elem.offsetLeft;</div><div class=\"line\">\t\tdistance = target - location;\t\t\t\t</div><div class=\"line\">\t\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;  <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(time &gt;= duration)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\t\ttween = distance;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\t\t<span class=\"built_in\">window</span>.clearInterval(timer);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\t\ttween = easing[easingName](<span class=\"literal\">null</span>, time, location, target, duration);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\telem.style.left = tween + location + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\t\ttimer = <span class=\"built_in\">window</span>.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tanimate(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dv'</span>), <span class=\"number\">1000</span>, <span class=\"number\">1500</span>, <span class=\"string\">'easeInOutElastic'</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"多属性动画的实现\"><a href=\"#多属性动画的实现\" class=\"headerlink\" title=\"多属性动画的实现\"></a>多属性动画的实现</h2><p>到此我们就可以继续进行框架的封装了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取所有动画属性的起始值</span></div><div class=\"line\"><span class=\"keyword\">var</span> kv = &#123;</div><div class=\"line\">\t<span class=\"string\">'left'</span>: <span class=\"string\">'offsetLeft'</span>,</div><div class=\"line\">\t<span class=\"string\">'top'</span>: <span class=\"string\">'offsetTop'</span>,</div><div class=\"line\">\t<span class=\"string\">'width'</span>: <span class=\"string\">'offsetWidth'</span>,</div><div class=\"line\">\t<span class=\"string\">'height'</span>: <span class=\"string\">'offsetHeight'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLocation</span>(<span class=\"params\">elem, target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> target) &#123;</div><div class=\"line\">\t\tobj[k] = elem[kv[k]];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDistance</span>(<span class=\"params\">location, target</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> target) &#123;</div><div class=\"line\">\t\tobj[k] = <span class=\"built_in\">parseFloat</span>(target[k]) - location[k];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTween</span>(<span class=\"params\">time, location, target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> target) &#123;</div><div class=\"line\">\t\tobj[k] = easing[easingName](<span class=\"literal\">null</span>, time, location[k], target[k], duration);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setStyles</span>(<span class=\"params\">elem, location, tween</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> k;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (k <span class=\"keyword\">in</span> location) &#123;</div><div class=\"line\">\t\telem.style[k] = location[k] + tween[k] + <span class=\"string\">'px'</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> animate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem, target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> timer, <span class=\"comment\">// 定时器id</span></div><div class=\"line\">\t\ttween, <span class=\"comment\">// 单位时间间隔的位移&#123;left: 800, top:400&#125;</span></div><div class=\"line\">\t\tlocation, <span class=\"comment\">// 起始位置&#123;left: 8,top: 8&#125;</span></div><div class=\"line\">\t\tdistance, <span class=\"comment\">// 动画总距离&#123;left: 992, top: 792&#125;</span></div><div class=\"line\">\t\tstartTime, <span class=\"comment\">// 动画开始时间</span></div><div class=\"line\">\t\tcurrentTime, <span class=\"comment\">// 动画当前时间</span></div><div class=\"line\">\t\ttime; <span class=\"comment\">// 当前动画经过总时间间隔</span></div><div class=\"line\"></div><div class=\"line\">\tlocation = getLocation(elem, target);</div><div class=\"line\">\tdistance = getDistance(location, target);</div><div class=\"line\">\tstartTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>; <span class=\"comment\">// 转换毫秒值</span></div><div class=\"line\">\t<span class=\"comment\">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tcurrentTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>;</div><div class=\"line\">\t\ttime = currentTime - startTime;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class=\"line\">\t\t<span class=\"comment\">// 停止动画,并设置动画元素到达终点</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (time &gt;= duration) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(time);</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 1 设置动画元素到达终点</span></div><div class=\"line\">\t\t\ttween = distance;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2 停止动画，即清楚定时器</span></div><div class=\"line\">\t\t\tglobal.clearInterval(timer);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 3 删除动画元素的timerId属性</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> elem.timerId;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 指定动画元素的位置</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 注意： 要加上 起始位置</span></div><div class=\"line\">\t\t\ttween = getTween(time, location, target, duration, easingName);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 设置动画属性值</span></div><div class=\"line\">\t\tsetStyles(elem, location, tween);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"comment\">// 启动定时器 开始动画</span></div><div class=\"line\">\ttimer = global.setInterval(render, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</div><div class=\"line\">\t<span class=\"comment\">// 把定时器id存储在动画元素上（以自定义属性）</span></div><div class=\"line\">\telem.timerId = timer;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"实现animate和stop方法\"><a href=\"#实现animate和stop方法\" class=\"headerlink\" title=\"实现animate和stop方法\"></a>实现animate和stop方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">itcast.fn.extend(&#123;</div><div class=\"line\">\t<span class=\"attr\">animate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, duration, easingName</span>) </span>&#123;</div><div class=\"line\">\t\teasingName = easingName || <span class=\"string\">'linear'</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!(<span class=\"string\">'timerId'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>))&#123;</div><div class=\"line\">\t\t\t\tanimate(<span class=\"keyword\">this</span>, target, duration, easingName);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">stop</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"string\">'timerId'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)&#123;</div><div class=\"line\">\t\t\t\tglobal.clearInterval(<span class=\"keyword\">this</span>.timerId);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.timerId;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>动画模块的实现<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"itcast.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">\t\tdiv &#123;</div><div class=\"line\">\t\t\twidth: 100px;</div><div class=\"line\">\t\t\theight: 100px;</div><div class=\"line\">\t\t\tborder: 5px solid yellowgreen;</div><div class=\"line\">\t\t\tposition: relative;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">\t\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#start'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t$(<span class=\"string\">'#dv'</span>).animate(&#123;<span class=\"attr\">left</span> : <span class=\"number\">1000</span>&#125;, <span class=\"number\">1500</span>);</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\t$(<span class=\"string\">'#stop'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t$(<span class=\"string\">'#dv'</span>).stop();</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"start\"</span>&gt;</span>开始\t动画<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"stop\"</span>&gt;</span>停止\t动画<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"js高级与面向对象之原型链","date":"2016-07-09T11:41:47.000Z","_content":"\n## 原型链是什么？\n\n只要是对象就会有原型，那么所有的原型就会形成一个链式的结构，这个结构就称为原型链\n\n<!-- more -->\n\n```js\nfunction Person(){}\n//p--->Person.prototype----->Object.Prototype----->null\nvar p = new Person();\n\nconsole.log(Person.prototype);\n//原型也是一个对象，是对象，就有构造函数，有构造函数，就有原型\n```\n\n## 修改原型链\n\n* 原型链结构可以进行修改\n* 替换原型对象就可以修改原型链结构\n\n* 原型继承的概念重定义\n* 通过修改原型链的结构实现的继承就是原型继承\n\n* 属性的搜索原则\n* 在对象访问属性的时候，会遵守一个原则\n1. 现在对象本身中进行查找，如果本身中有，就直接使用，\n2. 如果没有，就去原型中查找，如果原型中有，就直接使用\n3. 如果没有，重复步骤2，直到找到 `null`\n\n* 设置属性没有搜索原则，只会在本身中进行搜索\n\n* 由于属性搜索原则的存在，所以对象可以直接访问 `.constructor` 属性找到其构造函数\n\n```js\nfunction Human(){\n\n}\n\nfunction Person(){\n\n}\nPerson.prototype = new Human();\n\n//p---->Person.prototype----->Human.prototype----->Object.prototype----->null\nvar p = new Person();\n```\n\n## 复杂的原型链\n\n```js\nfunction Animal(){\n    this.name = \"123\";\n}\n\nfunction Human(\n\n){}\n\nvar animal = new Animal();\nHuman.prototype = animal;\n\nvar h = new Human();\n//通过h去访问constructor属性的顺序\n//1.现在h自身查找 h中没有\n//2.去Human.prototype 也就是 h.__proto___  也就是animal中去找\n//3.再去anmail这个对象的原型中 也就是 Animal.prototype 也即是 animal.__proto__ 中去找\n//4.找到的就是Animal\nconsole.log(h.constructor);\n\n\nfunction Man(){}\nvar h1 = new Human();\nMan.prototype = h1;\n\nvar m = new Man();\n//1.第一步在m自己中找 没有\n//2.m.__proto__  也就是Man.prototype 也就是 h1中去查找 没有\n//3.h1的原型 也就是 h1.__proto__ 也就是 Human.prototype\n//4.去上面看吧\nconsole.log(m.constructor);\n\n```\n\n## instanceof关键字\n\n* 对象 `instanceof` 构造函数\n* 检测一个对象是不是通过某个构造函数创建出来的(不准确的说法)\n* 检测一个构造函数的原型 `（构造函数.prototype）` 是否在某个对象的原型链上\n\n```js\nfunction Person(){\n\n        }\n//p---->Person.prototype---->Object.prototype---->null\nvar p = new Person();\n\nconsole.log(p instanceof Person);\n\nconsole.log(p instanceof Object);\n```\n\n## Object.prototype成员\n\n1.  `constructor`  指向原型相关的构造函数\n2.  `hasOwnProperty` 判断对象本身是否拥有指定的属性  不包含原型中的成员\n\t`对象.hasOwnProperty(属性名)`\n3.  `isPrototypeOf` 判断一个对象是否某个对象的原型\n\t`对象.isPrototypeOf(另外一个对象)`\n4.  `propertyIsEnumerable`  判断对象自己的属性是不是可以被遍历 `（for-in）` 如果不是自己的或者不能被遍历都会返回 `false`\n\t`对象.propertyIsEnumerable(属性名)`\n\t`Object.defineProperty(对象，属性名，对象（描述信息）)`\n\n5.  `toLocaleString`  `toString`   都是将对象转换为字符串的方法\n\t`tolocalString` 打印本地格式的字符串  本地格式是获取的系统设置\n\t`toString` 直接转换成字符串\n6.  `valueOf` 方法\n\t当对象参与运算的时候，会首先调用对象的 `valuOf` 方法获取对象的值\n\t如果获取到的这个值可以参与运算，就直接拿来使用\n\t如果不能参与运算，就会去调用该对象的 `toString` 方法\n\n```js\nvar obj = {\n    valueOf :function () {\n        return 1;\n    },\n\n    toString:function(){\n        return \"我叫李二狗\";\n    }\n};\n//console.log(obj.valueOf());\nconsole.log(obj.toString());\nconsole.log( obj + 1);\n```\n\n7. __proto__  指向对象的原型  非标准属性\n\n```js\nvar now = new Date();\nconsole.log(now.toString());\nconsole.log(now.toLocaleString());\n\nvar obj = {\n      name:\"\",\n    age:18\n}\n\nconsole.log(obj.toString());\nconsole.log(obj.toLocaleString());\n\nobj.__proto__.name =  \"张三\";\n\nfor(var k in obj){\n    console.log(k);\n}\n\nconsole.log(obj.propertyIsEnumerable(\"name\"));\n\nvar obj = {\n\n}\n\nobj.__proto__ = {\n   beautifulLevel : \"High\"\n}\n\nconsole.log(obj.hasOwnProperty(\"beautifulLevel\"));\nvar obj = {};\n\nvar obj1 = {};\n\nobj.__proto__ = obj1;\nconsole.log(obj1.isPrototypeOf(obj));\n```","source":"_posts/javascript-prototype-chain.md","raw":"---\ntitle: js高级与面向对象之原型链\ndate: 2016-7-09 19:41:47\ntags: \n\t- 原型链\ncategories: javascript\n---\n\n## 原型链是什么？\n\n只要是对象就会有原型，那么所有的原型就会形成一个链式的结构，这个结构就称为原型链\n\n<!-- more -->\n\n```js\nfunction Person(){}\n//p--->Person.prototype----->Object.Prototype----->null\nvar p = new Person();\n\nconsole.log(Person.prototype);\n//原型也是一个对象，是对象，就有构造函数，有构造函数，就有原型\n```\n\n## 修改原型链\n\n* 原型链结构可以进行修改\n* 替换原型对象就可以修改原型链结构\n\n* 原型继承的概念重定义\n* 通过修改原型链的结构实现的继承就是原型继承\n\n* 属性的搜索原则\n* 在对象访问属性的时候，会遵守一个原则\n1. 现在对象本身中进行查找，如果本身中有，就直接使用，\n2. 如果没有，就去原型中查找，如果原型中有，就直接使用\n3. 如果没有，重复步骤2，直到找到 `null`\n\n* 设置属性没有搜索原则，只会在本身中进行搜索\n\n* 由于属性搜索原则的存在，所以对象可以直接访问 `.constructor` 属性找到其构造函数\n\n```js\nfunction Human(){\n\n}\n\nfunction Person(){\n\n}\nPerson.prototype = new Human();\n\n//p---->Person.prototype----->Human.prototype----->Object.prototype----->null\nvar p = new Person();\n```\n\n## 复杂的原型链\n\n```js\nfunction Animal(){\n    this.name = \"123\";\n}\n\nfunction Human(\n\n){}\n\nvar animal = new Animal();\nHuman.prototype = animal;\n\nvar h = new Human();\n//通过h去访问constructor属性的顺序\n//1.现在h自身查找 h中没有\n//2.去Human.prototype 也就是 h.__proto___  也就是animal中去找\n//3.再去anmail这个对象的原型中 也就是 Animal.prototype 也即是 animal.__proto__ 中去找\n//4.找到的就是Animal\nconsole.log(h.constructor);\n\n\nfunction Man(){}\nvar h1 = new Human();\nMan.prototype = h1;\n\nvar m = new Man();\n//1.第一步在m自己中找 没有\n//2.m.__proto__  也就是Man.prototype 也就是 h1中去查找 没有\n//3.h1的原型 也就是 h1.__proto__ 也就是 Human.prototype\n//4.去上面看吧\nconsole.log(m.constructor);\n\n```\n\n## instanceof关键字\n\n* 对象 `instanceof` 构造函数\n* 检测一个对象是不是通过某个构造函数创建出来的(不准确的说法)\n* 检测一个构造函数的原型 `（构造函数.prototype）` 是否在某个对象的原型链上\n\n```js\nfunction Person(){\n\n        }\n//p---->Person.prototype---->Object.prototype---->null\nvar p = new Person();\n\nconsole.log(p instanceof Person);\n\nconsole.log(p instanceof Object);\n```\n\n## Object.prototype成员\n\n1.  `constructor`  指向原型相关的构造函数\n2.  `hasOwnProperty` 判断对象本身是否拥有指定的属性  不包含原型中的成员\n\t`对象.hasOwnProperty(属性名)`\n3.  `isPrototypeOf` 判断一个对象是否某个对象的原型\n\t`对象.isPrototypeOf(另外一个对象)`\n4.  `propertyIsEnumerable`  判断对象自己的属性是不是可以被遍历 `（for-in）` 如果不是自己的或者不能被遍历都会返回 `false`\n\t`对象.propertyIsEnumerable(属性名)`\n\t`Object.defineProperty(对象，属性名，对象（描述信息）)`\n\n5.  `toLocaleString`  `toString`   都是将对象转换为字符串的方法\n\t`tolocalString` 打印本地格式的字符串  本地格式是获取的系统设置\n\t`toString` 直接转换成字符串\n6.  `valueOf` 方法\n\t当对象参与运算的时候，会首先调用对象的 `valuOf` 方法获取对象的值\n\t如果获取到的这个值可以参与运算，就直接拿来使用\n\t如果不能参与运算，就会去调用该对象的 `toString` 方法\n\n```js\nvar obj = {\n    valueOf :function () {\n        return 1;\n    },\n\n    toString:function(){\n        return \"我叫李二狗\";\n    }\n};\n//console.log(obj.valueOf());\nconsole.log(obj.toString());\nconsole.log( obj + 1);\n```\n\n7. __proto__  指向对象的原型  非标准属性\n\n```js\nvar now = new Date();\nconsole.log(now.toString());\nconsole.log(now.toLocaleString());\n\nvar obj = {\n      name:\"\",\n    age:18\n}\n\nconsole.log(obj.toString());\nconsole.log(obj.toLocaleString());\n\nobj.__proto__.name =  \"张三\";\n\nfor(var k in obj){\n    console.log(k);\n}\n\nconsole.log(obj.propertyIsEnumerable(\"name\"));\n\nvar obj = {\n\n}\n\nobj.__proto__ = {\n   beautifulLevel : \"High\"\n}\n\nconsole.log(obj.hasOwnProperty(\"beautifulLevel\"));\nvar obj = {};\n\nvar obj1 = {};\n\nobj.__proto__ = obj1;\nconsole.log(obj1.isPrototypeOf(obj));\n```","slug":"javascript-prototype-chain","published":1,"updated":"2016-11-24T01:28:07.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprkj001n9wg77vlq4b10","content":"<h2 id=\"原型链是什么？\"><a href=\"#原型链是什么？\" class=\"headerlink\" title=\"原型链是什么？\"></a>原型链是什么？</h2><p>只要是对象就会有原型，那么所有的原型就会形成一个链式的结构，这个结构就称为原型链</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//p---&gt;Person.prototype-----&gt;Object.Prototype-----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype);</div><div class=\"line\"><span class=\"comment\">//原型也是一个对象，是对象，就有构造函数，有构造函数，就有原型</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改原型链\"><a href=\"#修改原型链\" class=\"headerlink\" title=\"修改原型链\"></a>修改原型链</h2><ul>\n<li>原型链结构可以进行修改</li>\n<li><p>替换原型对象就可以修改原型链结构</p>\n</li>\n<li><p>原型继承的概念重定义</p>\n</li>\n<li><p>通过修改原型链的结构实现的继承就是原型继承</p>\n</li>\n<li><p>属性的搜索原则</p>\n</li>\n<li>在对象访问属性的时候，会遵守一个原则</li>\n</ul>\n<ol>\n<li>现在对象本身中进行查找，如果本身中有，就直接使用，</li>\n<li>如果没有，就去原型中查找，如果原型中有，就直接使用</li>\n<li>如果没有，重复步骤2，直到找到 <code>null</code></li>\n</ol>\n<ul>\n<li><p>设置属性没有搜索原则，只会在本身中进行搜索</p>\n</li>\n<li><p>由于属性搜索原则的存在，所以对象可以直接访问 <code>.constructor</code> 属性找到其构造函数</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Human</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = <span class=\"keyword\">new</span> Human();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//p----&gt;Person.prototype-----&gt;Human.prototype-----&gt;Object.prototype-----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure>\n<h2 id=\"复杂的原型链\"><a href=\"#复杂的原型链\" class=\"headerlink\" title=\"复杂的原型链\"></a>复杂的原型链</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"123\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Human</span>(<span class=\"params\"></span></span></div><div class=\"line\"></div><div class=\"line\">)&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal();</div><div class=\"line\">Human.prototype = animal;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> h = <span class=\"keyword\">new</span> Human();</div><div class=\"line\"><span class=\"comment\">//通过h去访问constructor属性的顺序</span></div><div class=\"line\"><span class=\"comment\">//1.现在h自身查找 h中没有</span></div><div class=\"line\"><span class=\"comment\">//2.去Human.prototype 也就是 h.__proto___  也就是animal中去找</span></div><div class=\"line\"><span class=\"comment\">//3.再去anmail这个对象的原型中 也就是 Animal.prototype 也即是 animal.__proto__ 中去找</span></div><div class=\"line\"><span class=\"comment\">//4.找到的就是Animal</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(h.constructor);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Man</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> h1 = <span class=\"keyword\">new</span> Human();</div><div class=\"line\">Man.prototype = h1;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"><span class=\"comment\">//1.第一步在m自己中找 没有</span></div><div class=\"line\"><span class=\"comment\">//2.m.__proto__  也就是Man.prototype 也就是 h1中去查找 没有</span></div><div class=\"line\"><span class=\"comment\">//3.h1的原型 也就是 h1.__proto__ 也就是 Human.prototype</span></div><div class=\"line\"><span class=\"comment\">//4.去上面看吧</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(m.constructor);</div></pre></td></tr></table></figure>\n<h2 id=\"instanceof关键字\"><a href=\"#instanceof关键字\" class=\"headerlink\" title=\"instanceof关键字\"></a>instanceof关键字</h2><ul>\n<li>对象 <code>instanceof</code> 构造函数</li>\n<li>检测一个对象是不是通过某个构造函数创建出来的(不准确的说法)</li>\n<li>检测一个构造函数的原型 <code>（构造函数.prototype）</code> 是否在某个对象的原型链上</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"comment\">//p----&gt;Person.prototype----&gt;Object.prototype----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p <span class=\"keyword\">instanceof</span> Person);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Object-prototype成员\"><a href=\"#Object-prototype成员\" class=\"headerlink\" title=\"Object.prototype成员\"></a>Object.prototype成员</h2><ol>\n<li><code>constructor</code>  指向原型相关的构造函数</li>\n<li><code>hasOwnProperty</code> 判断对象本身是否拥有指定的属性  不包含原型中的成员<br><code>对象.hasOwnProperty(属性名)</code></li>\n<li><code>isPrototypeOf</code> 判断一个对象是否某个对象的原型<br><code>对象.isPrototypeOf(另外一个对象)</code></li>\n<li><p><code>propertyIsEnumerable</code>  判断对象自己的属性是不是可以被遍历 <code>（for-in）</code> 如果不是自己的或者不能被遍历都会返回 <code>false</code><br><code>对象.propertyIsEnumerable(属性名)</code><br><code>Object.defineProperty(对象，属性名，对象（描述信息）)</code></p>\n</li>\n<li><p><code>toLocaleString</code>  <code>toString</code>   都是将对象转换为字符串的方法<br><code>tolocalString</code> 打印本地格式的字符串  本地格式是获取的系统设置<br><code>toString</code> 直接转换成字符串</p>\n</li>\n<li><code>valueOf</code> 方法<br>当对象参与运算的时候，会首先调用对象的 <code>valuOf</code> 方法获取对象的值<br>如果获取到的这个值可以参与运算，就直接拿来使用<br>如果不能参与运算，就会去调用该对象的 <code>toString</code> 方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">valueOf</span> :<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">toString</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"我叫李二狗\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//console.log(obj.valueOf());</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log( obj + <span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li><strong>proto</strong>  指向对象的原型  非标准属性</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(now.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(now.toLocaleString());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.toLocaleString());</div><div class=\"line\"></div><div class=\"line\">obj.__proto__.name =  <span class=\"string\">\"张三\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(k);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.propertyIsEnumerable(<span class=\"string\">\"name\"</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.__proto__ = &#123;</div><div class=\"line\">   <span class=\"attr\">beautifulLevel</span> : <span class=\"string\">\"High\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"string\">\"beautifulLevel\"</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">obj.__proto__ = obj1;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.isPrototypeOf(obj));</div></pre></td></tr></table></figure>","excerpt":"<h2 id=\"原型链是什么？\"><a href=\"#原型链是什么？\" class=\"headerlink\" title=\"原型链是什么？\"></a>原型链是什么？</h2><p>只要是对象就会有原型，那么所有的原型就会形成一个链式的结构，这个结构就称为原型链</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//p---&gt;Person.prototype-----&gt;Object.Prototype-----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype);</div><div class=\"line\"><span class=\"comment\">//原型也是一个对象，是对象，就有构造函数，有构造函数，就有原型</span></div></pre></td></tr></table></figure>\n<h2 id=\"修改原型链\"><a href=\"#修改原型链\" class=\"headerlink\" title=\"修改原型链\"></a>修改原型链</h2><ul>\n<li>原型链结构可以进行修改</li>\n<li><p>替换原型对象就可以修改原型链结构</p>\n</li>\n<li><p>原型继承的概念重定义</p>\n</li>\n<li><p>通过修改原型链的结构实现的继承就是原型继承</p>\n</li>\n<li><p>属性的搜索原则</p>\n</li>\n<li>在对象访问属性的时候，会遵守一个原则</li>\n</ul>\n<ol>\n<li>现在对象本身中进行查找，如果本身中有，就直接使用，</li>\n<li>如果没有，就去原型中查找，如果原型中有，就直接使用</li>\n<li>如果没有，重复步骤2，直到找到 <code>null</code></li>\n</ol>\n<ul>\n<li><p>设置属性没有搜索原则，只会在本身中进行搜索</p>\n</li>\n<li><p>由于属性搜索原则的存在，所以对象可以直接访问 <code>.constructor</code> 属性找到其构造函数</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Human</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = <span class=\"keyword\">new</span> Human();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//p----&gt;Person.prototype-----&gt;Human.prototype-----&gt;Object.prototype-----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure>\n<h2 id=\"复杂的原型链\"><a href=\"#复杂的原型链\" class=\"headerlink\" title=\"复杂的原型链\"></a>复杂的原型链</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"123\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Human</span>(<span class=\"params\"></div><div class=\"line\"></div><div class=\"line\"></span>)</span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal();</div><div class=\"line\">Human.prototype = animal;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> h = <span class=\"keyword\">new</span> Human();</div><div class=\"line\"><span class=\"comment\">//通过h去访问constructor属性的顺序</span></div><div class=\"line\"><span class=\"comment\">//1.现在h自身查找 h中没有</span></div><div class=\"line\"><span class=\"comment\">//2.去Human.prototype 也就是 h.__proto___  也就是animal中去找</span></div><div class=\"line\"><span class=\"comment\">//3.再去anmail这个对象的原型中 也就是 Animal.prototype 也即是 animal.__proto__ 中去找</span></div><div class=\"line\"><span class=\"comment\">//4.找到的就是Animal</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(h.constructor);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Man</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> h1 = <span class=\"keyword\">new</span> Human();</div><div class=\"line\">Man.prototype = h1;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"><span class=\"comment\">//1.第一步在m自己中找 没有</span></div><div class=\"line\"><span class=\"comment\">//2.m.__proto__  也就是Man.prototype 也就是 h1中去查找 没有</span></div><div class=\"line\"><span class=\"comment\">//3.h1的原型 也就是 h1.__proto__ 也就是 Human.prototype</span></div><div class=\"line\"><span class=\"comment\">//4.去上面看吧</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(m.constructor);</div></pre></td></tr></table></figure>\n<h2 id=\"instanceof关键字\"><a href=\"#instanceof关键字\" class=\"headerlink\" title=\"instanceof关键字\"></a>instanceof关键字</h2><ul>\n<li>对象 <code>instanceof</code> 构造函数</li>\n<li>检测一个对象是不是通过某个构造函数创建出来的(不准确的说法)</li>\n<li>检测一个构造函数的原型 <code>（构造函数.prototype）</code> 是否在某个对象的原型链上</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"comment\">//p----&gt;Person.prototype----&gt;Object.prototype----&gt;null</span></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p <span class=\"keyword\">instanceof</span> Person);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Object-prototype成员\"><a href=\"#Object-prototype成员\" class=\"headerlink\" title=\"Object.prototype成员\"></a>Object.prototype成员</h2><ol>\n<li><code>constructor</code>  指向原型相关的构造函数</li>\n<li><code>hasOwnProperty</code> 判断对象本身是否拥有指定的属性  不包含原型中的成员<br><code>对象.hasOwnProperty(属性名)</code></li>\n<li><code>isPrototypeOf</code> 判断一个对象是否某个对象的原型<br><code>对象.isPrototypeOf(另外一个对象)</code></li>\n<li><p><code>propertyIsEnumerable</code>  判断对象自己的属性是不是可以被遍历 <code>（for-in）</code> 如果不是自己的或者不能被遍历都会返回 <code>false</code><br><code>对象.propertyIsEnumerable(属性名)</code><br><code>Object.defineProperty(对象，属性名，对象（描述信息）)</code></p>\n</li>\n<li><p><code>toLocaleString</code>  <code>toString</code>   都是将对象转换为字符串的方法<br><code>tolocalString</code> 打印本地格式的字符串  本地格式是获取的系统设置<br><code>toString</code> 直接转换成字符串</p>\n</li>\n<li><code>valueOf</code> 方法<br>当对象参与运算的时候，会首先调用对象的 <code>valuOf</code> 方法获取对象的值<br>如果获取到的这个值可以参与运算，就直接拿来使用<br>如果不能参与运算，就会去调用该对象的 <code>toString</code> 方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">valueOf</span> :<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">toString</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"我叫李二狗\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//console.log(obj.valueOf());</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log( obj + <span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li><strong>proto</strong>  指向对象的原型  非标准属性</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(now.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(now.toLocaleString());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">      <span class=\"attr\">name</span>:<span class=\"string\">\"\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.toString());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.toLocaleString());</div><div class=\"line\"></div><div class=\"line\">obj.__proto__.name =  <span class=\"string\">\"张三\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(k);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.propertyIsEnumerable(<span class=\"string\">\"name\"</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.__proto__ = &#123;</div><div class=\"line\">   <span class=\"attr\">beautifulLevel</span> : <span class=\"string\">\"High\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"string\">\"beautifulLevel\"</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">obj.__proto__ = obj1;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj1.isPrototypeOf(obj));</div></pre></td></tr></table></figure>"},{"title":"js高级与面向对象之原型","date":"2016-06-04T05:41:47.000Z","_content":"\n## 原型的基本概念\n\n在构造函数创建出来的时候，系统会默认的帮构造函数创建并且关联一个空对象，这个对象就成为原型\n\n<!-- more -->\n\n##原型的作用\n\n原型中的所有成员都可以被和其关联的构造函数创建出来的对象访问\n\n```js\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n}\n```\n\n如何利用原型解决构造函数存在的问题？\n* 利用原型的特性，将方法放到原型中去，供所有的对象访问\n\n## 如何访问原型？\n\n* 构造函数`.prototype`\n\n```js\nconsole.log(typeof Person.prototype);\nconsole.log(Person.prototype);\n```\n\n## 如何使用原型？\n\n* 使用对象的动态特性，为原型对象新增成员\n\n```js\nPerson.prototype.eat = function () {\n    console.log(\"吃个大鸡腿儿\");\n}\n\nvar p  = new Person();\np.eat();\nvar p1 = new Person();\np1.eat();\n\nconsole.log(p.eat == p1.eat);\n```\n\n* 直接替换原型对象\n\n```js\nPerson.prototype = {\n    run:function(){\n        console.log(\"李二狗正在以时速1cm每小时的速度奔向餐厅\");\n    }\n};\n\nconsole.log(Person.prototype);\nvar p2 = new Person();\np2.run();\n```\n\n## 原型使用的注意事项\n\n对象访问属性的时候，会现在自身查找，如果找到了就直接使用如果没有找到，就去构造函数的原型对象中去查找\n\n1. 一般情况下，只会将方法放入原型对象中，属性单独的放在对象中\n2. 在获取对象的属性的时候，会现在对象中进行查找，然后去原型中查找\n3. 在对象进行设置属性的时候，不会去原型中查找属性，而是直接在对象内进行查找，如果找到该属性，就修改，如果没有找到，就新增\n4. 在替换原型对象的时候，要注意：替换之前创建出来的对象的原型和替换之后创建出来的对象的原型会不一致\n\n```js\nfunction Person(){\n\n}\n\n//Person.prototype.name = \"张三\";\nPerson.prototype.sing = function () {\n    console.log(\"Take me to your heart!\");\n}\nvar p = new Person();\n//console.log(p.name);  //张三\np.sing();  //可以\n\n//p.name = \"李四\";\n//console.log(p.name);  //李四\n\nPerson.prototype = {\n\n};\n\nvar p1 = new Person();\n//console.log(p1.name); //张三\np1.sing();//不可以\n\np.sing();//不可以  or  可以\n```\n\n## 原型的访问方式\n\n1. 通过 `构造函数.prototype` 去访问\n2. 通过 `对象.__proto__` 去访问\n\t注：__proto__这个属性 是非标准的！！！ 不推荐在开发过程中使用，只用于调试代码\n\n* __.proto__用法\n\n```js\nfunction Person(){\n}\nPerson.prototype = {\n    name : \"迈克学摇滚\",\n    song : \"Take me to your heart\"\n}\nvar p = new Person();\np.__proto__.count = 100;\nconsole.log(p.__proto__);\n```","source":"_posts/javascript-prototype.md","raw":"---\ntitle: js高级与面向对象之原型\ndate: 2016-06-04 13:41:47\ntags: \n\t- javascript\n\t- 原型\n\t- 原型的基本概念\ncategories: javascript\n---\n\n## 原型的基本概念\n\n在构造函数创建出来的时候，系统会默认的帮构造函数创建并且关联一个空对象，这个对象就成为原型\n\n<!-- more -->\n\n##原型的作用\n\n原型中的所有成员都可以被和其关联的构造函数创建出来的对象访问\n\n```js\nfunction Person(name, age){\n    this.name = name;\n    this.age = age;\n}\n```\n\n如何利用原型解决构造函数存在的问题？\n* 利用原型的特性，将方法放到原型中去，供所有的对象访问\n\n## 如何访问原型？\n\n* 构造函数`.prototype`\n\n```js\nconsole.log(typeof Person.prototype);\nconsole.log(Person.prototype);\n```\n\n## 如何使用原型？\n\n* 使用对象的动态特性，为原型对象新增成员\n\n```js\nPerson.prototype.eat = function () {\n    console.log(\"吃个大鸡腿儿\");\n}\n\nvar p  = new Person();\np.eat();\nvar p1 = new Person();\np1.eat();\n\nconsole.log(p.eat == p1.eat);\n```\n\n* 直接替换原型对象\n\n```js\nPerson.prototype = {\n    run:function(){\n        console.log(\"李二狗正在以时速1cm每小时的速度奔向餐厅\");\n    }\n};\n\nconsole.log(Person.prototype);\nvar p2 = new Person();\np2.run();\n```\n\n## 原型使用的注意事项\n\n对象访问属性的时候，会现在自身查找，如果找到了就直接使用如果没有找到，就去构造函数的原型对象中去查找\n\n1. 一般情况下，只会将方法放入原型对象中，属性单独的放在对象中\n2. 在获取对象的属性的时候，会现在对象中进行查找，然后去原型中查找\n3. 在对象进行设置属性的时候，不会去原型中查找属性，而是直接在对象内进行查找，如果找到该属性，就修改，如果没有找到，就新增\n4. 在替换原型对象的时候，要注意：替换之前创建出来的对象的原型和替换之后创建出来的对象的原型会不一致\n\n```js\nfunction Person(){\n\n}\n\n//Person.prototype.name = \"张三\";\nPerson.prototype.sing = function () {\n    console.log(\"Take me to your heart!\");\n}\nvar p = new Person();\n//console.log(p.name);  //张三\np.sing();  //可以\n\n//p.name = \"李四\";\n//console.log(p.name);  //李四\n\nPerson.prototype = {\n\n};\n\nvar p1 = new Person();\n//console.log(p1.name); //张三\np1.sing();//不可以\n\np.sing();//不可以  or  可以\n```\n\n## 原型的访问方式\n\n1. 通过 `构造函数.prototype` 去访问\n2. 通过 `对象.__proto__` 去访问\n\t注：__proto__这个属性 是非标准的！！！ 不推荐在开发过程中使用，只用于调试代码\n\n* __.proto__用法\n\n```js\nfunction Person(){\n}\nPerson.prototype = {\n    name : \"迈克学摇滚\",\n    song : \"Take me to your heart\"\n}\nvar p = new Person();\np.__proto__.count = 100;\nconsole.log(p.__proto__);\n```","slug":"javascript-prototype","published":1,"updated":"2016-11-24T01:26:39.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprkl001p9wg7cykim8nd","content":"<h2 id=\"原型的基本概念\"><a href=\"#原型的基本概念\" class=\"headerlink\" title=\"原型的基本概念\"></a>原型的基本概念</h2><p>在构造函数创建出来的时候，系统会默认的帮构造函数创建并且关联一个空对象，这个对象就成为原型</p>\n<a id=\"more\"></a>\n<p>##原型的作用</p>\n<p>原型中的所有成员都可以被和其关联的构造函数创建出来的对象访问</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如何利用原型解决构造函数存在的问题？</p>\n<ul>\n<li>利用原型的特性，将方法放到原型中去，供所有的对象访问</li>\n</ul>\n<h2 id=\"如何访问原型？\"><a href=\"#如何访问原型？\" class=\"headerlink\" title=\"如何访问原型？\"></a>如何访问原型？</h2><ul>\n<li>构造函数<code>.prototype</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> Person.prototype);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype);</div></pre></td></tr></table></figure>\n<h2 id=\"如何使用原型？\"><a href=\"#如何使用原型？\" class=\"headerlink\" title=\"如何使用原型？\"></a>如何使用原型？</h2><ul>\n<li>使用对象的动态特性，为原型对象新增成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"吃个大鸡腿儿\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p  = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p.eat();</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p1.eat();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.eat == p1.eat);</div></pre></td></tr></table></figure>\n<ul>\n<li>直接替换原型对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">run</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"李二狗正在以时速1cm每小时的速度奔向餐厅\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p2.run();</div></pre></td></tr></table></figure>\n<h2 id=\"原型使用的注意事项\"><a href=\"#原型使用的注意事项\" class=\"headerlink\" title=\"原型使用的注意事项\"></a>原型使用的注意事项</h2><p>对象访问属性的时候，会现在自身查找，如果找到了就直接使用如果没有找到，就去构造函数的原型对象中去查找</p>\n<ol>\n<li>一般情况下，只会将方法放入原型对象中，属性单独的放在对象中</li>\n<li>在获取对象的属性的时候，会现在对象中进行查找，然后去原型中查找</li>\n<li>在对象进行设置属性的时候，不会去原型中查找属性，而是直接在对象内进行查找，如果找到该属性，就修改，如果没有找到，就新增</li>\n<li>在替换原型对象的时候，要注意：替换之前创建出来的对象的原型和替换之后创建出来的对象的原型会不一致</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Person.prototype.name = \"张三\";</span></div><div class=\"line\">Person.prototype.sing = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Take me to your heart!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"comment\">//console.log(p.name);  //张三</span></div><div class=\"line\">p.sing();  <span class=\"comment\">//可以</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//p.name = \"李四\";</span></div><div class=\"line\"><span class=\"comment\">//console.log(p.name);  //李四</span></div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"comment\">//console.log(p1.name); //张三</span></div><div class=\"line\">p1.sing();<span class=\"comment\">//不可以</span></div><div class=\"line\"></div><div class=\"line\">p.sing();<span class=\"comment\">//不可以  or  可以</span></div></pre></td></tr></table></figure>\n<h2 id=\"原型的访问方式\"><a href=\"#原型的访问方式\" class=\"headerlink\" title=\"原型的访问方式\"></a>原型的访问方式</h2><ol>\n<li>通过 <code>构造函数.prototype</code> 去访问</li>\n<li>通过 <code>对象.__proto__</code> 去访问<br> 注：<strong>proto</strong>这个属性 是非标准的！！！ 不推荐在开发过程中使用，只用于调试代码</li>\n</ol>\n<ul>\n<li><strong>.proto</strong>用法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">\"迈克学摇滚\"</span>,</div><div class=\"line\">    <span class=\"attr\">song</span> : <span class=\"string\">\"Take me to your heart\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p.__proto__.count = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.__proto__);</div></pre></td></tr></table></figure>","excerpt":"<h2 id=\"原型的基本概念\"><a href=\"#原型的基本概念\" class=\"headerlink\" title=\"原型的基本概念\"></a>原型的基本概念</h2><p>在构造函数创建出来的时候，系统会默认的帮构造函数创建并且关联一个空对象，这个对象就成为原型</p>","more":"<p>##原型的作用</p>\n<p>原型中的所有成员都可以被和其关联的构造函数创建出来的对象访问</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如何利用原型解决构造函数存在的问题？</p>\n<ul>\n<li>利用原型的特性，将方法放到原型中去，供所有的对象访问</li>\n</ul>\n<h2 id=\"如何访问原型？\"><a href=\"#如何访问原型？\" class=\"headerlink\" title=\"如何访问原型？\"></a>如何访问原型？</h2><ul>\n<li>构造函数<code>.prototype</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> Person.prototype);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype);</div></pre></td></tr></table></figure>\n<h2 id=\"如何使用原型？\"><a href=\"#如何使用原型？\" class=\"headerlink\" title=\"如何使用原型？\"></a>如何使用原型？</h2><ul>\n<li>使用对象的动态特性，为原型对象新增成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"吃个大鸡腿儿\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p  = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p.eat();</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p1.eat();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.eat == p1.eat);</div></pre></td></tr></table></figure>\n<ul>\n<li>直接替换原型对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">run</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"李二狗正在以时速1cm每小时的速度奔向餐厅\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p2.run();</div></pre></td></tr></table></figure>\n<h2 id=\"原型使用的注意事项\"><a href=\"#原型使用的注意事项\" class=\"headerlink\" title=\"原型使用的注意事项\"></a>原型使用的注意事项</h2><p>对象访问属性的时候，会现在自身查找，如果找到了就直接使用如果没有找到，就去构造函数的原型对象中去查找</p>\n<ol>\n<li>一般情况下，只会将方法放入原型对象中，属性单独的放在对象中</li>\n<li>在获取对象的属性的时候，会现在对象中进行查找，然后去原型中查找</li>\n<li>在对象进行设置属性的时候，不会去原型中查找属性，而是直接在对象内进行查找，如果找到该属性，就修改，如果没有找到，就新增</li>\n<li>在替换原型对象的时候，要注意：替换之前创建出来的对象的原型和替换之后创建出来的对象的原型会不一致</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Person.prototype.name = \"张三\";</span></div><div class=\"line\">Person.prototype.sing = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Take me to your heart!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"comment\">//console.log(p.name);  //张三</span></div><div class=\"line\">p.sing();  <span class=\"comment\">//可以</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//p.name = \"李四\";</span></div><div class=\"line\"><span class=\"comment\">//console.log(p.name);  //李四</span></div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"><span class=\"comment\">//console.log(p1.name); //张三</span></div><div class=\"line\">p1.sing();<span class=\"comment\">//不可以</span></div><div class=\"line\"></div><div class=\"line\">p.sing();<span class=\"comment\">//不可以  or  可以</span></div></pre></td></tr></table></figure>\n<h2 id=\"原型的访问方式\"><a href=\"#原型的访问方式\" class=\"headerlink\" title=\"原型的访问方式\"></a>原型的访问方式</h2><ol>\n<li>通过 <code>构造函数.prototype</code> 去访问</li>\n<li>通过 <code>对象.__proto__</code> 去访问<br> 注：<strong>proto</strong>这个属性 是非标准的！！！ 不推荐在开发过程中使用，只用于调试代码</li>\n</ol>\n<ul>\n<li><strong>.proto</strong>用法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span> : <span class=\"string\">\"迈克学摇滚\"</span>,</div><div class=\"line\">    <span class=\"attr\">song</span> : <span class=\"string\">\"Take me to your heart\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p.__proto__.count = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p.__proto__);</div></pre></td></tr></table></figure>"},{"title":"工具使用篇之Markdown","date":"2016-11-27T02:35:12.000Z","_content":"\n## Markdown 介绍\n\n- *Markdown* 是一个 **轻量级  高效率** 的标记语言\n- 轻量级标记语言，2004 年被 `John Gruber` 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 HTML 文档格式， 很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。\n\n<!--more-->\n\n## Markdown 使用场景\n\n- 学习笔记\n- 演讲稿\n- 写书（侧重于技术相关的 内容非常适合）\n- 个人笔记\n- 文章博客\n- 教学讲义\n- 说明文档\n- 电子邮件\n\n\n## Markdown 实时预览编辑器\n\n- dillinger\n- 马克飞象\n- 简书\n- MarkdownPad\n- Sublime Text\n    * 配合 Markdown Preview 插件\n- Webstorm\n    * 配合插件\n- gitbook\n\n实时预览工具只是为了达到所见即所得的效果而已， 适合初学者学习 Markdown ， 我们真正在进行写作的时候，其实是不需要实时预览的， 因为 Markdown 标记语言本身已经足够清晰了。\n\n## Markdown 安装和配置编写预览环境\n\n### Webstorm\n\n\n\n### Visual Studio Code\n\n\n\n### Sublime\n\n- MarkdownEditing 主题、自动补齐等功能\n- MarkdownPreview 在浏览器预览\n- MarkdownTOC 自动生成导航\n- Table Editor 自动表格编辑\n- [packagecontrol](https://packagecontrol.io/) Sublime 的插件生态系统网站\n\n只要有写作的地方，都可以使用 Markdown 来书写。\n\n## Markdown 标题书写\n\n```Markdown\n# 一级标题 \n## 二级标题 \n### 三级标题\n...\n###### 六级标签\n一共六级标题\n```\n\n## Markdown 列表书写语法\n\n### 无序列表\n\n- 一级列表建议使用 `-`\n    + 二级列表建议使用 `+`\n        * 三级列表建议使用 `*`\n\n```Markdown\n- 一级标题\n    + 二级标题\n        * 三级列表\n```\n\n### 有序列表\n\n1. 有序列表直接使用序列加一个点开头, 然后加一个\n2. 有序列表嵌套无序列表\n    - 有序列表中嵌套无需列表\n        + 有序列表中嵌套无需列表\n\n```Markdown\n2. 有序列表嵌套无序列表\n    - 有序列表嵌套无序列表\n        + 有序列表嵌套无序列表\n```\n\n3. 有序列表嵌套有序列表\n    1. 有序列表嵌套有序列表\n        1. 有序列表嵌套有序列表\n\n```Markdown\n3. 有序列表嵌套有序列表\n    1. 有序列表嵌套有序列表\n        1. 有序列表嵌套有序列表\n```\n\n#### 使用建议\n\n无论是有序列表还是无序列表,如果就写一级列表不嵌套就可以紧凑写到一起即可,如果嵌套多级列表最好在列表项之间只用空行隔开\n\n## Markdown 图片链接书写语法\n\n### Markdown 图片书写语法\n\n![]()\n\n### Markdown 链接书写语法","source":"_posts/use-tools-part1-markdown.md","raw":"---\ntitle: 工具使用篇之Markdown\ndate: 2016-11-27 10:35:12\ntags: \n    - Markdown语法规范\n    - tools\ncategories: Markdown\n---\n\n## Markdown 介绍\n\n- *Markdown* 是一个 **轻量级  高效率** 的标记语言\n- 轻量级标记语言，2004 年被 `John Gruber` 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 HTML 文档格式， 很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。\n\n<!--more-->\n\n## Markdown 使用场景\n\n- 学习笔记\n- 演讲稿\n- 写书（侧重于技术相关的 内容非常适合）\n- 个人笔记\n- 文章博客\n- 教学讲义\n- 说明文档\n- 电子邮件\n\n\n## Markdown 实时预览编辑器\n\n- dillinger\n- 马克飞象\n- 简书\n- MarkdownPad\n- Sublime Text\n    * 配合 Markdown Preview 插件\n- Webstorm\n    * 配合插件\n- gitbook\n\n实时预览工具只是为了达到所见即所得的效果而已， 适合初学者学习 Markdown ， 我们真正在进行写作的时候，其实是不需要实时预览的， 因为 Markdown 标记语言本身已经足够清晰了。\n\n## Markdown 安装和配置编写预览环境\n\n### Webstorm\n\n\n\n### Visual Studio Code\n\n\n\n### Sublime\n\n- MarkdownEditing 主题、自动补齐等功能\n- MarkdownPreview 在浏览器预览\n- MarkdownTOC 自动生成导航\n- Table Editor 自动表格编辑\n- [packagecontrol](https://packagecontrol.io/) Sublime 的插件生态系统网站\n\n只要有写作的地方，都可以使用 Markdown 来书写。\n\n## Markdown 标题书写\n\n```Markdown\n# 一级标题 \n## 二级标题 \n### 三级标题\n...\n###### 六级标签\n一共六级标题\n```\n\n## Markdown 列表书写语法\n\n### 无序列表\n\n- 一级列表建议使用 `-`\n    + 二级列表建议使用 `+`\n        * 三级列表建议使用 `*`\n\n```Markdown\n- 一级标题\n    + 二级标题\n        * 三级列表\n```\n\n### 有序列表\n\n1. 有序列表直接使用序列加一个点开头, 然后加一个\n2. 有序列表嵌套无序列表\n    - 有序列表中嵌套无需列表\n        + 有序列表中嵌套无需列表\n\n```Markdown\n2. 有序列表嵌套无序列表\n    - 有序列表嵌套无序列表\n        + 有序列表嵌套无序列表\n```\n\n3. 有序列表嵌套有序列表\n    1. 有序列表嵌套有序列表\n        1. 有序列表嵌套有序列表\n\n```Markdown\n3. 有序列表嵌套有序列表\n    1. 有序列表嵌套有序列表\n        1. 有序列表嵌套有序列表\n```\n\n#### 使用建议\n\n无论是有序列表还是无序列表,如果就写一级列表不嵌套就可以紧凑写到一起即可,如果嵌套多级列表最好在列表项之间只用空行隔开\n\n## Markdown 图片链接书写语法\n\n### Markdown 图片书写语法\n\n![]()\n\n### Markdown 链接书写语法","slug":"use-tools-part1-markdown","published":1,"updated":"2016-11-27T08:02:51.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprkn001s9wg7v3o4jfhj","content":"<h2 id=\"Markdown-介绍\"><a href=\"#Markdown-介绍\" class=\"headerlink\" title=\"Markdown 介绍\"></a>Markdown 介绍</h2><ul>\n<li><em>Markdown</em> 是一个 <strong>轻量级  高效率</strong> 的标记语言</li>\n<li>轻量级标记语言，2004 年被 <code>John Gruber</code> 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 HTML 文档格式， 很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Markdown-使用场景\"><a href=\"#Markdown-使用场景\" class=\"headerlink\" title=\"Markdown 使用场景\"></a>Markdown 使用场景</h2><ul>\n<li>学习笔记</li>\n<li>演讲稿</li>\n<li>写书（侧重于技术相关的 内容非常适合）</li>\n<li>个人笔记</li>\n<li>文章博客</li>\n<li>教学讲义</li>\n<li>说明文档</li>\n<li>电子邮件</li>\n</ul>\n<h2 id=\"Markdown-实时预览编辑器\"><a href=\"#Markdown-实时预览编辑器\" class=\"headerlink\" title=\"Markdown 实时预览编辑器\"></a>Markdown 实时预览编辑器</h2><ul>\n<li>dillinger</li>\n<li>马克飞象</li>\n<li>简书</li>\n<li>MarkdownPad</li>\n<li>Sublime Text<ul>\n<li>配合 Markdown Preview 插件</li>\n</ul>\n</li>\n<li>Webstorm<ul>\n<li>配合插件</li>\n</ul>\n</li>\n<li>gitbook</li>\n</ul>\n<p>实时预览工具只是为了达到所见即所得的效果而已， 适合初学者学习 Markdown ， 我们真正在进行写作的时候，其实是不需要实时预览的， 因为 Markdown 标记语言本身已经足够清晰了。</p>\n<h2 id=\"Markdown-安装和配置编写预览环境\"><a href=\"#Markdown-安装和配置编写预览环境\" class=\"headerlink\" title=\"Markdown 安装和配置编写预览环境\"></a>Markdown 安装和配置编写预览环境</h2><h3 id=\"Webstorm\"><a href=\"#Webstorm\" class=\"headerlink\" title=\"Webstorm\"></a>Webstorm</h3><h3 id=\"Visual-Studio-Code\"><a href=\"#Visual-Studio-Code\" class=\"headerlink\" title=\"Visual Studio Code\"></a>Visual Studio Code</h3><h3 id=\"Sublime\"><a href=\"#Sublime\" class=\"headerlink\" title=\"Sublime\"></a>Sublime</h3><ul>\n<li>MarkdownEditing 主题、自动补齐等功能</li>\n<li>MarkdownPreview 在浏览器预览</li>\n<li>MarkdownTOC 自动生成导航</li>\n<li>Table Editor 自动表格编辑</li>\n<li><a href=\"https://packagecontrol.io/\" target=\"_blank\" rel=\"external\">packagecontrol</a> Sublime 的插件生态系统网站</li>\n</ul>\n<p>只要有写作的地方，都可以使用 Markdown 来书写。</p>\n<h2 id=\"Markdown-标题书写\"><a href=\"#Markdown-标题书写\" class=\"headerlink\" title=\"Markdown 标题书写\"></a>Markdown 标题书写</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># 一级标题 </span></div><div class=\"line\"><span class=\"section\">## 二级标题 </span></div><div class=\"line\"><span class=\"section\">### 三级标题</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"section\">###### 六级标签</span></div><div class=\"line\">一共六级标题</div></pre></td></tr></table></figure>\n<h2 id=\"Markdown-列表书写语法\"><a href=\"#Markdown-列表书写语法\" class=\"headerlink\" title=\"Markdown 列表书写语法\"></a>Markdown 列表书写语法</h2><h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><ul>\n<li>一级列表建议使用 <code>-</code><ul>\n<li>二级列表建议使用 <code>+</code><ul>\n<li>三级列表建议使用 <code>*</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">- </span>一级标题</div><div class=\"line\"><span class=\"code\">    + 二级标题</span></div><div class=\"line\"><span class=\"code\">        * 三级列表</span></div></pre></td></tr></table></figure>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><ol>\n<li>有序列表直接使用序列加一个点开头, 然后加一个</li>\n<li>有序列表嵌套无序列表<ul>\n<li>有序列表中嵌套无需列表<ul>\n<li>有序列表中嵌套无需列表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">2. </span>有序列表嵌套无序列表</div><div class=\"line\"><span class=\"code\">    - 有序列表嵌套无序列表</span></div><div class=\"line\"><span class=\"code\">        + 有序列表嵌套无序列表</span></div></pre></td></tr></table></figure>\n<ol>\n<li>有序列表嵌套有序列表<ol>\n<li>有序列表嵌套有序列表<ol>\n<li>有序列表嵌套有序列表</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">3. </span>有序列表嵌套有序列表</div><div class=\"line\"><span class=\"code\">    1. 有序列表嵌套有序列表</span></div><div class=\"line\"><span class=\"code\">        1. 有序列表嵌套有序列表</span></div></pre></td></tr></table></figure>\n<h4 id=\"使用建议\"><a href=\"#使用建议\" class=\"headerlink\" title=\"使用建议\"></a>使用建议</h4><p>无论是有序列表还是无序列表,如果就写一级列表不嵌套就可以紧凑写到一起即可,如果嵌套多级列表最好在列表项之间只用空行隔开</p>\n<h2 id=\"Markdown-图片链接书写语法\"><a href=\"#Markdown-图片链接书写语法\" class=\"headerlink\" title=\"Markdown 图片链接书写语法\"></a>Markdown 图片链接书写语法</h2><h3 id=\"Markdown-图片书写语法\"><a href=\"#Markdown-图片书写语法\" class=\"headerlink\" title=\"Markdown 图片书写语法\"></a>Markdown 图片书写语法</h3><p><img src=\"\" alt=\"\"></p>\n<h3 id=\"Markdown-链接书写语法\"><a href=\"#Markdown-链接书写语法\" class=\"headerlink\" title=\"Markdown 链接书写语法\"></a>Markdown 链接书写语法</h3>","excerpt":"<h2 id=\"Markdown-介绍\"><a href=\"#Markdown-介绍\" class=\"headerlink\" title=\"Markdown 介绍\"></a>Markdown 介绍</h2><ul>\n<li><em>Markdown</em> 是一个 <strong>轻量级  高效率</strong> 的标记语言</li>\n<li>轻量级标记语言，2004 年被 <code>John Gruber</code> 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 HTML 文档格式， 很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。</li>\n</ul>","more":"<h2 id=\"Markdown-使用场景\"><a href=\"#Markdown-使用场景\" class=\"headerlink\" title=\"Markdown 使用场景\"></a>Markdown 使用场景</h2><ul>\n<li>学习笔记</li>\n<li>演讲稿</li>\n<li>写书（侧重于技术相关的 内容非常适合）</li>\n<li>个人笔记</li>\n<li>文章博客</li>\n<li>教学讲义</li>\n<li>说明文档</li>\n<li>电子邮件</li>\n</ul>\n<h2 id=\"Markdown-实时预览编辑器\"><a href=\"#Markdown-实时预览编辑器\" class=\"headerlink\" title=\"Markdown 实时预览编辑器\"></a>Markdown 实时预览编辑器</h2><ul>\n<li>dillinger</li>\n<li>马克飞象</li>\n<li>简书</li>\n<li>MarkdownPad</li>\n<li>Sublime Text<ul>\n<li>配合 Markdown Preview 插件</li>\n</ul>\n</li>\n<li>Webstorm<ul>\n<li>配合插件</li>\n</ul>\n</li>\n<li>gitbook</li>\n</ul>\n<p>实时预览工具只是为了达到所见即所得的效果而已， 适合初学者学习 Markdown ， 我们真正在进行写作的时候，其实是不需要实时预览的， 因为 Markdown 标记语言本身已经足够清晰了。</p>\n<h2 id=\"Markdown-安装和配置编写预览环境\"><a href=\"#Markdown-安装和配置编写预览环境\" class=\"headerlink\" title=\"Markdown 安装和配置编写预览环境\"></a>Markdown 安装和配置编写预览环境</h2><h3 id=\"Webstorm\"><a href=\"#Webstorm\" class=\"headerlink\" title=\"Webstorm\"></a>Webstorm</h3><h3 id=\"Visual-Studio-Code\"><a href=\"#Visual-Studio-Code\" class=\"headerlink\" title=\"Visual Studio Code\"></a>Visual Studio Code</h3><h3 id=\"Sublime\"><a href=\"#Sublime\" class=\"headerlink\" title=\"Sublime\"></a>Sublime</h3><ul>\n<li>MarkdownEditing 主题、自动补齐等功能</li>\n<li>MarkdownPreview 在浏览器预览</li>\n<li>MarkdownTOC 自动生成导航</li>\n<li>Table Editor 自动表格编辑</li>\n<li><a href=\"https://packagecontrol.io/\">packagecontrol</a> Sublime 的插件生态系统网站</li>\n</ul>\n<p>只要有写作的地方，都可以使用 Markdown 来书写。</p>\n<h2 id=\"Markdown-标题书写\"><a href=\"#Markdown-标题书写\" class=\"headerlink\" title=\"Markdown 标题书写\"></a>Markdown 标题书写</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># 一级标题 </span></div><div class=\"line\"><span class=\"section\">## 二级标题 </span></div><div class=\"line\"><span class=\"section\">### 三级标题</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"section\">###### 六级标签</span></div><div class=\"line\">一共六级标题</div></pre></td></tr></table></figure>\n<h2 id=\"Markdown-列表书写语法\"><a href=\"#Markdown-列表书写语法\" class=\"headerlink\" title=\"Markdown 列表书写语法\"></a>Markdown 列表书写语法</h2><h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><ul>\n<li>一级列表建议使用 <code>-</code><ul>\n<li>二级列表建议使用 <code>+</code><ul>\n<li>三级列表建议使用 <code>*</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">- </span>一级标题</div><div class=\"line\"><span class=\"code\">    + 二级标题</span></div><div class=\"line\"><span class=\"code\">        * 三级列表</span></div></pre></td></tr></table></figure>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><ol>\n<li>有序列表直接使用序列加一个点开头, 然后加一个</li>\n<li>有序列表嵌套无序列表<ul>\n<li>有序列表中嵌套无需列表<ul>\n<li>有序列表中嵌套无需列表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">2. </span>有序列表嵌套无序列表</div><div class=\"line\"><span class=\"code\">    - 有序列表嵌套无序列表</span></div><div class=\"line\"><span class=\"code\">        + 有序列表嵌套无序列表</span></div></pre></td></tr></table></figure>\n<ol>\n<li>有序列表嵌套有序列表<ol>\n<li>有序列表嵌套有序列表<ol>\n<li>有序列表嵌套有序列表</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bullet\">3. </span>有序列表嵌套有序列表</div><div class=\"line\"><span class=\"code\">    1. 有序列表嵌套有序列表</span></div><div class=\"line\"><span class=\"code\">        1. 有序列表嵌套有序列表</span></div></pre></td></tr></table></figure>\n<h4 id=\"使用建议\"><a href=\"#使用建议\" class=\"headerlink\" title=\"使用建议\"></a>使用建议</h4><p>无论是有序列表还是无序列表,如果就写一级列表不嵌套就可以紧凑写到一起即可,如果嵌套多级列表最好在列表项之间只用空行隔开</p>\n<h2 id=\"Markdown-图片链接书写语法\"><a href=\"#Markdown-图片链接书写语法\" class=\"headerlink\" title=\"Markdown 图片链接书写语法\"></a>Markdown 图片链接书写语法</h2><h3 id=\"Markdown-图片书写语法\"><a href=\"#Markdown-图片书写语法\" class=\"headerlink\" title=\"Markdown 图片书写语法\"></a>Markdown 图片书写语法</h3><p><img src=\"\" alt=\"\"></p>\n<h3 id=\"Markdown-链接书写语法\"><a href=\"#Markdown-链接书写语法\" class=\"headerlink\" title=\"Markdown 链接书写语法\"></a>Markdown 链接书写语法</h3>"},{"title":"JavaScript高级篇总结","date":"2016-11-12T11:04:31.000Z","_content":"javascript高级与面向对象笔记总结！！\n\n<!-- more -->\n\n## 递归\n\n递归就是函数自己直接或者间接的调用自己\n\n### 递归的两个要素\n\n* 自己调用自己\n* 递归结束条件\n\n### 化归思想\n\n由难化易，由繁化简，的思想就是化归思想\n\n### 前n项和\n\n```js\nfn(n) = fn(n-1) + n\n```\n\n```js\nfunction sum(n){\n    if(n==1){\n        return 1;\n    }\n    return sum(n - 1) + n;\n}\n```\n\n### 阶乘\n\n```js\nfn(n) = fn(n-1) * n\n```\n\n```js\nfunction sum(n){\n    if(n==1){\n        return 1;\n    }\n    return sum(n - 1) * n;\n}\n```\n\n### 斐波那契数列\n\n```js\nfn(n) = fn(n-1) + fn(n-2)\n```\n```js\nfunction fib(n){\n    if( n <= 2){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n```\n\n### 递归获取指定元素的后代元素\n\n```js\nfunction getChildren(ele){\n    var result = [];\n    var children = ele.children;\n    for(var i = 0; i < children.length; i++){\n        result.push(children[i]);\n        var temp = getChildren(children[i]);\n        result = result.concat(temp);\n    }\n    return result;\n}\n```\n\n## 闭包\n\n一个封闭的包裹结构\n\n一个可以访问独立数据的函数\n\n```js\nfunction outer(){\n    var data = \"\";\n    return function(){\n        //可以操作data数据\n    }\n}\n```\n\n获取和设置数据\n\n```js\nfunction outer(){\n    var data = \"\";\n    return {\n        getData:function(){\n            return data;\n        },\n        setDate:function(value){\n            data = value;\n        }\n    }\n}\n```\n\n### for循环注册点击事件的问题\n\n```js\n\nvar divs = document.getElementsByTagName(\"div\");\nfor(var i = 0; i < divs.length; i++){\n    var div = divs[i];\n    function outer(){\n        var j = i;\n        return function(){\n            console.log(j);\n        }\n    }\n    div.onclick = outer();\n}\n\n```\n\n### for循环中使用setTimeout\n\n```js\nfor( var i = 0; i < 10; i++){\n    setTimeout((function(){\n        var j = i;\n        return function(){\n            console.log(j);\n        }\n    }()),0)\n}\n```\n\n## 缓存\n\n* 硬件缓存\n* 浏览器缓存\n* `CDN`---`Content Delivery Network`  内容分发网络\n\n### 使用缓存解决递归实现的斐波那契数列的性能问题\n\n```js\nfunction createFib(){\n    var arr = [];\n    return function(n){\n        var num = arr[n];\n        if(!num){\n            if(n <= 2){\n                num = 1;\n            }else{\n                num = arguments.callee(n - 1) + arguments.callee(n - 2);\n            }\n            arr[n] = num;\n        }\n        return num;\n    }\n}\n```\n\n### jQuery缓存实现分析\n\n```js\nfunction createCache(){\n    var cache = {};\n    var arr = [];\n    return function(key, value){\n        if(value){\n            cache[key] = value;\n            arr.push(key);\n            if(arr.length > 50){\n                delete cache[arr.shift()];\n            }\n        }else{\n            return cache[key];\n        }\n    }\n}\n```\n\n## 函数的四种调用模式\n\n### 函数调用模式\n\n形式: 函数名();\n`this: window`\n\n### 方法调用模式\n\n形式: 对象名.方法名();\nthis: 调用该方法的对象\n\n### 构造函数调用模式\n\n形式: `new` .构造函数名()\n`this: new`创建出来的对象\n\n#### 工厂模式\n\n```js\nfunction createObject(){\n    var o = new Object();\n    o.xxx = \"xxx\";\n    o.yyy = \"yy\";\n    return o;\n}\n\nvar p  = createObject();\n```\n\n#### 寄生模式\n\n```js\nfunction CObject(){\n    var o = new Object();\n    o.xxx = \"xxx\";\n    o.yyy = \"yy\";\n    return o;\n}\n\nvar p = new CObject();\n```\n\n### 上下文调用模式\n\n#### call\n\n```js\n函数名.call(对象,参数1,参数2,参数3...)\n```\n1. 调用该函数\n2. 将函数内部的`this`赋值为`call`的第一个参数\n3. 将第一个参数之后的所有参数，当做实参传递给函数\n\n#### apply\n\n```js\n函数名.apply(对象,数组)\n```\n1. 调用该函数\n2. 将函数内部的`this`赋值为`apply`的第一个参数\n3. 将第二个参数的数组，依次拆解开，将每一个元素挨个传递给函数做为实参\n\n##### 伪数组转换成数组\n\n```js\nvar arrFake = {\n    0:1,\n    1:2,\n    2:3,\n    length:3\n}\n\nvar arrReal = [];\n\narrReal.push.apply(arrReal, arrFake);\n//arrReal.push(arrFake[0] , arrFake[1], arrFake[2])   相当于这句代码\n\n```\n\n##### 求数组最大值\n\n```js\nvar arr = [1,23,4,4,3,3,34,3,2];\nvar maxNum = Math.max.apply(null, arr);\n```\n\n#### 借用构造函数继承\n\n```js\nfunction Father(){\n    this.name = \"\";\n    this.money = 99999999999999;\n}\n\nfunction Son(){\n    Father.call(this);\n}\n\nvar s = new Son();\n```\n\n## 沙箱模式\n\n一个隔离的安全的环境\n\n```js\n(function(w){\n    //需要隔离的代码\n    //最顶上写 变量函数之类的申明\n    //逻辑代码\n    //如果需要，使用window对象向外界暴露接口\n})(window)\n```\n\n为什么要将 `window` 作为参数传递\n1. 外面无法访问里面，里面也不要去访问外面的东西\n2. 在代码压缩的时候，内置的对象名称无法被压缩，如果使用自己的变量，是可以压缩的\n\n## forEach 和　map\n\n```js\nvar arr = [1, 2, 3, 4, 5 ,6];\n//currentEle 当前正在遍历的元素,\n//currentIndex 当前遍历的元素的索引,\n//currentArray 当前正在被遍历的数组\narr.forEach(function(currentEle, currentIndex, currentArray){\n    currentArray[currentIndex] = currentEle * 2;\n})\n\n//currentEle 当前正在遍历的元素,\n//currentIndex 当前遍历的元素的索引,\n//currentArray 当前正在被遍历的数组\n//map如果回调函数内有返回值，会将所有调用的返回值重新组合成一个数组，作为map方法的返回值\narr.map(function(currentEle, currentIndex, currentArray){\n    return currentEle * 2;\n})\n```\n\n## 严格模式\n\n```js\n\"use strict\"\n```\n* 变量不使用`var`声明会报错\n* 不能删除不允许删除的属性\n* 对象的属性不可以重名\n* 函数的形参不可以重名\n* 不允许使用八进制数据\n\n## 事件兼容性处理\n\n```js\nfunction createRegister(){\n    if(window.addEventListener){\n        return function(target, type, handler){\n            target.addEventListener(type, handler);\n        }\n    }else if(window.attachEvent){\n        return function(target, type, handler){\n            target.attachEvent(\"on\" + type, function(){\n                handler.call(target, window.event);\n            })\n        }\n    }else{\n        return function(target, type, handler){\n            target[\"on\"+type] = handler;\n        }\n    }\n}\n```","source":"_posts/javascript-summary.md","raw":"---\ntitle: JavaScript高级篇总结\ndate: 2016-11-12 19:04:31\ntags: javascript\ncategories: javascript\n---\njavascript高级与面向对象笔记总结！！\n\n<!-- more -->\n\n## 递归\n\n递归就是函数自己直接或者间接的调用自己\n\n### 递归的两个要素\n\n* 自己调用自己\n* 递归结束条件\n\n### 化归思想\n\n由难化易，由繁化简，的思想就是化归思想\n\n### 前n项和\n\n```js\nfn(n) = fn(n-1) + n\n```\n\n```js\nfunction sum(n){\n    if(n==1){\n        return 1;\n    }\n    return sum(n - 1) + n;\n}\n```\n\n### 阶乘\n\n```js\nfn(n) = fn(n-1) * n\n```\n\n```js\nfunction sum(n){\n    if(n==1){\n        return 1;\n    }\n    return sum(n - 1) * n;\n}\n```\n\n### 斐波那契数列\n\n```js\nfn(n) = fn(n-1) + fn(n-2)\n```\n```js\nfunction fib(n){\n    if( n <= 2){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n```\n\n### 递归获取指定元素的后代元素\n\n```js\nfunction getChildren(ele){\n    var result = [];\n    var children = ele.children;\n    for(var i = 0; i < children.length; i++){\n        result.push(children[i]);\n        var temp = getChildren(children[i]);\n        result = result.concat(temp);\n    }\n    return result;\n}\n```\n\n## 闭包\n\n一个封闭的包裹结构\n\n一个可以访问独立数据的函数\n\n```js\nfunction outer(){\n    var data = \"\";\n    return function(){\n        //可以操作data数据\n    }\n}\n```\n\n获取和设置数据\n\n```js\nfunction outer(){\n    var data = \"\";\n    return {\n        getData:function(){\n            return data;\n        },\n        setDate:function(value){\n            data = value;\n        }\n    }\n}\n```\n\n### for循环注册点击事件的问题\n\n```js\n\nvar divs = document.getElementsByTagName(\"div\");\nfor(var i = 0; i < divs.length; i++){\n    var div = divs[i];\n    function outer(){\n        var j = i;\n        return function(){\n            console.log(j);\n        }\n    }\n    div.onclick = outer();\n}\n\n```\n\n### for循环中使用setTimeout\n\n```js\nfor( var i = 0; i < 10; i++){\n    setTimeout((function(){\n        var j = i;\n        return function(){\n            console.log(j);\n        }\n    }()),0)\n}\n```\n\n## 缓存\n\n* 硬件缓存\n* 浏览器缓存\n* `CDN`---`Content Delivery Network`  内容分发网络\n\n### 使用缓存解决递归实现的斐波那契数列的性能问题\n\n```js\nfunction createFib(){\n    var arr = [];\n    return function(n){\n        var num = arr[n];\n        if(!num){\n            if(n <= 2){\n                num = 1;\n            }else{\n                num = arguments.callee(n - 1) + arguments.callee(n - 2);\n            }\n            arr[n] = num;\n        }\n        return num;\n    }\n}\n```\n\n### jQuery缓存实现分析\n\n```js\nfunction createCache(){\n    var cache = {};\n    var arr = [];\n    return function(key, value){\n        if(value){\n            cache[key] = value;\n            arr.push(key);\n            if(arr.length > 50){\n                delete cache[arr.shift()];\n            }\n        }else{\n            return cache[key];\n        }\n    }\n}\n```\n\n## 函数的四种调用模式\n\n### 函数调用模式\n\n形式: 函数名();\n`this: window`\n\n### 方法调用模式\n\n形式: 对象名.方法名();\nthis: 调用该方法的对象\n\n### 构造函数调用模式\n\n形式: `new` .构造函数名()\n`this: new`创建出来的对象\n\n#### 工厂模式\n\n```js\nfunction createObject(){\n    var o = new Object();\n    o.xxx = \"xxx\";\n    o.yyy = \"yy\";\n    return o;\n}\n\nvar p  = createObject();\n```\n\n#### 寄生模式\n\n```js\nfunction CObject(){\n    var o = new Object();\n    o.xxx = \"xxx\";\n    o.yyy = \"yy\";\n    return o;\n}\n\nvar p = new CObject();\n```\n\n### 上下文调用模式\n\n#### call\n\n```js\n函数名.call(对象,参数1,参数2,参数3...)\n```\n1. 调用该函数\n2. 将函数内部的`this`赋值为`call`的第一个参数\n3. 将第一个参数之后的所有参数，当做实参传递给函数\n\n#### apply\n\n```js\n函数名.apply(对象,数组)\n```\n1. 调用该函数\n2. 将函数内部的`this`赋值为`apply`的第一个参数\n3. 将第二个参数的数组，依次拆解开，将每一个元素挨个传递给函数做为实参\n\n##### 伪数组转换成数组\n\n```js\nvar arrFake = {\n    0:1,\n    1:2,\n    2:3,\n    length:3\n}\n\nvar arrReal = [];\n\narrReal.push.apply(arrReal, arrFake);\n//arrReal.push(arrFake[0] , arrFake[1], arrFake[2])   相当于这句代码\n\n```\n\n##### 求数组最大值\n\n```js\nvar arr = [1,23,4,4,3,3,34,3,2];\nvar maxNum = Math.max.apply(null, arr);\n```\n\n#### 借用构造函数继承\n\n```js\nfunction Father(){\n    this.name = \"\";\n    this.money = 99999999999999;\n}\n\nfunction Son(){\n    Father.call(this);\n}\n\nvar s = new Son();\n```\n\n## 沙箱模式\n\n一个隔离的安全的环境\n\n```js\n(function(w){\n    //需要隔离的代码\n    //最顶上写 变量函数之类的申明\n    //逻辑代码\n    //如果需要，使用window对象向外界暴露接口\n})(window)\n```\n\n为什么要将 `window` 作为参数传递\n1. 外面无法访问里面，里面也不要去访问外面的东西\n2. 在代码压缩的时候，内置的对象名称无法被压缩，如果使用自己的变量，是可以压缩的\n\n## forEach 和　map\n\n```js\nvar arr = [1, 2, 3, 4, 5 ,6];\n//currentEle 当前正在遍历的元素,\n//currentIndex 当前遍历的元素的索引,\n//currentArray 当前正在被遍历的数组\narr.forEach(function(currentEle, currentIndex, currentArray){\n    currentArray[currentIndex] = currentEle * 2;\n})\n\n//currentEle 当前正在遍历的元素,\n//currentIndex 当前遍历的元素的索引,\n//currentArray 当前正在被遍历的数组\n//map如果回调函数内有返回值，会将所有调用的返回值重新组合成一个数组，作为map方法的返回值\narr.map(function(currentEle, currentIndex, currentArray){\n    return currentEle * 2;\n})\n```\n\n## 严格模式\n\n```js\n\"use strict\"\n```\n* 变量不使用`var`声明会报错\n* 不能删除不允许删除的属性\n* 对象的属性不可以重名\n* 函数的形参不可以重名\n* 不允许使用八进制数据\n\n## 事件兼容性处理\n\n```js\nfunction createRegister(){\n    if(window.addEventListener){\n        return function(target, type, handler){\n            target.addEventListener(type, handler);\n        }\n    }else if(window.attachEvent){\n        return function(target, type, handler){\n            target.attachEvent(\"on\" + type, function(){\n                handler.call(target, window.event);\n            })\n        }\n    }else{\n        return function(target, type, handler){\n            target[\"on\"+type] = handler;\n        }\n    }\n}\n```","slug":"javascript-summary","published":1,"updated":"2016-11-24T01:32:28.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprkp001v9wg7fs5k8l4j","content":"<p>javascript高级与面向对象笔记总结！！</p>\n<a id=\"more\"></a>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>递归就是函数自己直接或者间接的调用自己</p>\n<h3 id=\"递归的两个要素\"><a href=\"#递归的两个要素\" class=\"headerlink\" title=\"递归的两个要素\"></a>递归的两个要素</h3><ul>\n<li>自己调用自己</li>\n<li>递归结束条件</li>\n</ul>\n<h3 id=\"化归思想\"><a href=\"#化归思想\" class=\"headerlink\" title=\"化归思想\"></a>化归思想</h3><p>由难化易，由繁化简，的思想就是化归思想</p>\n<h3 id=\"前n项和\"><a href=\"#前n项和\" class=\"headerlink\" title=\"前n项和\"></a>前n项和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fn(n) = fn(n<span class=\"number\">-1</span>) + n</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum(n - <span class=\"number\">1</span>) + n;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"阶乘\"><a href=\"#阶乘\" class=\"headerlink\" title=\"阶乘\"></a>阶乘</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fn(n) = fn(n<span class=\"number\">-1</span>) * n</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum(n - <span class=\"number\">1</span>) * n;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fn(n) = fn(n<span class=\"number\">-1</span>) + fn(n<span class=\"number\">-2</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>) + fib(n<span class=\"number\">-2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"递归获取指定元素的后代元素\"><a href=\"#递归获取指定元素的后代元素\" class=\"headerlink\" title=\"递归获取指定元素的后代元素\"></a>递归获取指定元素的后代元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">ele</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> children = ele.children;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; children.length; i++)&#123;</div><div class=\"line\">        result.push(children[i]);</div><div class=\"line\">        <span class=\"keyword\">var</span> temp = getChildren(children[i]);</div><div class=\"line\">        result = result.concat(temp);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>一个封闭的包裹结构</p>\n<p>一个可以访问独立数据的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//可以操作data数据</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>获取和设置数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">getData</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> data;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">setDate</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">            data = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"for循环注册点击事件的问题\"><a href=\"#for循环注册点击事件的问题\" class=\"headerlink\" title=\"for循环注册点击事件的问题\"></a>for循环注册点击事件的问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; divs.length; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> div = divs[i];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> j = i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(j);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    div.onclick = outer();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"for循环中使用setTimeout\"><a href=\"#for循环中使用setTimeout\" class=\"headerlink\" title=\"for循环中使用setTimeout\"></a>for循环中使用setTimeout</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">    setTimeout((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> j = i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(j);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;()),<span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><ul>\n<li>硬件缓存</li>\n<li>浏览器缓存</li>\n<li><code>CDN</code>—<code>Content Delivery Network</code>  内容分发网络</li>\n</ul>\n<h3 id=\"使用缓存解决递归实现的斐波那契数列的性能问题\"><a href=\"#使用缓存解决递归实现的斐波那契数列的性能问题\" class=\"headerlink\" title=\"使用缓存解决递归实现的斐波那契数列的性能问题\"></a>使用缓存解决递归实现的斐波那契数列的性能问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFib</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> num = arr[n];</div><div class=\"line\">        <span class=\"keyword\">if</span>(!num)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">                num = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                num = <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">1</span>) + <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            arr[n] = num;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> num;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"jQuery缓存实现分析\"><a href=\"#jQuery缓存实现分析\" class=\"headerlink\" title=\"jQuery缓存实现分析\"></a>jQuery缓存实现分析</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(value)&#123;</div><div class=\"line\">            cache[key] = value;</div><div class=\"line\">            arr.push(key);</div><div class=\"line\">            <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">50</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">delete</span> cache[arr.shift()];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cache[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数的四种调用模式\"><a href=\"#函数的四种调用模式\" class=\"headerlink\" title=\"函数的四种调用模式\"></a>函数的四种调用模式</h2><h3 id=\"函数调用模式\"><a href=\"#函数调用模式\" class=\"headerlink\" title=\"函数调用模式\"></a>函数调用模式</h3><p>形式: 函数名();<br><code>this: window</code></p>\n<h3 id=\"方法调用模式\"><a href=\"#方法调用模式\" class=\"headerlink\" title=\"方法调用模式\"></a>方法调用模式</h3><p>形式: 对象名.方法名();<br>this: 调用该方法的对象</p>\n<h3 id=\"构造函数调用模式\"><a href=\"#构造函数调用模式\" class=\"headerlink\" title=\"构造函数调用模式\"></a>构造函数调用模式</h3><p>形式: <code>new</code> .构造函数名()<br><code>this: new</code>创建出来的对象</p>\n<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObject</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.xxx = <span class=\"string\">\"xxx\"</span>;</div><div class=\"line\">    o.yyy = <span class=\"string\">\"yy\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p  = createObject();</div></pre></td></tr></table></figure>\n<h4 id=\"寄生模式\"><a href=\"#寄生模式\" class=\"headerlink\" title=\"寄生模式\"></a>寄生模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CObject</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.xxx = <span class=\"string\">\"xxx\"</span>;</div><div class=\"line\">    o.yyy = <span class=\"string\">\"yy\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> CObject();</div></pre></td></tr></table></figure>\n<h3 id=\"上下文调用模式\"><a href=\"#上下文调用模式\" class=\"headerlink\" title=\"上下文调用模式\"></a>上下文调用模式</h3><h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">函数名.call(对象,参数<span class=\"number\">1</span>,参数<span class=\"number\">2</span>,参数<span class=\"number\">3.</span>..)</div></pre></td></tr></table></figure>\n<ol>\n<li>调用该函数</li>\n<li>将函数内部的<code>this</code>赋值为<code>call</code>的第一个参数</li>\n<li>将第一个参数之后的所有参数，当做实参传递给函数</li>\n</ol>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">函数名.apply(对象,数组)</div></pre></td></tr></table></figure>\n<ol>\n<li>调用该函数</li>\n<li>将函数内部的<code>this</code>赋值为<code>apply</code>的第一个参数</li>\n<li>将第二个参数的数组，依次拆解开，将每一个元素挨个传递给函数做为实参</li>\n</ol>\n<h5 id=\"伪数组转换成数组\"><a href=\"#伪数组转换成数组\" class=\"headerlink\" title=\"伪数组转换成数组\"></a>伪数组转换成数组</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arrFake = &#123;</div><div class=\"line\">    <span class=\"number\">0</span>:<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">1</span>:<span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"number\">2</span>:<span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">length</span>:<span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arrReal = [];</div><div class=\"line\"></div><div class=\"line\">arrReal.push.apply(arrReal, arrFake);</div><div class=\"line\"><span class=\"comment\">//arrReal.push(arrFake[0] , arrFake[1], arrFake[2])   相当于这句代码</span></div></pre></td></tr></table></figure>\n<h5 id=\"求数组最大值\"><a href=\"#求数组最大值\" class=\"headerlink\" title=\"求数组最大值\"></a>求数组最大值</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">23</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">34</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> maxNum = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, arr);</div></pre></td></tr></table></figure>\n<h4 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.money = <span class=\"number\">99999999999999</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    Father.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Son();</div></pre></td></tr></table></figure>\n<h2 id=\"沙箱模式\"><a href=\"#沙箱模式\" class=\"headerlink\" title=\"沙箱模式\"></a>沙箱模式</h2><p>一个隔离的安全的环境</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//需要隔离的代码</span></div><div class=\"line\">    <span class=\"comment\">//最顶上写 变量函数之类的申明</span></div><div class=\"line\">    <span class=\"comment\">//逻辑代码</span></div><div class=\"line\">    <span class=\"comment\">//如果需要，使用window对象向外界暴露接口</span></div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</div></pre></td></tr></table></figure>\n<p>为什么要将 <code>window</code> 作为参数传递</p>\n<ol>\n<li>外面无法访问里面，里面也不要去访问外面的东西</li>\n<li>在代码压缩的时候，内置的对象名称无法被压缩，如果使用自己的变量，是可以压缩的</li>\n</ol>\n<h2 id=\"forEach-和-map\"><a href=\"#forEach-和-map\" class=\"headerlink\" title=\"forEach 和　map\"></a>forEach 和　map</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ,<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"comment\">//currentEle 当前正在遍历的元素,</span></div><div class=\"line\"><span class=\"comment\">//currentIndex 当前遍历的元素的索引,</span></div><div class=\"line\"><span class=\"comment\">//currentArray 当前正在被遍历的数组</span></div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class=\"line\">    currentArray[currentIndex] = currentEle * <span class=\"number\">2</span>;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//currentEle 当前正在遍历的元素,</span></div><div class=\"line\"><span class=\"comment\">//currentIndex 当前遍历的元素的索引,</span></div><div class=\"line\"><span class=\"comment\">//currentArray 当前正在被遍历的数组</span></div><div class=\"line\"><span class=\"comment\">//map如果回调函数内有返回值，会将所有调用的返回值重新组合成一个数组，作为map方法的返回值</span></div><div class=\"line\">arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> currentEle * <span class=\"number\">2</span>;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>变量不使用<code>var</code>声明会报错</li>\n<li>不能删除不允许删除的属性</li>\n<li>对象的属性不可以重名</li>\n<li>函数的形参不可以重名</li>\n<li>不允许使用八进制数据</li>\n</ul>\n<h2 id=\"事件兼容性处理\"><a href=\"#事件兼容性处理\" class=\"headerlink\" title=\"事件兼容性处理\"></a>事件兼容性处理</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRegister</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.addEventListener)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, type, handler</span>)</span>&#123;</div><div class=\"line\">            target.addEventListener(type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.attachEvent)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, type, handler</span>)</span>&#123;</div><div class=\"line\">            target.attachEvent(<span class=\"string\">\"on\"</span> + type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                handler.call(target, <span class=\"built_in\">window</span>.event);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, type, handler</span>)</span>&#123;</div><div class=\"line\">            target[<span class=\"string\">\"on\"</span>+type] = handler;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>javascript高级与面向对象笔记总结！！</p>","more":"<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>递归就是函数自己直接或者间接的调用自己</p>\n<h3 id=\"递归的两个要素\"><a href=\"#递归的两个要素\" class=\"headerlink\" title=\"递归的两个要素\"></a>递归的两个要素</h3><ul>\n<li>自己调用自己</li>\n<li>递归结束条件</li>\n</ul>\n<h3 id=\"化归思想\"><a href=\"#化归思想\" class=\"headerlink\" title=\"化归思想\"></a>化归思想</h3><p>由难化易，由繁化简，的思想就是化归思想</p>\n<h3 id=\"前n项和\"><a href=\"#前n项和\" class=\"headerlink\" title=\"前n项和\"></a>前n项和</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fn(n) = fn(n<span class=\"number\">-1</span>) + n</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum(n - <span class=\"number\">1</span>) + n;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"阶乘\"><a href=\"#阶乘\" class=\"headerlink\" title=\"阶乘\"></a>阶乘</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fn(n) = fn(n<span class=\"number\">-1</span>) * n</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum(n - <span class=\"number\">1</span>) * n;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fn(n) = fn(n<span class=\"number\">-1</span>) + fn(n<span class=\"number\">-2</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>) + fib(n<span class=\"number\">-2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"递归获取指定元素的后代元素\"><a href=\"#递归获取指定元素的后代元素\" class=\"headerlink\" title=\"递归获取指定元素的后代元素\"></a>递归获取指定元素的后代元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChildren</span>(<span class=\"params\">ele</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> children = ele.children;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; children.length; i++)&#123;</div><div class=\"line\">        result.push(children[i]);</div><div class=\"line\">        <span class=\"keyword\">var</span> temp = getChildren(children[i]);</div><div class=\"line\">        result = result.concat(temp);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>一个封闭的包裹结构</p>\n<p>一个可以访问独立数据的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//可以操作data数据</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>获取和设置数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">getData</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> data;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">setDate</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">            data = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"for循环注册点击事件的问题\"><a href=\"#for循环注册点击事件的问题\" class=\"headerlink\" title=\"for循环注册点击事件的问题\"></a>for循环注册点击事件的问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; divs.length; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> div = divs[i];</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> j = i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(j);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    div.onclick = outer();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"for循环中使用setTimeout\"><a href=\"#for循环中使用setTimeout\" class=\"headerlink\" title=\"for循环中使用setTimeout\"></a>for循环中使用setTimeout</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">    setTimeout((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> j = i;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(j);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;()),<span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><ul>\n<li>硬件缓存</li>\n<li>浏览器缓存</li>\n<li><code>CDN</code>—<code>Content Delivery Network</code>  内容分发网络</li>\n</ul>\n<h3 id=\"使用缓存解决递归实现的斐波那契数列的性能问题\"><a href=\"#使用缓存解决递归实现的斐波那契数列的性能问题\" class=\"headerlink\" title=\"使用缓存解决递归实现的斐波那契数列的性能问题\"></a>使用缓存解决递归实现的斐波那契数列的性能问题</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFib</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> num = arr[n];</div><div class=\"line\">        <span class=\"keyword\">if</span>(!num)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">                num = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                num = <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">1</span>) + <span class=\"built_in\">arguments</span>.callee(n - <span class=\"number\">2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            arr[n] = num;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> num;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"jQuery缓存实现分析\"><a href=\"#jQuery缓存实现分析\" class=\"headerlink\" title=\"jQuery缓存实现分析\"></a>jQuery缓存实现分析</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(value)&#123;</div><div class=\"line\">            cache[key] = value;</div><div class=\"line\">            arr.push(key);</div><div class=\"line\">            <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">50</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">delete</span> cache[arr.shift()];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cache[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数的四种调用模式\"><a href=\"#函数的四种调用模式\" class=\"headerlink\" title=\"函数的四种调用模式\"></a>函数的四种调用模式</h2><h3 id=\"函数调用模式\"><a href=\"#函数调用模式\" class=\"headerlink\" title=\"函数调用模式\"></a>函数调用模式</h3><p>形式: 函数名();<br><code>this: window</code></p>\n<h3 id=\"方法调用模式\"><a href=\"#方法调用模式\" class=\"headerlink\" title=\"方法调用模式\"></a>方法调用模式</h3><p>形式: 对象名.方法名();<br>this: 调用该方法的对象</p>\n<h3 id=\"构造函数调用模式\"><a href=\"#构造函数调用模式\" class=\"headerlink\" title=\"构造函数调用模式\"></a>构造函数调用模式</h3><p>形式: <code>new</code> .构造函数名()<br><code>this: new</code>创建出来的对象</p>\n<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createObject</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.xxx = <span class=\"string\">\"xxx\"</span>;</div><div class=\"line\">    o.yyy = <span class=\"string\">\"yy\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p  = createObject();</div></pre></td></tr></table></figure>\n<h4 id=\"寄生模式\"><a href=\"#寄生模式\" class=\"headerlink\" title=\"寄生模式\"></a>寄生模式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CObject</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">    o.xxx = <span class=\"string\">\"xxx\"</span>;</div><div class=\"line\">    o.yyy = <span class=\"string\">\"yy\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> CObject();</div></pre></td></tr></table></figure>\n<h3 id=\"上下文调用模式\"><a href=\"#上下文调用模式\" class=\"headerlink\" title=\"上下文调用模式\"></a>上下文调用模式</h3><h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">函数名.call(对象,参数<span class=\"number\">1</span>,参数<span class=\"number\">2</span>,参数<span class=\"number\">3.</span>..)</div></pre></td></tr></table></figure>\n<ol>\n<li>调用该函数</li>\n<li>将函数内部的<code>this</code>赋值为<code>call</code>的第一个参数</li>\n<li>将第一个参数之后的所有参数，当做实参传递给函数</li>\n</ol>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">函数名.apply(对象,数组)</div></pre></td></tr></table></figure>\n<ol>\n<li>调用该函数</li>\n<li>将函数内部的<code>this</code>赋值为<code>apply</code>的第一个参数</li>\n<li>将第二个参数的数组，依次拆解开，将每一个元素挨个传递给函数做为实参</li>\n</ol>\n<h5 id=\"伪数组转换成数组\"><a href=\"#伪数组转换成数组\" class=\"headerlink\" title=\"伪数组转换成数组\"></a>伪数组转换成数组</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arrFake = &#123;</div><div class=\"line\">    <span class=\"number\">0</span>:<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">1</span>:<span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"number\">2</span>:<span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">length</span>:<span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arrReal = [];</div><div class=\"line\"></div><div class=\"line\">arrReal.push.apply(arrReal, arrFake);</div><div class=\"line\"><span class=\"comment\">//arrReal.push(arrFake[0] , arrFake[1], arrFake[2])   相当于这句代码</span></div></pre></td></tr></table></figure>\n<h5 id=\"求数组最大值\"><a href=\"#求数组最大值\" class=\"headerlink\" title=\"求数组最大值\"></a>求数组最大值</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">23</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">34</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> maxNum = <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, arr);</div></pre></td></tr></table></figure>\n<h4 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.money = <span class=\"number\">99999999999999</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    Father.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Son();</div></pre></td></tr></table></figure>\n<h2 id=\"沙箱模式\"><a href=\"#沙箱模式\" class=\"headerlink\" title=\"沙箱模式\"></a>沙箱模式</h2><p>一个隔离的安全的环境</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//需要隔离的代码</span></div><div class=\"line\">    <span class=\"comment\">//最顶上写 变量函数之类的申明</span></div><div class=\"line\">    <span class=\"comment\">//逻辑代码</span></div><div class=\"line\">    <span class=\"comment\">//如果需要，使用window对象向外界暴露接口</span></div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</div></pre></td></tr></table></figure>\n<p>为什么要将 <code>window</code> 作为参数传递</p>\n<ol>\n<li>外面无法访问里面，里面也不要去访问外面的东西</li>\n<li>在代码压缩的时候，内置的对象名称无法被压缩，如果使用自己的变量，是可以压缩的</li>\n</ol>\n<h2 id=\"forEach-和-map\"><a href=\"#forEach-和-map\" class=\"headerlink\" title=\"forEach 和　map\"></a>forEach 和　map</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ,<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"comment\">//currentEle 当前正在遍历的元素,</span></div><div class=\"line\"><span class=\"comment\">//currentIndex 当前遍历的元素的索引,</span></div><div class=\"line\"><span class=\"comment\">//currentArray 当前正在被遍历的数组</span></div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class=\"line\">    currentArray[currentIndex] = currentEle * <span class=\"number\">2</span>;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//currentEle 当前正在遍历的元素,</span></div><div class=\"line\"><span class=\"comment\">//currentIndex 当前遍历的元素的索引,</span></div><div class=\"line\"><span class=\"comment\">//currentArray 当前正在被遍历的数组</span></div><div class=\"line\"><span class=\"comment\">//map如果回调函数内有返回值，会将所有调用的返回值重新组合成一个数组，作为map方法的返回值</span></div><div class=\"line\">arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> currentEle * <span class=\"number\">2</span>;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>变量不使用<code>var</code>声明会报错</li>\n<li>不能删除不允许删除的属性</li>\n<li>对象的属性不可以重名</li>\n<li>函数的形参不可以重名</li>\n<li>不允许使用八进制数据</li>\n</ul>\n<h2 id=\"事件兼容性处理\"><a href=\"#事件兼容性处理\" class=\"headerlink\" title=\"事件兼容性处理\"></a>事件兼容性处理</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRegister</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.addEventListener)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, type, handler</span>)</span>&#123;</div><div class=\"line\">            target.addEventListener(type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.attachEvent)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, type, handler</span>)</span>&#123;</div><div class=\"line\">            target.attachEvent(<span class=\"string\">\"on\"</span> + type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                handler.call(target, <span class=\"built_in\">window</span>.event);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, type, handler</span>)</span>&#123;</div><div class=\"line\">            target[<span class=\"string\">\"on\"</span>+type] = handler;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JQuery分析及实现part7之 Ajax 模块功能及实现","date":"2016-11-25T13:31:12.000Z","_content":"\nJQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!\n\n<!-- more -->\n\n## Ajax 请求流程\n\n1. 创建一个请求对象\n\n```js\nfunction createRequest() {\n\treturn window.XMLHttpRequest ? new window.XMLHttpRequest() : \n\t\tnew ActiveXObject('Microsoft.XMLHTTP');\n}\n\nvar xhr = createRequest();\nconsole.log(xhr);\n```\n\n2. 格式化数据\n\t* 将格式化后的数据,参数与值都要重新编码\n\n```js\nfunction formatData(data){\n    var ret = [];\n    for(var k in data){\n        ret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));\n    }\n\t\t// 如果不想从服务器缓存中读取数据\n\tret.push(('_=' + Math.random()).replace('.', ''));\n    return ret.join('&');\n}\nvar data = {name: '梦魇小栈',age: 2,url:'http://blog.ihoey.com'};\nconsole.log(formatData(data));//name=%E6%A2%A6%E9%AD%87%E5%B0%8F%E6%A0%88&age=2&url=http%3A%2F%2Fblog.ihoey.com\n```\n\n3. 与服务器建立连接\n4. 监听请求状态\n5. 发送请求\n6. 封装\n\n```js\n<script>\n\t// 默认配置信息\n\tajaxSetting = {\n\t\turl: '',\n\t\ttype: 'GET',\n\t\tdataType: 'text',\n\t\tcontentType: 'application/x-www-form-urlencoded',\n\t\tdata: null,\n\t\tasync: true,\n\t\tsuccess: null,\n\t\tfail: null\n\t};\n\n\tfunction createRequest() {\n\t\treturn window.XMLHttpRequest ? new window.XMLHttpRequest() : \n\t\t\tnew ActiveXObject('Microsoft.XMLHTTP');\n\t}\n\n\tfunction formatData(data) {\n\t\tvar ret = [];\n\t\tfor(var k in data){\n\t\t\tret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));\n\t\t}\n\t\t// 如果不想从服务器缓存中读取数据\n\t\tret.push(('_=' + Math.random()).replace('.', ''));\n\t\treturn ret.join('&');\n\t}\n\n\tfunction ajax(config) {\n\t\tvar context = {}, \n\t\t\txhr, \n\t\t\tpostData = '';\n\t\t// 过滤无效参数\n\t\tif(!config || !config.url) {\n\t\t\tconsole.warn(\"参数异常\");\n\t\t\treturn;\n\t\t}\n\t\t// debugger;\n\t\t// 获取默认配置信息\n\t\titcast.extend(ajaxSetting, context);\n\t\t// 用户的配置覆盖默认配置\n\t\titcast.extend(config, context);\n\t\t// 1: 创建请求对象\n\t\txhr = createRequest();\n\t\t// 2：格式化数据\n\t\tif(context.data){\n\t\t\tpostData = formatData(context.data);\n\t\t}\n\t\t// 3：与服务器建立连接\n\t\tif(context.type.toUpperCase() === 'GET'){\n\t\t\txhr.open('GET', context.url + '?' + postData, context.async);\n\t\t\tpostData = null;\n\t\t} else {\n\t\t\t// 模拟表单提交，设置请求头信息\n\t\t\txhr.setRequestHeader('Content-Type', context.contentType);\n\t\t\txhr.open('POST', context.url, context.async);\t\t\t\t\n\t\t}\n\t\t// 4：监听请求状态\n\t\txhr.onreadystatechange = function() {\n\t\t\tif(xhr.readyState === 4){\n\t\t\t\tif(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304){\n\t\t\t\t\t// 获取到请求回来的数据\n\t\t\t\t\tvar text = xhr.responseText;\n\t\t\t\t\t// 如果指定的数据格式为 json，那就将其转换为json对象\n\t\t\t\t\ttext = context.dataType.toLowerCase() === 'json' ?\n\t\t\t\t\t\tJSON.parse(text) : text;\n\n\t\t\t\t\tcontext.success && context.success(text);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.fail && context.fail({\"errorCode\": xhr.status, \"message\": \"请求超时.\"});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// 5: 发送请求\n\t\txhr.send(postData);\n\t\t// context.success && context.success(JSON.parse(xhr.responseText));\n\t}\n</script>\n<script>\n\tajax({\n\t\turl: 'data.json',\n\t\tdataType: 'json',\n\t\tasync: false,\n\t\tsuccess: function(data) {\n\t\t\tdocument.getElementById('content').innerHTML= '<p>' + data.username + '</p>' +\n\t\t\t\t\t'<p>' + data.age + '</p>';\n\t\t},\n\t\tfail: function(er) {\n\t\t\tconsole.log(er.errorCode);\n\t\t}\n\t});\n</script>\n```\n## Jsonp 请求\n\n1. 跨域 只能发送 `GET` 请求 . 一种不安全的请求方式\n2. 原理:由于 `dom` 元素的 `src` 属性,具有跨域功能. 在实现跨域请求时,为了方便就使用 `script` 标签来做.\n3. 流程\n\t* 创建请求对象,就是创建一个 `script` 标签\n\t* 将上述创建的 `script` 标签添加到页面的 `head` 标签下\n\t* 格式化数据\n\t* 创建全局回调函数\n\t* 设置超时时间,如果超过此时间,也没有得到数据,表示请求失败.否则,请求成功\n\t* 发送请求: 指定 `script` 标签的 `src` 属性值\n \n\n","source":"_posts/javascript-jquery-part7.md","raw":"---\ntitle: JQuery分析及实现part7之 Ajax 模块功能及实现\ndate: 2016-11-25 21:31:12\ntags: \n\t- 原生Js\n\t- Js框架\n\t- JQuery\ncategories: javascript\n---\n\nJQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!\n\n<!-- more -->\n\n## Ajax 请求流程\n\n1. 创建一个请求对象\n\n```js\nfunction createRequest() {\n\treturn window.XMLHttpRequest ? new window.XMLHttpRequest() : \n\t\tnew ActiveXObject('Microsoft.XMLHTTP');\n}\n\nvar xhr = createRequest();\nconsole.log(xhr);\n```\n\n2. 格式化数据\n\t* 将格式化后的数据,参数与值都要重新编码\n\n```js\nfunction formatData(data){\n    var ret = [];\n    for(var k in data){\n        ret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));\n    }\n\t\t// 如果不想从服务器缓存中读取数据\n\tret.push(('_=' + Math.random()).replace('.', ''));\n    return ret.join('&');\n}\nvar data = {name: '梦魇小栈',age: 2,url:'http://blog.ihoey.com'};\nconsole.log(formatData(data));//name=%E6%A2%A6%E9%AD%87%E5%B0%8F%E6%A0%88&age=2&url=http%3A%2F%2Fblog.ihoey.com\n```\n\n3. 与服务器建立连接\n4. 监听请求状态\n5. 发送请求\n6. 封装\n\n```js\n<script>\n\t// 默认配置信息\n\tajaxSetting = {\n\t\turl: '',\n\t\ttype: 'GET',\n\t\tdataType: 'text',\n\t\tcontentType: 'application/x-www-form-urlencoded',\n\t\tdata: null,\n\t\tasync: true,\n\t\tsuccess: null,\n\t\tfail: null\n\t};\n\n\tfunction createRequest() {\n\t\treturn window.XMLHttpRequest ? new window.XMLHttpRequest() : \n\t\t\tnew ActiveXObject('Microsoft.XMLHTTP');\n\t}\n\n\tfunction formatData(data) {\n\t\tvar ret = [];\n\t\tfor(var k in data){\n\t\t\tret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));\n\t\t}\n\t\t// 如果不想从服务器缓存中读取数据\n\t\tret.push(('_=' + Math.random()).replace('.', ''));\n\t\treturn ret.join('&');\n\t}\n\n\tfunction ajax(config) {\n\t\tvar context = {}, \n\t\t\txhr, \n\t\t\tpostData = '';\n\t\t// 过滤无效参数\n\t\tif(!config || !config.url) {\n\t\t\tconsole.warn(\"参数异常\");\n\t\t\treturn;\n\t\t}\n\t\t// debugger;\n\t\t// 获取默认配置信息\n\t\titcast.extend(ajaxSetting, context);\n\t\t// 用户的配置覆盖默认配置\n\t\titcast.extend(config, context);\n\t\t// 1: 创建请求对象\n\t\txhr = createRequest();\n\t\t// 2：格式化数据\n\t\tif(context.data){\n\t\t\tpostData = formatData(context.data);\n\t\t}\n\t\t// 3：与服务器建立连接\n\t\tif(context.type.toUpperCase() === 'GET'){\n\t\t\txhr.open('GET', context.url + '?' + postData, context.async);\n\t\t\tpostData = null;\n\t\t} else {\n\t\t\t// 模拟表单提交，设置请求头信息\n\t\t\txhr.setRequestHeader('Content-Type', context.contentType);\n\t\t\txhr.open('POST', context.url, context.async);\t\t\t\t\n\t\t}\n\t\t// 4：监听请求状态\n\t\txhr.onreadystatechange = function() {\n\t\t\tif(xhr.readyState === 4){\n\t\t\t\tif(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304){\n\t\t\t\t\t// 获取到请求回来的数据\n\t\t\t\t\tvar text = xhr.responseText;\n\t\t\t\t\t// 如果指定的数据格式为 json，那就将其转换为json对象\n\t\t\t\t\ttext = context.dataType.toLowerCase() === 'json' ?\n\t\t\t\t\t\tJSON.parse(text) : text;\n\n\t\t\t\t\tcontext.success && context.success(text);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.fail && context.fail({\"errorCode\": xhr.status, \"message\": \"请求超时.\"});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// 5: 发送请求\n\t\txhr.send(postData);\n\t\t// context.success && context.success(JSON.parse(xhr.responseText));\n\t}\n</script>\n<script>\n\tajax({\n\t\turl: 'data.json',\n\t\tdataType: 'json',\n\t\tasync: false,\n\t\tsuccess: function(data) {\n\t\t\tdocument.getElementById('content').innerHTML= '<p>' + data.username + '</p>' +\n\t\t\t\t\t'<p>' + data.age + '</p>';\n\t\t},\n\t\tfail: function(er) {\n\t\t\tconsole.log(er.errorCode);\n\t\t}\n\t});\n</script>\n```\n## Jsonp 请求\n\n1. 跨域 只能发送 `GET` 请求 . 一种不安全的请求方式\n2. 原理:由于 `dom` 元素的 `src` 属性,具有跨域功能. 在实现跨域请求时,为了方便就使用 `script` 标签来做.\n3. 流程\n\t* 创建请求对象,就是创建一个 `script` 标签\n\t* 将上述创建的 `script` 标签添加到页面的 `head` 标签下\n\t* 格式化数据\n\t* 创建全局回调函数\n\t* 设置超时时间,如果超过此时间,也没有得到数据,表示请求失败.否则,请求成功\n\t* 发送请求: 指定 `script` 标签的 `src` 属性值\n \n\n","slug":"javascript-jquery-part7","published":1,"updated":"2016-11-27T02:31:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6hprps004j9wg7m7c4g00a","content":"<p>JQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!</p>\n<a id=\"more\"></a>\n<h2 id=\"Ajax-请求流程\"><a href=\"#Ajax-请求流程\" class=\"headerlink\" title=\"Ajax 请求流程\"></a>Ajax 请求流程</h2><ol>\n<li>创建一个请求对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRequest</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.XMLHttpRequest ? <span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.XMLHttpRequest() : </div><div class=\"line\">\t\t<span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> xhr = createRequest();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(xhr);</div></pre></td></tr></table></figure>\n<ol>\n<li>格式化数据<ul>\n<li>将格式化后的数据,参数与值都要重新编码</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatData</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = [];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> data)&#123;</div><div class=\"line\">        ret.push(<span class=\"built_in\">window</span>.encodeURIComponent(k) + <span class=\"string\">'='</span> + <span class=\"built_in\">window</span>.encodeURIComponent(data[k]));</div><div class=\"line\">    &#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果不想从服务器缓存中读取数据</span></div><div class=\"line\">\tret.push((<span class=\"string\">'_='</span> + <span class=\"built_in\">Math</span>.random()).replace(<span class=\"string\">'.'</span>, <span class=\"string\">''</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> ret.join(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'梦魇小栈'</span>,<span class=\"attr\">age</span>: <span class=\"number\">2</span>,<span class=\"attr\">url</span>:<span class=\"string\">'http://blog.ihoey.com'</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(formatData(data));<span class=\"comment\">//name=%E6%A2%A6%E9%AD%87%E5%B0%8F%E6%A0%88&amp;age=2&amp;url=http%3A%2F%2Fblog.ihoey.com</span></div></pre></td></tr></table></figure>\n<ol>\n<li>与服务器建立连接</li>\n<li>监听请求状态</li>\n<li>发送请求</li>\n<li>封装</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\t// 默认配置信息</div><div class=\"line\">\tajaxSetting = &#123;</div><div class=\"line\">\t\turl: '',</div><div class=\"line\">\t\ttype: 'GET',</div><div class=\"line\">\t\tdataType: 'text',</div><div class=\"line\">\t\tcontentType: 'application/x-www-form-urlencoded',</div><div class=\"line\">\t\tdata: null,</div><div class=\"line\">\t\tasync: true,</div><div class=\"line\">\t\tsuccess: null,</div><div class=\"line\">\t\tfail: null</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\tfunction createRequest() &#123;</div><div class=\"line\">\t\treturn window.XMLHttpRequest ? new window.XMLHttpRequest() : </div><div class=\"line\">\t\t\tnew ActiveXObject('Microsoft.XMLHTTP');</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfunction formatData(data) &#123;</div><div class=\"line\">\t\tvar ret = [];</div><div class=\"line\">\t\tfor(var k in data)&#123;</div><div class=\"line\">\t\t\tret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 如果不想从服务器缓存中读取数据</div><div class=\"line\">\t\tret.push(('_=' + Math.random()).replace('.', ''));</div><div class=\"line\">\t\treturn ret.join('&amp;');</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfunction ajax(config) &#123;</div><div class=\"line\">\t\tvar context = &#123;&#125;, </div><div class=\"line\">\t\t\txhr, </div><div class=\"line\">\t\t\tpostData = '';</div><div class=\"line\">\t\t// 过滤无效参数</div><div class=\"line\">\t\tif(!config || !config.url) &#123;</div><div class=\"line\">\t\t\tconsole.warn(\"参数异常\");</div><div class=\"line\">\t\t\treturn;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// debugger;</div><div class=\"line\">\t\t// 获取默认配置信息</div><div class=\"line\">\t\titcast.extend(ajaxSetting, context);</div><div class=\"line\">\t\t// 用户的配置覆盖默认配置</div><div class=\"line\">\t\titcast.extend(config, context);</div><div class=\"line\">\t\t// 1: 创建请求对象</div><div class=\"line\">\t\txhr = createRequest();</div><div class=\"line\">\t\t// 2：格式化数据</div><div class=\"line\">\t\tif(context.data)&#123;</div><div class=\"line\">\t\t\tpostData = formatData(context.data);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 3：与服务器建立连接</div><div class=\"line\">\t\tif(context.type.toUpperCase() === 'GET')&#123;</div><div class=\"line\">\t\t\txhr.open('GET', context.url + '?' + postData, context.async);</div><div class=\"line\">\t\t\tpostData = null;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t// 模拟表单提交，设置请求头信息</div><div class=\"line\">\t\t\txhr.setRequestHeader('Content-Type', context.contentType);</div><div class=\"line\">\t\t\txhr.open('POST', context.url, context.async);\t\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 4：监听请求状态</div><div class=\"line\">\t\txhr.onreadystatechange = function() &#123;</div><div class=\"line\">\t\t\tif(xhr.readyState === 4)&#123;</div><div class=\"line\">\t\t\t\tif(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status === 304)&#123;</div><div class=\"line\">\t\t\t\t\t// 获取到请求回来的数据</div><div class=\"line\">\t\t\t\t\tvar text = xhr.responseText;</div><div class=\"line\">\t\t\t\t\t// 如果指定的数据格式为 json，那就将其转换为json对象</div><div class=\"line\">\t\t\t\t\ttext = context.dataType.toLowerCase() === 'json' ?</div><div class=\"line\">\t\t\t\t\t\tJSON.parse(text) : text;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\tcontext.success &amp;&amp; context.success(text);</div><div class=\"line\">\t\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\t\tcontext.fail &amp;&amp; context.fail(&#123;\"errorCode\": xhr.status, \"message\": \"请求超时.\"&#125;);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t// 5: 发送请求</div><div class=\"line\">\t\txhr.send(postData);</div><div class=\"line\">\t\t// context.success &amp;&amp; context.success(JSON.parse(xhr.responseText));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\tajax(&#123;</div><div class=\"line\">\t\turl: 'data.json',</div><div class=\"line\">\t\tdataType: 'json',</div><div class=\"line\">\t\tasync: false,</div><div class=\"line\">\t\tsuccess: function(data) &#123;</div><div class=\"line\">\t\t\tdocument.getElementById('content').innerHTML= '&lt;p&gt;' + data.username + '&lt;/p&gt;' +</div><div class=\"line\">\t\t\t\t\t'&lt;p&gt;' + data.age + '&lt;/p&gt;';</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tfail: function(er) &#123;</div><div class=\"line\">\t\t\tconsole.log(er.errorCode);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Jsonp-请求\"><a href=\"#Jsonp-请求\" class=\"headerlink\" title=\"Jsonp 请求\"></a>Jsonp 请求</h2><ol>\n<li>跨域 只能发送 <code>GET</code> 请求 . 一种不安全的请求方式</li>\n<li>原理:由于 <code>dom</code> 元素的 <code>src</code> 属性,具有跨域功能. 在实现跨域请求时,为了方便就使用 <code>script</code> 标签来做.</li>\n<li>流程<ul>\n<li>创建请求对象,就是创建一个 <code>script</code> 标签</li>\n<li>将上述创建的 <code>script</code> 标签添加到页面的 <code>head</code> 标签下</li>\n<li>格式化数据</li>\n<li>创建全局回调函数</li>\n<li>设置超时时间,如果超过此时间,也没有得到数据,表示请求失败.否则,请求成功</li>\n<li>发送请求: 指定 <code>script</code> 标签的 <code>src</code> 属性值</li>\n</ul>\n</li>\n</ol>\n","excerpt":"<p>JQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!</p>","more":"<h2 id=\"Ajax-请求流程\"><a href=\"#Ajax-请求流程\" class=\"headerlink\" title=\"Ajax 请求流程\"></a>Ajax 请求流程</h2><ol>\n<li>创建一个请求对象</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRequest</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.XMLHttpRequest ? <span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.XMLHttpRequest() : </div><div class=\"line\">\t\t<span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> xhr = createRequest();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(xhr);</div></pre></td></tr></table></figure>\n<ol>\n<li>格式化数据<ul>\n<li>将格式化后的数据,参数与值都要重新编码</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatData</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = [];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> data)&#123;</div><div class=\"line\">        ret.push(<span class=\"built_in\">window</span>.encodeURIComponent(k) + <span class=\"string\">'='</span> + <span class=\"built_in\">window</span>.encodeURIComponent(data[k]));</div><div class=\"line\">    &#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 如果不想从服务器缓存中读取数据</span></div><div class=\"line\">\tret.push((<span class=\"string\">'_='</span> + <span class=\"built_in\">Math</span>.random()).replace(<span class=\"string\">'.'</span>, <span class=\"string\">''</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> ret.join(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'梦魇小栈'</span>,<span class=\"attr\">age</span>: <span class=\"number\">2</span>,<span class=\"attr\">url</span>:<span class=\"string\">'http://blog.ihoey.com'</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(formatData(data));<span class=\"comment\">//name=%E6%A2%A6%E9%AD%87%E5%B0%8F%E6%A0%88&amp;age=2&amp;url=http%3A%2F%2Fblog.ihoey.com</span></div></pre></td></tr></table></figure>\n<ol>\n<li>与服务器建立连接</li>\n<li>监听请求状态</li>\n<li>发送请求</li>\n<li>封装</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\t// 默认配置信息</div><div class=\"line\">\tajaxSetting = &#123;</div><div class=\"line\">\t\turl: '',</div><div class=\"line\">\t\ttype: 'GET',</div><div class=\"line\">\t\tdataType: 'text',</div><div class=\"line\">\t\tcontentType: 'application/x-www-form-urlencoded',</div><div class=\"line\">\t\tdata: null,</div><div class=\"line\">\t\tasync: true,</div><div class=\"line\">\t\tsuccess: null,</div><div class=\"line\">\t\tfail: null</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\tfunction createRequest() &#123;</div><div class=\"line\">\t\treturn window.XMLHttpRequest ? new window.XMLHttpRequest() : </div><div class=\"line\">\t\t\tnew ActiveXObject('Microsoft.XMLHTTP');</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfunction formatData(data) &#123;</div><div class=\"line\">\t\tvar ret = [];</div><div class=\"line\">\t\tfor(var k in data)&#123;</div><div class=\"line\">\t\t\tret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 如果不想从服务器缓存中读取数据</div><div class=\"line\">\t\tret.push(('_=' + Math.random()).replace('.', ''));</div><div class=\"line\">\t\treturn ret.join('&amp;');</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfunction ajax(config) &#123;</div><div class=\"line\">\t\tvar context = &#123;&#125;, </div><div class=\"line\">\t\t\txhr, </div><div class=\"line\">\t\t\tpostData = '';</div><div class=\"line\">\t\t// 过滤无效参数</div><div class=\"line\">\t\tif(!config || !config.url) &#123;</div><div class=\"line\">\t\t\tconsole.warn(\"参数异常\");</div><div class=\"line\">\t\t\treturn;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// debugger;</div><div class=\"line\">\t\t// 获取默认配置信息</div><div class=\"line\">\t\titcast.extend(ajaxSetting, context);</div><div class=\"line\">\t\t// 用户的配置覆盖默认配置</div><div class=\"line\">\t\titcast.extend(config, context);</div><div class=\"line\">\t\t// 1: 创建请求对象</div><div class=\"line\">\t\txhr = createRequest();</div><div class=\"line\">\t\t// 2：格式化数据</div><div class=\"line\">\t\tif(context.data)&#123;</div><div class=\"line\">\t\t\tpostData = formatData(context.data);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 3：与服务器建立连接</div><div class=\"line\">\t\tif(context.type.toUpperCase() === 'GET')&#123;</div><div class=\"line\">\t\t\txhr.open('GET', context.url + '?' + postData, context.async);</div><div class=\"line\">\t\t\tpostData = null;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t// 模拟表单提交，设置请求头信息</div><div class=\"line\">\t\t\txhr.setRequestHeader('Content-Type', context.contentType);</div><div class=\"line\">\t\t\txhr.open('POST', context.url, context.async);\t\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 4：监听请求状态</div><div class=\"line\">\t\txhr.onreadystatechange = function() &#123;</div><div class=\"line\">\t\t\tif(xhr.readyState === 4)&#123;</div><div class=\"line\">\t\t\t\tif(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status === 304)&#123;</div><div class=\"line\">\t\t\t\t\t// 获取到请求回来的数据</div><div class=\"line\">\t\t\t\t\tvar text = xhr.responseText;</div><div class=\"line\">\t\t\t\t\t// 如果指定的数据格式为 json，那就将其转换为json对象</div><div class=\"line\">\t\t\t\t\ttext = context.dataType.toLowerCase() === 'json' ?</div><div class=\"line\">\t\t\t\t\t\tJSON.parse(text) : text;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\tcontext.success &amp;&amp; context.success(text);</div><div class=\"line\">\t\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\t\tcontext.fail &amp;&amp; context.fail(&#123;\"errorCode\": xhr.status, \"message\": \"请求超时.\"&#125;);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t// 5: 发送请求</div><div class=\"line\">\t\txhr.send(postData);</div><div class=\"line\">\t\t// context.success &amp;&amp; context.success(JSON.parse(xhr.responseText));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\tajax(&#123;</div><div class=\"line\">\t\turl: 'data.json',</div><div class=\"line\">\t\tdataType: 'json',</div><div class=\"line\">\t\tasync: false,</div><div class=\"line\">\t\tsuccess: function(data) &#123;</div><div class=\"line\">\t\t\tdocument.getElementById('content').innerHTML= '&lt;p&gt;' + data.username + '&lt;/p&gt;' +</div><div class=\"line\">\t\t\t\t\t'&lt;p&gt;' + data.age + '&lt;/p&gt;';</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tfail: function(er) &#123;</div><div class=\"line\">\t\t\tconsole.log(er.errorCode);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Jsonp-请求\"><a href=\"#Jsonp-请求\" class=\"headerlink\" title=\"Jsonp 请求\"></a>Jsonp 请求</h2><ol>\n<li>跨域 只能发送 <code>GET</code> 请求 . 一种不安全的请求方式</li>\n<li>原理:由于 <code>dom</code> 元素的 <code>src</code> 属性,具有跨域功能. 在实现跨域请求时,为了方便就使用 <code>script</code> 标签来做.</li>\n<li>流程<ul>\n<li>创建请求对象,就是创建一个 <code>script</code> 标签</li>\n<li>将上述创建的 <code>script</code> 标签添加到页面的 <code>head</code> 标签下</li>\n<li>格式化数据</li>\n<li>创建全局回调函数</li>\n<li>设置超时时间,如果超过此时间,也没有得到数据,表示请求失败.否则,请求成功</li>\n<li>发送请求: 指定 <code>script</code> 标签的 <code>src</code> 属性值</li>\n</ul>\n</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciw6hprhu00009wg7xffp9jcv","category_id":"ciw6hpri700049wg7pkulbfju","_id":"ciw6hpriy000f9wg76oz3aasv"},{"post_id":"ciw6hpri300029wg7czxepbds","category_id":"ciw6hpri700049wg7pkulbfju","_id":"ciw6hprj4000k9wg75sz6lr5v"},{"post_id":"ciw6hprie00069wg7fdagrxkq","category_id":"ciw6hpri700049wg7pkulbfju","_id":"ciw6hprji000q9wg73pyjy57j"},{"post_id":"ciw6hprj8000o9wg7vhgnuasf","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprjp000x9wg7bzkegend"},{"post_id":"ciw6hprih00089wg7e9n5c0z1","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprjs00119wg7co21k417"},{"post_id":"ciw6hprjj000r9wg73fmgdgyf","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprjy00139wg7x7a4no0g"},{"post_id":"ciw6hprjn000v9wg71r948liz","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprk300179wg7jm7urxbn"},{"post_id":"ciw6hpriq000a9wg7w8qz969v","category_id":"ciw6hprjl000s9wg7fei5ht48","_id":"ciw6hprk7001a9wg7aowzsuod"},{"post_id":"ciw6hprjp000y9wg70nw2rki1","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprkb001f9wg7p6vywish"},{"post_id":"ciw6hprjt00129wg7e1ydailq","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprkg001i9wg7ghm363ty"},{"post_id":"ciw6hpriw000e9wg7ygzb2slg","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprki001m9wg75jjll60e"},{"post_id":"ciw6hprjz00149wg7ti681lrp","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprkl001o9wg73pfiq2ei"},{"post_id":"ciw6hprk400189wg7rjnfjf5j","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprkn001r9wg7fghotiip"},{"post_id":"ciw6hpriz000g9wg7q8u2q26u","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprkp001u9wg7vxdvktc6"},{"post_id":"ciw6hprk8001b9wg7du1oo7kq","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprks001y9wg74iuqouz6"},{"post_id":"ciw6hprkc001g9wg7rpl1zdvh","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprkt00219wg73zd3p428"},{"post_id":"ciw6hprj2000j9wg7udo18aqq","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprku00239wg7zr1jh1gy"},{"post_id":"ciw6hprkg001j9wg7p1ghgw6b","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprkv00259wg7ldn41b9g"},{"post_id":"ciw6hprkj001n9wg77vlq4b10","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprkv00269wg7haajhgbv"},{"post_id":"ciw6hprj5000l9wg7bs9fnxop","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprkw00289wg7err0e9pg"},{"post_id":"ciw6hprkl001p9wg7cykim8nd","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprkw00299wg75omhhudi"},{"post_id":"ciw6hprkp001v9wg7fs5k8l4j","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprkx002b9wg7qclvt9n3"},{"post_id":"ciw6hprkn001s9wg7v3o4jfhj","category_id":"ciw6hprks001x9wg7u8qowzil","_id":"ciw6hprkx002c9wg7pqyj6sy1"},{"post_id":"ciw6hprps004j9wg7m7c4g00a","category_id":"ciw6hprj6000m9wg7s10644qb","_id":"ciw6hprpx004l9wg7oenv1vwi"}],"PostTag":[{"post_id":"ciw6hprhu00009wg7xffp9jcv","tag_id":"ciw6hpric00059wg71ayrn5vx","_id":"ciw6hprjh000p9wg7swat1k7r"},{"post_id":"ciw6hprhu00009wg7xffp9jcv","tag_id":"ciw6hpris000c9wg7kqyvw0ff","_id":"ciw6hprjm000t9wg7h9yopi3r"},{"post_id":"ciw6hprhu00009wg7xffp9jcv","tag_id":"ciw6hprj1000i9wg7xumscugs","_id":"ciw6hprjo000w9wg7gm7u42sw"},{"post_id":"ciw6hpri300029wg7czxepbds","tag_id":"ciw6hpric00059wg71ayrn5vx","_id":"ciw6hprk600199wg7mium2eur"},{"post_id":"ciw6hpri300029wg7czxepbds","tag_id":"ciw6hpris000c9wg7kqyvw0ff","_id":"ciw6hprkb001c9wg7z1d6z2gz"},{"post_id":"ciw6hpri300029wg7czxepbds","tag_id":"ciw6hprj1000i9wg7xumscugs","_id":"ciw6hprke001h9wg7l4sztfd6"},{"post_id":"ciw6hprie00069wg7fdagrxkq","tag_id":"ciw6hpric00059wg71ayrn5vx","_id":"ciw6hprko001t9wg7fmzyvza0"},{"post_id":"ciw6hprie00069wg7fdagrxkq","tag_id":"ciw6hpris000c9wg7kqyvw0ff","_id":"ciw6hprkr001w9wg7a3r5pi3d"},{"post_id":"ciw6hprie00069wg7fdagrxkq","tag_id":"ciw6hprj1000i9wg7xumscugs","_id":"ciw6hprkt00209wg7bq953rk1"},{"post_id":"ciw6hprih00089wg7e9n5c0z1","tag_id":"ciw6hprkm001q9wg7as1kuhzj","_id":"ciw6hprku00229wg7pakfsnm7"},{"post_id":"ciw6hpriq000a9wg7w8qz969v","tag_id":"ciw6hprks001z9wg7t2hcsej7","_id":"ciw6hprkx002e9wg7ud5erwxk"},{"post_id":"ciw6hpriq000a9wg7w8qz969v","tag_id":"ciw6hprku00249wg7tgl5sz6j","_id":"ciw6hprky002f9wg7wcqnann7"},{"post_id":"ciw6hpriq000a9wg7w8qz969v","tag_id":"ciw6hprkw00279wg7h7j8ym0c","_id":"ciw6hprky002h9wg7ikccilcs"},{"post_id":"ciw6hpriq000a9wg7w8qz969v","tag_id":"ciw6hprkw002a9wg78kr9e8op","_id":"ciw6hprky002i9wg7foqixv0n"},{"post_id":"ciw6hpriw000e9wg7ygzb2slg","tag_id":"ciw6hprkx002d9wg7qkl67cte","_id":"ciw6hprkz002k9wg7z0tg1n19"},{"post_id":"ciw6hpriw000e9wg7ygzb2slg","tag_id":"ciw6hprky002g9wg77s36gtom","_id":"ciw6hprkz002l9wg7ai35dc7y"},{"post_id":"ciw6hpriz000g9wg7q8u2q26u","tag_id":"ciw6hprkx002d9wg7qkl67cte","_id":"ciw6hprl2002q9wg7w5ca6qdy"},{"post_id":"ciw6hpriz000g9wg7q8u2q26u","tag_id":"ciw6hprkz002m9wg7cv7kv5n5","_id":"ciw6hprl3002r9wg7rvngwzsx"},{"post_id":"ciw6hpriz000g9wg7q8u2q26u","tag_id":"ciw6hprkz002n9wg7d0bvlhh0","_id":"ciw6hprl4002t9wg7ats62cab"},{"post_id":"ciw6hpriz000g9wg7q8u2q26u","tag_id":"ciw6hprl0002o9wg7ry4wtmhv","_id":"ciw6hprl4002u9wg7tqsolxyi"},{"post_id":"ciw6hprj2000j9wg7udo18aqq","tag_id":"ciw6hprl2002p9wg7ki94gpt8","_id":"ciw6hprl7002x9wg70sv7gj42"},{"post_id":"ciw6hprj2000j9wg7udo18aqq","tag_id":"ciw6hprl3002s9wg7mz28lmu7","_id":"ciw6hprl7002y9wg7xnnr7dp3"},{"post_id":"ciw6hprj2000j9wg7udo18aqq","tag_id":"ciw6hprl4002v9wg7tjl3k1ej","_id":"ciw6hprl800309wg7jvyyl2ll"},{"post_id":"ciw6hprj5000l9wg7bs9fnxop","tag_id":"ciw6hprl2002p9wg7ki94gpt8","_id":"ciw6hprl900339wg75eaturdc"},{"post_id":"ciw6hprj5000l9wg7bs9fnxop","tag_id":"ciw6hprl3002s9wg7mz28lmu7","_id":"ciw6hprl900349wg71cxi9w6w"},{"post_id":"ciw6hprj5000l9wg7bs9fnxop","tag_id":"ciw6hprl4002v9wg7tjl3k1ej","_id":"ciw6hprla00369wg7shnsic5r"},{"post_id":"ciw6hprj8000o9wg7vhgnuasf","tag_id":"ciw6hprl2002p9wg7ki94gpt8","_id":"ciw6hprlb00399wg7q1wq6c9y"},{"post_id":"ciw6hprj8000o9wg7vhgnuasf","tag_id":"ciw6hprl3002s9wg7mz28lmu7","_id":"ciw6hprlb003a9wg7yns5utux"},{"post_id":"ciw6hprj8000o9wg7vhgnuasf","tag_id":"ciw6hprl4002v9wg7tjl3k1ej","_id":"ciw6hprlc003c9wg7ej0ded1k"},{"post_id":"ciw6hprjj000r9wg73fmgdgyf","tag_id":"ciw6hprkx002d9wg7qkl67cte","_id":"ciw6hprld003d9wg7f5algjoo"},{"post_id":"ciw6hprjn000v9wg71r948liz","tag_id":"ciw6hprl2002p9wg7ki94gpt8","_id":"ciw6hprlg003h9wg7dxzalp8s"},{"post_id":"ciw6hprjn000v9wg71r948liz","tag_id":"ciw6hprl3002s9wg7mz28lmu7","_id":"ciw6hprlg003i9wg7vhy9c6p7"},{"post_id":"ciw6hprjn000v9wg71r948liz","tag_id":"ciw6hprl4002v9wg7tjl3k1ej","_id":"ciw6hprlh003k9wg7q9x4g4jl"},{"post_id":"ciw6hprjp000y9wg70nw2rki1","tag_id":"ciw6hprl2002p9wg7ki94gpt8","_id":"ciw6hprlj003n9wg77dizag61"},{"post_id":"ciw6hprjp000y9wg70nw2rki1","tag_id":"ciw6hprl3002s9wg7mz28lmu7","_id":"ciw6hprlj003o9wg7vuotsq5e"},{"post_id":"ciw6hprjp000y9wg70nw2rki1","tag_id":"ciw6hprl4002v9wg7tjl3k1ej","_id":"ciw6hprlk003q9wg7tq2o5jp2"},{"post_id":"ciw6hprjt00129wg7e1ydailq","tag_id":"ciw6hprkx002d9wg7qkl67cte","_id":"ciw6hprlk003r9wg7n79j26fo"},{"post_id":"ciw6hprjz00149wg7ti681lrp","tag_id":"ciw6hprkx002d9wg7qkl67cte","_id":"ciw6hprlm003t9wg7uh1623sv"},{"post_id":"ciw6hprk400189wg7rjnfjf5j","tag_id":"ciw6hprkx002d9wg7qkl67cte","_id":"ciw6hprln003v9wg7sl0c6dms"},{"post_id":"ciw6hprk8001b9wg7du1oo7kq","tag_id":"ciw6hprkx002d9wg7qkl67cte","_id":"ciw6hprln003x9wg7bvenleca"},{"post_id":"ciw6hprkc001g9wg7rpl1zdvh","tag_id":"ciw6hprkx002d9wg7qkl67cte","_id":"ciw6hprlo003z9wg726nr3x4v"},{"post_id":"ciw6hprkg001j9wg7p1ghgw6b","tag_id":"ciw6hprl2002p9wg7ki94gpt8","_id":"ciw6hprlp00439wg7xem799cn"},{"post_id":"ciw6hprkg001j9wg7p1ghgw6b","tag_id":"ciw6hprl3002s9wg7mz28lmu7","_id":"ciw6hprlp00449wg71n4fc85h"},{"post_id":"ciw6hprkg001j9wg7p1ghgw6b","tag_id":"ciw6hprl4002v9wg7tjl3k1ej","_id":"ciw6hprlq00469wg773op5oil"},{"post_id":"ciw6hprkj001n9wg77vlq4b10","tag_id":"ciw6hprlp00429wg7jfh9co1r","_id":"ciw6hprlq00479wg7748fglyr"},{"post_id":"ciw6hprkl001p9wg7cykim8nd","tag_id":"ciw6hprkx002d9wg7qkl67cte","_id":"ciw6hprlr004b9wg7kg3iewvb"},{"post_id":"ciw6hprkl001p9wg7cykim8nd","tag_id":"ciw6hprlq00489wg7pjfgo5th","_id":"ciw6hprls004c9wg7bq8vxzn5"},{"post_id":"ciw6hprkl001p9wg7cykim8nd","tag_id":"ciw6hprlr00499wg7lvzx7on9","_id":"ciw6hprls004e9wg7z0l9wtem"},{"post_id":"ciw6hprkn001s9wg7v3o4jfhj","tag_id":"ciw6hprlr004a9wg73dqr85te","_id":"ciw6hprlt004g9wg7znrnitg4"},{"post_id":"ciw6hprkn001s9wg7v3o4jfhj","tag_id":"ciw6hprls004d9wg7668m4xlu","_id":"ciw6hprlt004h9wg7fpx3sx6o"},{"post_id":"ciw6hprkp001v9wg7fs5k8l4j","tag_id":"ciw6hprkx002d9wg7qkl67cte","_id":"ciw6hprlt004i9wg74nds0a6b"},{"post_id":"ciw6hprps004j9wg7m7c4g00a","tag_id":"ciw6hprl2002p9wg7ki94gpt8","_id":"ciw6hprpw004k9wg783iy0q8u"},{"post_id":"ciw6hprps004j9wg7m7c4g00a","tag_id":"ciw6hprl3002s9wg7mz28lmu7","_id":"ciw6hprpy004m9wg7h6domzb6"},{"post_id":"ciw6hprps004j9wg7m7c4g00a","tag_id":"ciw6hprl4002v9wg7tjl3k1ej","_id":"ciw6hprpy004n9wg79aie84qd"}],"Tag":[{"name":"Canvas","_id":"ciw6hpric00059wg71ayrn5vx"},{"name":"HTML5","_id":"ciw6hpris000c9wg7kqyvw0ff"},{"name":"画布","_id":"ciw6hprj1000i9wg7xumscugs"},{"name":"Function","_id":"ciw6hprkm001q9wg7as1kuhzj"},{"name":"hexo","_id":"ciw6hprks001z9wg7t2hcsej7"},{"name":"梦魇小栈","_id":"ciw6hprku00249wg7tgl5sz6j"},{"name":"梦魇","_id":"ciw6hprkw00279wg7h7j8ym0c"},{"name":"houyi1121","_id":"ciw6hprkw002a9wg78kr9e8op"},{"name":"javascript","_id":"ciw6hprkx002d9wg7qkl67cte"},{"name":"js构造函数","_id":"ciw6hprky002g9wg77s36gtom"},{"name":"js面向对象","_id":"ciw6hprkz002m9wg7cv7kv5n5"},{"name":"继承","_id":"ciw6hprkz002n9wg7d0bvlhh0"},{"name":"继承的实现方式","_id":"ciw6hprl0002o9wg7ry4wtmhv"},{"name":"原生Js","_id":"ciw6hprl2002p9wg7ki94gpt8"},{"name":"Js框架","_id":"ciw6hprl3002s9wg7mz28lmu7"},{"name":"JQuery","_id":"ciw6hprl4002v9wg7tjl3k1ej"},{"name":"原型链","_id":"ciw6hprlp00429wg7jfh9co1r"},{"name":"原型","_id":"ciw6hprlq00489wg7pjfgo5th"},{"name":"原型的基本概念","_id":"ciw6hprlr00499wg7lvzx7on9"},{"name":"Markdown语法规范","_id":"ciw6hprlr004a9wg73dqr85te"},{"name":"tools","_id":"ciw6hprls004d9wg7668m4xlu"}]}}