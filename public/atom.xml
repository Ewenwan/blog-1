<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦魇小栈</title>
  <subtitle>专注于分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ihoey.com/"/>
  <updated>2016-11-27T08:02:51.268Z</updated>
  <id>http://blog.ihoey.com/</id>
  
  <author>
    <name>Ihoey</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工具使用篇之Markdown</title>
    <link href="http://blog.ihoey.com/posts/Markdown/2016-11-27-use-tools-part1-markdown.html"/>
    <id>http://blog.ihoey.com/posts/Markdown/2016-11-27-use-tools-part1-markdown.html</id>
    <published>2016-11-27T02:35:12.000Z</published>
    <updated>2016-11-27T08:02:51.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-介绍"><a href="#Markdown-介绍" class="headerlink" title="Markdown 介绍"></a>Markdown 介绍</h2><ul>
<li><em>Markdown</em> 是一个 <strong>轻量级  高效率</strong> 的标记语言</li>
<li>轻量级标记语言，2004 年被 <code>John Gruber</code> 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 HTML 文档格式， 很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。</li>
</ul>
<a id="more"></a>
<h2 id="Markdown-使用场景"><a href="#Markdown-使用场景" class="headerlink" title="Markdown 使用场景"></a>Markdown 使用场景</h2><ul>
<li>学习笔记</li>
<li>演讲稿</li>
<li>写书（侧重于技术相关的 内容非常适合）</li>
<li>个人笔记</li>
<li>文章博客</li>
<li>教学讲义</li>
<li>说明文档</li>
<li>电子邮件</li>
</ul>
<h2 id="Markdown-实时预览编辑器"><a href="#Markdown-实时预览编辑器" class="headerlink" title="Markdown 实时预览编辑器"></a>Markdown 实时预览编辑器</h2><ul>
<li>dillinger</li>
<li>马克飞象</li>
<li>简书</li>
<li>MarkdownPad</li>
<li>Sublime Text<ul>
<li>配合 Markdown Preview 插件</li>
</ul>
</li>
<li>Webstorm<ul>
<li>配合插件</li>
</ul>
</li>
<li>gitbook</li>
</ul>
<p>实时预览工具只是为了达到所见即所得的效果而已， 适合初学者学习 Markdown ， 我们真正在进行写作的时候，其实是不需要实时预览的， 因为 Markdown 标记语言本身已经足够清晰了。</p>
<h2 id="Markdown-安装和配置编写预览环境"><a href="#Markdown-安装和配置编写预览环境" class="headerlink" title="Markdown 安装和配置编写预览环境"></a>Markdown 安装和配置编写预览环境</h2><h3 id="Webstorm"><a href="#Webstorm" class="headerlink" title="Webstorm"></a>Webstorm</h3><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><h3 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h3><ul>
<li>MarkdownEditing 主题、自动补齐等功能</li>
<li>MarkdownPreview 在浏览器预览</li>
<li>MarkdownTOC 自动生成导航</li>
<li>Table Editor 自动表格编辑</li>
<li><a href="https://packagecontrol.io/" target="_blank" rel="external">packagecontrol</a> Sublime 的插件生态系统网站</li>
</ul>
<p>只要有写作的地方，都可以使用 Markdown 来书写。</p>
<h2 id="Markdown-标题书写"><a href="#Markdown-标题书写" class="headerlink" title="Markdown 标题书写"></a>Markdown 标题书写</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 一级标题 </span></div><div class="line"><span class="section">## 二级标题 </span></div><div class="line"><span class="section">### 三级标题</span></div><div class="line">...</div><div class="line"><span class="section">###### 六级标签</span></div><div class="line">一共六级标题</div></pre></td></tr></table></figure>
<h2 id="Markdown-列表书写语法"><a href="#Markdown-列表书写语法" class="headerlink" title="Markdown 列表书写语法"></a>Markdown 列表书写语法</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li>一级列表建议使用 <code>-</code><ul>
<li>二级列表建议使用 <code>+</code><ul>
<li>三级列表建议使用 <code>*</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>一级标题</div><div class="line"><span class="code">    + 二级标题</span></div><div class="line"><span class="code">        * 三级列表</span></div></pre></td></tr></table></figure>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol>
<li>有序列表直接使用序列加一个点开头, 然后加一个</li>
<li>有序列表嵌套无序列表<ul>
<li>有序列表中嵌套无需列表<ul>
<li>有序列表中嵌套无需列表</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">2. </span>有序列表嵌套无序列表</div><div class="line"><span class="code">    - 有序列表嵌套无序列表</span></div><div class="line"><span class="code">        + 有序列表嵌套无序列表</span></div></pre></td></tr></table></figure>
<ol>
<li>有序列表嵌套有序列表<ol>
<li>有序列表嵌套有序列表<ol>
<li>有序列表嵌套有序列表</li>
</ol>
</li>
</ol>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">3. </span>有序列表嵌套有序列表</div><div class="line"><span class="code">    1. 有序列表嵌套有序列表</span></div><div class="line"><span class="code">        1. 有序列表嵌套有序列表</span></div></pre></td></tr></table></figure>
<h4 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h4><p>无论是有序列表还是无序列表,如果就写一级列表不嵌套就可以紧凑写到一起即可,如果嵌套多级列表最好在列表项之间只用空行隔开</p>
<h2 id="Markdown-图片链接书写语法"><a href="#Markdown-图片链接书写语法" class="headerlink" title="Markdown 图片链接书写语法"></a>Markdown 图片链接书写语法</h2><h3 id="Markdown-图片书写语法"><a href="#Markdown-图片书写语法" class="headerlink" title="Markdown 图片书写语法"></a>Markdown 图片书写语法</h3><p><img src="" alt=""></p>
<h3 id="Markdown-链接书写语法"><a href="#Markdown-链接书写语法" class="headerlink" title="Markdown 链接书写语法"></a>Markdown 链接书写语法</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Markdown-介绍&quot;&gt;&lt;a href=&quot;#Markdown-介绍&quot; class=&quot;headerlink&quot; title=&quot;Markdown 介绍&quot;&gt;&lt;/a&gt;Markdown 介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Markdown&lt;/em&gt; 是一个 &lt;strong&gt;轻量级  高效率&lt;/strong&gt; 的标记语言&lt;/li&gt;
&lt;li&gt;轻量级标记语言，2004 年被 &lt;code&gt;John Gruber&lt;/code&gt; 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 HTML 文档格式， 很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://blog.ihoey.com/categories/Markdown/"/>
    
    
      <category term="Markdown语法规范" scheme="http://blog.ihoey.com/tags/Markdown%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/"/>
    
      <category term="tools" scheme="http://blog.ihoey.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part7之 Ajax 模块功能及实现</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-11-25-javascript-jquery-part7.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-11-25-javascript-jquery-part7.html</id>
    <published>2016-11-25T13:31:12.000Z</published>
    <updated>2016-11-27T02:31:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!</p>
<a id="more"></a>
<h2 id="Ajax-请求流程"><a href="#Ajax-请求流程" class="headerlink" title="Ajax 请求流程"></a>Ajax 请求流程</h2><ol>
<li>创建一个请求对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRequest</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest() : </div><div class="line">		<span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xhr = createRequest();</div><div class="line"><span class="built_in">console</span>.log(xhr);</div></pre></td></tr></table></figure>
<ol>
<li>格式化数据<ul>
<li>将格式化后的数据,参数与值都要重新编码</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatData</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ret = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> data)&#123;</div><div class="line">        ret.push(<span class="built_in">window</span>.encodeURIComponent(k) + <span class="string">'='</span> + <span class="built_in">window</span>.encodeURIComponent(data[k]));</div><div class="line">    &#125;</div><div class="line">		<span class="comment">// 如果不想从服务器缓存中读取数据</span></div><div class="line">	ret.push((<span class="string">'_='</span> + <span class="built_in">Math</span>.random()).replace(<span class="string">'.'</span>, <span class="string">''</span>));</div><div class="line">    <span class="keyword">return</span> ret.join(<span class="string">'&amp;'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> data = &#123;<span class="attr">name</span>: <span class="string">'梦魇小栈'</span>,<span class="attr">age</span>: <span class="number">2</span>,<span class="attr">url</span>:<span class="string">'http://blog.ihoey.com'</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(formatData(data));<span class="comment">//name=%E6%A2%A6%E9%AD%87%E5%B0%8F%E6%A0%88&amp;age=2&amp;url=http%3A%2F%2Fblog.ihoey.com</span></div></pre></td></tr></table></figure>
<ol>
<li>与服务器建立连接</li>
<li>监听请求状态</li>
<li>发送请求</li>
<li>封装</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	// 默认配置信息</div><div class="line">	ajaxSetting = &#123;</div><div class="line">		url: '',</div><div class="line">		type: 'GET',</div><div class="line">		dataType: 'text',</div><div class="line">		contentType: 'application/x-www-form-urlencoded',</div><div class="line">		data: null,</div><div class="line">		async: true,</div><div class="line">		success: null,</div><div class="line">		fail: null</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	function createRequest() &#123;</div><div class="line">		return window.XMLHttpRequest ? new window.XMLHttpRequest() : </div><div class="line">			new ActiveXObject('Microsoft.XMLHTTP');</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function formatData(data) &#123;</div><div class="line">		var ret = [];</div><div class="line">		for(var k in data)&#123;</div><div class="line">			ret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));</div><div class="line">		&#125;</div><div class="line">		// 如果不想从服务器缓存中读取数据</div><div class="line">		ret.push(('_=' + Math.random()).replace('.', ''));</div><div class="line">		return ret.join('&amp;');</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function ajax(config) &#123;</div><div class="line">		var context = &#123;&#125;, </div><div class="line">			xhr, </div><div class="line">			postData = '';</div><div class="line">		// 过滤无效参数</div><div class="line">		if(!config || !config.url) &#123;</div><div class="line">			console.warn("参数异常");</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		// debugger;</div><div class="line">		// 获取默认配置信息</div><div class="line">		itcast.extend(ajaxSetting, context);</div><div class="line">		// 用户的配置覆盖默认配置</div><div class="line">		itcast.extend(config, context);</div><div class="line">		// 1: 创建请求对象</div><div class="line">		xhr = createRequest();</div><div class="line">		// 2：格式化数据</div><div class="line">		if(context.data)&#123;</div><div class="line">			postData = formatData(context.data);</div><div class="line">		&#125;</div><div class="line">		// 3：与服务器建立连接</div><div class="line">		if(context.type.toUpperCase() === 'GET')&#123;</div><div class="line">			xhr.open('GET', context.url + '?' + postData, context.async);</div><div class="line">			postData = null;</div><div class="line">		&#125; else &#123;</div><div class="line">			// 模拟表单提交，设置请求头信息</div><div class="line">			xhr.setRequestHeader('Content-Type', context.contentType);</div><div class="line">			xhr.open('POST', context.url, context.async);				</div><div class="line">		&#125;</div><div class="line">		// 4：监听请求状态</div><div class="line">		xhr.onreadystatechange = function() &#123;</div><div class="line">			if(xhr.readyState === 4)&#123;</div><div class="line">				if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status === 304)&#123;</div><div class="line">					// 获取到请求回来的数据</div><div class="line">					var text = xhr.responseText;</div><div class="line">					// 如果指定的数据格式为 json，那就将其转换为json对象</div><div class="line">					text = context.dataType.toLowerCase() === 'json' ?</div><div class="line">						JSON.parse(text) : text;</div><div class="line"></div><div class="line">					context.success &amp;&amp; context.success(text);</div><div class="line">				&#125; else &#123;</div><div class="line">					context.fail &amp;&amp; context.fail(&#123;"errorCode": xhr.status, "message": "请求超时."&#125;);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		// 5: 发送请求</div><div class="line">		xhr.send(postData);</div><div class="line">		// context.success &amp;&amp; context.success(JSON.parse(xhr.responseText));</div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	ajax(&#123;</div><div class="line">		url: 'data.json',</div><div class="line">		dataType: 'json',</div><div class="line">		async: false,</div><div class="line">		success: function(data) &#123;</div><div class="line">			document.getElementById('content').innerHTML= '&lt;p&gt;' + data.username + '&lt;/p&gt;' +</div><div class="line">					'&lt;p&gt;' + data.age + '&lt;/p&gt;';</div><div class="line">		&#125;,</div><div class="line">		fail: function(er) &#123;</div><div class="line">			console.log(er.errorCode);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="Jsonp-请求"><a href="#Jsonp-请求" class="headerlink" title="Jsonp 请求"></a>Jsonp 请求</h2><ol>
<li>跨域 只能发送 <code>GET</code> 请求 . 一种不安全的请求方式</li>
<li>原理:由于 <code>dom</code> 元素的 <code>src</code> 属性,具有跨域功能. 在实现跨域请求时,为了方便就使用 <code>script</code> 标签来做.</li>
<li>流程<ul>
<li>创建请求对象,就是创建一个 <code>script</code> 标签</li>
<li>将上述创建的 <code>script</code> 标签添加到页面的 <code>head</code> 标签下</li>
<li>格式化数据</li>
<li>创建全局回调函数</li>
<li>设置超时时间,如果超过此时间,也没有得到数据,表示请求失败.否则,请求成功</li>
<li>发送请求: 指定 <code>script</code> 标签的 <code>src</code> 属性值</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="http://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="http://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="http://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part6之动画模块功能及实现</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-11-24-javascript-jquery-part6.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-11-24-javascript-jquery-part6.html</id>
    <published>2016-11-24T01:38:13.000Z</published>
    <updated>2016-11-24T13:13:53.120Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!</p>
<a id="more"></a>
<h2 id="动画原理"><a href="#动画原理" class="headerlink" title="动画原理"></a>动画原理</h2><ul>
<li>根据人眼具有 <code>0.1</code> 秒的视觉残留,只有在一秒切换至少 <code>24</code> 个画面就会产生动画</li>
</ul>
<h2 id="动画的基本结构"><a href="#动画的基本结构" class="headerlink" title="动画的基本结构"></a>动画的基本结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">//动画</span></div><div class="line">	&#125;</div><div class="line">	<span class="built_in">window</span>.setInterval(render, time);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="小动画案例"><a href="#小动画案例" class="headerlink" title="小动画案例"></a>小动画案例</h2><ul>
<li>奔跑的小矩形</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>奔跑吧矩形<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"itcast.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">		div &#123;</div><div class="line">			width: 100px;</div><div class="line">			height: 100px;</div><div class="line">			border: 5px solid yellowgreen;</div><div class="line">			position: relative;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, step, target</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> left,<span class="comment">//起始位置</span></div><div class="line">			timer;<span class="comment">//定时器id</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;<span class="comment">//用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line">			left = elem.offsetLeft;</div><div class="line">			<span class="keyword">if</span>( left + step &gt;= target )&#123;</div><div class="line">				elem.style.left = target + <span class="string">'px'</span>;</div><div class="line">				<span class="built_in">window</span>.clearInterval(timer);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				elem.style.left = left + step + <span class="string">'px'</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 启动定时器 开始动画</span></div><div class="line">		timer = <span class="built_in">window</span>.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">	&#125;;</div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			animate(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>), <span class="number">3</span>, <span class="number">1000</span>);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span>开始动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="匀速直线动画"><a href="#匀速直线动画" class="headerlink" title="匀速直线动画"></a>匀速直线动画</h2><ol>
<li>固定时间</li>
<li>固定距离</li>
<li>如何判断动画结束的时机?<ul>
<li>使用时间来判断是否结束动画</li>
<li>如果动画时间到达指定时间,那么就结束动画,并让动画元素到达终点</li>
</ul>
</li>
<li>实现思路<ul>
<li>定义动画函数, <code>animate</code> 函数. 当调用 <code>animate</code> 函数时, 即动画开始的时间</li>
<li>定义 <code>render</code> 函数. 用来给动画元素设置属性值<ul>
<li>计算当前动画元素所在的位置, 然后累计到其对应属性值上.</li>
<li>首先计算动画的时间间隔</li>
<li>如果时间间隔大于或等于指定的总时间, 那么就停止动画并设置动画元素到达终点</li>
<li>否则, 根据速度, 动画时间间隔计算出位移. 再将其于起始位置累加后赋值给 <code>elem</code> </li>
</ul>
</li>
<li>定义定时器, 开始动画. </li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">		speed, <span class="comment">// 速度</span></div><div class="line">		location, <span class="comment">// 起始位置</span></div><div class="line">		distance, <span class="comment">// 动画总距离</span></div><div class="line">		startTime,<span class="comment">// 动画开始时间</span></div><div class="line">		currentTime,<span class="comment">// 动画当前时间</span></div><div class="line">		time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">	location = elem.offsetLeft;</div><div class="line">	distance = target - location;</div><div class="line">	speed = distance / duration;</div><div class="line">	startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;  <span class="comment">// 转换毫秒值</span></div><div class="line">	<span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line">	<span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">		time = currentTime - startTime;</div><div class="line">		<span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line">		<span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line">		<span class="keyword">if</span>(time &gt;= duration)&#123;</div><div class="line">			<span class="comment">// console.log(time);</span></div><div class="line">			<span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">			elem.style.left = target + <span class="string">'px'</span>;</div><div class="line">			<span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line">			<span class="built_in">window</span>.clearInterval(timer);</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class="line">			<span class="comment">// 指定动画元素的位置</span></div><div class="line">			<span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">			elem.style.left = speed * time + location + <span class="string">'px'</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 启动定时器 开始动画</span></div><div class="line">	timer = <span class="built_in">window</span>.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">&#125;;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		animate(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>), <span class="number">1000</span>, <span class="number">2000</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="匀减速直线动画"><a href="#匀减速直线动画" class="headerlink" title="匀减速直线动画"></a>匀减速直线动画</h2><ol>
<li>物理公式<ul>
<li>a：    加速度</li>
<li>t：    时间间隔</li>
<li>v0：    初始速度</li>
<li>vt：    末速度</li>
<li>S：    位移</li>
<li>正方向：    S = v0 <em> t + a + t </em> t / 2;</li>
</ul>
</li>
<li>S ==&gt; target - location <br> t ==&gt; duration <br> v0 = 0</li>
<li>正方向 <br> a = 2 <em> ( S - v0 </em> t) / ( t <em> t) <br> ==&gt; = 2 </em> S / ( t <em> t) <br> ==&gt; = 2 </em> ( target - location ) / ( duration <em> duration ) <br> vt = 2 </em> ( target - location ) / duration </li>
<li>time 时间间隔内的 匀减速位移 <br> tween = v0 <em> t - a </em> t <em> t / 2 <br> ==&gt; tween = 2 </em> ( target - location ) <em> time / duration <br> - (target - location ) </em> time <em> time / ( duration </em> duration )</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">		tween, <span class="comment">// 单位时间间隔的位移</span></div><div class="line">		location, <span class="comment">// 起始位置</span></div><div class="line">		distance, <span class="comment">// 动画总距离</span></div><div class="line">		startTime, <span class="comment">// 动画开始时间</span></div><div class="line">		currentTime, <span class="comment">// 动画当前时间</span></div><div class="line">		time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">	location = elem.offsetLeft;</div><div class="line">	distance = target - location;</div><div class="line">	startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>; <span class="comment">// 转换毫秒值</span></div><div class="line">	<span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line">	<span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">		time = currentTime - startTime;</div><div class="line">		<span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line">		<span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line">		<span class="keyword">if</span> (time &gt;= duration) &#123;</div><div class="line">			<span class="comment">// console.log(time);</span></div><div class="line">			<span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">			tween = distance;</div><div class="line">			<span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line">			<span class="built_in">window</span>.clearInterval(timer);</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class="line">			<span class="comment">// 指定动画元素的位置</span></div><div class="line">			<span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">			tween = <span class="number">2</span> * distance * time / duration - distance * time * time / (duration * duration);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		elem.style.left = tween + location + <span class="string">'px'</span>;</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 启动定时器 开始动画</span></div><div class="line">	timer = <span class="built_in">window</span>.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">&#125;;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		animate(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>), <span class="number">1000</span>, <span class="number">1500</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="使用对象封装缓动函数"><a href="#使用对象封装缓动函数" class="headerlink" title="使用对象封装缓动函数"></a>使用对象封装缓动函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	x: null,</div><div class="line">	t: 时间间隔</div><div class="line">	b: 起始位置</div><div class="line">	c: 终止位置</div><div class="line">	d: 总时间</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">var</span> easing = &#123;		</div><div class="line">	<span class="attr">linear</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> (c - b) * t / d;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">minusspeed</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">2</span> * (c - b) * t / d - (c - b) * t * t / (d * d);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * (t /= d) * t + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> -c * (t /= d) * (t - <span class="number">2</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t + b;</div><div class="line">		<span class="keyword">return</span> -c / <span class="number">2</span> * ((--t) * (t - <span class="number">2</span>) - <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * (t /= d) * t * t + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t + <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t + b;</div><div class="line">		<span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t + <span class="number">2</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * (t /= d) * t * t * t + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> -c * ((t = t / d - <span class="number">1</span>) * t * t * t - <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t * t + b;</div><div class="line">		<span class="keyword">return</span> -c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t * t - <span class="number">2</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * (t /= d) * t * t * t * t + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t * t * t + <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t * t * t + b;</div><div class="line">		<span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t * t * t + <span class="number">2</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> -c * <span class="built_in">Math</span>.cos(t / d * (<span class="built_in">Math</span>.PI / <span class="number">2</span>)) + c + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * <span class="built_in">Math</span>.sin(t / d * (<span class="built_in">Math</span>.PI / <span class="number">2</span>)) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> -c / <span class="number">2</span> * (<span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI * t / d) - <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> (t == <span class="number">0</span>) ? b : c * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t / d - <span class="number">1</span>)) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> (t == d) ? b + c : c * (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * t / d) + <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">		<span class="keyword">if</span> (t == d) <span class="keyword">return</span> b + c;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t - <span class="number">1</span>)) + b;</div><div class="line">		<span class="keyword">return</span> c / <span class="number">2</span> * (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * --t) + <span class="number">2</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> -c * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t /= d) * t) - <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * <span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t = t / d - <span class="number">1</span>) * t) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> -c / <span class="number">2</span> * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - t * t) - <span class="number">1</span>) + b;</div><div class="line">		<span class="keyword">return</span> c / <span class="number">2</span> * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t -= <span class="number">2</span>) * t) + <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line">		<span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line">		<span class="keyword">var</span> a = c;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">		<span class="keyword">if</span> ((t /= d) == <span class="number">1</span>) <span class="keyword">return</span> b + c;</div><div class="line">		<span class="keyword">if</span> (!p) p = d * <span class="number">.3</span>;</div><div class="line">		<span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">			a = c;</div><div class="line">			<span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">		<span class="keyword">return</span> -(a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p)) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line">		<span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line">		<span class="keyword">var</span> a = c;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">		<span class="keyword">if</span> ((t /= d) == <span class="number">1</span>) <span class="keyword">return</span> b + c;</div><div class="line">		<span class="keyword">if</span> (!p) p = d * <span class="number">.3</span>;</div><div class="line">		<span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">			a = c;</div><div class="line">			<span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">		<span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * t) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) + c + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line">		<span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line">		<span class="keyword">var</span> a = c;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) == <span class="number">2</span>) <span class="keyword">return</span> b + c;</div><div class="line">		<span class="keyword">if</span> (!p) p = d * (<span class="number">.3</span> * <span class="number">1.5</span>);</div><div class="line">		<span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">			a = c;</div><div class="line">			<span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">		<span class="keyword">if</span> (t &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-.5</span> * (a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p)) + b;</div><div class="line">		<span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) * <span class="number">.5</span> + c + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line">		<span class="keyword">return</span> c * (t /= d) * t * ((s + <span class="number">1</span>) * t - s) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line">		<span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * ((s + <span class="number">1</span>) * t + s) + <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * (t * t * (((s *= (<span class="number">1.525</span>)) + <span class="number">1</span>) * t - s)) + b;</div><div class="line">		<span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * (((s *= (<span class="number">1.525</span>)) + <span class="number">1</span>) * t + s) + <span class="number">2</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutBounce</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((t /= d) &lt; (<span class="number">1</span> / <span class="number">2.75</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> c * (<span class="number">7.5625</span> * t * t) + b;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2</span> / <span class="number">2.75</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">1.5</span> / <span class="number">2.75</span>)) * t + <span class="number">.75</span>) + b;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2.5</span> / <span class="number">2.75</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">2.25</span> / <span class="number">2.75</span>)) * t + <span class="number">.9375</span>) + b;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">2.625</span> / <span class="number">2.75</span>)) * t + <span class="number">.984375</span>) + b;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="抽取缓动函数"><a href="#抽取缓动函数" class="headerlink" title="抽取缓动函数"></a>抽取缓动函数</h2><p>将缓动函数的可变变量抽取出来,以便于封装</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration, easingName</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">			tween, <span class="comment">// 单位时间间隔的位移</span></div><div class="line">			location, <span class="comment">// 起始位置</span></div><div class="line">			distance, <span class="comment">// 动画总距离</span></div><div class="line">			startTime,<span class="comment">// 动画开始时间</span></div><div class="line">			currentTime,<span class="comment">// 动画当前时间</span></div><div class="line">			time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">		location = elem.offsetLeft;</div><div class="line">		distance = target - location;				</div><div class="line">		startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;  <span class="comment">// 转换毫秒值</span></div><div class="line">		<span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line">		<span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">			time = currentTime - startTime;</div><div class="line">			<span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line">			<span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line">			<span class="keyword">if</span>(time &gt;= duration)&#123;</div><div class="line">				<span class="comment">// console.log(time);</span></div><div class="line">				<span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">				tween = distance;</div><div class="line">				<span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line">				<span class="built_in">window</span>.clearInterval(timer);</div><div class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class="line">				<span class="comment">// 指定动画元素的位置</span></div><div class="line">				<span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">				tween = easing[easingName](<span class="literal">null</span>, time, location, target, duration);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			elem.style.left = tween + location + <span class="string">'px'</span>;</div><div class="line">		&#125;;</div><div class="line">		<span class="comment">// 启动定时器 开始动画</span></div><div class="line">		timer = <span class="built_in">window</span>.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">	&#125;;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		animate(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>), <span class="number">1000</span>, <span class="number">1500</span>, <span class="string">'easeInOutElastic'</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="多属性动画的实现"><a href="#多属性动画的实现" class="headerlink" title="多属性动画的实现"></a>多属性动画的实现</h2><p>到此我们就可以继续进行框架的封装了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取所有动画属性的起始值</span></div><div class="line"><span class="keyword">var</span> kv = &#123;</div><div class="line">	<span class="string">'left'</span>: <span class="string">'offsetLeft'</span>,</div><div class="line">	<span class="string">'top'</span>: <span class="string">'offsetTop'</span>,</div><div class="line">	<span class="string">'width'</span>: <span class="string">'offsetWidth'</span>,</div><div class="line">	<span class="string">'height'</span>: <span class="string">'offsetHeight'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocation</span>(<span class="params">elem, target</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> target) &#123;</div><div class="line">		obj[k] = elem[kv[k]];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDistance</span>(<span class="params">location, target</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> target) &#123;</div><div class="line">		obj[k] = <span class="built_in">parseFloat</span>(target[k]) - location[k];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTween</span>(<span class="params">time, location, target, duration, easingName</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> target) &#123;</div><div class="line">		obj[k] = easing[easingName](<span class="literal">null</span>, time, location[k], target[k], duration);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyles</span>(<span class="params">elem, location, tween</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> k;</div><div class="line">	<span class="keyword">for</span> (k <span class="keyword">in</span> location) &#123;</div><div class="line">		elem.style[k] = location[k] + tween[k] + <span class="string">'px'</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration, easingName</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">		tween, <span class="comment">// 单位时间间隔的位移&#123;left: 800, top:400&#125;</span></div><div class="line">		location, <span class="comment">// 起始位置&#123;left: 8,top: 8&#125;</span></div><div class="line">		distance, <span class="comment">// 动画总距离&#123;left: 992, top: 792&#125;</span></div><div class="line">		startTime, <span class="comment">// 动画开始时间</span></div><div class="line">		currentTime, <span class="comment">// 动画当前时间</span></div><div class="line">		time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">	location = getLocation(elem, target);</div><div class="line">	distance = getDistance(location, target);</div><div class="line">	startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>; <span class="comment">// 转换毫秒值</span></div><div class="line">	<span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line">	<span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">		time = currentTime - startTime;</div><div class="line">		<span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line">		<span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line">		<span class="keyword">if</span> (time &gt;= duration) &#123;</div><div class="line">			<span class="comment">// console.log(time);</span></div><div class="line">			<span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">			tween = distance;</div><div class="line">			<span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line">			global.clearInterval(timer);</div><div class="line">			<span class="comment">// 3 删除动画元素的timerId属性</span></div><div class="line">			<span class="keyword">delete</span> elem.timerId;</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class="line">			<span class="comment">// 指定动画元素的位置</span></div><div class="line">			<span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">			tween = getTween(time, location, target, duration, easingName);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 设置动画属性值</span></div><div class="line">		setStyles(elem, location, tween);</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 启动定时器 开始动画</span></div><div class="line">	timer = global.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">	<span class="comment">// 把定时器id存储在动画元素上（以自定义属性）</span></div><div class="line">	elem.timerId = timer;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="实现animate和stop方法"><a href="#实现animate和stop方法" class="headerlink" title="实现animate和stop方法"></a>实现animate和stop方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">itcast.fn.extend(&#123;</div><div class="line">	<span class="attr">animate</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target, duration, easingName</span>) </span>&#123;</div><div class="line">		easingName = easingName || <span class="string">'linear'</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span>(!(<span class="string">'timerId'</span> <span class="keyword">in</span> <span class="keyword">this</span>))&#123;</div><div class="line">				animate(<span class="keyword">this</span>, target, duration, easingName);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">stop</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span>(<span class="string">'timerId'</span> <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</div><div class="line">				global.clearInterval(<span class="keyword">this</span>.timerId);</div><div class="line">				<span class="keyword">delete</span> <span class="keyword">this</span>.timerId;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>动画模块的实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"itcast.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">		div &#123;</div><div class="line">			width: 100px;</div><div class="line">			height: 100px;</div><div class="line">			border: 5px solid yellowgreen;</div><div class="line">			position: relative;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				$(<span class="string">'#dv'</span>).animate(&#123;<span class="attr">left</span> : <span class="number">1000</span>&#125;, <span class="number">1500</span>);</div><div class="line">			&#125;);</div><div class="line">			$(<span class="string">'#stop'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				$(<span class="string">'#dv'</span>).stop();</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span>开始	动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"stop"</span>&gt;</span>停止	动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="http://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="http://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="http://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part5之事件模块功能及实现</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-11-23-javascript-jquery-part5.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-11-23-javascript-jquery-part5.html</id>
    <published>2016-11-23T02:27:16.000Z</published>
    <updated>2016-11-24T01:37:37.701Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第五部分事件部分功能及实现,接第四部分!</p>
<a id="more"></a>
<h2 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove 方法"></a>remove 方法</h2><ol>
<li>功能:将筛选出来的所有 <code>dom</code> 元素删除掉</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素;</li>
<li>获取当前 <code>dom</code> 元素的父节点,调用 <code>removeChild</code> 方法删除自己;</li>
<li>循环结束,返回 <code>this</code> .</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">remove: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="empty-方法"><a href="#empty-方法" class="headerlink" title="empty 方法"></a>empty 方法</h2><ol>
<li>功能:将筛选出来的所有 <code>dom</code> 元素,清空后代节点</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素;</li>
<li>直接给当前 <code>dom</code> 元素的 <code>innerHTML</code> 属性赋值为空字符串;</li>
<li>循环结束,返回 <code>this</code> ,实现链式编程.</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">empty: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.innerHTML = <span class="string">''</span>;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><b>以上接第四部分 <code>dom</code> 操作模块</b></p>
<hr>
<p><b>事件部分begin</b></p>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><ol>
<li><p>DOM 0方式</p>
<ul>
<li>通过 <code>dom</code> 元素的 <code>on + 事件名</code> 属性来绑定事件,并且赋值为 一个字符串;</li>
<li>上述字符串为 执行该事件的代码块(逻辑);</li>
<li>缺点:可读性以及可维护性不好.</li>
</ul>
</li>
<li><p>DOM 0方式的加强版</p>
<ul>
<li>通过 <code>dom</code> 元素的 <code>on + 事件名</code> 属性来绑定事件,并且赋值为 一个事件处理函数;</li>
<li>缺点:定义很多的全局函数,容易造成内存过大的损耗,依然没有解决 <code>js</code> 代码和 <code>html</code> 的耦合度关系;</li>
</ul>
</li>
<li><p>IE标准</p>
<ul>
<li>通过 <code>attachEvent</code> 来绑定事件;</li>
<li>语法: <code>dom.attachEvent(type, callback)</code>;</li>
<li>移除事件: <code>detachEvent(type, callback)</code>;<ul>
<li>注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>
</ul>
</li>
</ul>
</li>
<li><p>W3C标准</p>
<ul>
<li>通过 <code>addEventListener</code> 方法来给dom元素绑定事件;</li>
<li>语法: <code>dom.addEventListener(type, callback, useCapture默认值为false)</code>;</li>
<li>移除事件: <code>removEventListener(type, callback)</code>;<ul>
<li>注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>
</ul>
</li>
</ul>
</li>
<li><p>事件流</p>
<ul>
<li>概念: 用户在触发某一动作时,页面所做相关反映的过程</li>
<li>三个阶段:<ul>
<li>事件捕获阶段</li>
<li>处于事件源阶段</li>
<li>冒泡阶段</li>
</ul>
</li>
<li>事件流种类<ul>
<li>捕获型事件流: 事件处理函数是在事件的捕获阶段执行</li>
<li>冒泡型事件流: 事件处理函数是在事件的冒泡阶段执行</li>
</ul>
</li>
</ul>
</li>
<li><p>attachEvent 和 addEventListener 区别</p>
<ul>
<li>参数个数不同</li>
<li>事件类型传值不同<ul>
<li><code>IE</code> 标准需要加 <code>on</code> 前缀</li>
<li><code>W3C</code> 标准不加 <code>on</code> 前缀</li>
</ul>
</li>
<li>在绑定多个事件处理函数时，<code>IE</code> 在执行事件处理函数时,顺序不定(根据版本),而 <code>W3C</code>按照对垒结构来一次执行事件的处理函数</li>
<li>在事件处理函数内 <code>this</code> 指向不同<ul>
<li>IE: <code>window</code></li>
<li>W3C: 返回正在执行事件的处理函数的 <code>dom</code> 元素</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="addEvent-方法"><a href="#addEvent-方法" class="headerlink" title="addEvent 方法"></a>addEvent 方法</h2><ol>
<li>根据浏览器能力,提前返回事件绑定方法</li>
<li>如果浏览器符合 <code>W3C</code> 标准,使用 <code>addEventListener</code> 来绑定事件</li>
<li>否则就使用 <code>attachEvent</code> 来绑定事件</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//提前返回</span></div><div class="line"><span class="keyword">var</span> addEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 如果符合W3C标准，使用addEvnetListener绑定事件</span></div><div class="line">    <span class="keyword">if</span> (global.addEventListener) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, callback, useCapture</span>) </span>&#123;</div><div class="line">            elem.addEventListener(type, callback, useCapture || <span class="literal">false</span>);</div><div class="line">        &#125;;</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则就使用IE标准的 attachEvent绑定事件</span></div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, callback</span>) </span>&#123;</div><div class="line">            elem.attachEvent(<span class="string">'on'</span> + type, callback);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<h2 id="removeEvent-方法"><a href="#removeEvent-方法" class="headerlink" title="removeEvent 方法"></a>removeEvent 方法</h2><ol>
<li>根据浏览器能力,提前返回事件移除方法</li>
<li>如果浏览器符合 <code>W3C</code> 标准,使用 <code>removeEventListener</code> 来移除事件处理函数</li>
<li>否则就使用 <code>detachEvent</code> 来移除事件处理函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//提前返回</span></div><div class="line"><span class="keyword">var</span> removeEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (global.removeEventListener) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, callback</span>) </span>&#123;</div><div class="line">            elem.removeEventListener(type, callback);</div><div class="line">        &#125;;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, callback</span>) </span>&#123;</div><div class="line">            elem.detachEvent(<span class="string">'on'</span> + type, callback);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<h2 id="on-方法"><a href="#on-方法" class="headerlink" title="on 方法"></a>on 方法</h2><ol>
<li>功能:给 <code>itcast</code> 对象上的所有的 <code>dom</code> 元素绑定事件</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上所有 <code>dom</code> 元素</li>
<li>调用 <code>addEvent</code> 给当前遍历到的 <code>dom</code> 元素绑定事件</li>
<li>返回 <code>this</code> ，实现链式编程</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">on: <span class="function"><span class="keyword">function</span>(<span class="params">type, callback, capture</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        addEvent(<span class="keyword">this</span>, type, callback, capture);</div><div class="line">    &#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="off-方法"><a href="#off-方法" class="headerlink" title="off 方法"></a>off 方法</h2><ol>
<li>功能：移除 <code>itcast</code> 对象上所有 <code>dom</code> 元素的事件处理函数</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上所有 <code>dom</code> 元素</li>
<li>调用 <code>removeEvent</code> 给当前遍历到的 <code>dom</code> 元素移除相应事件的处理函数</li>
<li>返回 <code>this</code> ，实现链式编程</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">off: <span class="function"><span class="keyword">function</span>(<span class="params">type, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        removeEvent(<span class="keyword">this</span>, type, callback);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="click-方法"><a href="#click-方法" class="headerlink" title="click 方法"></a>click 方法</h2><ol>
<li>功能: 给 <code>itcast</code> 对象上的所有的 <code>dom</code> 元素绑定单击事件处理函数的</li>
<li>语法: <code>itcast对象.click(callback)</code>;</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>
<li>调用 <code>addEventListener</code> 分别传值即可</li>
<li><code>return this</code> 实现链式编程</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">click: <span class="function"><span class="keyword">function</span>(<span class="params">callback, capture</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        addEvent(<span class="keyword">this</span>, <span class="string">'click'</span>, callback, capture);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="快捷绑定事件方法"><a href="#快捷绑定事件方法" class="headerlink" title="快捷绑定事件方法"></a>快捷绑定事件方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">itcast.each([<span class="string">'click'</span>, <span class="string">'dblclick'</span>, <span class="string">'keypress'</span>, <span class="string">'keyup'</span>, <span class="string">'keydown'</span>, <span class="string">'mouseover'</span>, <span class="string">'mouseout'</span>,</div><div class="line"><span class="string">'mouseenter'</span>, <span class="string">'mouseleave'</span>, <span class="string">'mousemove'</span>, <span class="string">'mouseup'</span>, <span class="string">'mousedown'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">    itcast.fn[type] = <span class="function"><span class="keyword">function</span>(<span class="params">callback, capture</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.on(type, callback, capture);</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第五部分事件部分功能及实现,接第四部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="http://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="http://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="http://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part4之DOM操作模块功能及实现</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-11-21-javascript-jquery-part4.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-11-21-javascript-jquery-part4.html</id>
    <published>2016-11-21T11:08:10.000Z</published>
    <updated>2016-11-24T01:37:29.096Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第四部分属性部分功能及实现,接第三部分!</p>
<a id="more"></a>
<h2 id="appendTo-方法"><a href="#appendTo-方法" class="headerlink" title="appendTo 方法"></a>appendTo 方法</h2><ol>
<li>功能:将结果集中的元素 追加到指定的 <code>dom</code> 元素上.</li>
<li>语法:<code>&lt;target对象&gt;.appendTo(target)</code></li>
<li>实现思路<ul>
<li>定义 <code>appendTo</code> 方法,声明一个形参 <code>target</code> .追加到目标 <code>dom</code> 元素<ul>
<li>选择器</li>
<li><code>dom</code> 元素</li>
<li><code>dom</code> 数组</li>
</ul>
</li>
<li>为了操作方便,将 <code>target</code> 类型统一为 <code>itcast</code> 对象,去 <code>itcast</code> 函数走一圈,出来就是 <code>itcast</code> 对象.</li>
<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素,再遍历 <code>target</code> 上的每一个 <code>dom</code> 元素</li>
<li>将 <code>this</code> 上的 <code>dom</code> 元素追加到 <code>target</code> 上</li>
<li>注意:<br>  在追加节点时,如果遍历的是第一个目标 <code>dom</code> 元素,不需要拷贝节点;否则要深拷贝节点,并将上述得到的节点储存到 <code>ret</code> 内</li>
<li>将 <code>ret</code> 数组转换成 <code>itcast</code> 对象,作为 <code>appendTo</code> 方法的返回值<ul>
<li>如果不这样做的话,就会在添加样式时,只有没拷贝的节点有样式</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">appendTo: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> node, </div><div class="line">		ret = [];</div><div class="line">	<span class="comment">// 统一target类型 为itcast对象（为了方便操作）</span></div><div class="line">	target = itcast(target);</div><div class="line">	<span class="comment">// 遍历this上的每一个dom元素</span></div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="comment">// 在遍历目标dom元素</span></div><div class="line">		target.each(<span class="function"><span class="keyword">function</span>(<span class="params">t, i</span>) </span>&#123;</div><div class="line">			<span class="comment">// 如果当前dom元素为 目标上的第一个.不拷贝节点</span></div><div class="line">			<span class="comment">// 否则拷贝节点</span></div><div class="line">			node = i === <span class="number">0</span> ? v : v.cloneNode(<span class="literal">true</span>);</div><div class="line">			<span class="comment">// 将被追加的节点,添加到ret内</span></div><div class="line">			ret.push(node);</div><div class="line">			<span class="comment">// 将节点追加到指定的目标dom元素上.</span></div><div class="line">			t.appendChild(node);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">// 将每一个添加的dom元素,转换成itcast对象返回,实现链式编程</span></div><div class="line">	<span class="comment">// 原因:在添加样式时,如果不这样做的话,只会给没克隆的节点添加样式.</span></div><div class="line">	<span class="keyword">return</span> itcast(ret);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="append-方法"><a href="#append-方法" class="headerlink" title="append 方法"></a>append 方法</h2><ol>
<li>语法: <code>&lt;itcast对象&gt;.append(source)</code> ;</li>
<li>功能: 将 <code>source</code> 上的所有 <code>dom</code> 元素,追加到 <code>itcast</code> 对象上</li>
<li>实现思路<ul>
<li>统一 <code>source</code> 类型,为 <code>itcast</code> 对象.</li>
<li><code>source.appendTo(this)</code></li>
<li><code>return this;</code></li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">append: <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">	<span class="comment">//统一source类型,为itcast对象</span></div><div class="line">	source = itcast(source);</div><div class="line">	source.appendTo(<span class="keyword">this</span>);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="prependTo-方法"><a href="#prependTo-方法" class="headerlink" title="prependTo 方法"></a>prependTo 方法</h2><ol>
<li>语法: <code>&lt;itcast对象&gt;.prependTo(target);</code></li>
<li>功能:将 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素,追加到 <code>target</code> 最前边 <code>insertBefore</code></li>
<li>实现思路<ul>
<li>统一 <code>target</code> 类型,为 <code>itcast</code> 对象</li>
<li>定义 <code>node</code> 变量,临时存储被追加的结点.定义 <code>ret</code> 数组,存储所有被追加的节点</li>
<li>先遍历 <code>target</code> 上的每一个 <code>dom</code> 元素</li>
<li>定义变量 <code>firstChild</code> ,临时存储当前目标 <code>dom</code> 元素的第一个子节点,再遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>
<li>判断当前遍历的 <code>dom</code> 是否为 <code>target</code> 上的第一个 <code>dom</code> 元素</li>
<li>如果为真,此时不需要克隆节点</li>
<li>否则,要深克隆节点</li>
<li>将上述的到的节点, <code>push</code> 到 <code>ret</code> 内</li>
<li>调用 <code>insertBefore</code> 方法追加节点,此时第一个参数为追加新的节点,第二个参数为 <code>firstChild</code> ,在 <code>firstChild</code> 之前追加新节点.</li>
<li>两层循环结束,操作完成</li>
<li>将 <code>ret</code> 转换成 <code>itcast</code> 对象,作为 <code>prependTo</code> 方法的返回值,实现链式编程.</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">prependTo: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">	<span class="comment">//定义变量node,临时存储被追加的节点</span></div><div class="line">	<span class="keyword">var</span> node,</div><div class="line">	<span class="comment">//定义变量firstChild,临时存储当前dom元素的第一个子节点</span></div><div class="line">		firstChild,</div><div class="line">		self = <span class="keyword">this</span>,</div><div class="line">		<span class="comment">//定义ret数组,存储所有被追加的节点</span></div><div class="line">		ret = [];</div><div class="line">   <span class="comment">//统一类型为itcast对象</span></div><div class="line">	target = itcast(target);</div><div class="line">	<span class="comment">//遍历target上的每一个dom元素</span></div><div class="line">	target.each(<span class="function"><span class="keyword">function</span>(<span class="params">elem, i</span>) </span>&#123;</div><div class="line">		<span class="comment">// 缓存当前目标dom元素的第一个子节点</span></div><div class="line">		firstChild = elem.firstChild;</div><div class="line">		<span class="comment">//遍历this上的每一个dom元素</span></div><div class="line">		self.each(<span class="function"><span class="keyword">function</span>(<span class="params">dom</span>) </span>&#123;</div><div class="line">			<span class="comment">//判断当前遍历的dom是否为target上的每一个dom元素</span></div><div class="line">			<span class="comment">//若为真,则不需要克隆节点,否则,要深克隆节点</span></div><div class="line">			<span class="comment">// 将得到的节点赋值给node</span></div><div class="line">			node = i === <span class="number">0</span> ? dom : dom.cloneNode(<span class="literal">true</span>);</div><div class="line">			<span class="comment">//将节点push到ret内</span></div><div class="line">			ret.push(node);</div><div class="line">			<span class="comment">//调用insertBefore方法,追加节点(追加的新节点,firstChild)</span></div><div class="line">			elem.insertBefore(node, firstChild);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">    <span class="comment">//将ret作为itcast对象,并且返回</span></div><div class="line">	<span class="keyword">return</span> itcast(ret);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="prepend-方法"><a href="#prepend-方法" class="headerlink" title="prepend 方法"></a>prepend 方法</h2><ol>
<li>语法: <code>&lt;itcast对象&gt;.prepend(source);</code></li>
<li>功能:把 <code>source</code> 上的所有的 <code>dom</code> 元素,添加到 <code>this</code> 上的最前边</li>
<li>实现思路: <ul>
<li>统一 <code>source</code> 类型,为 <code>itcast</code> 对象</li>
<li>通过 <code>source</code> 调用 <code>prependTo</code> 方法,将 <code>source</code> 上的所有 <code>dom</code> 添加到 <code>this</code> 上的最前边</li>
<li><code>return this</code> 实现链式编程</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">prepend: <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">	source = itcast(source);</div><div class="line">	source.prependTo(<span class="keyword">this</span>);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="next-方法"><a href="#next-方法" class="headerlink" title="next 方法"></a>next 方法</h2><ol>
<li>功能:获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的下一个兄弟元素 <code>(nextSiling)</code></li>
<li>语法: <code>&lt;itcast对象&gt;.next();</code> 返回值类型, <code>itcast</code> 对象</li>
<li>实现思路<ul>
<li>定义 <code>ret</code> 数组，存储所有 <code>dom</code> 的下一个兄弟元素</li>
<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>
<li>遍历当前 <code>dom</code> 元素下面的所有兄弟，如果类型为 元素，将此元素存储 <code>ret</code> 内，结束循环。</li>
<li>两层循环结束，将 <code>ret</code> 转换成 <code>itcast</code> 对象，作为 <code>next</code> 方法的返回值。</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 存储所用dom的下一个兄弟元素</span></div><div class="line">	<span class="keyword">var</span> ret = [];</div><div class="line">	<span class="comment">// 遍历this上的所有dom元素</span></div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// 在遍历当前dom元素下面所有的兄弟元素</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> node = <span class="keyword">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class="line">			<span class="comment">// 如果当前兄弟节点,为元素节点</span></div><div class="line">			<span class="comment">// 即为结果,将其添加ret内,并结束循环</span></div><div class="line">			<span class="keyword">if</span>(node.nodeType === <span class="number">1</span>)&#123;</div><div class="line">				ret.push(node);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">// 将ret转换成itcast对象,返回</span></div><div class="line">	<span class="keyword">return</span> itcast(ret);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="nextAll"><a href="#nextAll" class="headerlink" title="nextAll"></a>nextAll</h2><ol>
<li>功能:获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素下面的所有兄弟元素 <code>(nextSiling)</code></li>
<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code> 返回值类型, <code>itcast</code> 对象</li>
<li>实现思路<ul>
<li>定义 <code>ret</code> 数组，存储所有 <code>dom</code> 的下一个兄弟元素</li>
<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>
<li>遍历当前 <code>dom</code> 元素下面的所有兄弟，如果类型为 元素，将此元素存储 <code>ret</code> 内，结束循环。</li>
<li>两层循环结束，将 <code>ret</code> 转换成 <code>itcast</code> 对象，作为 <code>nextAll</code> 方法的返回值。</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">nextAll: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> ret = [],</div><div class="line">		node;</div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">for</span>(node = <span class="keyword">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class="line">			<span class="keyword">if</span>(node.nodeType === <span class="number">1</span>) ret.push(node);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> itcast(itcast.unique(ret));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="before-方法"><a href="#before-方法" class="headerlink" title="before 方法"></a>before 方法</h2><ol>
<li>功能:</li>
<li>语法: <code>&lt;itcast对象&gt;.before(source)</code></li>
<li>实现思路<ul>
<li>统一 <code>source</code> 类型为 <code>itcast</code> 对象</li>
<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>
<li>再遍历 <code>source</code> 上的每一个 <code>dom</code> 元素</li>
<li>判断当前遍历 <code>this</code>的 <code>dom</code> 元素的索引是否为0</li>
<li>如果是 <code>0</code> ,不需要拷贝节点</li>
<li>否则要深拷贝节点</li>
<li>先拿到当前遍历 <code>this</code> 的 <code>dom</code> 元素的父节点,调用 <code>insertBefore</code> 方法在其前面添加上面的到的新节点</li>
<li>两层循环完毕,操作完成</li>
<li><code>return this</code> 实现链式编程</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">before: <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> node;</div><div class="line">	source = itcast(source);</div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">dom, i</span>) </span>&#123;</div><div class="line">		source.each(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</div><div class="line">			node = i === <span class="number">0</span> ? elem : elem.cloneNode(<span class="literal">true</span>);</div><div class="line">			<span class="comment">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class="line">			dom.parentNode.insertBefore(node, dom);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="after-方法"><a href="#after-方法" class="headerlink" title="after 方法"></a>after 方法</h2><ol>
<li>功能:</li>
<li>语法: <code>&lt;itcast对象&gt;.after(source)</code></li>
<li>实现思路<ul>
<li>定义 <code>nextSiling</code> 变量,存储 <code>dom</code> 元素的下一个兄弟节点</li>
<li>统一 <code>source</code> 类型为 <code>itcast</code> 对象</li>
<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>
<li>再遍历<code>source</code> 上的每一个 <code>dom</code> 元素</li>
<li>判断当前遍历 <code>this</code> 的 <code>dom</code> 元素的索引是否为 <code>0</code></li>
<li>如果是 <code>0</code> ,不需要拷贝节点</li>
<li>否则要深拷贝节点</li>
<li>先拿到当前遍历 <code>this</code> 的 <code>dom</code> 元素的父节点,调用 <code>insertBefore</code> 方法在其前面添加上面的到的新节点</li>
<li>两层循环完毕,操作完成</li>
<li><code>return this</code> 实现链式编程</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">after: <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> node,</div><div class="line">		nextSibling;</div><div class="line">	source = itcast(source);</div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">dom, i</span>) </span>&#123;</div><div class="line">		nextSibling = dom.nextSibling;</div><div class="line">		source.each(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</div><div class="line">			node = i === <span class="number">0</span> ? elem : elem.cloneNode(<span class="literal">true</span>);</div><div class="line">			<span class="comment">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class="line">			dom.parentNode.insertBefore(node, nextSibling);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="unique-方法"><a href="#unique-方法" class="headerlink" title="unique 方法"></a>unique 方法</h2><ol>
<li>功能:实现数组元素去重</li>
<li>语法: <code>var newRet = itcast.unique(arr);</code></li>
<li>实现思路<ul>
<li>定义空数组对象 <code>ret</code> .存储去重后的元素</li>
<li>遍历原数组,如果当前遍历到的元素在 <code>ret</code> 中不存在,就添加 <code>ret</code> 内</li>
<li>循环结束, <code>ret</code> 存储的就是去重后的元素</li>
<li>返回 <code>ret</code></li>
</ul>
</li>
<li><a href="#code">兼容IE8 indexof 方法</a><ul>
<li>首先判断当前浏览器是否支持 <code>indexof</code> 方法</li>
<li>如果不支持就给数组对象的原型添加 <code>indexof</code> 方法</li>
<li>遍历 <code>this</code> 上的所有元素</li>
<li>如果遍历到的当前元素和指定参数值相同就直接返回其索引值.结束循环</li>
<li>如果在整个上述循环都没有返回值,那么表示不存在指定参数值就返回 <code>-1</code> .</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">unique: <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">	<span class="comment">// 存储去重后的结果</span></div><div class="line">	<span class="keyword">var</span> ret = [];</div><div class="line">	<span class="comment">// 遍历原数组arr</span></div><div class="line">	itcast.each(arr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// 判断ret是否存在当前遍历到的元素</span></div><div class="line">		<span class="comment">// 如果不存在将其添加到ret中</span></div><div class="line">		<span class="keyword">if</span>(ret.indexOf(<span class="keyword">this</span>) === <span class="number">-1</span>) ret.push(<span class="keyword">this</span>);</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">// 将ret返回</span></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p id="code">兼容 <code>IE8</code> <code>indexof</code> 方法</p>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 兼容数组对象的indexOf方法</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 如果浏览器不支持indexOf方法</span></div><div class="line">	<span class="comment">// 那么就给数组对象的原型添加indexOf方法</span></div><div class="line">	<span class="keyword">if</span>(!<span class="built_in">Array</span>.prototype.indexOf)&#123;</div><div class="line">		<span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">			<span class="comment">// 遍历this</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,l = <span class="keyword">this</span>.length; i &lt; l; i++)&#123;</div><div class="line">				<span class="comment">// 如果遍历到的当前元素和val相同，返回其索引值</span></div><div class="line">				<span class="keyword">if</span>(<span class="keyword">this</span>[i] == val) <span class="keyword">return</span> i;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 那么表示不存在指定参数值就返回 -1 </span></div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h2 id="prev-方法"><a href="#prev-方法" class="headerlink" title="prev 方法"></a>prev 方法</h2><ol>
<li>功能: 获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的前一个兄弟元素 <code>(previousSibling)</code></li>
<li>语法: <code>&lt;itcast对象&gt;.prev();</code> 返回值类型: <code>itcast对象</code></li>
<li>实现思路<ul>
<li>定义 <code>ret</code> 数组,存储所有 <code>dom</code> 的前一个兄弟元素</li>
<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>
<li>遍历当前 <code>dom</code> 元素之前的所有兄弟,如果类型为元素,将此元素存储 <code>ret</code> 内,结束循环</li>
<li>两层循环结束,将 <code>ret</code> 转换成 <code>itcast</code> 对象,作为 <code>next</code> 方法的返回值</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">prev:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//存储所有dom的前一个兄弟元素</span></div><div class="line">	<span class="keyword">var</span> ret=[];</div><div class="line">	<span class="comment">//遍历this上的所有dom元素</span></div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">//在遍历当前dom元素之前所有的兄弟元素</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> node=<span class="keyword">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class="line">			<span class="comment">//如果当前兄弟节点为元素节点</span></div><div class="line">			<span class="comment">//即为结果,将其添加到ret内,并结束循环</span></div><div class="line">			<span class="keyword">if</span>(node.nodeType===<span class="number">1</span>)&#123;</div><div class="line">				ret.push(node);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">//将ret转换成itcast对象,返回</span></div><div class="line">	<span class="keyword">return</span> itcast(ret);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="prevAll-方法"><a href="#prevAll-方法" class="headerlink" title="prevAll 方法"></a>prevAll 方法</h2><ol>
<li>功能: 获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的之前的所有兄弟元素 <code>(nextSibling)</code></li>
<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code> 返回值类型: <code>itcast对象</code></li>
<li>实现思路<ul>
<li>定义 <code>ret数组</code> ,存储所有 <code>dom</code> 之前的所有兄弟元素</li>
<li>遍历 <code>this</code> 上的所有 <code>dom元素</code></li>
<li>遍历当前 <code>dom</code> 元素之前的所有兄弟,如果类型为元素,将此元素存储 <code>ret</code> 内,结束循环</li>
<li>两层循环结束,将 <code>ret</code> 转换成 <code>itcast对象</code> ,作为 <code>nextAll</code> 方法的返回值</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">prevAll:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> ret=[];</div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> node=<span class="keyword">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class="line">			<span class="keyword">if</span>(node.nodeType===<span class="number">1</span>) ret.push(node);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> itcast(itcast.unique(ret));</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第四部分属性部分功能及实现,接第三部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="http://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="http://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="http://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part3之属性模块功能及实现</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-11-20-javascript-jquery-part3.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-11-20-javascript-jquery-part3.html</id>
    <published>2016-11-20T03:51:28.000Z</published>
    <updated>2016-11-24T01:36:37.176Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第三部分属性模块功能及实现,接第二部分!</p>
<a id="more"></a>
<h2 id="知识点复习"><a href="#知识点复习" class="headerlink" title="知识点复习"></a>知识点复习</h2><ol>
<li><p><code>css</code> 方法</p>
<ul>
<li>如果只传入一个参数<ul>
<li>如果参数类型为对象,表示同时设置多个样式</li>
<li>如果参数类型为字符串,表示获取指定的样式值</li>
</ul>
</li>
<li>如果传入的两个参数,表示设置单个样式值</li>
</ul>
</li>
<li><p><code>itcast.each</code> 方法: 遍历数组或伪数组</p>
<ul>
<li>第一个参数,指定遍历的对象</li>
<li>第二个参数,指定的回调函数,对遍历到的每一个元素,进行相关处理</li>
</ul>
</li>
</ol>
<h2 id="attr方法-setAttribute-和-getAttribute"><a href="#attr方法-setAttribute-和-getAttribute" class="headerlink" title="attr方法( setAttribute 和 getAttribute )"></a>attr方法( setAttribute 和 getAttribute )</h2><ol>
<li>功能: 获取(设置)属性节点值</li>
<li>实现思路<ul>
<li>给原型添加 <code>attr</code> 方法,定义两个参数:属性节点名字 <code>name</code> 以及属性节点值</li>
<li>如果只传入一个参数<ul>
<li>如果参数类型为对象,表示设置多个节点值</li>
<li>否则获取指定的属性节点值(默认获取第一个 <code>dom</code> 元素的属性节点值)</li>
</ul>
</li>
<li>如果传入两个参数,表示设置单个属性节点值.</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">attr: <span class="function"><span class="keyword">function</span>(<span class="params">name,value</span>)</span>&#123;</div><div class="line">	<span class="comment">//只传入一个参数</span></div><div class="line">	<span class="keyword">if</span>(value == <span class="literal">undefined</span>)&#123;</div><div class="line">		<span class="comment">//如果类型为对象,表示设置多个属性</span></div><div class="line">		<span class="keyword">if</span>(<span class="keyword">typeof</span> name ===<span class="string">'object'</span>)&#123;</div><div class="line">			<span class="comment">//遍历itcast上的每一个dom元素,并设置属性节点值</span></div><div class="line">			<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">				<span class="comment">//枚举name对象上的每一个属性</span></div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> name)&#123;</div><div class="line">					v.setAttribute(k, name[k]);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">//如果类型为字符串,获取属性节点值</span></div><div class="line">			<span class="keyword">if</span>(!<span class="keyword">this</span>[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>].getAttribute(name);</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span> &#123; <span class="comment">//传入两个参数,表示设置单个属性节点值</span></div><div class="line">		<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">			v.setAttribute(name, value)</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="html方法"><a href="#html方法" class="headerlink" title="html方法"></a>html方法</h2><ol>
<li>功能: <ul>
<li>不传参数,表示获取指定 <code>dom</code> 元素的 <code>innerHTML</code> 属性值</li>
<li>否则,表示设置指定 <code>dom</code> 元素的 <code>innerHTML</code> 属性</li>
</ul>
</li>
<li>实行思路<ul>
<li>判断是否传入参数</li>
<li>如果没穿,获取 <code>itcast</code> 对象上的第一个 <code>dom</code> 元素的 <code>innerHTML</code> 属性值</li>
<li>否则,给 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素设置 <code>innerHTML</code> 属性</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">html: <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">	<span class="comment">//如果没有给html传值,表示获取</span></div><div class="line">	<span class="keyword">if</span>(html==<span class="literal">undefined</span>)&#123;</div><div class="line">		<span class="comment">//如果icast没有任何dom元素,就返回一个期望值,即空字符串</span></div><div class="line">		<span class="comment">//如果有的话,就返回一个dom元素的innerHTML属性值</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>] ? <span class="keyword">this</span>[<span class="number">0</span>].innerHTML : <span class="string">''</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;<span class="comment">//如果给html船只,给itcast对象上的每一个dom元素设置innerHTML属性</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">			v.innerHTML = html;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="text方法"><a href="#text方法" class="headerlink" title="text方法"></a>text方法</h2><ol>
<li>功能<ul>
<li>不传值,表示获取文本节点(返回的是后代中所有文本节点值)</li>
<li>传值,设置指定 <code>dom</code> 元素文本值</li>
</ul>
</li>
<li>实现思路<ul>
<li>如果不传值,优先考虑浏览器是否支持 <code>textContent</code> 属性<ul>
<li>如果支持,就使用 <code>textContent</code> 返回结果集中每一个 <code>dom</code> 元素的文本节点值</li>
<li>否则,就是用 <code>innerText</code> 返回结果集中每一个 <code>dom</code> 元素的文本节点值</li>
</ul>
</li>
<li>如果传值,给 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素设置文本节点值.<ul>
<li>如果支持 <code>textContent</code> 属性,就是用该属性设置文本</li>
<li>否则,就是用 <code>innerText</code> 来设置文本.</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">text: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">	<span class="comment">// 如果没有传值，表示获取文本值</span></div><div class="line">	<span class="keyword">if</span>(text == <span class="literal">undefined</span>)&#123;</div><div class="line">		<span class="comment">// 定义结果变量，存储每个dom元素的文本</span></div><div class="line">		<span class="keyword">var</span> ret = <span class="string">''</span>;</div><div class="line">		<span class="comment">// 遍历每一个dom元素</span></div><div class="line">		<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">			<span class="comment">// 如果支持textContent，使用其获取文本，累加到ret上</span></div><div class="line">			ret += <span class="string">'textContent'</span> <span class="keyword">in</span> <span class="built_in">document</span> ?</div><div class="line">				v.textContent :</div><div class="line">				v.innerText.replace(<span class="regexp">/\r\n/g</span>, <span class="string">''</span>);</div><div class="line">		&#125;);</div><div class="line">		<span class="comment">// 返回所有文本</span></div><div class="line">		<span class="keyword">return</span> ret;</div><div class="line">	&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果传值了，表示为每个dom设置文本</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">			<span class="comment">// 如果支持textContent，就使用该属性为当前dom元素设置文本节点值</span></div><div class="line">			<span class="comment">// 否则，使用innerText设置文本节点值。</span></div><div class="line">			<span class="keyword">if</span>(<span class="string">'textContent'</span> <span class="keyword">in</span> <span class="built_in">document</span>)&#123;</div><div class="line">				v.textContent = text;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				v.innerText = text;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="val方法"><a href="#val方法" class="headerlink" title="val方法"></a>val方法</h2><ol>
<li>功能( <code>value</code> 属性)<ul>
<li>如果不传值,表示获取输入框的文本值</li>
<li>如果传值, 表示给输入框 设置文本</li>
</ul>
</li>
<li>实现思路<ul>
<li>如果不传值，表示获取输入框的文本值（获取第一个文本框值）</li>
<li>如果传值，表示给输入框 设置文本<ul>
<li>遍历每一个输入框，同时给其设置文本<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">val: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">	<span class="comment">// 如果没有传值，表示获取第一个dom元素的value属性值</span></div><div class="line">	<span class="comment">// 如果itcast对象上没有任何dom元素，返回空字符串</span></div><div class="line">	<span class="keyword">if</span>(value == <span class="literal">undefined</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>] ? <span class="keyword">this</span>[<span class="number">0</span>].value : <span class="string">''</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;<span class="comment">// 否则，为每一个dom元素设置value属性值</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">this</span>.value = value;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="prop方法"><a href="#prop方法" class="headerlink" title="prop方法"></a>prop方法</h2><ol>
<li>功能:和 <code>attr</code> 相似<ul>
<li>注意: 有些属性名称,比如 <code>for</code> , <code>class</code> 是保留字或关键字不能作为对象属性名称,所以要创建一个对象,需要转换这类的属性</li>
<li>定义 <code>propFix</code> 对象,存储上述属性到这属性名称的映射关系</li>
<li>如果只传入一个参数<ul>
<li>类型为对象,同时给  <code>dom</code> 对象添加属性</li>
<li>类型为字符串,获取 <code>itcast</code> 对象上的第一个 <code>dom</code> 对象的指定属性值</li>
</ul>
</li>
<li>如果传入的参数,给所有的 <code>dom</code> 对象添加单个属性</li>
<li>细节: 无论是设置还是获取属性,在操作之前,先要从 <code>propFix</code> 对象拿到映射后的属性名称<ul>
<li>如果拿到的心的属性名称不为 <code>undefined</code> ,就用映射后的属性名来操作 <code>dom</code> 对象</li>
<li>否则,那么久使用旧的属性名称来操作 <code>dom</code> 对象.</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 属性模块</span></div><div class="line">itcast.propFix = &#123;</div><div class="line">	<span class="string">'for'</span>: <span class="string">'htmlFor'</span>,</div><div class="line">	<span class="string">'class'</span>: <span class="string">'className'</span></div><div class="line">&#125;;</div><div class="line">itcast.each([</div><div class="line">	<span class="string">"tabIndex"</span>,</div><div class="line">	<span class="string">"readOnly"</span>,</div><div class="line">	<span class="string">"maxLength"</span>,</div><div class="line">	<span class="string">"cellSpacing"</span>,</div><div class="line">	<span class="string">"cellPadding"</span>,</div><div class="line">	<span class="string">"rowSpan"</span>,</div><div class="line">	<span class="string">"colSpan"</span>,</div><div class="line">	<span class="string">"useMap"</span>,</div><div class="line">	<span class="string">"frameBorder"</span>,</div><div class="line">	<span class="string">"contentEditable"</span></div><div class="line">], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	itcast.propFix[<span class="keyword">this</span>.toLowerCase()] = <span class="keyword">this</span>;</div><div class="line">&#125;);</div><div class="line">prop: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</div><div class="line">	<span class="comment">// 如果没有给value传值</span></div><div class="line">	<span class="keyword">var</span> prop;</div><div class="line">	<span class="keyword">if</span> (value == <span class="literal">undefined</span>) &#123;</div><div class="line">		<span class="comment">// 并且name的类型为 对象，表示给每一个dom对象添加多个属性</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'object'</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> name) &#123;</div><div class="line">					<span class="comment">// 首先从propFix对象上获取属性名字</span></div><div class="line">					<span class="comment">// 如果有，就使用新的属性名字</span></div><div class="line">					<span class="comment">// 如果没有，就使用原来的属性名字</span></div><div class="line">					prop = itcast.propFix[k] ? itcast.propFix[k] : k;</div><div class="line">					<span class="keyword">this</span>[prop] = name[k];</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果name的类型 为字符串，表示获取第一个dom对象的指定属性值</span></div><div class="line">			prop = itcast.propFix[name] ? itcast.propFix[name]: name;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.length &gt; <span class="number">0</span> ? <span class="keyword">this</span>[<span class="number">0</span>][prop] : <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果传入两个参数，表示给每一个dom对象添加单个属性</span></div><div class="line">		<span class="comment">// 遍历itcast上的每一个dom对象，添加属性</span></div><div class="line">		prop = itcast.propFix[name] ? itcast.propFix[name]: name;</div><div class="line">		<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">this</span>[prop] = value;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 实现链式编程</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第三部分属性模块功能及实现,接第二部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="http://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="http://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="http://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part2之css部分功能及实现</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-11-19-javascript-jquery-part2.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-11-19-javascript-jquery-part2.html</id>
    <published>2016-11-19T11:02:01.000Z</published>
    <updated>2016-11-24T01:36:18.943Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第二部分css部分功能及实现,接第一部分!</p>
<a id="more"></a>
<h2 id="hasClass方法"><a href="#hasClass方法" class="headerlink" title="hasClass方法"></a>hasClass方法</h2><ol>
<li>功能:如果结果集里只要有一个 <code>dom</code> 元素,具有指定的样式类,就返回 <code>true</code> </li>
<li><p>实现思路</p>
<ul>
<li>定义结果变量 <code>ret</code> ,默认值为 <code>false</code></li>
<li>遍历结果集的每一个 <code>dom</code> 元素,如果当前 <code>dom</code> 元素具有指定的样式类,将 <code>ret=true</code> 结束循环</li>
<li><p>返回 <code>ret</code> .</p>
</li>
<li><p>如何判断 <code>dom</code> 元素具有指定的样式类?<br>在 <code>dom</code> 元素所有的样式类的 <code>首位 + 空格</code> ;在用户指定的样式类 <code>首位 + 空格</code> 调用indexOf方法,如果返回值 = -1,表示没有;否则就具有指定样式类</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">hasClass: <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</div><div class="line">	<span class="comment">// 默认结果false</span></div><div class="line">	<span class="keyword">var</span> ret = <span class="literal">false</span>;</div><div class="line">	<span class="comment">// 遍历this上的每一个dom元素					</span></div><div class="line">	<span class="comment">// for(var i = 0, l = this.length;i &lt; l;i++)&#123;</span></div><div class="line">	<span class="comment">// 	// 如果当前dom元素具有指定的样式类</span></div><div class="line">	<span class="comment">// 	// 返回值为true，结束循环</span></div><div class="line">	<span class="comment">// if((' ' + this[i].className + ' ')</span></div><div class="line">	<span class="comment">// 	.indexOf(' ' + className + ' ') !== -1) &#123;</span></div><div class="line">	<span class="comment">// 	ret = true;</span></div><div class="line">	<span class="comment">// 	break;</span></div><div class="line">	<span class="comment">// &#125;</span></div><div class="line">	<span class="comment">// &#125;</span></div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((<span class="string">' '</span> + v.className + <span class="string">' '</span>)</div><div class="line">			.indexOf(<span class="string">' '</span> + className + <span class="string">' '</span>) !== <span class="number">-1</span>) &#123;</div><div class="line">			ret = <span class="literal">true</span>;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="each方法"><a href="#each方法" class="headerlink" title="$.each方法"></a>$.each方法</h2><ol>
<li>功能:实现遍历数组或者伪数组,通过第二个参数(回调函数)来处理遍历到的每一个元素<br> 在回调函数中, <code>this</code> 是指向当前遍历的元素.</li>
<li>语法: <code>$.each([数组/伪数组], callback)</code> ;</li>
<li>实现思路<ul>
<li>声明 <code>each</code> 函数,定义两个形参,第一个 遍历的(伪)数组;第二: 回调函数</li>
<li>使用 <code>for</code> 循环,遍历(伪)数组,再循环体内部执行回调函数. 在执行时,给回调函数传实参</li>
<li>实现回调函数内部 <code>this</code> 指向,当前遍历到的元素</li>
<li>通过回调函数的返回值,判断是否结束循环. 规定:当返回值为 <code>false</code> ,结束循环<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">each: <span class="function"><span class="keyword">function</span>(<span class="params">obj, callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">		l = obj.length;</div><div class="line">	<span class="comment">// 遍历数组元素</span></div><div class="line">	<span class="keyword">for</span> (; i &lt; l; i++) &#123;</div><div class="line">		<span class="comment">// 执行用户指定回调函数</span></div><div class="line">		<span class="comment">// 将当前遍历到的元素以及索引传入回调函数</span></div><div class="line">		<span class="keyword">if</span> (callback.call(obj[i], obj[i], i) === <span class="literal">false</span>) <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="itcast中链式编程的实现"><a href="#itcast中链式编程的实现" class="headerlink" title="itcast中链式编程的实现"></a>itcast中链式编程的实现</h2><ol>
<li>返回当前方法的调用者: <code>return this;</code></li>
</ol>
<h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><ol>
<li>功能:根据参数 <code>index</code> ,获取相应 <code>dom</code> 元素</li>
<li>实现思路<ul>
<li>将字符串类型转换成数字</li>
<li><code>index &lt; 0 ==&gt; index +length</code></li>
<li><code>return this[index]</code></li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">	index = index - <span class="number">0</span>;</div><div class="line">	index = index &lt; <span class="number">0</span> ? index + <span class="keyword">this</span>.length : index;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>[index];</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="eq方法"><a href="#eq方法" class="headerlink" title="eq方法"></a>eq方法</h2><ol>
<li>功能:根据参数 <code>index</code> ,获取相应 <code>dom</code> 元素,转换成 <code>itcast</code> 对象,并且返回</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eq: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> itcast(<span class="keyword">this</span>.get(index));</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="first方法"><a href="#first方法" class="headerlink" title="first方法"></a>first方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">first: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.eq(<span class="number">0</span>);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="last方法"><a href="#last方法" class="headerlink" title="last方法"></a>last方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">last: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.eq(<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="css方法"><a href="#css方法" class="headerlink" title="css方法"></a>css方法</h2><ol>
<li>功能:<ul>
<li>获取:如果只传一个参数并且类型不为对象,获取相应的样式属性值</li>
<li>设置:a,如果只传一个参数并且类型为对象,设置多个样式值; b,传入两个参数,设置单个样式.</li>
</ul>
</li>
<li>实现思路<ul>
<li>给 <code>itcast</code> 原型添加 <code>css</code> 方法,定义两个参数.</li>
<li>如果只传入一个参数<ul>
<li>类型为对象的话,同时设置多个样式属性</li>
<li>类型不为对象,获取指定的样式值</li>
</ul>
</li>
<li>如果只传入两个参数,设置单个样式值<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">css: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</div><div class="line">	<span class="comment">// 只传入一个参数</span></div><div class="line">	<span class="keyword">if</span> (value == <span class="literal">undefined</span>) &#123;</div><div class="line">		<span class="comment">// 如果name类型为对象，同时设置多个样式</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'object'</span>) &#123;</div><div class="line">			<span class="comment">// 遍历this上的每一个dom元素</span></div><div class="line">			<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">				<span class="comment">// 枚举name上的每个属性值</span></div><div class="line">				<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> name) &#123;</div><div class="line">					<span class="comment">// 给当前遍历到的dom元素设置样式</span></div><div class="line">					v.style[k] = name[k];</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果name不为对象</span></div><div class="line">			<span class="comment">// 默认获取this上的第一个dom元素的指定样式值</span></div><div class="line">			<span class="comment">// 如果浏览器支持getComputedStyle，使用该方法获取指定样式值</span></div><div class="line">			<span class="comment">// if(window.getComputedStyle)&#123;</span></div><div class="line">			<span class="comment">// 	return window.getComputedStyle(this[0])[name];</span></div><div class="line">			<span class="comment">// &#125; else &#123; //否则使用currentStyle获取</span></div><div class="line">			<span class="comment">// 	return this[0].currentStyle[name];</span></div><div class="line">			<span class="comment">// &#125;</span></div><div class="line">			<span class="comment">// 如果this上没有任何dom元素， 就返回null</span></div><div class="line">			<span class="keyword">if</span> (!<span class="keyword">this</span>[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">			<span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle ?</div><div class="line">				<span class="built_in">window</span>.getComputedStyle(<span class="keyword">this</span>[<span class="number">0</span>])[name] :</div><div class="line">				<span class="keyword">this</span>[<span class="number">0</span>].currentStyle[name];</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果传入两个参数</span></div><div class="line">		<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">			v.style[name] = value;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 实现链式编程</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="addClass方法"><a href="#addClass方法" class="headerlink" title="addClass方法"></a>addClass方法</h2><ol>
<li>功能:给结果集中的每一个 <code>dom</code> 元素添加指定样式类.</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>
<li>首先判断当前遍历到的 <code>dom</code> 元素是否含有样式类.</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">addClass: <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</div><div class="line">	<span class="comment">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="comment">// 判断当前dom元素v是否具有className</span></div><div class="line">		<span class="comment">// 如果不具有，给其添加指定的样式类</span></div><div class="line">		<span class="keyword">if</span>(!itcast(v).hasClass(className))&#123;</div><div class="line">			v.className += <span class="string">' '</span> + className;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="removeClass方法"><a href="#removeClass方法" class="headerlink" title="removeClass方法"></a>removeClass方法</h2><ol>
<li>功能:删除结果集中的每一个 <code>dom</code> 元素的指定样式类.</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>
<li><code>(&#39; &#39; + v.className + &#39; &#39;).replace(&#39; &#39; + className + &#39; &#39;,&#39; &#39;);</code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">removeClass:<span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</div><div class="line">	<span class="comment">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="comment">// 删除当前dom元素的样式类className</span></div><div class="line">		v.className = (<span class="string">' '</span> + v.className + <span class="string">' '</span>).</div><div class="line">			replace(<span class="string">' '</span> + className + <span class="string">' '</span>, <span class="string">' '</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="toggleClass方法"><a href="#toggleClass方法" class="headerlink" title="toggleClass方法"></a>toggleClass方法</h2><ol>
<li>功能: 切换指定的样式类,如果有,就删除,没有就添加     </li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>
<li>判断当前遍历到的 <code>dom</code> 元素是否含有指定的样式类</li>
<li>如果有,就删除</li>
<li>如果没有,就添加<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">toggleClass: <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</div><div class="line">	<span class="comment">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="comment">// 将当前遍历到的元素转换成itcast对象</span></div><div class="line">		<span class="keyword">var</span> $v = itcast(v);</div><div class="line">		<span class="comment">// 如果具有指定的样式类，就删除该样式类</span></div><div class="line">		<span class="keyword">if</span>($v.hasClass(className))&#123;					</div><div class="line">			$v.removeClass(className);</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果没有指定的样式类，就添加该样式类</span></div><div class="line">			$v.addClass(className);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第二部分css部分功能及实现,接第一部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="http://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="http://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="http://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part1框架结构</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-11-18-javascript-jquery-part1.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-11-18-javascript-jquery-part1.html</id>
    <published>2016-11-18T10:40:35.000Z</published>
    <updated>2016-11-24T01:35:48.250Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第一部分!</p>
<p><img src="http://of2np1oao.bkt.clouddn.com/ihoey/imgsp161118_190319.png" width="100%"></p>
<a id="more"></a>
<h2 id="案例：获取指定DOM下所有子元素"><a href="#案例：获取指定DOM下所有子元素" class="headerlink" title="案例：获取指定DOM下所有子元素"></a>案例：获取指定DOM下所有子元素</h2><ol>
<li>在框架内部，遍历子节点，应该使用 <code>firstChild</code> 和 <code>nextSibling</code> 两种方式实现,代码如下。<br>获取 <code>id</code> 为 <code>dv</code> 的元素下所有的子元素 <code>nodeType：1 - 12 (1 2 3 8 9 11 --documentFrament)</code> .</li>
</ol>
<ul>
<li>第一种方式: <code>childNodes</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实现思路：</span></div><div class="line"><span class="comment">// 通过childNodes获取到所有的子节点；</span></div><div class="line"><span class="comment">// 将上述所有的子节点中，元素节点获取出来。</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * [getChildren 获取子元素]</div><div class="line"> * @param  &#123;[type]&#125; parent [父节点]</div><div class="line"> * @return &#123;[type]&#125;        [返回parent的所有子元素]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">parent</span>) </span>&#123;</div><div class="line">	<span class="comment">// 存储结果集</span></div><div class="line">	<span class="keyword">var</span> ret = [],</div><div class="line">		nodes;</div><div class="line">	<span class="comment">// 获取parent所有子节点</span></div><div class="line">	nodes = parent.childNodes;</div><div class="line"></div><div class="line">	<span class="comment">// 遍历nodes</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,l = nodes.length; i &lt; l;i++)&#123;</div><div class="line">		<span class="comment">// 如果遍历到当前子节点类型为元素，即为所要结果。存储在ret内。</span></div><div class="line">		<span class="keyword">if</span>(nodes[i].nodeType === <span class="number">1</span>) &#123;</div><div class="line">			ret.push(nodes[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 返回结果</span></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(getChildren(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>)));</div></pre></td></tr></table></figure>
<ul>
<li>第二种方式：<code>firstChild nextSibling（推荐）</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用while方式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">parent</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> ret = [],</div><div class="line">		elem = parent.firstChild;</div><div class="line">	<span class="comment">// 遍历parent所有子节点</span></div><div class="line">	<span class="comment">// 如果有子节点</span></div><div class="line">	<span class="keyword">while</span>(elem)&#123;</div><div class="line">		<span class="comment">// 并且节点类型为元素。存储在ret内</span></div><div class="line">		<span class="keyword">if</span>(elem.nodeType === <span class="number">1</span>) ret.push(elem);</div><div class="line">		<span class="comment">// 更新循环标量</span></div><div class="line">		<span class="comment">// 赋值为下一个兄弟节点</span></div><div class="line">		elem = elem.nextSibling;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 返回结果</span></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//使用for循环</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">parent</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> ret = [],</div><div class="line">		elem = parent.firstChild;</div><div class="line">	<span class="keyword">for</span>(; elem ; elem = elem.nextSibling)&#123;</div><div class="line">		<span class="keyword">if</span>(elem.nodeType === <span class="number">1</span>) ret.push(elem);</div><div class="line">	&#125;			</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(getChildren(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>)));</div></pre></td></tr></table></figure>
<h2 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h2><ol>
<li><p>在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架</p>
<ul>
<li>在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将它们当做实参传入沙箱内。</li>
</ul>
</li>
<li><p>核心函数为 <code>itcast</code> ，相当于 <code>jQuery</code> 。最终要暴露给用户使用的</p>
</li>
<li><p>实现 <code>itcast</code> 函数，使用的是 工厂模式 来 创建对象。好处：用户 <code>new</code> 或 不 <code>new</code> 都可以得到正确的对象</p>
</li>
<li><p><code>init</code> 构造函数 的 位置</p>
<ul>
<li>如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更改用户，尽量将构造函数暴露给用户</li>
<li>可以把构造函数放在 <code>itcast</code> 函数上，也可以放在 <code>itcast</code> 函数原型上。</li>
<li>处于 <code>jQuery</code> 之父，在写简单继承模式时，将构造函数放在其原型上。那么在编写框架时，即延续下来了</li>
</ul>
</li>
<li><p><code>init</code> 创建出来的对象，最终继承自 <code>itcast.prototype</code> 。所以可以将 <code>init</code> 对象称为 <code>itcast</code> 对象。</p>
</li>
<li><p>由于暴露给用户 的 是 <code>itcast</code> 和 其原型。所以在扩展成员时，只能在这两个对象上扩展。而在函数对象上扩展的成员 为 静态成员。可以直接通过函数名字来访问。但是，在原型上的成员，必须创建实例来访问。因此为了实现 <code>init</code> 对象可以访问 <code>itcast</code> 原型上的成员，就基于原型来实现继承。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> init;</div><div class="line">	<span class="comment">// 核心函数（工厂函数）</span></div><div class="line">	<span class="keyword">var</span> itcast = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> itcast.fn.init(selector);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 核心原型	</span></div><div class="line">	itcast.fn = itcast.prototype = &#123;</div><div class="line">		<span class="attr">constructor</span>: itcast</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 构造函数</span></div><div class="line">	init = itcast.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;&#125;;</div><div class="line">	<span class="comment">// 实现init对象继承自itcast原型</span></div><div class="line">	init.prototype = itcast.fn;</div><div class="line"></div><div class="line">	<span class="comment">// 可扩展方法</span></div><div class="line">	<span class="comment">// 如果target为undefined值，那么就是给this扩展成员</span></div><div class="line">	<span class="comment">// 否则就是给target对象扩展。</span></div><div class="line">	itcast.extend = itcast.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params">source, target</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> k;</div><div class="line">		<span class="comment">// 如果target为undefined值，就赋值为this</span></div><div class="line">		<span class="comment">// 给this扩展成员</span></div><div class="line">		<span class="keyword">if</span> (target == <span class="literal">undefined</span>) &#123;</div><div class="line">			target = <span class="keyword">this</span>;</div><div class="line">		&#125;	</div><div class="line"></div><div class="line">		<span class="comment">// target = target || this;</span></div><div class="line"></div><div class="line">		<span class="keyword">for</span>(k <span class="keyword">in</span> source)&#123;</div><div class="line">			target[k] = source[k];</div><div class="line">		&#125;		</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 暴露给用户</span></div><div class="line">	global.$ = global.itcast = itcast;</div><div class="line">&#125;(<span class="built_in">window</span>));</div><div class="line"></div><div class="line">itcast.fn.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;&#125;;</div><div class="line">itcast.fn.append = <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>
<ol>
<li><p>完善<code>init</code>构造函数</p>
<ul>
<li><code>selector</code> 类型：<ul>
<li>无效值： <code>null</code> <code>undefined</code> <code>&#39; &#39;</code> <code>false</code></li>
<li>字符串<ul>
<li>选择器：     <code>div</code> 根据选择器筛选dom元素，并以伪数组形式 存储在 <code>this</code> 上</li>
<li><code>html</code> 字符串 <code>&lt;p&gt;123&lt;/p&gt;&lt;p&gt;456&lt;/p&gt;</code> <code>&lt;p&gt;</code> 将html字符串 转换成 <code>html</code> 元素</li>
</ul>
</li>
<li><code>DOM</code> 节点 </li>
<li><code>DOM</code> 数组（伪数组） </li>
<li><code>function</code>：入口函数 <code>DOMContentLoaded</code><ul>
<li>使用静态属性 <code>isReady</code> 存储 <code>dom</code> 树是否加载完毕</li>
<li>判断 <code>isReady</code> 值， 如果为 <code>true</code> ，就直接执行传入的函数。</li>
<li>否则，就给 <code>document</code> 的 <code>DOMContentLoaded</code> 事件绑定处理程序，在处理程序中，先将 <code>isReady</code> 赋值为 <code>true</code> ，在执行传入的函数。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>如何判断字符串为 <code>html</code> 字符串，必须满足一下条件：</p>
<ul>
<li>以 <code>&lt;</code> 开头</li>
<li>以 <code>&gt;</code> 结尾</li>
<li>最小长度为 <code>3</code></li>
</ul>
</li>
<li><p>如何判断像数组（数组和伪数组）</p>
<ul>
<li>用 <code>length</code> 属性去判断，若具有 <code>length</code> 属性 表示为 像数组类型</li>
<li>除了 <code>window</code> 对象以及函数对象</li>
<li><p><code>{length: 1} {4: &quot;123&quot;, length: 5}</code> 稀疏数组</p>
</li>
<li><p>如果为真数组，返回 <code>true</code></p>
</li>
<li>如果 <code>length</code> 属性值为 <code>0</code> （除了 <code>window</code> 对象以及函数对象），返回 <code>true</code></li>
<li>如果 <code>length</code> 属性值 <code>&gt;0</code>, 如果对象 具有 <code>length - 1</code> 索引，返回 <code>true</code></li>
</ul>
</li>
<li><p>全局对象 <code>window</code> 特性：有一个 <code>window</code> 属性 引用 自身。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> init,</div><div class="line">		<span class="built_in">document</span> = global.document;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> itcast = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> itcast.fn.init(selector);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	itcast.fn = itcast.prototype = &#123;</div><div class="line">		<span class="attr">constructor</span>: itcast,</div><div class="line">		<span class="attr">length</span>: <span class="number">0</span></div><div class="line">	&#125;;</div><div class="line">	init = itcast.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">		<span class="comment">// handle: null undefined '' false</span></div><div class="line">		<span class="keyword">if</span>(!selector) <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		<span class="comment">// handle: string</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(itcast.isString(selector))&#123;</div><div class="line">			<span class="comment">// handle: html string '&lt;p&gt;123&lt;/p&gt;'</span></div><div class="line">			<span class="keyword">if</span>(itcast.isHTML(selector))&#123;						</div><div class="line">				<span class="comment">// 怎么存储 以伪数组对象形式存储 dom元素</span></div><div class="line">				<span class="built_in">Array</span>.prototype.push.apply(<span class="keyword">this</span>, itcast.parseHTML(selector));</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// handle: selector</span></div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// 根据选择器获取dom元素</span></div><div class="line">				<span class="keyword">var</span> nodelist = <span class="built_in">document</span>.querySelectorAll(selector);</div><div class="line">				<span class="comment">// 将结果伪数组对象 变成 真数组</span></div><div class="line">				<span class="keyword">var</span> ret = <span class="built_in">Array</span>.prototype.slice.call(nodelist);</div><div class="line">				<span class="comment">// 借调数组对象的slice方法将数组中的所有元素 以伪数组形式存储在this上</span></div><div class="line">				<span class="built_in">Array</span>.prototype.push.apply(<span class="keyword">this</span>, ret);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// handle: dom node</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(itcast.isDOM(selector))&#123;</div><div class="line">			<span class="keyword">this</span>[<span class="number">0</span>] = selector;</div><div class="line">			<span class="keyword">this</span>.length = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// handle: dom array(伪数组对象)</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(itcast.isArrayLike(selector))&#123;</div><div class="line">			<span class="comment">// 获取selector类型</span></div><div class="line">			<span class="keyword">var</span> _type = <span class="built_in">Object</span>.prototype.toString.call(selector).</div><div class="line">					slice(<span class="number">8</span>, <span class="number">-1</span>).toLowerCase();</div><div class="line">			<span class="comment">// 如果不是数组类型,就 将其转换 为 真数组类型</span></div><div class="line">			<span class="keyword">if</span>(_type !== <span class="string">'array'</span>) </div><div class="line">				selector = <span class="built_in">Array</span>.prototype.slice.call(selector);</div><div class="line">			<span class="built_in">Array</span>.prototype.push.apply(<span class="keyword">this</span>, selector);</div><div class="line">		&#125;	</div><div class="line">		<span class="comment">// handle: function</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(itcast.isFunction(selector))&#123;</div><div class="line">			<span class="keyword">if</span>(itcast.isReady)&#123;</div><div class="line">				selector();</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				doucment.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">					selector();</div><div class="line">					itcast.isReady = <span class="literal">true</span>;</div><div class="line">				&#125;);	</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	init.prototype = itcast.fn;</div><div class="line"></div><div class="line">	itcast.extend = itcast.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params">source, target</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> k;</div><div class="line"></div><div class="line">		target = target || <span class="keyword">this</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(k <span class="keyword">in</span> source)&#123;</div><div class="line">			target[k] = source[k];</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 添加工具类方法</span></div><div class="line">	itcast.extend(&#123;</div><div class="line">		<span class="attr">isReady</span>: <span class="literal">false</span>,</div><div class="line">		<span class="attr">paseHTML</span>: <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</div><div class="line">				ret = [];</div><div class="line">			div.innerHTML = html;</div><div class="line"></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> elem = div.firstChild; elem; elem = elem.nextSibling)&#123;</div><div class="line">				<span class="keyword">if</span>(elem.nodeType === <span class="number">1</span>) ret.push(elem);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> ret;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">// 类型判断方法</span></div><div class="line">	itcast.extend(&#123;</div><div class="line">		<span class="comment">// 判断是否为字符串类型</span></div><div class="line">		isString: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">			<span class="comment">// 如果为null或undefined，返回false</span></div><div class="line">			<span class="comment">// 如果typeof值为string，返回true否则返回false。</span></div><div class="line">			<span class="keyword">return</span> !!obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'string'</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">isHTML</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> !!obj &amp;&amp; obj.charAt(<span class="number">0</span>) === <span class="string">'&lt;'</span> &amp;&amp; </div><div class="line">				obj.charAt(obj.length - <span class="number">1</span>) === <span class="string">'&gt;'</span> &amp;&amp;</div><div class="line">				obj.length &gt;= <span class="number">3</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">isDOM</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> !!obj &amp;&amp; !!obj.nodeType;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">isFunction</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> !!obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'function'</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">isGlobal</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> !!obj &amp;&amp; obj.window === obj;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">isArrayLike</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> _type = <span class="built_in">Object</span>.prototype.toString.call(obj).slice(<span class="number">8</span>, <span class="number">-1</span>).toLowerCase(),</div><div class="line">				length = !!obj &amp;&amp; <span class="string">'length'</span> <span class="keyword">in</span> obj &amp;&amp; obj.length;</div><div class="line">			<span class="comment">// 过滤 window对象和函数对象</span></div><div class="line">			<span class="keyword">if</span>(itcast.isFunction(obj) || itcast.isGlobal(obj)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">			<span class="keyword">return</span> _type === <span class="string">'array'</span> || length === <span class="number">0</span> || </div><div class="line">				<span class="keyword">typeof</span> length === <span class="string">'number'</span> &amp;&amp; length &gt; <span class="number">0</span> &amp;&amp; (length - <span class="number">1</span>) <span class="keyword">in</span> obj;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	global.$ = global.itcast = itcast;</div><div class="line">&#125;(<span class="built_in">window</span>));</div></pre></td></tr></table></figure>
<p>到此,一个完整的 <code>init</code> 框架结构就好了!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第一部分!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://of2np1oao.bkt.clouddn.com/ihoey/imgsp161118_190319.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="http://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="http://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="http://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>Canvas部分知识总结</title>
    <link href="http://blog.ihoey.com/posts/Canvas/2016-11-15-canvas-summary.html"/>
    <id>http://blog.ihoey.com/posts/Canvas/2016-11-15-canvas-summary.html</id>
    <published>2016-11-15T12:38:26.000Z</published>
    <updated>2016-11-24T01:35:09.908Z</updated>
    
    <content type="html"><![CDATA[<p>Canvas笔记总结！！<br>接前部分~</p>
<a id="more"></a>
<h2 id="canvas是什么"><a href="#canvas是什么" class="headerlink" title="canvas是什么?"></a>canvas是什么?</h2><p>是一个 <code>HTML5</code> 标签,该标签用来绘图</p>
<h2 id="canvas怎么用"><a href="#canvas怎么用" class="headerlink" title="canvas怎么用"></a>canvas怎么用</h2><p><code>canvas</code> 是一个画布,不能自己画图,画图需要绘图上下文</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cas = <span class="built_in">document</span>.querySelector(<span class="string">"#c"</span>);</div><div class="line"><span class="comment">//获取绘图上下文</span></div><div class="line">car ctx = cas.getContext(<span class="string">"2d"</span>);</div></pre></td></tr></table></figure>
<h2 id="画直线"><a href="#画直线" class="headerlink" title="画直线"></a>画直线</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置直线的起点</span></div><div class="line">ctx.moveTo(x,y);</div><div class="line"><span class="comment">//画路径到直线的终点</span></div><div class="line">ctx.lineTo(x,y);</div></pre></td></tr></table></figure>
<h2 id="开启新路径"><a href="#开启新路径" class="headerlink" title="开启新路径"></a>开启新路径</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.befinPath();</div></pre></td></tr></table></figure>
<h2 id="画曲线"><a href="#画曲线" class="headerlink" title="画曲线"></a>画曲线</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用for循环,用函数来帮一个y确定一个x</span></div><div class="line"><span class="comment">//然后讲x,y的每一个点用lingTo连起来就变成了一条曲线</span></div></pre></td></tr></table></figure>
<h2 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 手动,纯人工</span></div><div class="line"><span class="comment">//2. ctx.rect(x,y,w,h);</span></div><div class="line"><span class="comment">//3. ctx.strokeRect(x,y,w,h);</span></div><div class="line"><span class="comment">//4. ctx.fillRect(x,y,w,h);</span></div></pre></td></tr></table></figure>
<h2 id="画弧"><a href="#画弧" class="headerlink" title="画弧"></a>画弧</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.arc(x,y,r,startAngle.endAngle[,<span class="built_in">Boolean</span> optional anticlockwise])</div></pre></td></tr></table></figure>
<h2 id="扇形"><a href="#扇形" class="headerlink" title="扇形"></a>扇形</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先moveTo到原心</span></div><div class="line">moveTo(x,y);</div><div class="line">ctx.arc(x,y,r,startAngle.endAngle[,<span class="built_in">Boolean</span> optional anticlockwise])</div><div class="line">ctx.closePath();</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><p><code>3</code> 等分的饼</p>
<ol>
<li>开始的角度一般是 <code>-90</code></li>
<li>每画一个扇形,就让角度 <code>+120</code></li>
<li>再从加了 <code>120</code> 的角度画下一个扇形</li>
</ol>
<h2 id="动画饼图"><a href="#动画饼图" class="headerlink" title="动画饼图"></a>动画饼图</h2><p>定时器<br>每一段时间画一个小扇形,就和画饼一样</p>
<h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fillText(str, x, y)</div><div class="line">strokText(str, x, y)</div></pre></td></tr></table></figure>
<h3 id="对其方式"><a href="#对其方式" class="headerlink" title="对其方式"></a>对其方式</h3><h4 id="水平"><a href="#水平" class="headerlink" title="水平"></a>水平</h4><ul>
<li>left</li>
<li>center</li>
<li>right</li>
<li>start</li>
<li>end</li>
</ul>
<h4 id="垂直"><a href="#垂直" class="headerlink" title="垂直"></a>垂直</h4><ul>
<li>top</li>
<li>middle</li>
<li>bottom</li>
<li>hanging</li>
<li>alphabetic</li>
<li>ideographic</li>
</ul>
<h2 id="完整饼图"><a href="#完整饼图" class="headerlink" title="完整饼图"></a>完整饼图</h2><ol>
<li>先算所有数据的总和</li>
<li>算每个数据的比例,用比例算出角度</li>
<li>更具每个角度去画扇形</li>
<li>在去画扇形的中线</li>
<li>画文字下面的线</li>
<li>写文字</li>
</ol>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3参</span></div><div class="line">ctx.drawImage(img, x, y)</div><div class="line"><span class="comment">//直接画不管宽高</span></div><div class="line"><span class="comment">//5参</span></div><div class="line">ctx.drawImage(img, x, y, w, h)</div><div class="line"><span class="comment">//要确定宽高</span></div><div class="line"><span class="comment">//9参</span></div><div class="line">ctx.drawImage(img, x, y, w, h, x1, y1, w1, h1)</div><div class="line"></div><div class="line"><span class="comment">//拿出图片中 x, y, w, h 这个矩形所在的位置的图像</span></div><div class="line"><span class="comment">//放到canvas中x1, y1, w1, h1这个矩形所在的位置</span></div></pre></td></tr></table></figure>
<h2 id="帧动画"><a href="#帧动画" class="headerlink" title="帧动画"></a>帧动画</h2><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><ul>
<li>平移变换   把画布的原点移动到指定的位置<br>  <code>ctx.translate(x, y)</code></li>
<li>缩放变换   对画布进行缩放</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx.scale(x, y)  <span class="comment">//x表示的是对画布x轴的缩放，如果大于1 是放大 如果小于1 是缩小</span></div><div class="line">ctx.scale(x, y)  <span class="comment">//y表示的是对画布y轴的缩放，如果大于1 是放大 如果小于1 是缩小</span></div></pre></td></tr></table></figure>
<ul>
<li>旋转变换<br>  <code>ctx.rotate(弧度)  //将画布，围绕原点旋转指定的弧度</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Canvas笔记总结！！&lt;br&gt;接前部分~&lt;/p&gt;
    
    </summary>
    
      <category term="Canvas" scheme="http://blog.ihoey.com/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="http://blog.ihoey.com/tags/Canvas/"/>
    
      <category term="HTML5" scheme="http://blog.ihoey.com/tags/HTML5/"/>
    
      <category term="画布" scheme="http://blog.ihoey.com/tags/%E7%94%BB%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>Canvas知识整理part2</title>
    <link href="http://blog.ihoey.com/posts/Canvas/2016-11-14-canvas-part2.html"/>
    <id>http://blog.ihoey.com/posts/Canvas/2016-11-14-canvas-part2.html</id>
    <published>2016-11-14T11:42:44.000Z</published>
    <updated>2016-11-24T01:34:33.712Z</updated>
    
    <content type="html"><![CDATA[<p>Html5Canvas笔记整理，接part1篇！！</p>
<p>绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法!</p>
<ol>
<li>绘制矩形</li>
<li>绘制圆弧</li>
<li>绘制文本</li>
<li>绘制图片</li>
<li>绘制动画</li>
</ol>
<a id="more"></a>
<h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h2><ol>
<li>strokeRect();</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strokeRect(x, y, w, h)</div></pre></td></tr></table></figure>
<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，并描边</p>
<ul>
<li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li>
<li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li>
<li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li>
<li>绘制的矩形支持 <code>strokeStyle</code> 设置颜色样式.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">ctx.strokeRect( <span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span> );</div></pre></td></tr></table></figure>
<ol>
<li>fillRect();</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fillRect(x, y, w, h)</div></pre></td></tr></table></figure>
<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，并填充</p>
<ul>
<li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li>
<li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li>
<li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li>
<li>绘制的矩形支持 <code>fillStyle</code> 设置颜色样式.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx.fillStyle = <span class="string">'green'</span>;</div><div class="line">ctx.fillRect( <span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span> );</div></pre></td></tr></table></figure>
<ol>
<li>rect();</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rect(x, y, w, h)</div></pre></td></tr></table></figure>
<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, y坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，不描边</p>
<ol>
<li>clearRect();</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clearRect(x, y, w, h)</div></pre></td></tr></table></figure>
<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：清除指定的矩形区域</p>
<ul>
<li>用于清除画布中的矩形区域的内容.</li>
<li>参数 <code>x</code>, <code>y</code> 表示矩形区域左上角的坐标,<code>width</code> 与 <code>height</code> 表示矩形区域的宽高.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx.fillRect( <span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span> );</div><div class="line">ctx.clearRect( <span class="number">110</span>, <span class="number">110</span>, <span class="number">50</span>, <span class="number">50</span> );</div></pre></td></tr></table></figure>
<ul>
<li>save restore<br>  save 保存当前的路径状态<br>  restore 恢复上一次保存的路径状态( <code>restore</code> 是与之对应的,先 <code>save</code> 的,后被 <code>restore</code> )</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>, y = <span class="number">10</span>, oldx = <span class="number">10</span>, oldy = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> width = <span class="number">100</span>, height = <span class="number">50</span>;     </div><div class="line"><span class="keyword">var</span> intervalId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	ctx.clearRect( oldx - <span class="number">1</span>, oldy - <span class="number">1</span>, width + <span class="number">2</span>, height + <span class="number">2</span> );</div><div class="line"></div><div class="line">	ctx.strokeRect( x, y, width, height );</div><div class="line"></div><div class="line">	oldx = x;</div><div class="line">	oldy = y;</div><div class="line"></div><div class="line">	x += <span class="number">4</span>;</div><div class="line">	y += <span class="number">2</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( oldy &gt;= <span class="number">200</span> ) &#123;</div><div class="line">		<span class="comment">// clearInterval( intervalId );</span></div><div class="line">		x = <span class="number">10</span>, y = <span class="number">10</span>;</div><div class="line">	&#125;</div><div class="line">&#125;, <span class="number">20</span>);</div></pre></td></tr></table></figure>
<h2 id="绘制圆弧"><a href="#绘制圆弧" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arc(x, y, r, startAngle, endAngle, anticlockwise)</div></pre></td></tr></table></figure>
<ul>
<li><code>x,y</code> 圆心坐标</li>
<li><code>r</code>  圆的半径</li>
<li><code>startAngle</code> 起始角度（弧度表示）</li>
<li><code>endAngle</code> 结束角度（弧度表示）</li>
<li><code>anticlockwise</code> 是否逆时针绘制，注意找角的时候还是顺时针找</li>
</ul>
<p>注意事项，每次画完弧之后，都会保存点，下次绘图会从该点开始</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 200, 200 的地方绘制一段半径为 100 的圆弧, 圆心角为 - PI / 2 到 PI / 4</span></div><div class="line">...</div><div class="line">ctx.arc( <span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, -<span class="built_in">Math</span>.PI/<span class="number">2</span>, <span class="built_in">Math</span>.PI/<span class="number">4</span> );</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"><span class="comment">// 为了方便看清楚结构, 绘制坐标轴</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">ctx.moveTo( <span class="number">50</span>, <span class="number">200</span> );</div><div class="line">ctx.lineTo( <span class="number">350</span>, <span class="number">200</span> );</div><div class="line"></div><div class="line">ctx.moveTo( <span class="number">200</span>, <span class="number">50</span> );</div><div class="line">ctx.lineTo( <span class="number">200</span>, <span class="number">350</span> );</div><div class="line"></div><div class="line">ctx.moveTo( <span class="number">200</span>, <span class="number">200</span> );</div><div class="line">ctx.lineTo( <span class="number">300</span>, <span class="number">300</span> );</div><div class="line"></div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<h2 id="绘制扇形"><a href="#绘制扇形" class="headerlink" title="绘制扇形"></a>绘制扇形</h2><p>先 <code>moveTo</code> 圆心，然后画弧 ，然后 <code>closePath</code> 弧就有了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">ctx.fillStyle = <span class="string">'pink'</span>;</div><div class="line"></div><div class="line">ctx.moveTo( <span class="number">100</span>, <span class="number">200</span> );</div><div class="line">ctx.arc( <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>, -<span class="built_in">Math</span>.PI/<span class="number">3</span>, <span class="built_in">Math</span>.PI/<span class="number">3</span> );</div><div class="line">ctx.closePath();</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo( <span class="number">300</span>, <span class="number">200</span> );</div><div class="line">ctx.arc( <span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, -<span class="built_in">Math</span>.PI/<span class="number">3</span>, <span class="built_in">Math</span>.PI/<span class="number">3</span> );</div><div class="line">ctx.closePath();</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<h2 id="绘制扇形动画"><a href="#绘制扇形动画" class="headerlink" title="绘制扇形动画"></a>绘制扇形动画</h2><p>绘制扇形动画, 就是每隔几毫秒( 20 毫秒)擦除以前绘制的内容, 然后在以前绘制的基础上比以前多绘制一点东西. 这里多绘制的内容就是由角度决定. 比如一开始角度从 <code>-Math.PI / 2</code> 开始绘制. 那么每次角度都 <code>+0.1</code> , 直到 绘制到 <code>Math.PI * 3 / 2</code>为止.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ctx.fillStyle = <span class="string">'green'</span>;</div><div class="line"><span class="keyword">var</span> startAngle = -<span class="built_in">Math</span>.PI / <span class="number">2</span>,</div><div class="line">	angle = startAngle,</div><div class="line">	x = <span class="number">200</span>, y = <span class="number">200</span>,</div><div class="line">	r = <span class="number">100</span>;</div><div class="line"><span class="keyword">var</span> intervalId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 清除之前绘制的内容</span></div><div class="line">	ctx.clearRect( <span class="number">0</span>, <span class="number">0</span>, cas.width, cas.height );</div><div class="line">	<span class="comment">// 角度增量</span></div><div class="line">	angle += <span class="number">0.1</span>;</div><div class="line">	<span class="comment">// 判断是否停止计时器</span></div><div class="line">	<span class="keyword">if</span> ( angle &gt;= <span class="built_in">Math</span>.PI * <span class="number">3</span> / <span class="number">2</span> ) &#123;</div><div class="line">		clearInterval( intervalId);</div><div class="line">		angle = <span class="built_in">Math</span>.PI * <span class="number">3</span> / <span class="number">2</span>; </div><div class="line">		<span class="built_in">console</span>.log( <span class="string">'绘制完成'</span> );</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 绘制</span></div><div class="line">	ctx.moveTo( x, y );</div><div class="line">	ctx.arc( x, y, r, startAngle, angle );</div><div class="line">	ctx.fill();</div><div class="line">&#125;, <span class="number">20</span>);</div></pre></td></tr></table></figure>
<h2 id="绘制饼形图"><a href="#绘制饼形图" class="headerlink" title="绘制饼形图"></a>绘制饼形图</h2><pre><code>等分的饼图,饼图的起始位置在    `-90°` .
</code></pre><p>绘制饼形图最大的特点是角度是叠加的. 开始从 <code>-Math.PI/2</code> 开始绘制, 达到执行角 <code>x</code> 后, 下一个区域从 <code>x</code> 开始绘制, 然后有到一个角 <code>y</code> 停下来. 如此反复到 <code>Math.PI * 3 / 2</code> 结束.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">200</span>, y = <span class="number">200</span>,</div><div class="line">	r = <span class="number">100</span>,</div><div class="line">	step = <span class="built_in">Math</span>.PI * <span class="number">2</span> / <span class="number">3</span>,     <span class="comment">// 120 度一个区域</span></div><div class="line">	start = -<span class="built_in">Math</span>.PI / <span class="number">2</span>,       <span class="comment">// 起始角度</span></div><div class="line">	colors = [ <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span> ];</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ ) &#123;</div><div class="line">	ctx.beginPath();</div><div class="line">	ctx.moveTo( x, y );</div><div class="line">	ctx.fillStyle = colors[ i ];</div><div class="line">	ctx.arc( x, y, r, start, start+=step );</div><div class="line">	ctx.fill();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Html5Canvas笔记整理，接part1篇！！&lt;/p&gt;
&lt;p&gt;绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;绘制矩形&lt;/li&gt;
&lt;li&gt;绘制圆弧&lt;/li&gt;
&lt;li&gt;绘制文本&lt;/li&gt;
&lt;li&gt;绘制图片&lt;/li&gt;
&lt;li&gt;绘制动画&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Canvas" scheme="http://blog.ihoey.com/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="http://blog.ihoey.com/tags/Canvas/"/>
    
      <category term="HTML5" scheme="http://blog.ihoey.com/tags/HTML5/"/>
    
      <category term="画布" scheme="http://blog.ihoey.com/tags/%E7%94%BB%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>Canvas知识整理part1</title>
    <link href="http://blog.ihoey.com/posts/Canvas/2016-11-13-canvas-part1.html"/>
    <id>http://blog.ihoey.com/posts/Canvas/2016-11-13-canvas-part1.html</id>
    <published>2016-11-13T11:39:33.000Z</published>
    <updated>2016-11-24T01:33:33.631Z</updated>
    
    <content type="html"><![CDATA[<p>canvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.</p>
<a id="more"></a>
<pre><code>canvas 英 [&apos;kænvəs]  美 [&apos;kænvəs]   帆布 画布
</code></pre><p>默认的宽高为：<code>300 * 150</code></p>
<h2 id="Canvas-使用注意："><a href="#Canvas-使用注意：" class="headerlink" title="Canvas 使用注意："></a>Canvas 使用注意：</h2><ul>
<li>设置 <code>canvas</code> 宽高 <code>canvas</code> 只是一个画布，不能直接自己绘图，绘图需要使用工具</li>
<li>设置 <code>canvas</code> 宽和高的时候不推荐使用 <code>css</code> 样式去设置，因为会有拉伸的效果</li>
<li>在不支持的浏览器中，<code>canvas</code> 中的内容会正常的现实出来</li>
<li>再 <code>canvas</code> 标签内部书写内容，在支持的浏览器中，该内容会被忽略</li>
<li>在不支持的浏览器中会将 <code>canvas</code> 标签会当作 <code>div</code> 标签来处理</li>
</ul>
<h2 id="canvas-的使用领域"><a href="#canvas-的使用领域" class="headerlink" title="canvas 的使用领域"></a>canvas 的使用领域</h2><p><code>canvas</code> 的使用领域很多:</p>
<ol>
<li>游戏</li>
<li>可视化数据(重点)</li>
<li><code>banner</code> 广告</li>
<li>多媒体</li>
<li>未来<ul>
<li>模拟仿真</li>
<li>远程操作</li>
<li>图形编辑</li>
</ul>
</li>
</ol>
<h2 id="Canvas-怎么用？"><a href="#Canvas-怎么用？" class="headerlink" title="Canvas 怎么用？"></a>Canvas 怎么用？</h2><ol>
<li>创建一个 <code>Canvas</code> 标签</li>
<li>获取到该 <code>DOM</code> 对象</li>
<li><code>Canvas</code> 只是一个画布，不能自己画画，需要画图工具</li>
<li>每个 <code>Canvas</code> 对应一个画图工具，通过 <code>canvas</code> 对象 <code>.getContext(&quot;2d&quot;)</code> 参数有 <code>2d</code> 和 <code>webgl</code> 两种 <code>2d</code> 获取到一个 <code>CanvasRenderingContext2D</code> 类型的对象,使用 <code>webgl</code> 返回 <code>WebGLRenderingContext</code> 类型的对象.</li>
</ol>
<h2 id="如何画直线"><a href="#如何画直线" class="headerlink" title="如何画直线"></a>如何画直线</h2><ol>
<li>先确定在何处下笔，画图工具 <code>.moveTo(x, y)</code></li>
<li>确定从开始的点画到哪里去，  画图工具 <code>.lineTo(x, y)</code></li>
<li>上面两步之后，线并没有画出来，而是描点，需要最后一步进行画线  画图工具 <code>.stroke();</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement( <span class="string">'canvas'</span> );</div><div class="line">canvas.width = <span class="number">500</span>;</div><div class="line">canvas.height = <span class="number">400</span>;</div><div class="line">canvas.style.border = <span class="string">'1px dashed red'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild( canvas );</div><div class="line"><span class="comment">// 获得 CanvasRenderingContext2D 对象</span></div><div class="line"><span class="keyword">var</span> context = canvas.getContext( <span class="string">'2d'</span> );</div><div class="line"><span class="comment">// 设置 起点</span></div><div class="line">context.moveTo( <span class="number">0</span>, <span class="number">0</span> );</div><div class="line"><span class="comment">// 绘制直线</span></div><div class="line">context.lineTo( <span class="number">500</span>, <span class="number">400</span> );</div><div class="line"><span class="comment">// 设置 起点</span></div><div class="line">context.moveTo( <span class="number">0</span>, <span class="number">400</span> );</div><div class="line"><span class="comment">// 绘制直线</span></div><div class="line">context.lineTo( <span class="number">500</span>, <span class="number">0</span> );</div><div class="line"><span class="comment">// 描边显示效果</span></div><div class="line">context.stroke();</div></pre></td></tr></table></figure>
<h2 id="lineTo的特性"><a href="#lineTo的特性" class="headerlink" title="lineTo的特性"></a>lineTo的特性</h2><p>每次 <code>lineTo</code> 之后都会记录最后的 <code>lineTo</code> 的点，下次 <code>lineTo</code> 的时候就接着这个 <code>canvas</code> 只是一个画布，不能直接自己绘图，绘图需要使用工具sssss点继续画</p>
<h2 id="closePath"><a href="#closePath" class="headerlink" title="closePath"></a>closePath</h2><p>将最后一次 <code>lineTo</code> 的点 和最后一次 <code>moveTo</code> 的点连起来的<br>两条线的交界处，如果使用的是 <code>closePath</code> 会补全缺口</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ctx.moveTo( <span class="number">100</span>, <span class="number">100</span> );</div><div class="line">ctx.lineTo( <span class="number">300</span>, <span class="number">100</span> );</div><div class="line">ctx.lineTo( <span class="number">300</span>, <span class="number">200</span> );</div><div class="line">ctx.closePath();</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h2><p>可以将闭合的图形进行填充</p>
<h2 id="非零填充原则"><a href="#非零填充原则" class="headerlink" title="非零填充原则"></a>非零填充原则</h2><p>从一个闭合空间引出一条直线，如果该直线两边的箭头数量不相等，则要填充，如果相等则不填充</p>
<p>一边有一个箭头就+1<br>另一边有一个箭头就-1</p>
<h2 id="如何绘制曲线？"><a href="#如何绘制曲线？" class="headerlink" title="如何绘制曲线？"></a>如何绘制曲线？</h2><p>使用 <code>for</code> 循环给每一个 <code>x</code> 对应一个 <code>y</code> 值，<code>x</code> 和 <code>y</code> 的关系需要是个多次幂的方程</p>
<h2 id="路径概念"><a href="#路径概念" class="headerlink" title="路径概念"></a>路径概念</h2><p>路径就是一次绘图，包含该次绘图中的所有的状态，线宽  颜色  是否虚线</p>
<p>如果想要改变状态，就需要开启新的路径</p>
<h2 id="beginPath"><a href="#beginPath" class="headerlink" title="beginPath"></a>beginPath</h2><p>可以用来开启新的路径</p>
<h2 id="线型相关属性"><a href="#线型相关属性" class="headerlink" title="线型相关属性"></a>线型相关属性</h2><table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">lineWidth</td>
<td style="text-align:center">画线的时候的线的宽度</td>
</tr>
<tr>
<td style="text-align:center">setLineDash()</td>
<td style="text-align:center">设置虚线各个线段的长度,参数是一个数组，会将数组中的数字循环使用</td>
</tr>
<tr>
<td style="text-align:center">getLineDash()</td>
<td style="text-align:center">获取虚线各个线段的长度，如果是实线，获取到的是空数组</td>
</tr>
<tr>
<td style="text-align:center">lineDashOffset</td>
<td style="text-align:center">设置虚线的偏移量，正值往左，负值往右</td>
</tr>
<tr>
<td style="text-align:center">strokeStyle</td>
<td style="text-align:center">设置描边的，画线的颜色，颜色值可以为css中任意一种</td>
</tr>
<tr>
<td style="text-align:center">fillStyle</td>
<td style="text-align:center">设置填充颜色，颜色值可以为css中任意一种</td>
</tr>
</tbody>
</table>
<h2 id="渐变色"><a href="#渐变色" class="headerlink" title="渐变色"></a>渐变色</h2><p>将线划分为 <code>256</code> 份，每一份为一个颜色，新画一条线，依次递增，就形成了一个颜色渐变的线段</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;canvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.&lt;/p&gt;
    
    </summary>
    
      <category term="Canvas" scheme="http://blog.ihoey.com/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="http://blog.ihoey.com/tags/Canvas/"/>
    
      <category term="HTML5" scheme="http://blog.ihoey.com/tags/HTML5/"/>
    
      <category term="画布" scheme="http://blog.ihoey.com/tags/%E7%94%BB%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级篇总结</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-11-12-javascript-summary.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-11-12-javascript-summary.html</id>
    <published>2016-11-12T11:04:31.000Z</published>
    <updated>2016-11-24T01:32:28.396Z</updated>
    
    <content type="html"><![CDATA[<p>javascript高级与面向对象笔记总结！！</p>
<a id="more"></a>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归就是函数自己直接或者间接的调用自己</p>
<h3 id="递归的两个要素"><a href="#递归的两个要素" class="headerlink" title="递归的两个要素"></a>递归的两个要素</h3><ul>
<li>自己调用自己</li>
<li>递归结束条件</li>
</ul>
<h3 id="化归思想"><a href="#化归思想" class="headerlink" title="化归思想"></a>化归思想</h3><p>由难化易，由繁化简，的思想就是化归思想</p>
<h3 id="前n项和"><a href="#前n项和" class="headerlink" title="前n项和"></a>前n项和</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fn(n) = fn(n<span class="number">-1</span>) + n</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum(n - <span class="number">1</span>) + n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fn(n) = fn(n<span class="number">-1</span>) * n</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum(n - <span class="number">1</span>) * n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fn(n) = fn(n<span class="number">-1</span>) + fn(n<span class="number">-2</span>)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>( n &lt;= <span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="递归获取指定元素的后代元素"><a href="#递归获取指定元素的后代元素" class="headerlink" title="递归获取指定元素的后代元素"></a>递归获取指定元素的后代元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">ele</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    <span class="keyword">var</span> children = ele.children;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++)&#123;</div><div class="line">        result.push(children[i]);</div><div class="line">        <span class="keyword">var</span> temp = getChildren(children[i]);</div><div class="line">        result = result.concat(temp);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>一个封闭的包裹结构</p>
<p>一个可以访问独立数据的函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> data = <span class="string">""</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//可以操作data数据</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取和设置数据</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> data = <span class="string">""</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">getData</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> data;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">setDate</span>:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">            data = value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="for循环注册点击事件的问题"><a href="#for循环注册点击事件的问题" class="headerlink" title="for循环注册点击事件的问题"></a>for循环注册点击事件的问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.length; i++)&#123;</div><div class="line">    <span class="keyword">var</span> div = divs[i];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> j = i;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(j);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    div.onclick = outer();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="for循环中使用setTimeout"><a href="#for循环中使用setTimeout" class="headerlink" title="for循环中使用setTimeout"></a>for循环中使用setTimeout</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">    setTimeout((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> j = i;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(j);</div><div class="line">        &#125;</div><div class="line">    &#125;()),<span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul>
<li>硬件缓存</li>
<li>浏览器缓存</li>
<li><code>CDN</code>—<code>Content Delivery Network</code>  内容分发网络</li>
</ul>
<h3 id="使用缓存解决递归实现的斐波那契数列的性能问题"><a href="#使用缓存解决递归实现的斐波那契数列的性能问题" class="headerlink" title="使用缓存解决递归实现的斐波那契数列的性能问题"></a>使用缓存解决递归实现的斐波那契数列的性能问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFib</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> num = arr[n];</div><div class="line">        <span class="keyword">if</span>(!num)&#123;</div><div class="line">            <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</div><div class="line">                num = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                num = <span class="built_in">arguments</span>.callee(n - <span class="number">1</span>) + <span class="built_in">arguments</span>.callee(n - <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">            arr[n] = num;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="jQuery缓存实现分析"><a href="#jQuery缓存实现分析" class="headerlink" title="jQuery缓存实现分析"></a>jQuery缓存实现分析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCache</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(value)&#123;</div><div class="line">            cache[key] = value;</div><div class="line">            arr.push(key);</div><div class="line">            <span class="keyword">if</span>(arr.length &gt; <span class="number">50</span>)&#123;</div><div class="line">                <span class="keyword">delete</span> cache[arr.shift()];</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> cache[key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="函数的四种调用模式"><a href="#函数的四种调用模式" class="headerlink" title="函数的四种调用模式"></a>函数的四种调用模式</h2><h3 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h3><p>形式: 函数名();<br><code>this: window</code></p>
<h3 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h3><p>形式: 对象名.方法名();<br>this: 调用该方法的对象</p>
<h3 id="构造函数调用模式"><a href="#构造函数调用模式" class="headerlink" title="构造函数调用模式"></a>构造函数调用模式</h3><p>形式: <code>new</code> .构造函数名()<br><code>this: new</code>创建出来的对象</p>
<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObject</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.xxx = <span class="string">"xxx"</span>;</div><div class="line">    o.yyy = <span class="string">"yy"</span>;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p  = createObject();</div></pre></td></tr></table></figure>
<h4 id="寄生模式"><a href="#寄生模式" class="headerlink" title="寄生模式"></a>寄生模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CObject</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.xxx = <span class="string">"xxx"</span>;</div><div class="line">    o.yyy = <span class="string">"yy"</span>;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> CObject();</div></pre></td></tr></table></figure>
<h3 id="上下文调用模式"><a href="#上下文调用模式" class="headerlink" title="上下文调用模式"></a>上下文调用模式</h3><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">函数名.call(对象,参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3.</span>..)</div></pre></td></tr></table></figure>
<ol>
<li>调用该函数</li>
<li>将函数内部的<code>this</code>赋值为<code>call</code>的第一个参数</li>
<li>将第一个参数之后的所有参数，当做实参传递给函数</li>
</ol>
<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">函数名.apply(对象,数组)</div></pre></td></tr></table></figure>
<ol>
<li>调用该函数</li>
<li>将函数内部的<code>this</code>赋值为<code>apply</code>的第一个参数</li>
<li>将第二个参数的数组，依次拆解开，将每一个元素挨个传递给函数做为实参</li>
</ol>
<h5 id="伪数组转换成数组"><a href="#伪数组转换成数组" class="headerlink" title="伪数组转换成数组"></a>伪数组转换成数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrFake = &#123;</div><div class="line">    <span class="number">0</span>:<span class="number">1</span>,</div><div class="line">    <span class="number">1</span>:<span class="number">2</span>,</div><div class="line">    <span class="number">2</span>:<span class="number">3</span>,</div><div class="line">    <span class="attr">length</span>:<span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arrReal = [];</div><div class="line"></div><div class="line">arrReal.push.apply(arrReal, arrFake);</div><div class="line"><span class="comment">//arrReal.push(arrFake[0] , arrFake[1], arrFake[2])   相当于这句代码</span></div></pre></td></tr></table></figure>
<h5 id="求数组最大值"><a href="#求数组最大值" class="headerlink" title="求数组最大值"></a>求数组最大值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">3</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> maxNum = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr);</div></pre></td></tr></table></figure>
<h4 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">""</span>;</div><div class="line">    <span class="keyword">this</span>.money = <span class="number">99999999999999</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    Father.call(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Son();</div></pre></td></tr></table></figure>
<h2 id="沙箱模式"><a href="#沙箱模式" class="headerlink" title="沙箱模式"></a>沙箱模式</h2><p>一个隔离的安全的环境</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">w</span>)</span>&#123;</div><div class="line">    <span class="comment">//需要隔离的代码</span></div><div class="line">    <span class="comment">//最顶上写 变量函数之类的申明</span></div><div class="line">    <span class="comment">//逻辑代码</span></div><div class="line">    <span class="comment">//如果需要，使用window对象向外界暴露接口</span></div><div class="line">&#125;)(<span class="built_in">window</span>)</div></pre></td></tr></table></figure>
<p>为什么要将 <code>window</code> 作为参数传递</p>
<ol>
<li>外面无法访问里面，里面也不要去访问外面的东西</li>
<li>在代码压缩的时候，内置的对象名称无法被压缩，如果使用自己的变量，是可以压缩的</li>
</ol>
<h2 id="forEach-和-map"><a href="#forEach-和-map" class="headerlink" title="forEach 和　map"></a>forEach 和　map</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ,<span class="number">6</span>];</div><div class="line"><span class="comment">//currentEle 当前正在遍历的元素,</span></div><div class="line"><span class="comment">//currentIndex 当前遍历的元素的索引,</span></div><div class="line"><span class="comment">//currentArray 当前正在被遍历的数组</span></div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class="line">    currentArray[currentIndex] = currentEle * <span class="number">2</span>;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//currentEle 当前正在遍历的元素,</span></div><div class="line"><span class="comment">//currentIndex 当前遍历的元素的索引,</span></div><div class="line"><span class="comment">//currentArray 当前正在被遍历的数组</span></div><div class="line"><span class="comment">//map如果回调函数内有返回值，会将所有调用的返回值重新组合成一个数组，作为map方法的返回值</span></div><div class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> currentEle * <span class="number">2</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span></div></pre></td></tr></table></figure>
<ul>
<li>变量不使用<code>var</code>声明会报错</li>
<li>不能删除不允许删除的属性</li>
<li>对象的属性不可以重名</li>
<li>函数的形参不可以重名</li>
<li>不允许使用八进制数据</li>
</ul>
<h2 id="事件兼容性处理"><a href="#事件兼容性处理" class="headerlink" title="事件兼容性处理"></a>事件兼容性处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRegister</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, type, handler</span>)</span>&#123;</div><div class="line">            target.addEventListener(type, handler);</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, type, handler</span>)</span>&#123;</div><div class="line">            target.attachEvent(<span class="string">"on"</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                handler.call(target, <span class="built_in">window</span>.event);</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, type, handler</span>)</span>&#123;</div><div class="line">            target[<span class="string">"on"</span>+type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript高级与面向对象笔记总结！！&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.ihoey.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级篇之part6</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-11-11-javascript-part6.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-11-11-javascript-part6.html</id>
    <published>2016-11-11T11:35:55.000Z</published>
    <updated>2016-11-24T01:31:31.067Z</updated>
    
    <content type="html"><![CDATA[<p>javascript高级与面向对象笔记整理，接part5篇！！</p>
<a id="more"></a>
<h2 id="闭包的练习"><a href="#闭包的练习" class="headerlink" title="闭包的练习"></a>闭包的练习</h2><h3 id="for循环中注册点击事件"><a href="#for循环中注册点击事件" class="headerlink" title="for循环中注册点击事件"></a>for循环中注册点击事件</h3><h3 id="for循环中是用setTimeout"><a href="#for循环中是用setTimeout" class="headerlink" title="for循环中是用setTimeout"></a>for循环中是用setTimeout</h3><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>缓存就是将一些数据，剧院，进行临时的存储，以提高访问效率</p>
<ul>
<li>浏览器缓存</li>
<li>CDN</li>
<li>JS中的缓存</li>
</ul>
<h2 id="使用缓存解决斐波那契数列的性能问题"><a href="#使用缓存解决斐波那契数列的性能问题" class="headerlink" title="使用缓存解决斐波那契数列的性能问题"></a>使用缓存解决斐波那契数列的性能问题</h2><h3 id="有什么性能问题"><a href="#有什么性能问题" class="headerlink" title="有什么性能问题"></a>有什么性能问题</h3><p>使用递归去计算斐波那契数列存在大量的重复的计算，导致计算效率十分底下</p>
<h3 id="如何解决性能问题"><a href="#如何解决性能问题" class="headerlink" title="如何解决性能问题"></a>如何解决性能问题</h3><p>使用缓存</p>
<ol>
<li>创建一个数组充当缓存容器</li>
<li>每次需要计算斐波那契数列的时候，先去缓存中进行查找</li>
<li>如果有就直接返回</li>
<li>如果没有，就去计算，算出来结果之后</li>
<li>将结果存入缓存中</li>
<li>将结果返回</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.创建一个数组充当缓存容器</span></div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibnacci</span>(<span class="params">n</span>)</span>&#123;</div><div class="line"><span class="comment">//2.每次需要计算斐波那契数列的时候，先去缓存中进行查找</span></div><div class="line">	<span class="keyword">var</span> num = arr[n];</div><div class="line">	<span class="keyword">if</span>(num)&#123;</div><div class="line">		<span class="comment">//3.如果有就直接返回</span></div><div class="line">		<span class="keyword">return</span> num;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="comment">//4.如果没有，就去计算，算出来结果之后</span></div><div class="line">		<span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</div><div class="line">			num=<span class="number">1</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">		num = fibnacci(n<span class="number">-1</span>)+fibnacci(n<span class="number">-2</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//5.将结果存入缓存中</span></div><div class="line">		arr[n] = num;</div><div class="line">		<span class="comment">//6.将结果返回</span></div><div class="line">		<span class="keyword">return</span> num;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优化后的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFib</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//1.创建一个数组充当缓存容器</span></div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fibnacci</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="comment">//2.每次需要计算斐波那契数字的时候，先去缓存中进行查找</span></div><div class="line">        <span class="keyword">var</span> num = arr[n];</div><div class="line">        <span class="keyword">if</span>(!num)&#123;</div><div class="line">            <span class="comment">//4.如果没有，就去就算，算出来结果之后，</span></div><div class="line">            <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</div><div class="line">                num = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                num = fibnacci(n<span class="number">-1</span>)+fibnacci(n<span class="number">-2</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//5.将结果存入缓存中</span></div><div class="line">            arr[n] = num;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//6.将结果返回</span></div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fibnacci;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="jQuery缓存实现分析"><a href="#jQuery缓存实现分析" class="headerlink" title="jQuery缓存实现分析"></a>jQuery缓存实现分析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCache</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//需要一个能够存储数据的容器</span></div><div class="line">	<span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line">	<span class="comment">//用来存储 键，并且记录键存入的顺序</span></div><div class="line">	<span class="keyword">var</span> keys = [];</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(value)&#123;</div><div class="line">			cache[key] = value;</div><div class="line">			keys.push(key);</div><div class="line">			<span class="keyword">if</span>(keys.length &gt; <span class="number">50</span>)&#123;</div><div class="line">				<span class="keyword">delete</span> cache[keys.shift()];</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> cache[key];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Jquery缓存源码分析"><a href="#Jquery缓存源码分析" class="headerlink" title="Jquery缓存源码分析"></a>Jquery缓存源码分析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCache</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> keys = [];</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">cache</span>(<span class="params">key,value</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(keys.push(key + <span class="string">" "</span>) &gt; <span class="number">10</span>)&#123;</div><div class="line">		 	<span class="keyword">delete</span> cache[keys.shift()];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> (cache[key + <span class="string">" "</span>] = value);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cache;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> cache = createCache();</div><div class="line">cache(<span class="string">"name"</span>,<span class="string">"mengyan"</span>);</div><div class="line">cache[<span class="string">"name"</span> + <span class="string">" "</span>];</div></pre></td></tr></table></figure>
<h2 id="函数的四种调用形式"><a href="#函数的四种调用形式" class="headerlink" title="函数的四种调用形式"></a>函数的四种调用形式</h2><h3 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h3><p>形式：函数名（）；<br><code>this：window</code></p>
<h3 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h3><p>形式：对项目.方法名（）；<br>this：调用该方法的对象</p>
<h3 id="构造函数调用模式"><a href="#构造函数调用模式" class="headerlink" title="构造函数调用模式"></a>构造函数调用模式</h3><p>形式 <code>new</code> 函数名（）<br>this：new创建出来的对象</p>
<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name = <span class="string">"zs"</span>;</div><div class="line">    o.age = <span class="number">18</span>;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = createPerson();</div></pre></td></tr></table></figure>
<h4 id="寄生模式"><a href="#寄生模式" class="headerlink" title="寄生模式"></a>寄生模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name = <span class="string">"zs"</span>;</div><div class="line">    o.age = <span class="number">18</span>;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div></pre></td></tr></table></figure>
<h3 id="上下文调用模式"><a href="#上下文调用模式" class="headerlink" title="上下文调用模式"></a>上下文调用模式</h3><p>在其他的调用模式中， <code>this</code> 不可以赋值，也就不可以改变<br>在上下文调用模式中，可以进行手动的设置 <code>this</code> 。</p>
<h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//函数名.call(对象, 参数1, 参数2, 参数3...)</span></div></pre></td></tr></table></figure>
<ol>
<li>调用函数</li>
<li>将函数内的 <code>this</code> 指向第一个参数中的对象</li>
<li>将除第一个参数外的所有参数依次传给函数，做为实参</li>
</ol>
<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//函数名.apply(对象, 数组)</span></div></pre></td></tr></table></figure>
<ol>
<li>调用函数</li>
<li>将函数内的 <code>this</code> 指向第一个参数中的对象</li>
<li>将第二个参数中的数组拆解开，将数组中的元素依次的传给函数当做实参</li>
</ol>
<h4 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.money = <span class="number">100000000000000</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    Parent.call(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.wife = <span class="string">"凤姐"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Son();</div></pre></td></tr></table></figure>
<ol>
<li>使用 <code>new</code> 关键字创建了一个对象</li>
<li>调用构造函数 <code>Son</code> ，将 <code>Son</code> 中的 <code>this</code> 指向刚才创建的对象</li>
<li>在 <code>Son</code> 构造函数中，是用上下文调用模式去调用 <code>Parent</code> 函数，</li>
<li>调用 <code>Person</code> 函数，将 <code>Parent</code> 中的 <code>this</code> 指向 <code>song</code> 中的 <code>this</code> ，也就是用 <code>new</code> 创建出来的那个对象</li>
<li><code>Parent</code> 中会使用 <code>this</code> 给对象添加成员</li>
<li><code>Parent</code> 调用结束， <code>Son</code> 中的 <code>this</code> 也就有了 <code>Parent</code> 中添加的那些个成员</li>
</ol>
<p>将伪数组转换成数组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fakeArr = &#123;</div><div class="line">    <span class="number">0</span>:<span class="string">"a"</span>,</div><div class="line">    <span class="number">1</span>:<span class="string">"b"</span>,</div><div class="line">    <span class="number">2</span>:<span class="string">"c"</span>,</div><div class="line">    <span class="attr">length</span>:<span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.push.apply(arr, fakeArr);</div><div class="line"><span class="built_in">Array</span>.prototype.concat.apply(arr, fakeArr);</div><div class="line"></div><div class="line"></div><div class="line">arr.concat.apply(arr, fakeArr);</div></pre></td></tr></table></figure>
<p>求数组的最大值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span> ,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">34</span>,<span class="number">3</span>,<span class="number">43</span>,<span class="number">43</span>,<span class="number">43</span>,<span class="number">4</span>,<span class="number">34</span>,<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr);</div><div class="line"><span class="comment">//Math.max(1,2,3,43,4,3,43,43,43)</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript高级与面向对象笔记整理，接part5篇！！&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.ihoey.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级篇之part5</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-11-10-javascript-part5.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-11-10-javascript-part5.html</id>
    <published>2016-11-10T13:43:36.000Z</published>
    <updated>2016-11-24T01:30:21.970Z</updated>
    
    <content type="html"><![CDATA[<p>javascript高级与面向对象笔记整理，接part4篇！！</p>
<a id="more"></a>
<h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><h3 id="词法作用域的概念"><a href="#词法作用域的概念" class="headerlink" title="词法作用域的概念"></a>词法作用域的概念</h3><p>变量的作用域在代码写好的时候就已经可以确定，这种作用域就是词法作用域</p>
<ul>
<li><code>JavaScript</code> 中没有动态作用域</li>
<li><code>JavaScript</code> 中没有块级作用域</li>
</ul>
<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>JS代码执行分两个阶段，首先进行预解析，再执行<br>在预解析阶段，系统会将所有的变量声明以及函数声明提升到当前作用域的最顶上</p>
<ul>
<li>当函数同名的时候，都会提升，但是后面的函数会将前面的函数覆盖</li>
<li>当函数和变量同名的时候，只会提升函数声明，变量声明会被忽略</li>
<li>变量提升是分作用域的</li>
<li>变量提升是分段（ <code>script</code> 标签）</li>
<li>函数表达式是不会被提升,提升的只是变量的声明。  <code>var func= function(){};</code></li>
<li>条件式函数声明，根据浏览器不同，提升的情况不同，最新的浏览器中都不会进行提升</li>
</ul>
<h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>在 <code>js</code> 中只有函数可以限定作用域，然后，函数中又可以声明函数，这样就形成了一个由内向外进行访问的链式结构，这个结构就叫做作用域链</p>
<h3 id="如何绘制作用域链"><a href="#如何绘制作用域链" class="headerlink" title="如何绘制作用域链"></a>如何绘制作用域链</h3><ol>
<li>先画一条直线，表示0级作用域链，也就是全局作用域</li>
<li>再在全局作用域中查找变量以及函数的声明，将所有找到的这些成员以小方块的形式放在0级作用域链上</li>
<li>如果全局作用域中有函数成员，那就从该函数中在引出一条线，表示1级作用域链</li>
<li>再去1级作用域中进行查找变量以及函数的声明，在把他们画出来，</li>
<li>如果还有函数，就接着去找。。。。直到没有函数为止</li>
</ol>
<h3 id="变量的搜索原则"><a href="#变量的搜索原则" class="headerlink" title="变量的搜索原则"></a>变量的搜索原则</h3><ol>
<li>首先在当前作用域中进行查找，如果找到了就直接使用</li>
<li>如果没有找到，就去上一级作用域中进行查找，如果找到了就直接使用</li>
<li>果没有找到，就继续往上查找，直到找到全局作用域为止</li>
</ol>
<h3 id="如何分析面试题"><a href="#如何分析面试题" class="headerlink" title="如何分析面试题"></a>如何分析面试题</h3><ol>
<li>先进行提升处理（把提升后的代码写出来）</li>
<li>然后根据作用域及作用域链还有变量搜索原则进行分析</li>
</ol>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ul>
<li>语文解释：封闭的包裹结构</li>
<li>js的解释：函数就是一个闭包</li>
</ul>
<h3 id="闭包要解决的问题是什么？"><a href="#闭包要解决的问题是什么？" class="headerlink" title="闭包要解决的问题是什么？"></a>闭包要解决的问题是什么？</h3><p>函数内部的数据无法被外界直接访问！</p>
<h3 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a>如何解决？</h3><p>在函数内部返回一个函数，用来操作该函数内部的数据。</p>
<h3 id="闭包的原理（作用域）"><a href="#闭包的原理（作用域）" class="headerlink" title="闭包的原理（作用域）"></a>闭包的原理（作用域）</h3><p>函数中的变量无法被上一级作用域访问，但是可以被下一级作用域访问。</p>
<h3 id="闭包的基本模型"><a href="#闭包的基本模型" class="headerlink" title="闭包的基本模型"></a>闭包的基本模型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">""</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何访问多个数据？"><a href="#如何访问多个数据？" class="headerlink" title="如何访问多个数据？"></a>如何访问多个数据？</h3><p>返回一个对象，对象中包含对所有数据的设置和访问的方法，在函数外部接收到该对象之后，就可以操作函数内部的数据</p>
<h3 id="点击事件的注册问题"><a href="#点击事件的注册问题" class="headerlink" title="点击事件的注册问题"></a>点击事件的注册问题</h3><p>如果在<code>for</code>循环中使用循环的控制变量i来处理点击事件中的内容，那么这个 <code>i</code> 在点击事件触发的时候，循环已经结束，<code>i</code> 已经变成了最后一个值，所以会不准确</p>
<h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><p>在点击事件的处理函数内部，访问的时候，不要去使用 <code>i</code>，而是使用这个函数自己的一个私有的数据。<br>所以需要使用一个拥有自己的变量的函数来做点击事件的处理函数。</p>
<pre><code>这个函数需要通过闭包来创建。
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">j</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(j);  <span class="comment">//这里的j就是只有这个函数可以访问的一个私有的变量</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>上面的函数调用之后的返回值，就拥有了自己独立的变量，我们可以使用它来做点击事件的处理函数
</code></pre><h3 id="setTimeout的回调函数执行时间问题"><a href="#setTimeout的回调函数执行时间问题" class="headerlink" title="setTimeout的回调函数执行时间问题"></a>setTimeout的回调函数执行时间问题</h3><p><code>setTimeout</code> 和 <code>setInterval</code> 中的回调函数，会在所有的主逻辑代码执行完之后，才依次检查执行时间是不是到了，到了就会执行</p>
<p>当把 <code>setTimeout</code> 放在一个for循环语句中的时候，如果在回调函数中使用了循环中变量i<br>那么，当 <code>setTimeout</code> 的回调函数执行的时候， <code>for</code> 循环已经执行完毕，i已经是最后一个值</p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>回调函数不应该去使用 <code>for</code> 循环中的 <code>i</code> ，而是使用自己的一个私有变量</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">j</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> fucntion()&#123;</div><div class="line">        <span class="built_in">console</span>.log(j)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">setTimeout(f(i),<span class="number">0</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript高级与面向对象笔记整理，接part4篇！！&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.ihoey.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级篇之part4</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-11-09-javascript-part4.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-11-09-javascript-part4.html</id>
    <published>2016-11-09T13:19:05.000Z</published>
    <updated>2016-11-24T01:30:05.120Z</updated>
    
    <content type="html"><![CDATA[<p>javascript高级与面向对象笔记整理，接part3篇！！</p>
<a id="more"></a>
<h2 id="绘制原型三角"><a href="#绘制原型三角" class="headerlink" title="绘制原型三角"></a>绘制原型三角</h2><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h2 id="原型链图"><a href="#原型链图" class="headerlink" title="原型链图"></a>原型链图</h2><h2 id="属性搜索原则"><a href="#属性搜索原则" class="headerlink" title="属性搜索原则"></a>属性搜索原则</h2><p>只有获取属性的时候会遵守这个原则</p>
<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><code>instanceof</code></h2><h2 id="Object-prototype-的成员"><a href="#Object-prototype-的成员" class="headerlink" title="Object.prototype 的成员"></a><code>Object.prototype</code> 的成员</h2><ul>
<li><code>constructor</code> 属性<br>  指向原型相关的构造函数</li>
<li><code>hasOwnProperty</code> 方法<br>  对象 <code>.hasOwnProperty</code>（属性名）</li>
<li><code>isPrototypeOf</code> 方法<br>  对象<code>.isPrototypeOf</code>（对象1）判断对象是否是对象1的原型</li>
<li><code>propertyIsEnmerable</code> 方法<br>  对象<code>.propertyIsEnmerable</code>(属性)</li>
<li><code>toSting</code>  <code>toLocaleSting</code> 方法<br>  转换成字符串，<code>toLocaleSting</code>会将对象转换成</li>
<li><code>valueOf</code> 方法<br>  胡i去兑现的值，再回去运算的时候先调用<code>valueOf</code>方法</li>
<li><code>__proto__</code> 属性<br>  指向对象的原型</li>
<li>双下划线开头的属性都是属于非标准属性</li>
<li>单下划线开头 一般框架中的私有属性</li>
</ul>
<h2 id="Function"><a href="#Function" class="headerlink" title=".Function"></a><code>.Function</code></h2><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a><code>eval</code></h2><h2 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h2><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><ul>
<li>通过构造函数访问成员的就是静态成员</li>
<li>构造函数 <code>.prototype</code></li>
<li>构造函数 <code>.name</code></li>
<li>构造函数 <code>.length</code> （形参的个数）</li>
</ul>
<h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><p>通过对象访问的成员就是实例成员</p>
<ul>
<li>只要是通过对象访问到的都是实例成员</li>
<li>比如 <code>p.name</code>    <code>p.age</code>    <code>p.__proto__</code>……</li>
</ul>
<h2 id="arguments-对象"><a href="#arguments-对象" class="headerlink" title="arguments 对象"></a><code>arguments</code> 对象</h2><p>只能在函数内部使用</p>
<ul>
<li>当函数调用的时候会将所有的输惨存入 <code>arguments</code> 对象</li>
<li><code>arguments.length</code> （实参的个数）</li>
<li><code>arguments.callee</code> 指向函数本身。用在匿名函数递归</li>
<li>构造函数 <code>.arguments</code> 和函数里面的 <code>arguments</code> 不是一回事儿</li>
<li>构造函数 <code>.arguments</code> 已被弃用</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript高级与面向对象笔记整理，接part3篇！！&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.ihoey.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级篇之part3</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-11-08-javascript-part3.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-11-08-javascript-part3.html</id>
    <published>2016-11-08T11:39:35.000Z</published>
    <updated>2016-11-24T01:29:36.406Z</updated>
    
    <content type="html"><![CDATA[<p>javascript高级与面向对象笔记整理，接part2篇！！</p>
<a id="more"></a>
<h2 id="绘制原型三角"><a href="#绘制原型三角" class="headerlink" title="绘制原型三角"></a>绘制原型三角</h2><ol>
<li>先画构造函数</li>
<li>因为有构造函数就有原型，所以画原型</li>
<li>画构造函数和原型之间的关系</li>
<li>画实例化出来的对象</li>
<li>画实例和构造函数以及原型之间的关系</li>
</ol>
<h2 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h2><ol>
<li>原型中的属性</li>
<li>是在构造函数创建出来的时候，系统创建原型的时候，默认的让原型中的 <code>constructor</code> 属性指向构造函数本身</li>
<li>这个属性基本用不到</li>
</ol>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>对象都有原型，原型也是对象，所以原型也有原型，所以就形成了一条链式结构，这个结构就叫做原型链</p>
<h3 id="绘制原型链图"><a href="#绘制原型链图" class="headerlink" title="绘制原型链图"></a>绘制原型链图</h3><ol>
<li>先画构造函数</li>
<li>因为有构造函数就有原型，所以画原型</li>
<li>画构造函数和原型之间的关系</li>
<li>画实例化出来的对象</li>
<li>画实例和构造函数以及原型之间的关系</li>
<li>把原型当做对象来对待，找到原型的构造函数，将构造函数画出来</li>
<li>画出上一步中构造函数的原型</li>
<li>把第6步和第7不步中的构造函数和原型之间的关系画出来</li>
<li>把第6步中的原型和其构造函数还有原型之间的关系画出来</li>
<li>重复 <code>6-9</code> 直到画到 <code>Object.prototype</code> 让其原型指向 <code>null</code> 就结束了</li>
</ol>
<h3 id="属性搜索原则"><a href="#属性搜索原则" class="headerlink" title="属性搜索原则"></a>属性搜索原则</h3><ol>
<li>现在对象本身中进行查找，如果找到了就直接使用</li>
<li>如果没有，就去原型中查找，如果找到了就直接使用</li>
<li>如果没有找到，就去原型的原型中查找，以此往复，直到找到 <code>null</code></li>
</ol>
<h3 id="Array-prototype-是一个空数组"><a href="#Array-prototype-是一个空数组" class="headerlink" title="Array.prototype 是一个空数组"></a><code>Array.prototype</code> 是一个空数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//arr----&gt;Array.prototype-----&gt;Object.Prototype-----&gt;null</span></div><div class="line"><span class="keyword">var</span> arr = [];</div></pre></td></tr></table></figure>
<h2 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a><code>instanceof</code> 关键字</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">对象  <span class="keyword">instanceof</span> 构造函数</div><div class="line"><span class="comment">//返回值为boolean类型</span></div><div class="line"><span class="comment">//功能： 判断构造函数的原型是不是在该对象的原型链上</span></div></pre></td></tr></table></figure>
<h2 id="Object-prototype-的成员"><a href="#Object-prototype-的成员" class="headerlink" title="Object.prototype 的成员"></a><code>Object.prototype</code> 的成员</h2><ul>
<li><code>constructor</code> 原型中的属性指向和原型相关的构造函数</li>
<li><code>hasOwnProperty</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">对象.hasOwnProperty(属性名)</div><div class="line"><span class="comment">//返回值为boolean类型</span></div><div class="line"><span class="comment">//功能：判断属性是否存在对象本身中</span></div></pre></td></tr></table></figure>
<ul>
<li><code>isPrototypeOf</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">对象.isPrototypeof(对象<span class="number">1</span>)</div><div class="line"><span class="comment">//返回值为boolean</span></div><div class="line"><span class="comment">//功能：判断对象是否是对象1的原型对象</span></div></pre></td></tr></table></figure>
<ul>
<li><code>propertyIsEnumerable</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">对象.propertyIsEnumberable(属性名)</div><div class="line"><span class="comment">//返回值为boolean</span></div><div class="line"><span class="comment">//功能：判断属性是否属于对象本身并且能够被遍历（`for-in`）</span></div></pre></td></tr></table></figure>
<ul>
<li><code>toString toLocaleString</code></li>
</ul>
<p>都是将对象转换成字符串类型<br><code>toLocaleString</code> 会将字符串转换成本地格式的字符串， 本地格式为系统设置</p>
<ul>
<li><p><code>valueOf</code></p>
<p>  在对象参与运算的时候，会首先调用 <code>valueOf</code> 方法，如果获取到的值能够参与运算就直接使用，<br>  如果不能参与运算，就调用 <code>toString</code> 方法</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[]==![] <span class="literal">true</span></div><div class="line">&#123;&#125;==!&#123;&#125; <span class="literal">false</span></div></pre></td></tr></table></figure>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>用来创建函数的</p>
<ul>
<li>如果不传参数，创建出来的是空函数</li>
<li>如果传一个参数，创建出来的时候有函数体，但是没有形参的函数</li>
<li>如果传多个参数，最后参数会被作为函数体，之前所有的参数都会被作为形参</li>
</ul>
<p>可以把字符串转换成代码</p>
<h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><p>也可以将字符串转换成代码并且执行</p>
<h3 id="Function和eval的区别"><a href="#Function和eval的区别" class="headerlink" title="Function和eval的区别"></a><code>Function</code>和<code>eval</code>的区别</h3><ul>
<li><code>Funtion</code>创建出来的是函数，函数需要手动调用，里面的代码才会执行</li>
<li><code>eval</code>直接回将字符串转换成代码，并且执行</li>
</ul>
<h3 id="Function和eval的共同点"><a href="#Function和eval的共同点" class="headerlink" title="Function和eval的共同点"></a><code>Function</code>和<code>eval</code>的共同点</h3><ul>
<li>都可以将字符串转换成代码</li>
<li>都不安全</li>
</ul>
<h3 id="eval处理JSON格式字符串的时候"><a href="#eval处理JSON格式字符串的时候" class="headerlink" title="eval处理JSON格式字符串的时候"></a><code>eval</code>处理<code>JSON</code>格式字符串的时候</h3><ul>
<li>会把JSON格式字符串中的{}当做代码段来处理，所以会报错</li>
<li>处理方式两种</li>
<li>给JSON字符串前后拼接小括号()</li>
<li>将变量的声明以及等号 拼接在JSON格式字符串的前面</li>
</ul>
<h2 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h2><ul>
<li>静态成员：通过构造函数去访问的成员就是静态成员</li>
<li>实例成员：通过实例去访问的成员就是实例成员</li>
</ul>
<h2 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h2><p><code>arguments</code> 对象是函数中的一个对象，在函数调用的时候，会将所有传入的实参依次存入该对象</p>
<ul>
<li><code>length</code>  获取传入实参的个数</li>
<li><code>callee</code>  指向函数本身   匿名函数的递归</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript高级与面向对象笔记整理，接part2篇！！&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.ihoey.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js高级与面向对象之函数</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-07-22-javascript-Function.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-07-22-javascript-Function.html</id>
    <published>2016-07-22T11:40:39.000Z</published>
    <updated>2016-11-24T01:28:37.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//函数体</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//2.函数表达式</span></div><div class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//3.通过Function构造函数来创建</span></div><div class="line"><span class="keyword">var</span> func2 = <span class="keyword">new</span> <span class="built_in">Function</span>();</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="函数的name属性"><a href="#函数的name属性" class="headerlink" title="函数的name属性"></a>函数的name属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">//p.constructor</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> p);  <span class="comment">//object</span></div><div class="line"><span class="built_in">console</span>.log(p.constructor.toString());</div><div class="line"><span class="built_in">console</span>.log(Person.name);</div><div class="line"><span class="built_in">console</span>.log(p.constructor.name);</div></pre></td></tr></table></figure>
<p>函数都会有一个 <code>name</code> 属性，所以我们可以通过对象先找到构造函数，然后直接访问构造函数的 <code>name</code> ，就拿到了具体类型</p>
<h2 id="Function的使用"><a href="#Function的使用" class="headerlink" title="Function的使用"></a>Function的使用</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Function函数所有的参数全都是字符串</span></div><div class="line"><span class="comment">//Function函数的作用就是将所有的参数组合起来，变成一个函数</span></div><div class="line"><span class="comment">//1、如果只传一个参数，那么这个函数必然是函数体</span></div><div class="line"><span class="comment">//2、如果传多个参数，那么最后一个参数表示函数体，前面的参数代表将要创建的函数的参数</span></div><div class="line"><span class="comment">//3、如果不传参数，表示创建一个空函数</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Function</span>(arg1, arg2, arg3, ..., argN, body);</div></pre></td></tr></table></figure>
<h3 id="创建一个打印一句话的函数"><a href="#创建一个打印一句话的函数" class="headerlink" title="创建一个打印一句话的函数"></a>创建一个打印一句话的函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//传统的方式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"你好"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用Function</span></div><div class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"console.log('你好');"</span>);</div></pre></td></tr></table></figure>
<h3 id="创建一个空函数"><a href="#创建一个空函数" class="headerlink" title="创建一个空函数"></a>创建一个空函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//传统的方式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//Function</span></div><div class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>();</div></pre></td></tr></table></figure>
<h3 id="创建一个有参数的函数"><a href="#创建一个有参数的函数" class="headerlink" title="创建一个有参数的函数"></a>创建一个有参数的函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//传统的方式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(num);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Function</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>()&#123;<span class="string">"num"</span>, <span class="string">"console.log(num);"</span>&#125;;</div></pre></td></tr></table></figure>
<h2 id="静态成员与实例成员的概念"><a href="#静态成员与实例成员的概念" class="headerlink" title="静态成员与实例成员的概念"></a>静态成员与实例成员的概念</h2><p>静态成员和实例成员这两个概念其实也是从面相对象的编程语言中引入的，对应到 <code>JavaScript</code> 中的理解为：</p>
<h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><ul>
<li>静态成员是指静态属性和静态方法，所谓静态，就是有构造函数提供的。</li>
</ul>
<h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><ul>
<li>实例成员是值实例属性和实例方法，所谓实例，就是由构造函数创建出来的对象。</li>
</ul>
<h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"zs"</span>,</div><div class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//下面这个sayHi方法就是构造函数自己的方法，也就是静态方法</span></div><div class="line">Person.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm a Person"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//原型属性属于构造函数，所以原型属性是静态属性</span></div><div class="line">Person.prototype = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="comment">//这里的name是构造函数创建出来的实例对象的属性，所以是实例属性</span></div><div class="line">p.name = <span class="string">"李四"</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//这里的sayHello也是构造函数创建出来的实例对象的方法，所以是实例方法</span></div><div class="line">p.sayHello();</div></pre></td></tr></table></figure>
<p>提示：</p>
<p>一般工具型方法都有静态成员提供, 一般与实例对象有关的方法由实例成员表示.</p>
<p>工具方法：比如 <code>jQuery.Ajax()</code> 、 <code>jQuery.trim()</code> 、 <code>jQuery.Each()</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数声明&quot;&gt;&lt;a href=&quot;#函数声明&quot; class=&quot;headerlink&quot; title=&quot;函数声明&quot;&gt;&lt;/a&gt;函数声明&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//函数体&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//2.函数表达式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; func1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//3.通过Function构造函数来创建&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; func2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="Function" scheme="http://blog.ihoey.com/tags/Function/"/>
    
  </entry>
  
  <entry>
    <title>js高级与面向对象之原型链</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-07-09-javascript-prototype-chain.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-07-09-javascript-prototype-chain.html</id>
    <published>2016-07-09T11:41:47.000Z</published>
    <updated>2016-11-24T01:28:07.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型链是什么？"><a href="#原型链是什么？" class="headerlink" title="原型链是什么？"></a>原型链是什么？</h2><p>只要是对象就会有原型，那么所有的原型就会形成一个链式的结构，这个结构就称为原型链</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="comment">//p---&gt;Person.prototype-----&gt;Object.Prototype-----&gt;null</span></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Person.prototype);</div><div class="line"><span class="comment">//原型也是一个对象，是对象，就有构造函数，有构造函数，就有原型</span></div></pre></td></tr></table></figure>
<h2 id="修改原型链"><a href="#修改原型链" class="headerlink" title="修改原型链"></a>修改原型链</h2><ul>
<li>原型链结构可以进行修改</li>
<li><p>替换原型对象就可以修改原型链结构</p>
</li>
<li><p>原型继承的概念重定义</p>
</li>
<li><p>通过修改原型链的结构实现的继承就是原型继承</p>
</li>
<li><p>属性的搜索原则</p>
</li>
<li>在对象访问属性的时候，会遵守一个原则</li>
</ul>
<ol>
<li>现在对象本身中进行查找，如果本身中有，就直接使用，</li>
<li>如果没有，就去原型中查找，如果原型中有，就直接使用</li>
<li>如果没有，重复步骤2，直到找到 <code>null</code></li>
</ol>
<ul>
<li><p>设置属性没有搜索原则，只会在本身中进行搜索</p>
</li>
<li><p>由于属性搜索原则的存在，所以对象可以直接访问 <code>.constructor</code> 属性找到其构造函数</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">Person.prototype = <span class="keyword">new</span> Human();</div><div class="line"></div><div class="line"><span class="comment">//p----&gt;Person.prototype-----&gt;Human.prototype-----&gt;Object.prototype-----&gt;null</span></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div></pre></td></tr></table></figure>
<h2 id="复杂的原型链"><a href="#复杂的原型链" class="headerlink" title="复杂的原型链"></a>复杂的原型链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"123"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params"></span></span></div><div class="line"></div><div class="line">)&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal();</div><div class="line">Human.prototype = animal;</div><div class="line"></div><div class="line"><span class="keyword">var</span> h = <span class="keyword">new</span> Human();</div><div class="line"><span class="comment">//通过h去访问constructor属性的顺序</span></div><div class="line"><span class="comment">//1.现在h自身查找 h中没有</span></div><div class="line"><span class="comment">//2.去Human.prototype 也就是 h.__proto___  也就是animal中去找</span></div><div class="line"><span class="comment">//3.再去anmail这个对象的原型中 也就是 Animal.prototype 也即是 animal.__proto__ 中去找</span></div><div class="line"><span class="comment">//4.找到的就是Animal</span></div><div class="line"><span class="built_in">console</span>.log(h.constructor);</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> h1 = <span class="keyword">new</span> Human();</div><div class="line">Man.prototype = h1;</div><div class="line"></div><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> Man();</div><div class="line"><span class="comment">//1.第一步在m自己中找 没有</span></div><div class="line"><span class="comment">//2.m.__proto__  也就是Man.prototype 也就是 h1中去查找 没有</span></div><div class="line"><span class="comment">//3.h1的原型 也就是 h1.__proto__ 也就是 Human.prototype</span></div><div class="line"><span class="comment">//4.去上面看吧</span></div><div class="line"><span class="built_in">console</span>.log(m.constructor);</div></pre></td></tr></table></figure>
<h2 id="instanceof关键字"><a href="#instanceof关键字" class="headerlink" title="instanceof关键字"></a>instanceof关键字</h2><ul>
<li>对象 <code>instanceof</code> 构造函数</li>
<li>检测一个对象是不是通过某个构造函数创建出来的(不准确的说法)</li>
<li>检测一个构造函数的原型 <code>（构造函数.prototype）</code> 是否在某个对象的原型链上</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"><span class="comment">//p----&gt;Person.prototype----&gt;Object.prototype----&gt;null</span></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(p <span class="keyword">instanceof</span> Person);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(p <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</div></pre></td></tr></table></figure>
<h2 id="Object-prototype成员"><a href="#Object-prototype成员" class="headerlink" title="Object.prototype成员"></a>Object.prototype成员</h2><ol>
<li><code>constructor</code>  指向原型相关的构造函数</li>
<li><code>hasOwnProperty</code> 判断对象本身是否拥有指定的属性  不包含原型中的成员<br><code>对象.hasOwnProperty(属性名)</code></li>
<li><code>isPrototypeOf</code> 判断一个对象是否某个对象的原型<br><code>对象.isPrototypeOf(另外一个对象)</code></li>
<li><p><code>propertyIsEnumerable</code>  判断对象自己的属性是不是可以被遍历 <code>（for-in）</code> 如果不是自己的或者不能被遍历都会返回 <code>false</code><br><code>对象.propertyIsEnumerable(属性名)</code><br><code>Object.defineProperty(对象，属性名，对象（描述信息）)</code></p>
</li>
<li><p><code>toLocaleString</code>  <code>toString</code>   都是将对象转换为字符串的方法<br><code>tolocalString</code> 打印本地格式的字符串  本地格式是获取的系统设置<br><code>toString</code> 直接转换成字符串</p>
</li>
<li><code>valueOf</code> 方法<br>当对象参与运算的时候，会首先调用对象的 <code>valuOf</code> 方法获取对象的值<br>如果获取到的这个值可以参与运算，就直接拿来使用<br>如果不能参与运算，就会去调用该对象的 <code>toString</code> 方法</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">valueOf</span> :<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">toString</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"我叫李二狗"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//console.log(obj.valueOf());</span></div><div class="line"><span class="built_in">console</span>.log(obj.toString());</div><div class="line"><span class="built_in">console</span>.log( obj + <span class="number">1</span>);</div></pre></td></tr></table></figure>
<ol>
<li><strong>proto</strong>  指向对象的原型  非标准属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="built_in">console</span>.log(now.toString());</div><div class="line"><span class="built_in">console</span>.log(now.toLocaleString());</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">      <span class="attr">name</span>:<span class="string">""</span>,</div><div class="line">    <span class="attr">age</span>:<span class="number">18</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj.toString());</div><div class="line"><span class="built_in">console</span>.log(obj.toLocaleString());</div><div class="line"></div><div class="line">obj.__proto__.name =  <span class="string">"张三"</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</div><div class="line">    <span class="built_in">console</span>.log(k);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj.propertyIsEnumerable(<span class="string">"name"</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">obj.__proto__ = &#123;</div><div class="line">   <span class="attr">beautifulLevel</span> : <span class="string">"High"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">"beautifulLevel"</span>));</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</div><div class="line"></div><div class="line">obj.__proto__ = obj1;</div><div class="line"><span class="built_in">console</span>.log(obj1.isPrototypeOf(obj));</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原型链是什么？&quot;&gt;&lt;a href=&quot;#原型链是什么？&quot; class=&quot;headerlink&quot; title=&quot;原型链是什么？&quot;&gt;&lt;/a&gt;原型链是什么？&lt;/h2&gt;&lt;p&gt;只要是对象就会有原型，那么所有的原型就会形成一个链式的结构，这个结构就称为原型链&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原型链" scheme="http://blog.ihoey.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>js高级与面向对象之继承</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-06-15-javascript-inherit.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-06-15-javascript-inherit.html</id>
    <published>2016-06-15T05:43:28.000Z</published>
    <updated>2016-11-24T01:27:30.082Z</updated>
    
    <content type="html"><![CDATA[<p>一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承</p>
<a id="more"></a>
<h2 id="继承的实现方式"><a href="#继承的实现方式" class="headerlink" title="继承的实现方式"></a>继承的实现方式</h2><h3 id="混入式继承"><a href="#混入式继承" class="headerlink" title="混入式继承"></a>混入式继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj1 = &#123;</div><div class="line">    <span class="attr">money</span> : <span class="number">10000000</span>,</div><div class="line">    <span class="attr">car</span> : <span class="number">100</span>,</div><div class="line">    <span class="attr">brand</span>: <span class="string">"布加迪威航"</span>,</div><div class="line">    <span class="attr">huaqian</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"不差钱，随便花"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(obj);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj1)&#123;</div><div class="line">    <span class="comment">//money</span></div><div class="line">    <span class="comment">//car</span></div><div class="line">    <span class="comment">//brand</span></div><div class="line">    <span class="comment">//huaqian</span></div><div class="line">    obj[k] = obj1[k];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj);</div></pre></td></tr></table></figure>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><ul>
<li>通过修改原型实现的继承 就是原型继承<br>  通过构造函数创建出来的对象继承自构造函数的原型对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> human = &#123;</div><div class="line">    <span class="attr">gender</span>:<span class="string">"female"</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">170</span>,</div><div class="line">    <span class="attr">weight</span>: <span class="number">50</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//Person.prototype.name = "王莉莉";</span></div></pre></td></tr></table></figure>
<h4 id="原型继承的方式"><a href="#原型继承的方式" class="headerlink" title="原型继承的方式"></a>原型继承的方式</h4><ol>
<li>通过混入的方式给原型添加属性和方法</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Person.prototype</span></div><div class="line"><span class="keyword">var</span> human = &#123;</div><div class="line">    <span class="attr">gender</span>:<span class="string">"female"</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">170</span>,</div><div class="line">    <span class="attr">weight</span>: <span class="number">50</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">"王莉莉"</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> human)&#123;</div><div class="line">    Person.prototype[k] = human[k];</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(p.name,p.gender,p.height,p.weight);</div></pre></td></tr></table></figure>
<ol>
<li>修改原型对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Person.prototype.maimeng = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"感觉自己萌萌哒"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">p.maimeng();</div></pre></td></tr></table></figure>
<ol>
<li>替换原型对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Person.prototype = human;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(p.gender);</div></pre></td></tr></table></figure>
<h3 id="经典继承"><a href="#经典继承" class="headerlink" title="经典继承"></a>经典继承</h3><p>《JavaScript语言精粹》</p>
<ul>
<li>调用一个方法，就能实现继承<br><code>var obj1 = Object.create(obj)</code></li>
<li>创建出来一个新的继承自参数 <code>obj</code> 的对象 <code>obj1</code> </li>
<li>其实内部使用的就是原型继承</li>
<li>ES5才支持的这个方法 需要考虑兼容性问题</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> human = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"王莉莉"</span>,</div><div class="line">    <span class="attr">gender</span>: <span class="string">"female"</span>,</div><div class="line">    <span class="attr">dance</span> :<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"二人转，转转转"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(human);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj);</div></pre></td></tr></table></figure>
<h2 id="处理经典继承的兼容性问题"><a href="#处理经典继承的兼容性问题" class="headerlink" title="处理经典继承的兼容性问题"></a>处理经典继承的兼容性问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="built_in">Object</span>.create)&#123;</div><div class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(&#123;<span class="attr">name</span>:<span class="string">"李狗二"</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//在这个函数中要实现的功能</span></div><div class="line">		<span class="comment">//就是，创建一个对象，将obj设置为该对象的原型</span></div><div class="line"></div><div class="line">		<span class="comment">//要设置原型，只能通过两种方式，</span></div><div class="line">		<span class="comment">// 一种是 对象.__proto__  另外一种是 构造函数.prototype</span></div><div class="line">		<span class="comment">//由于__proto__这个属性有兼容性问题，所以不使用</span></div><div class="line">		<span class="comment">//就只能使用 构造函数.prototype 去替换原型对象了</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">        F.prototype = obj;</div><div class="line">        <span class="keyword">var</span> result = <span class="keyword">new</span> F();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//不推荐直接修改内置对象，因为在多人开发的时候，会产生冲突</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.creat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"我是李二狗，我的create方法就是用来输出这句话的，哈哈哈"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hanyingxinCreate</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">Object</span>.create)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.creat(obj);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">        F.prototype = obj;</div><div class="line">        <span class="keyword">var</span> result = <span class="keyword">new</span> F();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="继承的实际应用"><a href="#继承的实际应用" class="headerlink" title="继承的实际应用"></a>继承的实际应用</h2><ul>
<li><p>扩展内置对象</p>
</li>
<li><p>扩展 <code>string</code> 的方法  <code>trim()</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$.trim()</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"Hello, i'm a Array"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">arr.sayHello();</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr1 = [];</div><div class="line">arr1.sayHello();</div><div class="line"></div><div class="line"><span class="comment">//需求分析</span></div><div class="line"><span class="comment">//1.创建出来的对象得有数组的所有的方法和属性</span></div><div class="line"><span class="comment">//2.创建输出来的对象得有sayHello方法</span></div><div class="line"><span class="comment">//3.不能修改原生的内置对象</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyArray</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">MyArray.prototype = [];</div><div class="line">MyArray.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"相加就加，随心所欲，为所欲为"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myArr = <span class="keyword">new</span> MyArray();</div><div class="line">myArr.push(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>);</div><div class="line"><span class="built_in">console</span>.log(myArr);</div><div class="line">myArr.sayHello();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个对象没有某些属性和方法，另一个对象有，拿过来使用，就是继承&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.ihoey.com/tags/javascript/"/>
    
      <category term="js面向对象" scheme="http://blog.ihoey.com/tags/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="继承" scheme="http://blog.ihoey.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="继承的实现方式" scheme="http://blog.ihoey.com/tags/%E7%BB%A7%E6%89%BF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>js高级与面向对象之原型</title>
    <link href="http://blog.ihoey.com/posts/javascript/2016-06-04-javascript-prototype.html"/>
    <id>http://blog.ihoey.com/posts/javascript/2016-06-04-javascript-prototype.html</id>
    <published>2016-06-04T05:41:47.000Z</published>
    <updated>2016-11-24T01:26:39.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型的基本概念"><a href="#原型的基本概念" class="headerlink" title="原型的基本概念"></a>原型的基本概念</h2><p>在构造函数创建出来的时候，系统会默认的帮构造函数创建并且关联一个空对象，这个对象就成为原型</p>
<a id="more"></a>
<p>##原型的作用</p>
<p>原型中的所有成员都可以被和其关联的构造函数创建出来的对象访问</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如何利用原型解决构造函数存在的问题？</p>
<ul>
<li>利用原型的特性，将方法放到原型中去，供所有的对象访问</li>
</ul>
<h2 id="如何访问原型？"><a href="#如何访问原型？" class="headerlink" title="如何访问原型？"></a>如何访问原型？</h2><ul>
<li>构造函数<code>.prototype</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person.prototype);</div><div class="line"><span class="built_in">console</span>.log(Person.prototype);</div></pre></td></tr></table></figure>
<h2 id="如何使用原型？"><a href="#如何使用原型？" class="headerlink" title="如何使用原型？"></a>如何使用原型？</h2><ul>
<li>使用对象的动态特性，为原型对象新增成员</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"吃个大鸡腿儿"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p  = <span class="keyword">new</span> Person();</div><div class="line">p.eat();</div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</div><div class="line">p1.eat();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(p.eat == p1.eat);</div></pre></td></tr></table></figure>
<ul>
<li>直接替换原型对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">run</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"李二狗正在以时速1cm每小时的速度奔向餐厅"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Person.prototype);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person();</div><div class="line">p2.run();</div></pre></td></tr></table></figure>
<h2 id="原型使用的注意事项"><a href="#原型使用的注意事项" class="headerlink" title="原型使用的注意事项"></a>原型使用的注意事项</h2><p>对象访问属性的时候，会现在自身查找，如果找到了就直接使用如果没有找到，就去构造函数的原型对象中去查找</p>
<ol>
<li>一般情况下，只会将方法放入原型对象中，属性单独的放在对象中</li>
<li>在获取对象的属性的时候，会现在对象中进行查找，然后去原型中查找</li>
<li>在对象进行设置属性的时候，不会去原型中查找属性，而是直接在对象内进行查找，如果找到该属性，就修改，如果没有找到，就新增</li>
<li>在替换原型对象的时候，要注意：替换之前创建出来的对象的原型和替换之后创建出来的对象的原型会不一致</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Person.prototype.name = "张三";</span></div><div class="line">Person.prototype.sing = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Take me to your heart!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">//console.log(p.name);  //张三</span></div><div class="line">p.sing();  <span class="comment">//可以</span></div><div class="line"></div><div class="line"><span class="comment">//p.name = "李四";</span></div><div class="line"><span class="comment">//console.log(p.name);  //李四</span></div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">//console.log(p1.name); //张三</span></div><div class="line">p1.sing();<span class="comment">//不可以</span></div><div class="line"></div><div class="line">p.sing();<span class="comment">//不可以  or  可以</span></div></pre></td></tr></table></figure>
<h2 id="原型的访问方式"><a href="#原型的访问方式" class="headerlink" title="原型的访问方式"></a>原型的访问方式</h2><ol>
<li>通过 <code>构造函数.prototype</code> 去访问</li>
<li>通过 <code>对象.__proto__</code> 去访问<br> 注：<strong>proto</strong>这个属性 是非标准的！！！ 不推荐在开发过程中使用，只用于调试代码</li>
</ol>
<ul>
<li><strong>.proto</strong>用法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">"迈克学摇滚"</span>,</div><div class="line">    <span class="attr">song</span> : <span class="string">"Take me to your heart"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div><div class="line">p.__proto__.count = <span class="number">100</span>;</div><div class="line"><span class="built_in">console</span>.log(p.__proto__);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原型的基本概念&quot;&gt;&lt;a href=&quot;#原型的基本概念&quot; class=&quot;headerlink&quot; title=&quot;原型的基本概念&quot;&gt;&lt;/a&gt;原型的基本概念&lt;/h2&gt;&lt;p&gt;在构造函数创建出来的时候，系统会默认的帮构造函数创建并且关联一个空对象，这个对象就成为原型&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.ihoey.com/tags/javascript/"/>
    
      <category term="原型" scheme="http://blog.ihoey.com/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="原型的基本概念" scheme="http://blog.ihoey.com/tags/%E5%8E%9F%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
</feed>
