<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦魇小栈</title>
  <subtitle>专注于分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.ihoey.com/"/>
  <updated>2017-04-10T09:06:41.652Z</updated>
  <id>https://blog.ihoey.com/</id>
  
  <author>
    <name>Ihoey</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="https://blog.ihoey.com/posts/MongoDB/2017-03-27-mongodb-ues.html"/>
    <id>https://blog.ihoey.com/posts/MongoDB/2017-03-27-mongodb-ues.html</id>
    <published>2017-03-27T07:07:03.000Z</published>
    <updated>2017-04-10T09:06:41.652Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章介绍学习MongoDB的一些常用命令,希望能帮助大家.</p>
<a id="more"></a>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ul>
<li><code>Help</code>查看命令提示<ul>
<li><code>db.help()</code>;</li>
<li><code>db.yourColl.help()</code>;</li>
<li><code>db.youColl.find().help()</code>;</li>
</ul>
</li>
<li>切换/创建数据库<ul>
<li><code>use yourDB</code>;  当创建一个集合(<code>table</code>)的时候会自动创建当前数据库</li>
</ul>
</li>
<li>查询所有数据库<ul>
<li><code>show dbs</code>;</li>
</ul>
</li>
<li>删除当前使用数据库<ul>
<li><code>db.dropDatabase()</code>;</li>
</ul>
</li>
<li>从指定主机上克隆数据库<ul>
<li>从指定主机上克隆数据库</li>
</ul>
</li>
<li>从指定的机器上复制指定数据库数据到某个数据库<ul>
<li><code>db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;)</code>;将本机的<code>mydb</code>的数据复制到<code>temp</code>数据库中</li>
</ul>
</li>
<li>修复当前数据库<ul>
<li><code>db.repairDatabase()</code>;</li>
</ul>
</li>
<li>查看当前使用的数据库<ul>
<li><code>db.getName()</code>;</li>
</ul>
</li>
<li>显示当前db状态<ul>
<li><code>db.stats()</code>;</li>
</ul>
</li>
<li>当前db版本<ul>
<li><code>db.version()</code>;</li>
</ul>
</li>
<li>查看当前db的链接机器地址<ul>
<li><code>db.getMongo()</code>;</li>
</ul>
</li>
</ul>
<h2 id="Collection聚集集合操作"><a href="#Collection聚集集合操作" class="headerlink" title="Collection聚集集合操作"></a>Collection聚集集合操作</h2><ul>
<li>创建一个聚集集合（<code>table</code>）<ul>
<li><code>db.createCollection(“collName”, {size: 20, capped: 5, max: 100})</code>;</li>
</ul>
</li>
<li>得到指定名称的聚集集合（<code>table</code>）<ul>
<li><code>db.getCollection(&quot;account&quot;)</code>;</li>
</ul>
</li>
<li>得到当前db的所有聚集集合<ul>
<li><code>db.getCollectionNames()</code>;</li>
</ul>
</li>
<li>显示当前db所有聚集索引的状态<ul>
<li><code>db.printCollectionStats()</code>;</li>
</ul>
</li>
</ul>
<h2 id="用户相关操作"><a href="#用户相关操作" class="headerlink" title="用户相关操作"></a>用户相关操作</h2><ul>
<li>添加一个用户<ul>
<li><code>db.addUser(&quot;name&quot;)</code>;</li>
<li><code>db.addUser(&quot;userName&quot;, &quot;pwd123&quot;, true)</code>; 添加用户、设置密码、是否只读</li>
</ul>
</li>
<li>数据库认证、安全模式<ul>
<li><code>db.auth(&quot;userName&quot;, &quot;123123&quot;)</code>;</li>
</ul>
</li>
<li>显示当前所有用户<ul>
<li><code>show users</code>;</li>
</ul>
</li>
<li>删除用户<ul>
<li><code>db.removeUser(&quot;userName&quot;)</code>;</li>
</ul>
</li>
</ul>
<h2 id="聚集集合查询"><a href="#聚集集合查询" class="headerlink" title="聚集集合查询"></a>聚集集合查询</h2><ul>
<li>查询所有记录<ul>
<li><code>db.userInfo.find()</code>; 相当于：<code>select* from userInfo</code>;默认每页显示20条记录，当显示不下的情况下,可以用it迭代命令查询下一页数据。注意：键入it命令不能带“;”但是你可以设置每页显示数据的大小,用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。</li>
</ul>
</li>
<li>查询去掉后的当前聚集集合中的某列的重复数据<ul>
<li><code>db.userInfo.distinct(&quot;name&quot;)</code>;会过滤掉name中的相同数据,相当于：<code>select distict name from userInfo</code>;</li>
</ul>
</li>
<li>查询<code>age = 22</code>的记录<ul>
<li><code>db.userInfo.find({&quot;age&quot;: 22})</code>; 相当于：<code>select * from userInfo where age = 22</code>;</li>
</ul>
</li>
<li>查询<code>age &gt; 22</code>的记录<ul>
<li><code>db.userInfo.find({age: {$gt: 22}})</code>;</li>
</ul>
</li>
<li>查询<code>age &lt; 22</code>的记录<ul>
<li><code>db.userInfo.find({age: {$lt: 22}})</code>;</li>
</ul>
</li>
<li>查询<code>age &gt;= 25</code>的记录<ul>
<li><code>db.userInfo.find({age: {$gte: 25}})</code>;</li>
</ul>
</li>
<li>查询<code>age &gt;= 23</code> 并且 <code>age &lt;= 26</code><ul>
<li><code>db.userInfo.find({age: {$gte: 23, $lte: 26}})</code>;</li>
</ul>
</li>
<li>查询<code>name</code>中包含 <code>mongo</code>的数据<ul>
<li><code>db.userInfo.find({name: /mongo/})</code>;</li>
</ul>
</li>
<li>查询<code>name</code>中以<code>mongo</code>开头的<ul>
<li><code>db.userInfo.find({name: /^mongo/})</code>;</li>
</ul>
</li>
<li>查询指定列<code>name</code>、<code>age</code>数据<ul>
<li><code>db.userInfo.find({}, {name: 1, age: 1})</code>;当然<code>name</code>也可以用<code>true</code>或<code>false</code>,当用<code>ture</code>的情况下河<code>name:1</code>效果一样，如果用<code>false</code>就是排除<code>name</code>，显示<code>name</code>以外的列信息。</li>
</ul>
</li>
<li>查询指定列<code>name</code>、<code>age</code>数据, <code>age &gt; 25</code>.<ul>
<li><code>db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1})</code>;</li>
</ul>
</li>
<li>按照年龄排序<ul>
<li>升序：<code>db.userInfo.find().sort({age: 1})</code>;</li>
<li>降序：<code>db.userInfo.find().sort({age: -1})</code>;</li>
</ul>
</li>
<li>查询<code>name = zhangsan, age = 22</code>的数据<ul>
<li><code>db.userInfo.find({name: &#39;zhangsan&#39;, age: 22})</code>;</li>
</ul>
</li>
<li>查询前5条数据<ul>
<li><code>db.userInfo.find().limit(5)</code>;</li>
</ul>
</li>
<li>查询10条以后的数据<ul>
<li><code>db.userInfo.find().skip(10)</code>;</li>
</ul>
</li>
<li>查询在5-10之间的数据<ul>
<li><code>db.userInfo.find().limit(10).skip(5)</code>;可用于分页，limit是pageSize，skip是第几页*pageSize</li>
</ul>
</li>
<li>or与 查询<ul>
<li><code>db.userInfo.find({$or: [{age: 22}, {age: 25}]})</code>;</li>
</ul>
</li>
<li>查询第一条数据<ul>
<li><code>db.userInfo.findOne()</code>;</li>
<li><code>db.userInfo.find().limit(1)</code>;</li>
</ul>
</li>
<li>查询某个结果集的记录条数<ul>
<li><code>db.userInfo.find({age: {$gte: 25}}).count()</code>;如果要返回限制之后的记录数量，要使用count(true)或者count(非0)</li>
<li><code>db.users.find().skip(10).limit(5).count(true)</code>;</li>
</ul>
</li>
<li>按照某列进行排序<ul>
<li><code>db.userInfo.find({sex: {$exists: true}}).count()</code>;</li>
</ul>
</li>
</ul>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul>
<li>创建索引<ul>
<li><code>db.userInfo.ensureIndex({name: 1})</code>;</li>
<li><code>db.userInfo.ensureIndex({name: 1, ts: -1})</code>;</li>
</ul>
</li>
<li>查询当前聚集集合所有索引<ul>
<li><code>db.userInfo.getIndexes()</code>;</li>
</ul>
</li>
<li>查看总索引记录大小<ul>
<li><code>db.userInfo.totalIndexSize()</code>;</li>
</ul>
</li>
<li>读取当前集合的所有index信息<ul>
<li><code>db.users.reIndex()</code>;</li>
</ul>
</li>
<li>删除指定索引<ul>
<li><code>db.users.dropIndex(&quot;name_1&quot;)</code>;</li>
</ul>
</li>
<li>删除所有索引<ul>
<li><code>db.users.dropIndexes()</code>;</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章介绍学习MongoDB的一些常用命令,希望能帮助大家.&lt;/p&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://blog.ihoey.com/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://blog.ihoey.com/tags/MongoDB/"/>
    
      <category term="NoSQL" scheme="https://blog.ihoey.com/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB安装笔记</title>
    <link href="https://blog.ihoey.com/posts/MongoDB/2017-03-23-mongodb.html"/>
    <id>https://blog.ihoey.com/posts/MongoDB/2017-03-23-mongodb.html</id>
    <published>2017-03-23T08:25:11.000Z</published>
    <updated>2017-04-10T03:50:56.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mongodb概述"><a href="#mongodb概述" class="headerlink" title="mongodb概述"></a>mongodb概述</h2><ul>
<li><code>MongoDB</code> 是一个跨平台的，面向文档的数据库，提供高性能，高可用性和可扩展性方便. <code>MongoDB</code> 将数据存储为一个文档，数据结构由键值 <code>(key=&gt;value)</code> 对组成。<code>MongoDB</code> 文档类似于 <code>JSON</code> 对象。字段值可以包含其他文档，数组及文档数组。</li>
</ul>
<a id="more"></a>
<h2 id="mongodb安装"><a href="#mongodb安装" class="headerlink" title="mongodb安装"></a>mongodb安装</h2><pre><code>mongodb下载地址 `https://www.mongodb.com/download-center#community` ,在此选择对应的系统版本进行安装
</code></pre><ul>
<li><p><code>Windows</code> 系统的安装, 直接下一步即可</p>
<ul>
<li>对不知道系统版本和位数的同学这里提供两个命令可查看当前<code>Windows</code>系统的版本和位数.<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wmic os get caption</div><div class="line">wmic os get osarchitecture</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>Linux</code> 系统的安装:</p>
<ul>
<li>导入包管理系统使用的公钥 <code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6</code></li>
<li>为MongoDB创建一个列表文件:<ul>
<li><code>Ubuntu 12.04</code> 版本: <code>echo &quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></li>
<li><code>Ubuntu 14.04</code> 版本: <code>echo &quot;deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></li>
<li><code>Ubuntu 16.04</code> 版本: <code>echo &quot;deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</code></li>
</ul>
</li>
<li>重新加载本地包数据库 <code>sudo apt-get update</code></li>
<li>安装<code>MongoDB</code>包 <code>sudo apt-get install -y mongodb-org</code></li>
</ul>
</li>
<li><p><code>OS X</code> 系统的安装</p>
<ul>
<li>下载 <code>curl -O https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.4.2.tgz</code></li>
<li>解压 <code>tar -zxvf mongodb-osx-x86_64-3.4.2.tgz</code></li>
<li>指定存放文件夹 <code>mkdir -p mongodb &amp;&amp; cp -R -n mongodb-osx-x86_64-3.4.2 / mongodb</code></li>
<li>设置变量添加到<code>shell</code>的 <code>rc</code>文件中（例如<code>~/.bashrc</code>）： <code>export  PATH = &lt;mongodb-install-directory&gt; / bin：$ PATH</code></li>
</ul>
</li>
</ul>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul>
<li>创建数据目录(我这里是在<code>D</code>盘下) <code>mkdir -p /Server-related/DB</code></li>
<li>设置数据文件路径(在<code>mongodb</code>安装目录下运行) <code>mongod --dbpath=D:\Server-related\DB</code></li>
</ul>
<h2 id="连接mongodb"><a href="#连接mongodb" class="headerlink" title="连接mongodb"></a>连接mongodb</h2><ul>
<li>打开<code>mongodb</code>安装目录下的 <code>mongo.exe</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mongodb概述&quot;&gt;&lt;a href=&quot;#mongodb概述&quot; class=&quot;headerlink&quot; title=&quot;mongodb概述&quot;&gt;&lt;/a&gt;mongodb概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MongoDB&lt;/code&gt; 是一个跨平台的，面向文档的数据库，提供高性能，高可用性和可扩展性方便. &lt;code&gt;MongoDB&lt;/code&gt; 将数据存储为一个文档，数据结构由键值 &lt;code&gt;(key=&amp;gt;value)&lt;/code&gt; 对组成。&lt;code&gt;MongoDB&lt;/code&gt; 文档类似于 &lt;code&gt;JSON&lt;/code&gt; 对象。字段值可以包含其他文档，数组及文档数组。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://blog.ihoey.com/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://blog.ihoey.com/tags/MongoDB/"/>
    
      <category term="NoSQL" scheme="https://blog.ihoey.com/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>科学上网之shadowsocks 服务端安装</title>
    <link href="https://blog.ihoey.com/posts/shadowsocks/2017-03-16-shadowsocks-install.html"/>
    <id>https://blog.ihoey.com/posts/shadowsocks/2017-03-16-shadowsocks-install.html</id>
    <published>2017-03-16T10:38:46.000Z</published>
    <updated>2017-04-10T03:50:34.277Z</updated>
    
    <content type="html"><![CDATA[<p>轻松搭建<code>shadowsocks</code>,及相关配置说明</p>
<a id="more"></a>
<h2 id="安装shadowsocks依赖-我的服务器系统是ubuntu"><a href="#安装shadowsocks依赖-我的服务器系统是ubuntu" class="headerlink" title="安装shadowsocks依赖(我的服务器系统是ubuntu)"></a>安装shadowsocks依赖(我的服务器系统是ubuntu)</h2><ul>
<li><code>sudo -s</code> // 获取超级管理员权限</li>
<li><code>apt-get update</code> // 更新apt-get</li>
<li><code>apt-get install python-pip</code> // 安装python包管理工具pip</li>
<li><code>pip install shadowsocks</code> // 安装shadowsocks</li>
</ul>
<h2 id="配置shadowsocks"><a href="#配置shadowsocks" class="headerlink" title="配置shadowsocks"></a>配置shadowsocks</h2><ul>
<li><code>vi /etc/shadowsocks.json</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//单一端口</div><div class="line">&#123;</div><div class="line">    "server":"0.0.0.0",//服务器 ip地址 (IPv4/IPv6)</div><div class="line">    "server_port":1121,//服务器监听的端口,注意不要设为使用中的端口</div><div class="line">    "local_address":"127.0.0.1",//默认即可</div><div class="line">    "local_port":1080,</div><div class="line">    "password":"password",//密码</div><div class="line">    "timeout":300,//超时时间（秒）</div><div class="line">    "method":"aes-256-cfb",//加密方式</div><div class="line">    "fast_open":false</div><div class="line">&#125;</div><div class="line"></div><div class="line">//多端口</div><div class="line">  &#123;</div><div class="line">   "server":"my_server_ip",  //填入你的IP地址</div><div class="line">   "local_address": "127.0.0.1",</div><div class="line">   "local_port":1080,</div><div class="line">    "port_password": &#123;</div><div class="line">        "8381": "foobar1",    //端口号，密码</div><div class="line">        "8382": "foobar2",</div><div class="line">        "8383": "foobar3",</div><div class="line">        "8384": "foobar4"</div><div class="line">   &#125;,</div><div class="line">   "timeout":300,</div><div class="line">   "method":"aes-256-cfb",</div><div class="line">   "fast_open": false</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="优化shadowsocks服务"><a href="#优化shadowsocks服务" class="headerlink" title="优化shadowsocks服务"></a>优化shadowsocks服务</h2><ul>
<li>在终端输入 <code>vi /etc/sysctl.d/local.conf</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"># max open files</div><div class="line">fs.file-max = 1024000</div><div class="line"># max read buffer</div><div class="line">net.core.rmem_max = 67108864</div><div class="line"># max write buffer</div><div class="line">net.core.wmem_max = 67108864</div><div class="line"># default read buffer</div><div class="line">net.core.rmem_default = 65536</div><div class="line"># default write buffer</div><div class="line">net.core.wmem_default = 65536</div><div class="line"># max processor input queue</div><div class="line">net.core.netdev_max_backlog = 4096</div><div class="line"># max backlog</div><div class="line">net.core.somaxconn = 4096</div><div class="line"></div><div class="line"># resist SYN flood attacks</div><div class="line">net.ipv4.tcp_syncookies = 1</div><div class="line"># reuse timewait sockets when safe</div><div class="line">net.ipv4.tcp_tw_reuse = 1</div><div class="line"># turn off fast timewait sockets recycling</div><div class="line">net.ipv4.tcp_tw_recycle = 0</div><div class="line"># short FIN timeout</div><div class="line">net.ipv4.tcp_fin_timeout = 30</div><div class="line"># short keepalive time</div><div class="line">net.ipv4.tcp_keepalive_time = 1200</div><div class="line"># outbound port range</div><div class="line">net.ipv4.ip_local_port_range = 10000 65000</div><div class="line"># max SYN backlog</div><div class="line">net.ipv4.tcp_max_syn_backlog = 4096</div><div class="line"># max timewait sockets held by system simultaneously</div><div class="line">net.ipv4.tcp_max_tw_buckets = 5000</div><div class="line"># TCP receive buffer</div><div class="line">net.ipv4.tcp_rmem = 4096 87380 67108864</div><div class="line"># TCP write buffer</div><div class="line">net.ipv4.tcp_wmem = 4096 65536 67108864</div><div class="line"># turn on path MTU discovery</div><div class="line">net.ipv4.tcp_mtu_probing = 1</div><div class="line"></div><div class="line"># for high-latency network</div><div class="line">net.ipv4.tcp_congestion_control = hybla</div><div class="line"># forward ivp4</div><div class="line">net.ipv4.ip_forward = 1</div></pre></td></tr></table></figure>
<ul>
<li>配置生效：<code>sysctl --system</code></li>
</ul>
<h2 id="开启shadowsocks服务"><a href="#开启shadowsocks服务" class="headerlink" title="开启shadowsocks服务"></a>开启shadowsocks服务</h2><ul>
<li><code>ssserver -c /etc/shadowsocks.json -d start</code></li>
</ul>
<h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><ul>
<li><code>ssserver -c /etc/shadowsocks.json -d stop</code></li>
</ul>
<h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><ul>
<li>重启(修改配置要重启才生效)：<code>ssserver -c /etc/shadowsocks.json -d restart</code></li>
</ul>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><ul>
<li><code>/var/log/shadowsocks.log</code></li>
</ul>
<h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ul>
<li><p><code>ssserver -h</code></p>
<p>  如果出现故障，试试把<code>/etc/shadowsocks.json</code>里改为<code>&quot;server&quot;=&quot;0.0.0.0&quot;.</code> 小心不要掉<code>,</code></p>
</li>
</ul>
<h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><ul>
<li>在终端输入 <code>vi /etc/rc.local</code></li>
<li>把 <code>sudo ssserver -c /etc/shadowsocks.json -d start</code>加进去</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;轻松搭建&lt;code&gt;shadowsocks&lt;/code&gt;,及相关配置说明&lt;/p&gt;
    
    </summary>
    
      <category term="shadowsocks" scheme="https://blog.ihoey.com/categories/shadowsocks/"/>
    
    
      <category term="科学上网" scheme="https://blog.ihoey.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="shadowsocks" scheme="https://blog.ihoey.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>adb设备信息查询修改刷机等命令</title>
    <link href="https://blog.ihoey.com/posts/Android/2016-12-22-adb-Android-Debug-Bridge-2.html"/>
    <id>https://blog.ihoey.com/posts/Android/2016-12-22-adb-Android-Debug-Bridge-2.html</id>
    <published>2016-12-22T10:51:53.000Z</published>
    <updated>2017-01-11T11:02:21.655Z</updated>
    
    <content type="html"><![CDATA[<p>ADB很强大，记住一些ADB命令有助于提高工作效率。<br>通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等</p>
<a id="more"></a>
<h2 id="查看设备信息"><a href="#查看设备信息" class="headerlink" title="查看设备信息"></a>查看设备信息</h2><ul>
<li><code>adb logcat</code> – 查看日志</li>
<li><code>adb shell dumpsys battery</code> – 电池状况<br>其中 scale 代表最大电量，level 代表当前电量。上面的输出表示还剩下 44% 的电量</li>
<li><code>adb reboot</code> – 重启</li>
<li><code>adb get-serialno</code> – 获取序列号</li>
<li><code>adb shell  cat /sys/class/net/wlan0/address</code> – MAC 地址</li>
<li><code>adb shell getprop ro.product.model</code> – 型号</li>
<li><code>adb shell getprop ro.build.version.release</code> – 查看 Android 系统版本</li>
<li><code>adb shell wm size</code> – 查看屏幕分辨率</li>
<li><code>adb shell wm density</code> – 查看屏幕密度</li>
<li><code>adb shell dumpsys window displays</code> – 显示屏参数</li>
<li><code>adb shell settings get secure android_id</code> – android_id</li>
<li><code>adb shell ifconfig | grep Mask</code> – IP 地址(powershell无效)</li>
<li><code>adb shell cat /proc/cpuinfo</code> – CPU 信息</li>
<li><code>adb shell cat /proc/meminfo</code> – 内存信息(输出内容: <code>MemTotal</code> 总内存，<code>MemFree</code> 空闲内存)</li>
<li><code>adb shell cat /system/build.prop</code> – 更多硬件与系统属性</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">属性名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ro.build.version.sdk</td>
<td style="text-align:center">SDK 版本</td>
</tr>
<tr>
<td style="text-align:center">ro.build.version.release</td>
<td style="text-align:center">Android 系统版本</td>
</tr>
<tr>
<td style="text-align:center">ro.build.version.security_patch</td>
<td style="text-align:center">Android 安全补丁程序级别</td>
</tr>
<tr>
<td style="text-align:center">ro.product.model</td>
<td style="text-align:center">型号</td>
</tr>
<tr>
<td style="text-align:center">ro.product.brand</td>
<td style="text-align:center">品牌</td>
</tr>
<tr>
<td style="text-align:center">ro.product.name</td>
<td style="text-align:center">设备名</td>
</tr>
<tr>
<td style="text-align:center">ro.product.board</td>
<td style="text-align:center">处理器型号</td>
</tr>
<tr>
<td style="text-align:center">ro.product.cpu.abilist</td>
<td style="text-align:center">CPU 支持的 abi 列表</td>
</tr>
<tr>
<td style="text-align:center">persist.sys.isUsbOtgEnabled</td>
<td style="text-align:center">是否支持 OTG</td>
</tr>
<tr>
<td style="text-align:center">dalvik.vm.heapsize</td>
<td style="text-align:center">每个应用程序的内存上限</td>
</tr>
<tr>
<td style="text-align:center">ro.sf.lcd_density</td>
<td style="text-align:center">屏幕密度</td>
</tr>
</tbody>
</table>
<h2 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h2><p><strong>注：</strong>修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 <code>adb reboot</code> 重启设备，或手动重启。</p>
<p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p>
<h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm size 480x1024</div></pre></td></tr></table></figure>
<p>表示将分辨率修改为 480px * 1024px。</p>
<p>恢复原分辨率命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm size reset</div></pre></td></tr></table></figure>
<h3 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm density 160</div></pre></td></tr></table></figure>
<p>表示将屏幕密度修改为 160dpi。</p>
<p>恢复原屏幕密度命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm density reset</div></pre></td></tr></table></figure>
<h3 id="显示区域"><a href="#显示区域" class="headerlink" title="显示区域"></a>显示区域</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm overscan 0,0,0,200</div></pre></td></tr></table></figure>
<p>四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 200px 留白。</p>
<p>恢复原显示区域命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm overscan reset</div></pre></td></tr></table></figure>
<h3 id="关闭-USB-调试模式"><a href="#关闭-USB-调试模式" class="headerlink" title="关闭 USB 调试模式"></a>关闭 USB 调试模式</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global adb_enabled 0</div></pre></td></tr></table></figure>
<p>恢复：</p>
<p>用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。</p>
<p>去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。</p>
<h3 id="状态栏和导航栏的显示隐藏"><a href="#状态栏和导航栏的显示隐藏" class="headerlink" title="状态栏和导航栏的显示隐藏"></a>状态栏和导航栏的显示隐藏</h3><p>本节所说的相关设置对应 Cyanogenmod 里的「扩展桌面」。</p>
<p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global policy_control &lt;key-values&gt;</div></pre></td></tr></table></figure>
<p><code>&lt;key-values&gt;</code> 可由如下几种键及其对应的值组成，格式为 <code>&lt;key1&gt;=&lt;value1&gt;:&lt;key2&gt;=&lt;value2&gt;</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">key</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">immersive.full</td>
<td style="text-align:center">同时隐藏</td>
</tr>
<tr>
<td style="text-align:center">immersive.status</td>
<td style="text-align:center">隐藏状态栏</td>
</tr>
<tr>
<td style="text-align:center">immersive.navigation</td>
<td style="text-align:center">隐藏导航栏</td>
</tr>
<tr>
<td style="text-align:center">immersive.preconfirms</td>
<td style="text-align:center">?</td>
</tr>
</tbody>
</table>
<p>这些键对应的值可则如下值用逗号组合：</p>
<table>
<thead>
<tr>
<th style="text-align:center">value</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>apps</code></td>
<td style="text-align:center">所有应用</td>
</tr>
<tr>
<td style="text-align:center"><code>*</code></td>
<td style="text-align:center">所有界面</td>
</tr>
<tr>
<td style="text-align:center"><code>packagename</code></td>
<td style="text-align:center">指定应用</td>
</tr>
<tr>
<td style="text-align:center"><code>-packagename</code></td>
<td style="text-align:center">排除指定应用</td>
</tr>
</tbody>
</table>
<p>例如：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global policy_control immersive.full=*</div></pre></td></tr></table></figure>
<p>表示设置在所有界面下都同时隐藏状态栏和导航栏。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3</div></pre></td></tr></table></figure>
<p>表示设置在包名为 <code>com.package1</code> 和 <code>com.package2</code> 的应用里隐藏状态栏，在除了包名为 <code>com.package3</code> 的所有应用里隐藏导航栏。</p>
<h2 id="实用功能"><a href="#实用功能" class="headerlink" title="实用功能"></a>实用功能</h2><h3 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p /sdcard/sc.png</div></pre></td></tr></table></figure>
<p>然后将 png 文件导出到电脑：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/sc.png</div></pre></td></tr></table></figure>
<p>可以使用 <code>adb shell screencap -h</code> 查看 <code>screencap</code> 命令的帮助信息，下面是两个有意义的参数及含义：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-p</td>
<td style="text-align:center">指定保存文件为 png 格式</td>
</tr>
<tr>
<td style="text-align:center">-d display-id</td>
<td style="text-align:center">指定截图的显示屏编号（有多显示屏的情况下）</td>
</tr>
</tbody>
</table>
<p>实测如果指定文件名以 <code>.png</code> 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。</p>
<p>直接一行命令截图并保存到电脑的方法：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p | sed <span class="string">"s/\r$//"</span> &gt; sc.png</div></pre></td></tr></table></figure>
<p>这个方法需要用到 sed 命令，在 Linux 和 Mac 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 <a href="http://gnuwin32.sourceforge.net/packages/sed.htm" target="_blank" rel="external">sed for Windows</a> 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。</p>
<h3 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h3><p>录制屏幕以 mp4 格式保存到 /sdcard：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screenrecord /sdcard/filename.mp4</div></pre></td></tr></table></figure>
<p>需要停止时按 <kbd>Ctrl-C</kbd>，默认录制时间和最长录制时间都是 180 秒。</p>
<p>如果需要导出到电脑：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/filename.mp4</div></pre></td></tr></table></figure>
<p>可以使用 <code>adb shell screenrecord --help</code> 查看 <code>screenrecord</code> 命令的帮助信息，下面是常见参数及含义：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">–size WIDTHxHEIGHT</td>
<td style="text-align:center">视频的尺寸，比如 <code>1280x720</code>，默认是屏幕分辨率。</td>
</tr>
<tr>
<td style="text-align:center">–bit-rate RATE</td>
<td style="text-align:center">视频的比特率，默认是 4Mbps。</td>
</tr>
<tr>
<td style="text-align:center">–time-limit TIME</td>
<td style="text-align:center">录制时长，单位秒。</td>
</tr>
<tr>
<td style="text-align:center">–verbose</td>
<td style="text-align:center">输出更多信息。</td>
</tr>
</tbody>
</table>
<h3 id="重新挂载-system-分区为可写"><a href="#重新挂载-system-分区为可写" class="headerlink" title="重新挂载 system 分区为可写"></a>重新挂载 system 分区为可写</h3><p><strong>注：需要 root 权限。</strong></p>
<p>/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。</p>
<p>步骤：</p>
<ol>
<li><p>进入 shell 并切换到 root 用户权限。</p>
<p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div></pre></td></tr></table></figure>
</li>
<li><p>查看当前分区挂载情况。</p>
<p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">rootfs / rootfs ro,relatime 0 0</div><div class="line">tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0</div><div class="line">devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0</div><div class="line">proc /proc proc rw,relatime 0 0</div><div class="line">sysfs /sys sysfs rw,seclabel,relatime 0 0</div><div class="line">selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0</div><div class="line">debugfs /sys/kernel/debug debugfs rw,relatime 0 0</div><div class="line">none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0</div><div class="line">none /acct cgroup rw,relatime,cpuacct 0 0</div><div class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class="line">tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class="line">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class="line">none /dev/memcg cgroup rw,relatime,memory 0 0</div><div class="line">none /dev/cpuctl cgroup rw,relatime,cpu 0 0</div><div class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class="line">none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0</div><div class="line">/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div><div class="line">/dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div></pre></td></tr></table></figure>
<p>找到其中我们关注的带 /system 的那一行：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div></pre></td></tr></table></figure>
</li>
<li><p>重新挂载。</p>
<p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system</div></pre></td></tr></table></figure>
<p>这里的 <code>/dev/block/platform/msm_sdcc.1/by-name/system</code> 就是我们从上一步的输出里得到的文件路径。</p>
</li>
</ol>
<p>如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。</p>
<h3 id="查看连接过的-WiFi-密码"><a href="#查看连接过的-WiFi-密码" class="headerlink" title="查看连接过的 WiFi 密码"></a>查看连接过的 WiFi 密码</h3><p><strong>注：需要 root 权限。</strong></p>
<p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div><div class="line">cat /data/misc/wifi/*.conf</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">network=&#123;</div><div class="line">    ssid=<span class="string">"TP-LINK_9DFC"</span></div><div class="line">    scan_ssid=1</div><div class="line">    psk=<span class="string">"123456789"</span></div><div class="line">    key_mgmt=WPA-PSK</div><div class="line">    group=CCMP TKIP</div><div class="line">    auth_alg=OPEN</div><div class="line">    sim_num=1</div><div class="line">    priority=13893</div><div class="line">&#125;</div><div class="line"></div><div class="line">network=&#123;</div><div class="line">    ssid=<span class="string">"TP-LINK_F11E"</span></div><div class="line">    psk=<span class="string">"987654321"</span></div><div class="line">    key_mgmt=WPA-PSK</div><div class="line">    sim_num=1</div><div class="line">    priority=17293</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ssid</code> 即为我们在 WLAN 设置里看到的名称，<code>psk</code> 为密码，<code>key_mgmt</code> 为安全加密方式。</p>
<h3 id="设置系统日期和时间"><a href="#设置系统日期和时间" class="headerlink" title="设置系统日期和时间"></a>设置系统日期和时间</h3><p><strong>注：需要 root 权限。</strong></p>
<p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div><div class="line">date <span class="_">-s</span> 20160823.131500</div></pre></td></tr></table></figure>
<p>表示将系统日期和时间更改为 2016 年 08 月 23 日 13 点 15 分 00 秒。</p>
<h3 id="重启手机"><a href="#重启手机" class="headerlink" title="重启手机"></a>重启手机</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot</div></pre></td></tr></table></figure>
<h3 id="检测设备是否已-root"><a href="#检测设备是否已-root" class="headerlink" title="检测设备是否已 root"></a>检测设备是否已 root</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div></pre></td></tr></table></figure>
<p>此时命令行提示符是 <code>$</code> 则表示没有 root 权限，是 <code>#</code> 则表示已 root。</p>
<h3 id="使用-Monkey-进行压力测试"><a href="#使用-Monkey-进行压力测试" class="headerlink" title="使用 Monkey 进行压力测试"></a>使用 Monkey 进行压力测试</h3><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p>
<p>简单用法：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell monkey -p &lt;packagename&gt; -v 500</div></pre></td></tr></table></figure>
<p>表示向 <code>&lt;packagename&gt;</code> 指定的应用程序发送 500 个伪随机事件。</p>
<p>Monkey 的详细用法参考 <a href="https://developer.android.com/studio/test/monkey.html" target="_blank" rel="external">官方文档</a>。</p>
<h3 id="开启-关闭-WiFi"><a href="#开启-关闭-WiFi" class="headerlink" title="开启/关闭 WiFi"></a>开启/关闭 WiFi</h3><p><strong>注：需要 root 权限。</strong></p>
<p>有时需要控制设备的 WiFi 状态，可以用以下指令完成。</p>
<p>开启 WiFi：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb root</div><div class="line">adb shell svc wifi <span class="built_in">enable</span></div></pre></td></tr></table></figure>
<p>关闭 WiFi：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb root</div><div class="line">adb shell svc wifi <span class="built_in">disable</span></div></pre></td></tr></table></figure>
<p>若执行成功，输出为空；若未取得 root 权限执行此命令，将执行失败，输出 <code>Killed</code>。</p>
<h2 id="刷机相关命令"><a href="#刷机相关命令" class="headerlink" title="刷机相关命令"></a>刷机相关命令</h2><h3 id="重启到-Recovery-模式"><a href="#重启到-Recovery-模式" class="headerlink" title="重启到 Recovery 模式"></a>重启到 Recovery 模式</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot recovery</div></pre></td></tr></table></figure>
<h3 id="从-Recovery-重启到-Android"><a href="#从-Recovery-重启到-Android" class="headerlink" title="从 Recovery 重启到 Android"></a>从 Recovery 重启到 Android</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot</div></pre></td></tr></table></figure>
<h3 id="重启到-Fastboot-模式"><a href="#重启到-Fastboot-模式" class="headerlink" title="重启到 Fastboot 模式"></a>重启到 Fastboot 模式</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot bootloader</div></pre></td></tr></table></figure>
<h3 id="通过-sideload-更新系统"><a href="#通过-sideload-更新系统" class="headerlink" title="通过 sideload 更新系统"></a>通过 sideload 更新系统</h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p>
<p>以 Recovery 模式下更新为例：</p>
<ol>
<li><p>重启到 Recovery 模式。</p>
<p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot recovery</div></pre></td></tr></table></figure>
</li>
<li><p>在设备的 Recovery 界面上操作进入 <code>Apply update</code>-<code>Apply from ADB</code>。</p>
<p>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 <code>Apply update from ADB</code>。</p>
</li>
<li><p>通过 adb 上传和更新系统。</p>
<p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb sideload &lt;path-to-update.zip&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="更多-adb-shell-命令"><a href="#更多-adb-shell-命令" class="headerlink" title="更多 adb shell 命令"></a>更多 adb shell 命令</h2><p>Android 系统是基于 Linux 内核的，所以 Linux 里的很多命令在 Android 里也有相同或类似的实现，在 <code>adb shell</code> 里可以调用。本文档前面的部分内容已经用到了 <code>adb shell</code> 命令。</p>
<h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell ps</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">USER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME</div><div class="line">root      1     0     8904   788   ffffffff 00000000 S /init</div><div class="line">root      2     0     0      0     ffffffff 00000000 S kthreadd</div><div class="line">...</div><div class="line">u0_a71    7779  5926  1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classic</div><div class="line">u0_a58    7963  5926  1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure</div><div class="line">...</div><div class="line">shell     8750  217   10640  740   00000000 b6f28340 R ps</div></pre></td></tr></table></figure>
<p>各列含义：</p>
<table>
<thead>
<tr>
<th style="text-align:center">列名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">USER</td>
<td style="text-align:center">所属用户</td>
</tr>
<tr>
<td style="text-align:center">PID</td>
<td style="text-align:center">进程 ID</td>
</tr>
<tr>
<td style="text-align:center">PPID</td>
<td style="text-align:center">父进程 ID</td>
</tr>
<tr>
<td style="text-align:center">NAME</td>
<td style="text-align:center">进程名</td>
</tr>
</tbody>
</table>
<h3 id="查看实时资源占用情况"><a href="#查看实时资源占用情况" class="headerlink" title="查看实时资源占用情况"></a>查看实时资源占用情况</h3><p>命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell top</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">User 0%, System 6%, IOW 0%, IRQ 0%</div><div class="line">User 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307</div><div class="line"></div><div class="line">  PID PR CPU% S  <span class="comment">#THR     VSS     RSS PCY UID      Name</span></div><div class="line"> 8763  0   3% R     1  10640K   1064K  <span class="built_in">fg</span> shell    top</div><div class="line">  131  0   3% S     1      0K      0K  <span class="built_in">fg</span> root     dhd_dpc</div><div class="line"> 6144  0   0% S   115 1682004K 115916K  <span class="built_in">fg</span> system   system_server</div><div class="line">  132  0   0% S     1      0K      0K  <span class="built_in">fg</span> root     dhd_rxf</div><div class="line"> 1731  0   0% S     6  20288K    788K  <span class="built_in">fg</span> root     /system/bin/mpdecision</div><div class="line">  217  0   0% S     6  18008K    356K  <span class="built_in">fg</span> shell    /sbin/adbd</div><div class="line"> ...</div><div class="line"> 7779  2   0% S    19 1538748K  48896K  <span class="built_in">bg</span> u0_a71   com.sohu.inputmethod.sogou:classic</div><div class="line"> 7963  0   0% S    18 1561916K  59568K  <span class="built_in">fg</span> u0_a58   org.mazhuang.boottimemeasure</div><div class="line"> ...</div></pre></td></tr></table></figure>
<p>各列含义：</p>
<table>
<thead>
<tr>
<th style="text-align:center">列名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">PID</td>
<td style="text-align:center">进程 ID</td>
</tr>
<tr>
<td style="text-align:center">PR</td>
<td style="text-align:center">优先级</td>
</tr>
<tr>
<td style="text-align:center">CPU%</td>
<td style="text-align:center">当前瞬间占用 CPU 百分比</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</td>
</tr>
<tr>
<td style="text-align:center">#THR</td>
<td style="text-align:center">线程数</td>
</tr>
<tr>
<td style="text-align:center">VSS</td>
<td style="text-align:center">Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）</td>
</tr>
<tr>
<td style="text-align:center">RSS</td>
<td style="text-align:center">Resident Set Size 实际使用物理内存（包含共享库占用的内存）</td>
</tr>
<tr>
<td style="text-align:center">PCY</td>
<td style="text-align:center">调度策略优先级，SP_BACKGROUND/SPFOREGROUND</td>
</tr>
<tr>
<td style="text-align:center">UID</td>
<td style="text-align:center">进程所有者的用户 ID</td>
</tr>
<tr>
<td style="text-align:center">NAME</td>
<td style="text-align:center">进程名</td>
</tr>
</tbody>
</table>
<p><code>top</code> 命令还支持一些命令行参数，详细用法如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Usage: top [ -m max_procs ] [ -n iterations ] [ <span class="_">-d</span> delay ] [ <span class="_">-s</span> sort_column ] [ -t ] [ -h ]</div><div class="line">    -m num  最多显示多少个进程</div><div class="line">    -n num  刷新多少次后退出</div><div class="line">    <span class="_">-d</span> num  刷新时间间隔（单位秒，默认值 5）</div><div class="line">    <span class="_">-s</span> col  按某列排序（可用 col 值：cpu, vss, rss, thr）</div><div class="line">    -t      显示线程信息</div><div class="line">    -h      显示帮助文档</div></pre></td></tr></table></figure>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明：</p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">cat</td>
<td style="text-align:center">显示文件内容</td>
</tr>
<tr>
<td style="text-align:center">cd</td>
<td style="text-align:center">切换目录</td>
</tr>
<tr>
<td style="text-align:center">chmod</td>
<td style="text-align:center">改变文件的存取模式/访问权限</td>
</tr>
<tr>
<td style="text-align:center">df</td>
<td style="text-align:center">查看磁盘空间使用情况</td>
</tr>
<tr>
<td style="text-align:center">grep</td>
<td style="text-align:center">过滤输出</td>
</tr>
<tr>
<td style="text-align:center">kill</td>
<td style="text-align:center">杀死指定 PID 的进程</td>
</tr>
<tr>
<td style="text-align:center">ls</td>
<td style="text-align:center">列举目录内容</td>
</tr>
<tr>
<td style="text-align:center">mount</td>
<td style="text-align:center">挂载目录的查看和管理</td>
</tr>
<tr>
<td style="text-align:center">mv</td>
<td style="text-align:center">移动或重命名文件</td>
</tr>
<tr>
<td style="text-align:center">ps</td>
<td style="text-align:center">查看正在运行的进程</td>
</tr>
<tr>
<td style="text-align:center">rm</td>
<td style="text-align:center">删除文件</td>
</tr>
<tr>
<td style="text-align:center">top</td>
<td style="text-align:center">查看进程的资源占用情况</td>
</tr>
</tbody>
</table>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="启动-adb-server-失败"><a href="#启动-adb-server-失败" class="headerlink" title="启动 adb server 失败"></a>启动 adb server 失败</h3><p><strong>出错提示</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error: protocol fault (couldn\<span class="string">'t read status): No error</span></div></pre></td></tr></table></figure>
<p><strong>可能原因</strong></p>
<p>adb server 进程想使用的 5037 端口被占用。</p>
<p><strong>解决方案</strong></p>
<p>找到占用 5037 端口的进程，然后终止它。以 Windows 下为例：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">netstat -ano | findstr LISTENING</div><div class="line"></div><div class="line">...</div><div class="line">TCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       1548</div><div class="line">...</div></pre></td></tr></table></figure>
<p>这里 1548 即为进程 ID，用命令结束该进程：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">taskkill /PID 1548</div></pre></td></tr></table></figure>
<p>然后再启动 adb 就没问题了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ADB很强大，记住一些ADB命令有助于提高工作效率。&lt;br&gt;通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://blog.ihoey.com/categories/Android/"/>
    
    
      <category term="adb" scheme="https://blog.ihoey.com/tags/adb/"/>
    
      <category term="Android" scheme="https://blog.ihoey.com/tags/Android/"/>
    
      <category term="adb命令" scheme="https://blog.ihoey.com/tags/adb%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>adb(Android Debug Bridge，Android调试桥)常用命令</title>
    <link href="https://blog.ihoey.com/posts/Android/2016-12-18-adb-Android-Debug-Bridge.html"/>
    <id>https://blog.ihoey.com/posts/Android/2016-12-18-adb-Android-Debug-Bridge.html</id>
    <published>2016-12-18T08:18:21.000Z</published>
    <updated>2017-01-11T11:02:07.735Z</updated>
    
    <content type="html"><![CDATA[<p>说到 <code>ADB</code> 大家应该都不陌生，即 <code>Android Debug Bridge，Android</code> 调试桥，身为 <code>Android</code> 开发的我们，熟练使用 <code>ADB</code> 命令将会大大提升我们的开发效率， <code>ADB</code> 的命令有很多，今天就来整理下我在开发常用到的一些 ADB 命令。</p>
<a id="more"></a>
<p>ADB 的安装这里就不多说了，输入以下命令有如下提示就证明你环境ok，否则自行网上搜索解决下。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ul>
<li><code>adb version</code> – 查看版本</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ adb version</div><div class="line"></div><div class="line">Android Debug Bridge version 1.0.36</div><div class="line">Revision 8f855a3d9b35-android</div></pre></td></tr></table></figure>
<ul>
<li><code>adb [-d|-e|-s &lt;serialNumber&gt;] &lt;command&gt;</code> – adb 命令的基本语法<br>如果有多个设备/模拟器连接，则需要为命令指定目标设备。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-d</td>
<td style="text-align:center">指定当前唯一通过 USB 连接的 Android 设备为命令目标</td>
</tr>
<tr>
<td style="text-align:center">-e</td>
<td style="text-align:center">指定当前唯一运行的模拟器为命令目标</td>
</tr>
<tr>
<td style="text-align:center">-s <serialnumber></serialnumber></td>
<td style="text-align:center">指定相应 serialNumber 号的设备/模拟器为命令目标</td>
</tr>
</tbody>
</table>
<p>在多个设备/模拟器连接的情况下较常用的是 -s <serialnumber> 参数，serialNumber 可以通过 adb devices 命令获取。如：</serialnumber></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ adb devices</div><div class="line"></div><div class="line">List of devices attached</div><div class="line">cf264b8f    device</div><div class="line">emulator-5554   device</div><div class="line"></div><div class="line"><span class="comment">#输出里的cf264b8f 和 emulator-5554 即为 serialNumber。比如这时想指定 cf264b8f 这个设备来运行 adb 命令获取屏幕分辨率：</span></div><div class="line"></div><div class="line">adb <span class="_">-s</span> cf264b8f shell wm size</div></pre></td></tr></table></figure>
<p>遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。</p>
<ul>
<li><code>adb start-server/adb kill-server</code>– 启动/停止 Server</li>
</ul>
<p>一般来说，这两个命令基本不会用到，因为只要设备连接正确，会自动启动 <code>adb server</code> 的，不过大家也需要知道这俩命令。</p>
<ul>
<li><code>adb -P &lt;port&gt; start-server</code> – 指定 adb server 的网络端口</li>
</ul>
<h2 id="设备连接"><a href="#设备连接" class="headerlink" title="设备连接"></a>设备连接</h2><ul>
<li><code>adb devices</code> – 查看连接设备</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">adb devices</div><div class="line"></div><div class="line"><span class="comment">#通过USB:</span></div><div class="line">List of devices attached</div><div class="line">02ae0c1021089daf       device</div><div class="line"></div><div class="line"><span class="comment">#通过IP:(会有一个端口号,一般都是5555)</span></div><div class="line">List of devices attached</div><div class="line">192.168.123.104:5555    device</div></pre></td></tr></table></figure>
<ul>
<li><code>adb connect &lt;device-ip-address&gt;</code> – 通过 IP 地址连接设备</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">adb connect 192.168.123.104</div><div class="line"><span class="comment">#会提示:</span></div><div class="line">connected to 192.168.123.104:5555</div></pre></td></tr></table></figure>
<ul>
<li><code>adb disconnect &lt;device-ip-address&gt;</code> – 断开无线连接</li>
</ul>
<h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><ul>
<li><code>adb install [-l\-r\-s\-d] &lt;path_to_apk&gt;</code> – 安装应用</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-l</td>
<td style="text-align:center">将应用安装到保护目录 /mnt/asec</td>
</tr>
<tr>
<td style="text-align:center">-r</td>
<td style="text-align:center">允许覆盖安装允许覆盖安装</td>
</tr>
<tr>
<td style="text-align:center">-s</td>
<td style="text-align:center">将应用安装到 sdcard</td>
</tr>
<tr>
<td style="text-align:center">-d</td>
<td style="text-align:center">允许降级覆盖安装</td>
</tr>
</tbody>
</table>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">    adb install</div><div class="line">    adb install /Users/storm/temp/demo.apk</div><div class="line">    adb install -r demo.apk</div><div class="line">    adb install <span class="_">-s</span> demo.apk</div><div class="line"></div><div class="line"><span class="comment">#安装成功</span></div><div class="line">[100%] /data/<span class="built_in">local</span>/tmp/1.apk</div><div class="line">    pkg: /data/<span class="built_in">local</span>/tmp/1.apk</div><div class="line">Success</div><div class="line"></div><div class="line"><span class="comment">#安装失败</span></div><div class="line">[100%] /data/<span class="built_in">local</span>/tmp/map-20160831.apk</div><div class="line">        pkg: /data/<span class="built_in">local</span>/tmp/map-20160831.apk</div><div class="line">Failure [INSTALL_FAILED_ALREADY_EXISTS]</div><div class="line"></div><div class="line"><span class="comment">#adb install 内部原理简介</span></div><div class="line"></div><div class="line"><span class="comment">#adb install 实际是分三步完成：</span></div><div class="line"></div><div class="line"><span class="comment">#push apk 文件到 /data/local/tmp。</span></div><div class="line"></div><div class="line"><span class="comment">#调用 pm install 安装。</span></div><div class="line"></div><div class="line"><span class="comment">#删除 /data/local/tmp 下的对应 apk 文件。</span></div><div class="line"></div><div class="line"><span class="comment">#所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。</span></div></pre></td></tr></table></figure>
<ul>
<li><code>adb uninstall [-k] &lt;packagename&gt;</code> – 卸载应用</li>
</ul>
<p><packagename> 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录。</packagename></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eg：</div><div class="line">adb uninstall com.qihoo360.mobilesafe</div><div class="line"><span class="comment">#表示卸载 360 手机卫士。</span></div></pre></td></tr></table></figure>
<ul>
<li><code>adb shell pm clear &lt;packagename&gt;</code> – 清除应用数据与缓存</li>
</ul>
<p><packagename> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。</packagename></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">adb shell pm clear com.qihoo360.mobilesafe</div><div class="line"><span class="comment">#表示清除 360 手机卫士的数据和缓存。</span></div></pre></td></tr></table></figure>
<ul>
<li><code>adb shell pm list packages [-f/-d/-e/-s/-3/-i/-u] [FILTER]</code> – 查看应用列表</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">显示列表</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">无</td>
<td style="text-align:center">所有应用</td>
</tr>
<tr>
<td style="text-align:center">-f</td>
<td style="text-align:center">显示应用关联的 apk 文件</td>
</tr>
<tr>
<td style="text-align:center">-d</td>
<td style="text-align:center">只显示 disabled 的应用</td>
</tr>
<tr>
<td style="text-align:center">-e</td>
<td style="text-align:center">只显示 enabled 的应用</td>
</tr>
<tr>
<td style="text-align:center">-s</td>
<td style="text-align:center">只显示系统应用</td>
</tr>
<tr>
<td style="text-align:center">-3</td>
<td style="text-align:center">只显示第三方应用</td>
</tr>
<tr>
<td style="text-align:center">[FILTER&gt;]</td>
<td style="text-align:center">包名包含 <filter> 字符串</filter></td>
</tr>
</tbody>
</table>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">    <span class="comment">#系统应用</span></div><div class="line">    adb shell pm list packages <span class="_">-s</span></div><div class="line"></div><div class="line">    <span class="comment">#第三方应用</span></div><div class="line">    adb shell pm list packages -3</div><div class="line"></div><div class="line">    <span class="comment">#包名包含某字符串的应用</span></div><div class="line">    adb shell pm list packages mazhuang</div><div class="line"></div><div class="line">    <span class="comment">#当然也可以使用 grep 来过滤：</span></div><div class="line">    adb shell pm list packages | grep mazhuang</div></pre></td></tr></table></figure>
<ul>
<li><code>adb shell am force-stop &lt;packagename&gt;</code> – 强制停止应用</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">adb shell am force-stop com.qihoo360.mobilesafe</div><div class="line"><span class="comment">#表示停止 360 安全卫士的一切进程与服务。</span></div></pre></td></tr></table></figure>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><ul>
<li><code>adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</code> – 复制设备里的文件到电脑<br>其中 <code>电脑上的目录</code> 参数可以省略，默认复制到当前目录。</li>
<li><code>adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</code> – 复制电脑里的文件到设备</li>
</ul>
<h2 id="模拟按键-输入"><a href="#模拟按键-输入" class="headerlink" title="模拟按键/输入"></a>模拟按键/输入</h2><ul>
<li><code>adb shell input keyevent &lt;keycode&gt;</code> – 模拟按键/输入</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">keycode</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">HOME键</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">返回键</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">打开拨号应用</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">挂断电话</td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td style="text-align:center">增加音量</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td style="text-align:center">降低音量</td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td style="text-align:center">电源键</td>
</tr>
<tr>
<td style="text-align:center">27</td>
<td style="text-align:center">拍照（需要在相机应用里）</td>
</tr>
<tr>
<td style="text-align:center">64</td>
<td style="text-align:center">打开浏览器</td>
</tr>
<tr>
<td style="text-align:center">82</td>
<td style="text-align:center">菜单键</td>
</tr>
<tr>
<td style="text-align:center">85</td>
<td style="text-align:center">播放/暂停</td>
</tr>
<tr>
<td style="text-align:center">86</td>
<td style="text-align:center">停止播放</td>
</tr>
<tr>
<td style="text-align:center">87</td>
<td style="text-align:center">播放下一首</td>
</tr>
<tr>
<td style="text-align:center">88</td>
<td style="text-align:center">播放上一首</td>
</tr>
<tr>
<td style="text-align:center">122</td>
<td style="text-align:center">移动光标到行首或列表顶部</td>
</tr>
<tr>
<td style="text-align:center">123</td>
<td style="text-align:center">移动光标到行末或列表底部</td>
</tr>
<tr>
<td style="text-align:center">126</td>
<td style="text-align:center">恢复播放</td>
</tr>
<tr>
<td style="text-align:center">127</td>
<td style="text-align:center">暂停播放</td>
</tr>
<tr>
<td style="text-align:center">164</td>
<td style="text-align:center">静音</td>
</tr>
<tr>
<td style="text-align:center">176</td>
<td style="text-align:center">打开系统设置</td>
</tr>
<tr>
<td style="text-align:center">187</td>
<td style="text-align:center">切换应用</td>
</tr>
<tr>
<td style="text-align:center">207</td>
<td style="text-align:center">打开联系人</td>
</tr>
<tr>
<td style="text-align:center">208</td>
<td style="text-align:center">打开日历</td>
</tr>
<tr>
<td style="text-align:center">209</td>
<td style="text-align:center">打开音乐</td>
</tr>
<tr>
<td style="text-align:center">210</td>
<td style="text-align:center">打开计算器</td>
</tr>
<tr>
<td style="text-align:center">220</td>
<td style="text-align:center">降低屏幕亮度</td>
</tr>
<tr>
<td style="text-align:center">221</td>
<td style="text-align:center">提高屏幕亮度</td>
</tr>
<tr>
<td style="text-align:center">223</td>
<td style="text-align:center">系统休眠</td>
</tr>
<tr>
<td style="text-align:center">224</td>
<td style="text-align:center">点亮屏幕</td>
</tr>
<tr>
<td style="text-align:center">231</td>
<td style="text-align:center">打开语音助手</td>
</tr>
<tr>
<td style="text-align:center">276</td>
<td style="text-align:center">如果没有 wakelock 则让系统休眠</td>
</tr>
</tbody>
</table>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line"><span class="comment">#电源键</span></div><div class="line">adb shell input keyevent 26</div><div class="line"></div><div class="line"><span class="comment">#菜单键</span></div><div class="line">adb shell input keyevent 82</div><div class="line"></div><div class="line"><span class="comment">#HOME 键</span></div><div class="line">adb shell input keyevent 3</div><div class="line"></div><div class="line"><span class="comment">#返回键</span></div><div class="line">adb shell input keyevent 4</div><div class="line"></div><div class="line"><span class="comment">#音量加/减/静音</span></div><div class="line">adb shell input keyevent 24/25/164</div><div class="line"></div><div class="line"><span class="comment">#滑动解锁(参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标)</span></div><div class="line">adb shell input swipe 300 1000 300 500</div><div class="line"></div><div class="line"><span class="comment">#在焦点处于某文本框时，可以通过 input 命令来输入文本</span></div><div class="line">adb shell input text hello</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到 &lt;code&gt;ADB&lt;/code&gt; 大家应该都不陌生，即 &lt;code&gt;Android Debug Bridge，Android&lt;/code&gt; 调试桥，身为 &lt;code&gt;Android&lt;/code&gt; 开发的我们，熟练使用 &lt;code&gt;ADB&lt;/code&gt; 命令将会大大提升我们的开发效率， &lt;code&gt;ADB&lt;/code&gt; 的命令有很多，今天就来整理下我在开发常用到的一些 ADB 命令。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://blog.ihoey.com/categories/Android/"/>
    
    
      <category term="adb" scheme="https://blog.ihoey.com/tags/adb/"/>
    
      <category term="Android" scheme="https://blog.ihoey.com/tags/Android/"/>
    
      <category term="adb命令" scheme="https://blog.ihoey.com/tags/adb%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Node第二部分-模块及工具</title>
    <link href="https://blog.ihoey.com/posts/Node/2016-12-12-Node-part2.html"/>
    <id>https://blog.ihoey.com/posts/Node/2016-12-12-Node-part2.html</id>
    <published>2016-12-12T01:12:32.000Z</published>
    <updated>2016-12-17T12:34:55.139Z</updated>
    
    <content type="html"><![CDATA[<p>为了让 <code>NodeJs</code> 的文件可以相互调用，<code>NodeJs</code> 提供了一个简单的模块系统。<br>模块是 <code>NodeJs</code> 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 <code>NodeJs</code> 文件就是一个模块，这个文件可能是 <code>JavaScript</code> 代码、<code>JSON</code> 或者编译过的 <code>C/C++</code> 扩展。</p>
<a id="more"></a>
<h2 id="NodeJs的模块"><a href="#NodeJs的模块" class="headerlink" title="NodeJs的模块"></a>NodeJs的模块</h2><ul>
<li>核心模块(只要安装了node就会有的模块,已经被打包到了node.exe文件)</li>
<li>自定义模块(我们自己写的js模块)</li>
<li>第三方的模块(包)</li>
</ul>
<h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><ul>
<li>http</li>
<li>url</li>
<li>fs</li>
<li>……等</li>
</ul>
<h3 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h3><p>在我们的代码中请求它并把返回值赋给一个本地变量</p>
<h3 id="url-模块"><a href="#url-模块" class="headerlink" title="url 模块"></a>url 模块</h3><ul>
<li>用来操作url的</li>
<li>url.parse(request.url,true)</li>
</ul>
<h2 id="fs文件操作模块"><a href="#fs文件操作模块" class="headerlink" title="fs文件操作模块"></a>fs文件操作模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="comment">// 读取文件:</span></div><div class="line"><span class="comment">// 参数1：文件路径</span></div><div class="line"><span class="comment">// 参数2： 文件编码</span></div><div class="line"><span class="comment">// 返回值： 文件内容</span></div><div class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'./index.html'</span>,<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 写入文件</span></div><div class="line"><span class="comment">// 第一个参数：是要写入的文件目录,</span></div><div class="line"><span class="comment">// 第二个参数:是要写入的内容!</span></div><div class="line"><span class="comment">// 这个方法执行时会【覆盖】之前的文件内容!</span></div><div class="line">fs.writeFileSync(<span class="string">'./tmp.txt'</span>,<span class="string">'我是中国人，我爱自己的祖国!'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 追加文件</span></div><div class="line">fs.appendFileSync(<span class="string">'./xx.js'</span>,<span class="string">'我是小明，我在哪里?\r\n'</span>)</div><div class="line"></div><div class="line"> <span class="comment">// 创建目录</span></div><div class="line">    <span class="comment">// 判断目录是否存在，如果不存在，则创建</span></div><div class="line">    <span class="keyword">var</span> result = fs.existsSync(<span class="string">'data'</span>) <span class="comment">// 判断当前目录是否存在data目录</span></div><div class="line">    <span class="keyword">if</span>(!result)&#123;</div><div class="line">    <span class="built_in">console</span>.log(result)</div><div class="line">    <span class="comment">// 创建目录</span></div><div class="line">    fs.mkdirSync(<span class="string">'data'</span>)<span class="comment">// 在当前目录创建data目录</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="dirname和firename"><a href="#dirname和firename" class="headerlink" title="dirname和firename"></a><strong>dirname和</strong>firename</h2><p>1, <strong>dirname 可在任意文件中直接使用,值表示当前文件所在路径字符串<br>2, </strong>firname 也可以在任意文件中使用,值表示当前文件的包含文件名的完整路径!</p>
<h2 id="按顺序执行就是同步"><a href="#按顺序执行就是同步" class="headerlink" title="按顺序执行就是同步"></a>按顺序执行就是同步</h2><h2 id="form表单，提交get请求，会把请求参数添加到url中"><a href="#form表单，提交get请求，会把请求参数添加到url中" class="headerlink" title="form表单，提交get请求，会把请求参数添加到url中"></a>form表单，提交get请求，会把请求参数添加到url中</h2><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向!"></a>重定向!</h2><ul>
<li>在响应头里加上 Location:’新地址’,并设置状态为302</li>
<li><code>res.setHeader(&#39;key&#39;,&#39;value&#39;)</code>// 设置响应头</li>
<li><code>res.writeHead(状态码)</code>// 设置状态码!</li>
<li>浏览器接收到数据后会重新向新地址跳转!</li>
</ul>
<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><ul>
<li>node package manager</li>
<li>node的包管理工具，管理的是第三方包</li>
<li><a href="https://www.npmjs.com/" target="_blank" rel="external">官网</a></li>
<li>也能管理前端的包</li>
</ul>
<h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><ul>
<li>初始化: <code>npm init</code></li>
<li><code>npm install &lt;包名&gt;</code></li>
</ul>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h2 id="离线文档阅读器"><a href="#离线文档阅读器" class="headerlink" title="离线文档阅读器"></a>离线文档阅读器</h2><ul>
<li><a href="https://zealdocs.org/" target="_blank" rel="external">windows版本</a></li>
<li><a href="dash">mac版本</a></li>
</ul>
<h2 id="es6-es2015-每天一点点"><a href="#es6-es2015-每天一点点" class="headerlink" title="es6/es2015 每天一点点"></a>es6/es2015 每天一点点</h2><ul>
<li>const<br>//  const申明的数据，在栈中不可变，但是如果是对象，则对应的属性值可以变,也就是堆中的值可变,栈中的地址不可以变！</li>
<li>let<br>// let申明的变量，作用由大括号决定!</li>
</ul>
<h3 id="提交效率"><a href="#提交效率" class="headerlink" title="提交效率"></a>提交效率</h3><ul>
<li>组合键: <code>win+E</code>, 打开资源管理器</li>
<li>组合键: <code>wind+D</code>, 快速切换到桌面</li>
<li>组合键: <code>ctrl+shift+esc</code> 快速打开任务管理器</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了让 &lt;code&gt;NodeJs&lt;/code&gt; 的文件可以相互调用，&lt;code&gt;NodeJs&lt;/code&gt; 提供了一个简单的模块系统。&lt;br&gt;模块是 &lt;code&gt;NodeJs&lt;/code&gt; 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 &lt;code&gt;NodeJs&lt;/code&gt; 文件就是一个模块，这个文件可能是 &lt;code&gt;JavaScript&lt;/code&gt; 代码、&lt;code&gt;JSON&lt;/code&gt; 或者编译过的 &lt;code&gt;C/C++&lt;/code&gt; 扩展。&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="https://blog.ihoey.com/categories/Node/"/>
    
    
      <category term="Node" scheme="https://blog.ihoey.com/tags/Node/"/>
    
      <category term="NodeJs" scheme="https://blog.ihoey.com/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>Node第一部分-初体验</title>
    <link href="https://blog.ihoey.com/posts/Node/2016-12-10-Node-part1.html"/>
    <id>https://blog.ihoey.com/posts/Node/2016-12-10-Node-part1.html</id>
    <published>2016-12-10T02:31:09.000Z</published>
    <updated>2016-12-25T01:31:29.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NodeJs是什么？"><a href="#NodeJs是什么？" class="headerlink" title="NodeJs是什么？"></a>NodeJs是什么？</h2><blockquote>
<p>简单的说 <code>NodeJs</code> 就是运行在服务端的 <code>JavaScript</code> 。<code>NodeJs</code> 是一个基于 <code>Chrome JavaScript</code> 运行时建立的一个平台。<code>NodeJs</code> 是一个事件驱动 <code>I/O</code> 服务端 <code>JavaScript</code> 环境，基于 <code>Google</code> 的 <code>V8</code> 引擎，<code>V8</code> 引擎执行 <code>Javascript</code> 的速度非常快，性能非常好。</p>
</blockquote>
<ul>
<li>官网 <code>https://nodejs.org</code></li>
</ul>
<a id="more"></a>
<ul>
<li><code>NodeJs</code> 自带运行时环境可在 <code>Javascript</code> 脚本的基础上可以解释和执行(这类似于 <code>JVM</code> 的 <code>Java</code> 字节码)。这个运行时允许在浏览器以外的任何机器上执行 <code>JavaScript</code> 代码。由于这种运行时在 <code>NodeJs</code> 上，所以 <code>JavaScript</code> 现在可以在服务器上并执行。</li>
<li><code>NodeJs</code> 还提供了各种丰富的 <code>JavaScript</code> 模块库，它极大简化了使用 <code>NodeJs</code> 来扩展 <code>Web</code> 应用程序的研究与开发。</li>
<li><code>NodeJs</code> = 运行环境 + <code>JavaScript</code> 库</li>
</ul>
<h3 id="浏览器和NodeJs中的Js"><a href="#浏览器和NodeJs中的Js" class="headerlink" title="浏览器和NodeJs中的Js"></a>浏览器和NodeJs中的Js</h3><ul>
<li>浏览器的 <code>Js</code><ul>
<li>可以通过 <code>Js</code> 操作 <code>Html</code></li>
<li>有 <code>DOM</code> (和操作 <code>Html</code> 有关)，有 <code>BOM</code> (和浏览器有关)，有 <code>ECMA</code> (就是 <code>js</code> 语法规范)</li>
</ul>
</li>
<li><code>Node</code> 中的 <code>Js</code><ul>
<li>没有 <code>DOM</code>, 没有 <code>BOM</code>, 有 <code>ECMA</code></li>
<li><code>windows</code> (也就是说没有 <code>windows</code> 对象)</li>
</ul>
</li>
</ul>
<h2 id="Node安装"><a href="#Node安装" class="headerlink" title="Node安装"></a>Node安装</h2><p>在 <code>windows</code> 上安装 <code>NodeJs</code> (本教程中使用)。使用 <code>MSI</code> 文件，并按照提示安装 <code>NodeJs</code> ，默认情况下，安装程序将 <code>NodeJs</code> 发行到 <code>C:\Program Files\nodejs</code>. 但这里我们可以根据需要修改安装路径到指定的文件夹，比如：<code>D:\Program Files\nodejs</code> ，并将 <code>D:\Program Files\nodejs</code> 目录添加到 <code>Window</code> 系统的 <code>PATH</code> 环境变量中（或者安装的时候选中添加环境变量，下面会有提到）。</p>
<ul>
<li>第一步：双击下载的 <code>node-v7.2.1-x64.msi</code> 文件，出现提示安装界面</li>
<li>第二步：选择安装目录，比如安装在目录 <code>D:\Program Files\nodejs</code> 中</li>
<li>第三步：选择安装的模块和功能，这里全部安装，并添加到系统环境变量，最后一个选项</li>
<li>最后一步：安装完成！</li>
<li>验证安装：在 <code>CMD</code> 或者 <code>powershell</code> 中输入 <code>node -v</code> 注意中间有空格，显示版本号就说明安装成功了！</li>
</ul>
<h2 id="Node版本介绍"><a href="#Node版本介绍" class="headerlink" title="Node版本介绍"></a>Node版本介绍</h2><ul>
<li><code>0.10.x</code> , <code>Node</code> 就开源了<ul>
<li>开源（开放源代码）的话, 别人就可以贡献（提意见，修改等）源码! </li>
<li>因为作者比较精益求精，所以后来第三方社区: 觉得Node更新太慢! <ul>
<li>于是第三方社区在原来Node的基础上继续开发并加入了很多新的东西</li>
</ul>
</li>
<li>后来因为反响太大，作者便直接合并: 从 <code>0.10.x</code> 直接升到 <code>4.x</code></li>
<li>版本历史 <code>4.x</code> <code>5.x</code> <code>6.x</code> <code>7.x</code></li>
</ul>
</li>
</ul>
<h2 id="创建-NodeJs-应用"><a href="#创建-NodeJs-应用" class="headerlink" title="创建 NodeJs 应用"></a>创建 NodeJs 应用</h2><h3 id="步骤一、引入-required-模块"><a href="#步骤一、引入-required-模块" class="headerlink" title="步骤一、引入 required 模块"></a>步骤一、引入 required 模块</h3><p>我们使用 <code>require</code> 指令来载入 <code>http</code> 模块，并将实例化的 <code>HTTP</code> 赋值给变量 http，实例如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div></pre></td></tr></table></figure>
<h3 id="步骤一、创建服务器"><a href="#步骤一、创建服务器" class="headerlink" title="步骤一、创建服务器"></a>步骤一、创建服务器</h3><ul>
<li>我们电脑上只要安装了node,不需要其他的软件配置，就能够开启一个http服务</li>
</ul>
<p>接下来我们使用 <code>http.createServer()</code> 方法创建服务器，并使用 <code>listen</code> 方法绑定 <code>8888</code> 端口。 函数通过 <code>request</code>, <code>response</code> 参数来接收和响应数据。<br>实例如下，在你项目的根目录下创建一个叫 <code>server.js</code> 的文件，并写入以下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">  <span class="comment">// 发送 http 头部</span></div><div class="line">  <span class="comment">// http 状态码：200 ：OK</span></div><div class="line">  <span class="comment">// 内容类型： text/piain</span></div><div class="line">  response.writeHead(<span class="number">200</span>,&#123;<span class="string">'Contenr-Type'</span>: <span class="string">'text/piain'</span>&#125;)</div><div class="line">  <span class="comment">//发送响应数据 ‘hello world’</span></div><div class="line">  response.end(<span class="string">'hello-world'</span>);</div><div class="line">  <span class="comment">//监听8888端口</span></div><div class="line">  &#125;).listen(<span class="number">8888</span>)</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>)</div></pre></td></tr></table></figure>
<p>以上代码我们完成了一个可以工作的 HTTP 服务器。<br>使用 node 命令执行以上的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node server.js</div><div class="line">Server running at http:<span class="comment">//127.0.0.1:8888/</span></div></pre></td></tr></table></figure>
<p>接下来，打开浏览器访问 <code>http://127.0.0.1:8888/</code> ，你会看到一个写着 “Hello World”的网页。</p>
<blockquote>
<p>服务器</p>
</blockquote>
<ul>
<li>服务器就是一台电脑, 只是性能一般比我们普通电脑高!</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><em>file协议，默认，是不能够发ajax请求的！</em></p>
<ul>
<li>服务器就是一台电脑(这个电脑是有独立 <code>ip</code> )</li>
<li>我们的笔记本也是电脑(也可以把最终的项目代码放到笔记本上! ,但是没有公司愿意这么干)</li>
<li>操作系统都可能是一样的</li>
<li>服务器能运行的软件，我们电脑也能运行</li>
</ul>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul>
<li>我们在 <code>cmd</code> 窗口中敲一个命令, 本质上是执行了一个程序(软件)</li>
<li>默认按下回车时, 会到当前命令行所对应的目录寻找文件, 如果找到就立即执行</li>
<li>如果找不到就会到环境变量中的 <code>PATH</code> 中指定的目录中寻找!</li>
</ul>
<p>例:我们把 <code>node</code> 的默认安装目录: <code>D:\Program Files\nodejs</code>, 配置 <code>PATH</code> 上，那么<br>我们在 <code>cmd</code> 中敲命令时，如果当前目录找不到，就会到 <code>D:\Program Files\nodejs</code><br>目录寻找相应的文件执行!</p>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><ul>
<li>系统底层还是命令</li>
<li>windows系统刚开始的时候还没有界面</li>
<li>在 <code>cmd</code> 中敲命令,或默认到当前命令行对应的目录中找文件执行</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NodeJs是什么？&quot;&gt;&lt;a href=&quot;#NodeJs是什么？&quot; class=&quot;headerlink&quot; title=&quot;NodeJs是什么？&quot;&gt;&lt;/a&gt;NodeJs是什么？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;简单的说 &lt;code&gt;NodeJs&lt;/code&gt; 就是运行在服务端的 &lt;code&gt;JavaScript&lt;/code&gt; 。&lt;code&gt;NodeJs&lt;/code&gt; 是一个基于 &lt;code&gt;Chrome JavaScript&lt;/code&gt; 运行时建立的一个平台。&lt;code&gt;NodeJs&lt;/code&gt; 是一个事件驱动 &lt;code&gt;I/O&lt;/code&gt; 服务端 &lt;code&gt;JavaScript&lt;/code&gt; 环境，基于 &lt;code&gt;Google&lt;/code&gt; 的 &lt;code&gt;V8&lt;/code&gt; 引擎，&lt;code&gt;V8&lt;/code&gt; 引擎执行 &lt;code&gt;Javascript&lt;/code&gt; 的速度非常快，性能非常好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;官网 &lt;code&gt;https://nodejs.org&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Node" scheme="https://blog.ihoey.com/categories/Node/"/>
    
    
      <category term="Node" scheme="https://blog.ihoey.com/tags/Node/"/>
    
      <category term="NodeJs" scheme="https://blog.ihoey.com/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>工具使用篇之Markdown</title>
    <link href="https://blog.ihoey.com/posts/Markdown/2016-11-27-use-tools-part1-markdown.html"/>
    <id>https://blog.ihoey.com/posts/Markdown/2016-11-27-use-tools-part1-markdown.html</id>
    <published>2016-11-27T02:35:12.000Z</published>
    <updated>2017-01-11T12:28:08.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-介绍"><a href="#Markdown-介绍" class="headerlink" title="Markdown 介绍"></a>Markdown 介绍</h2><ul>
<li><em>Markdown</em> 是一个 <strong>轻量级  高效率</strong> 的标记语言</li>
<li>轻量级标记语言，<code>2004</code> 年被 <code>John Gruber</code> 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 <code>HTML</code> 文档格式， 很多网站目前都使用了 <code>Markdown</code> 或者其变种，例如 <code>Github</code> 、简书等大型社区。</li>
</ul>
<a id="more"></a>
<h2 id="Markdown-使用场景"><a href="#Markdown-使用场景" class="headerlink" title="Markdown 使用场景"></a>Markdown 使用场景</h2><ul>
<li>学习笔记</li>
<li>演讲稿</li>
<li>写书（侧重于技术相关的 内容非常适合）</li>
<li>个人笔记</li>
<li>文章博客</li>
<li>教学讲义</li>
<li>说明文档</li>
<li>电子邮件</li>
</ul>
<h2 id="Markdown-实时预览编辑器"><a href="#Markdown-实时预览编辑器" class="headerlink" title="Markdown 实时预览编辑器"></a>Markdown 实时预览编辑器</h2><ul>
<li>dillinger</li>
<li>马克飞象</li>
<li>简书</li>
<li>MarkdownPad</li>
<li>Sublime Text<ul>
<li>配合 Markdown Preview 插件</li>
</ul>
</li>
<li>Webstorm<ul>
<li>配合插件</li>
</ul>
</li>
<li>gitbook</li>
</ul>
<p>实时预览工具只是为了达到所见即所得的效果而已， 适合初学者学习 <code>Markdown</code> ， 我们真正在进行写作的时候，其实是不需要实时预览的， 因为 Markdown 标记语言本身已经足够清晰了。</p>
<h2 id="Markdown-安装和配置编写预览环境-sublime"><a href="#Markdown-安装和配置编写预览环境-sublime" class="headerlink" title="Markdown 安装和配置编写预览环境(sublime)"></a>Markdown 安装和配置编写预览环境(sublime)</h2><ul>
<li>按下键 <code>Ctrl+Shift+p</code> 调出命令面板，找到 <code>Package Control: install Pakage</code> 这一项。搜索 <code>markdown preview</code> ，点击安装。</li>
<li><code>Markdown Preview</code> 较常用的功能是 <code>preview in browser</code> 和 <code>Export HTML in Sublime Text</code> ，前者可以在浏览器看到预览效果，后者可将 <code>markdown</code> 保存为 <code>html</code> 文件。</li>
<li><code>preview in browser</code> 据称是实时的，但是实践上还是需要在 <code>st</code> 保存，然后浏览器刷新才能看到新的效果，好在 <code>markdown</code> 写得多的话也不需要每敲一行看一次效果。</li>
</ul>
<h3 id="Webstorm"><a href="#Webstorm" class="headerlink" title="Webstorm"></a>Webstorm</h3><ul>
<li>打开<code>webstorm</code> ，<code>File--&gt;Setting--&gt;输入plugin--&gt;Install JetBrains plugin...--&gt;输入markdown--&gt;</code>点击右边的 <code>Install</code> ,安装完，重启 <code>webstorm</code>。</li>
</ul>
<h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><ul>
<li><code>Visual Studio Code</code> 自带 <code>markdown</code> 预览,所以不需要安装插件,不过可以安装语法高亮主题</li>
</ul>
<h3 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h3><ul>
<li>MarkdownEditing 主题、自动补齐等功能</li>
<li>MarkdownPreview 在浏览器预览</li>
<li>MarkdownTOC 自动生成导航</li>
<li>Table Editor 自动表格编辑</li>
<li><a href="https://packagecontrol.io/" target="_blank" rel="external">packagecontrol</a> Sublime 的插件生态系统网站</li>
</ul>
<p>只要有写作的地方，都可以使用 <code>Markdown</code> 来书写。</p>
<h2 id="Markdown-标题书写"><a href="#Markdown-标题书写" class="headerlink" title="Markdown 标题书写"></a>Markdown 标题书写</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 一级标题</span></div><div class="line"><span class="section">## 二级标题</span></div><div class="line"><span class="section">### 三级标题</span></div><div class="line">...</div><div class="line"><span class="section">###### 六级标签</span></div><div class="line">一共六级标题</div></pre></td></tr></table></figure>
<h2 id="Markdown-列表书写语法"><a href="#Markdown-列表书写语法" class="headerlink" title="Markdown 列表书写语法"></a>Markdown 列表书写语法</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li>一级列表建议使用 <code>-</code><ul>
<li>二级列表建议使用 <code>+</code><ul>
<li>三级列表建议使用 <code>*</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>一级标题</div><div class="line"><span class="code">    + 二级标题</span></div><div class="line"><span class="code">        * 三级列表</span></div></pre></td></tr></table></figure>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol>
<li>有序列表直接使用序列加一个点开头, 然后加一个</li>
<li>有序列表嵌套无序列表<ul>
<li>有序列表中嵌套无需列表<ul>
<li>有序列表中嵌套无需列表</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">2. </span>有序列表嵌套无序列表</div><div class="line"><span class="code">    - 有序列表嵌套无序列表</span></div><div class="line"><span class="code">        + 有序列表嵌套无序列表</span></div></pre></td></tr></table></figure>
<ol>
<li>有序列表嵌套有序列表<ol>
<li>有序列表嵌套有序列表<ol>
<li>有序列表嵌套有序列表</li>
</ol>
</li>
</ol>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">3. </span>有序列表嵌套有序列表</div><div class="line"><span class="code">    1. 有序列表嵌套有序列表</span></div><div class="line"><span class="code">        1. 有序列表嵌套有序列表</span></div></pre></td></tr></table></figure>
<h4 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h4><p>无论是有序列表还是无序列表,如果就写一级列表不嵌套就可以紧凑写到一起即可,如果嵌套多级列表最好在列表项之间只用空行隔开</p>
<h2 id="Markdown-图片链接书写语法"><a href="#Markdown-图片链接书写语法" class="headerlink" title="Markdown 图片链接书写语法"></a>Markdown 图片链接书写语法</h2><h3 id="Markdown-图片书写语法"><a href="#Markdown-图片书写语法" class="headerlink" title="Markdown 图片书写语法"></a>Markdown 图片书写语法</h3><ul>
<li><code>![图片](http://blog.ihoey.com/img/img.jpg)</code></li>
</ul>
<h3 id="Markdown-链接书写语法"><a href="#Markdown-链接书写语法" class="headerlink" title="Markdown 链接书写语法"></a>Markdown 链接书写语法</h3><ul>
<li><code>[链接](http://blog.ihoey.com)</code></li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li><code>&gt; 例如这样</code></li>
</ul>
<blockquote>
<p>例如这样</p>
</blockquote>
<h2 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h2><ul>
<li><code>Markdown</code> 的粗体和斜体也非常简单，用两个 <code>*</code> 包含一段文本就是粗体的语法，用一个 <code>*</code> 包含一段文本就是斜体的语法</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**这里是粗体**</span></div><div class="line"><span class="emphasis">*这里是斜体*</span></div></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| 表头           | 表头            | 表头   |</div><div class="line">| :------------- | :-------------: | -----: |</div><div class="line">| 左对齐         | 居中对齐        | 右对齐 |</div><div class="line">| 左对齐         | 居中对齐        | 右对齐 |</div><div class="line">| 左对齐         | 居中对齐        | 右对齐 |</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">表头</th>
<th style="text-align:center">表头</th>
<th style="text-align:right">表头</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">左对齐</td>
<td style="text-align:center">居中对齐</td>
<td style="text-align:right">右对齐</td>
</tr>
<tr>
<td style="text-align:left">左对齐</td>
<td style="text-align:center">居中对齐</td>
<td style="text-align:right">右对齐</td>
</tr>
<tr>
<td style="text-align:left">左对齐</td>
<td style="text-align:center">居中对齐</td>
<td style="text-align:right">右对齐</td>
</tr>
</tbody>
</table>
<h2 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h2><p>由三个 ` 反引号包裹, 行内代码在代码前后加一个 ` 反引号</p>
<h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">## 0. 目录&#123;#index&#125;</span></div><div class="line">跳转到[<span class="string">目录</span>](<span class="link">#index</span>)</div></pre></td></tr></table></figure>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span><span class="bullet">* *</span></div><div class="line"><span class="emphasis">***</span></div><div class="line"><span class="strong">*****</span></div><div class="line"><span class="section">- - -</span></div><div class="line">---------------------------------------</div></pre></td></tr></table></figure>
<p>显示效果都一样：</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Markdown-介绍&quot;&gt;&lt;a href=&quot;#Markdown-介绍&quot; class=&quot;headerlink&quot; title=&quot;Markdown 介绍&quot;&gt;&lt;/a&gt;Markdown 介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Markdown&lt;/em&gt; 是一个 &lt;strong&gt;轻量级  高效率&lt;/strong&gt; 的标记语言&lt;/li&gt;
&lt;li&gt;轻量级标记语言，&lt;code&gt;2004&lt;/code&gt; 年被 &lt;code&gt;John Gruber&lt;/code&gt; 创造， 它允许人们“使用易读易写的纯文本格式编写文档”， Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 &lt;code&gt;HTML&lt;/code&gt; 文档格式， 很多网站目前都使用了 &lt;code&gt;Markdown&lt;/code&gt; 或者其变种，例如 &lt;code&gt;Github&lt;/code&gt; 、简书等大型社区。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Markdown" scheme="https://blog.ihoey.com/categories/Markdown/"/>
    
    
      <category term="Markdown语法规范" scheme="https://blog.ihoey.com/tags/Markdown%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/"/>
    
      <category term="tools" scheme="https://blog.ihoey.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part7之 Ajax 模块功能及实现</title>
    <link href="https://blog.ihoey.com/posts/javascript/2016-11-25-javascript-jquery-part7.html"/>
    <id>https://blog.ihoey.com/posts/javascript/2016-11-25-javascript-jquery-part7.html</id>
    <published>2016-11-25T13:31:12.000Z</published>
    <updated>2016-11-27T02:31:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!</p>
<a id="more"></a>
<h2 id="Ajax-请求流程"><a href="#Ajax-请求流程" class="headerlink" title="Ajax 请求流程"></a>Ajax 请求流程</h2><ol>
<li>创建一个请求对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRequest</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest() : </div><div class="line">		<span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xhr = createRequest();</div><div class="line"><span class="built_in">console</span>.log(xhr);</div></pre></td></tr></table></figure>
<ol>
<li>格式化数据<ul>
<li>将格式化后的数据,参数与值都要重新编码</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatData</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ret = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> data)&#123;</div><div class="line">        ret.push(<span class="built_in">window</span>.encodeURIComponent(k) + <span class="string">'='</span> + <span class="built_in">window</span>.encodeURIComponent(data[k]));</div><div class="line">    &#125;</div><div class="line">		<span class="comment">// 如果不想从服务器缓存中读取数据</span></div><div class="line">	ret.push((<span class="string">'_='</span> + <span class="built_in">Math</span>.random()).replace(<span class="string">'.'</span>, <span class="string">''</span>));</div><div class="line">    <span class="keyword">return</span> ret.join(<span class="string">'&amp;'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> data = &#123;<span class="attr">name</span>: <span class="string">'梦魇小栈'</span>,<span class="attr">age</span>: <span class="number">2</span>,<span class="attr">url</span>:<span class="string">'http://blog.ihoey.com'</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(formatData(data));<span class="comment">//name=%E6%A2%A6%E9%AD%87%E5%B0%8F%E6%A0%88&amp;age=2&amp;url=http%3A%2F%2Fblog.ihoey.com</span></div></pre></td></tr></table></figure>
<ol>
<li>与服务器建立连接</li>
<li>监听请求状态</li>
<li>发送请求</li>
<li>封装</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	// 默认配置信息</div><div class="line">	ajaxSetting = &#123;</div><div class="line">		url: '',</div><div class="line">		type: 'GET',</div><div class="line">		dataType: 'text',</div><div class="line">		contentType: 'application/x-www-form-urlencoded',</div><div class="line">		data: null,</div><div class="line">		async: true,</div><div class="line">		success: null,</div><div class="line">		fail: null</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	function createRequest() &#123;</div><div class="line">		return window.XMLHttpRequest ? new window.XMLHttpRequest() : </div><div class="line">			new ActiveXObject('Microsoft.XMLHTTP');</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function formatData(data) &#123;</div><div class="line">		var ret = [];</div><div class="line">		for(var k in data)&#123;</div><div class="line">			ret.push(window.encodeURIComponent(k) + '=' + window.encodeURIComponent(data[k]));</div><div class="line">		&#125;</div><div class="line">		// 如果不想从服务器缓存中读取数据</div><div class="line">		ret.push(('_=' + Math.random()).replace('.', ''));</div><div class="line">		return ret.join('&amp;');</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function ajax(config) &#123;</div><div class="line">		var context = &#123;&#125;, </div><div class="line">			xhr, </div><div class="line">			postData = '';</div><div class="line">		// 过滤无效参数</div><div class="line">		if(!config || !config.url) &#123;</div><div class="line">			console.warn("参数异常");</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		// debugger;</div><div class="line">		// 获取默认配置信息</div><div class="line">		itcast.extend(ajaxSetting, context);</div><div class="line">		// 用户的配置覆盖默认配置</div><div class="line">		itcast.extend(config, context);</div><div class="line">		// 1: 创建请求对象</div><div class="line">		xhr = createRequest();</div><div class="line">		// 2：格式化数据</div><div class="line">		if(context.data)&#123;</div><div class="line">			postData = formatData(context.data);</div><div class="line">		&#125;</div><div class="line">		// 3：与服务器建立连接</div><div class="line">		if(context.type.toUpperCase() === 'GET')&#123;</div><div class="line">			xhr.open('GET', context.url + '?' + postData, context.async);</div><div class="line">			postData = null;</div><div class="line">		&#125; else &#123;</div><div class="line">			// 模拟表单提交，设置请求头信息</div><div class="line">			xhr.setRequestHeader('Content-Type', context.contentType);</div><div class="line">			xhr.open('POST', context.url, context.async);				</div><div class="line">		&#125;</div><div class="line">		// 4：监听请求状态</div><div class="line">		xhr.onreadystatechange = function() &#123;</div><div class="line">			if(xhr.readyState === 4)&#123;</div><div class="line">				if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status === 304)&#123;</div><div class="line">					// 获取到请求回来的数据</div><div class="line">					var text = xhr.responseText;</div><div class="line">					// 如果指定的数据格式为 json，那就将其转换为json对象</div><div class="line">					text = context.dataType.toLowerCase() === 'json' ?</div><div class="line">						JSON.parse(text) : text;</div><div class="line"></div><div class="line">					context.success &amp;&amp; context.success(text);</div><div class="line">				&#125; else &#123;</div><div class="line">					context.fail &amp;&amp; context.fail(&#123;"errorCode": xhr.status, "message": "请求超时."&#125;);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		// 5: 发送请求</div><div class="line">		xhr.send(postData);</div><div class="line">		// context.success &amp;&amp; context.success(JSON.parse(xhr.responseText));</div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	ajax(&#123;</div><div class="line">		url: 'data.json',</div><div class="line">		dataType: 'json',</div><div class="line">		async: false,</div><div class="line">		success: function(data) &#123;</div><div class="line">			document.getElementById('content').innerHTML= '&lt;p&gt;' + data.username + '&lt;/p&gt;' +</div><div class="line">					'&lt;p&gt;' + data.age + '&lt;/p&gt;';</div><div class="line">		&#125;,</div><div class="line">		fail: function(er) &#123;</div><div class="line">			console.log(er.errorCode);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="Jsonp-请求"><a href="#Jsonp-请求" class="headerlink" title="Jsonp 请求"></a>Jsonp 请求</h2><ol>
<li>跨域 只能发送 <code>GET</code> 请求 . 一种不安全的请求方式</li>
<li>原理:由于 <code>dom</code> 元素的 <code>src</code> 属性,具有跨域功能. 在实现跨域请求时,为了方便就使用 <code>script</code> 标签来做.</li>
<li>流程<ul>
<li>创建请求对象,就是创建一个 <code>script</code> 标签</li>
<li>将上述创建的 <code>script</code> 标签添加到页面的 <code>head</code> 标签下</li>
<li>格式化数据</li>
<li>创建全局回调函数</li>
<li>设置超时时间,如果超过此时间,也没有得到数据,表示请求失败.否则,请求成功</li>
<li>发送请求: 指定 <code>script</code> 标签的 <code>src</code> 属性值</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第七部分 Ajax 部分功能及实现,接第六部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="https://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="https://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="https://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part6之动画模块功能及实现</title>
    <link href="https://blog.ihoey.com/posts/javascript/2016-11-24-javascript-jquery-part6.html"/>
    <id>https://blog.ihoey.com/posts/javascript/2016-11-24-javascript-jquery-part6.html</id>
    <published>2016-11-24T01:38:13.000Z</published>
    <updated>2016-11-24T13:13:53.120Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!</p>
<a id="more"></a>
<h2 id="动画原理"><a href="#动画原理" class="headerlink" title="动画原理"></a>动画原理</h2><ul>
<li>根据人眼具有 <code>0.1</code> 秒的视觉残留,只有在一秒切换至少 <code>24</code> 个画面就会产生动画</li>
</ul>
<h2 id="动画的基本结构"><a href="#动画的基本结构" class="headerlink" title="动画的基本结构"></a>动画的基本结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">//动画</span></div><div class="line">	&#125;</div><div class="line">	<span class="built_in">window</span>.setInterval(render, time);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="小动画案例"><a href="#小动画案例" class="headerlink" title="小动画案例"></a>小动画案例</h2><ul>
<li>奔跑的小矩形</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>奔跑吧矩形<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"itcast.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">		div &#123;</div><div class="line">			width: 100px;</div><div class="line">			height: 100px;</div><div class="line">			border: 5px solid yellowgreen;</div><div class="line">			position: relative;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, step, target</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> left,<span class="comment">//起始位置</span></div><div class="line">			timer;<span class="comment">//定时器id</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;<span class="comment">//用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line">			left = elem.offsetLeft;</div><div class="line">			<span class="keyword">if</span>( left + step &gt;= target )&#123;</div><div class="line">				elem.style.left = target + <span class="string">'px'</span>;</div><div class="line">				<span class="built_in">window</span>.clearInterval(timer);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				elem.style.left = left + step + <span class="string">'px'</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 启动定时器 开始动画</span></div><div class="line">		timer = <span class="built_in">window</span>.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">	&#125;;</div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			animate(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>), <span class="number">3</span>, <span class="number">1000</span>);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span>开始动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="匀速直线动画"><a href="#匀速直线动画" class="headerlink" title="匀速直线动画"></a>匀速直线动画</h2><ol>
<li>固定时间</li>
<li>固定距离</li>
<li>如何判断动画结束的时机?<ul>
<li>使用时间来判断是否结束动画</li>
<li>如果动画时间到达指定时间,那么就结束动画,并让动画元素到达终点</li>
</ul>
</li>
<li>实现思路<ul>
<li>定义动画函数, <code>animate</code> 函数. 当调用 <code>animate</code> 函数时, 即动画开始的时间</li>
<li>定义 <code>render</code> 函数. 用来给动画元素设置属性值<ul>
<li>计算当前动画元素所在的位置, 然后累计到其对应属性值上.</li>
<li>首先计算动画的时间间隔</li>
<li>如果时间间隔大于或等于指定的总时间, 那么就停止动画并设置动画元素到达终点</li>
<li>否则, 根据速度, 动画时间间隔计算出位移. 再将其于起始位置累加后赋值给 <code>elem</code> </li>
</ul>
</li>
<li>定义定时器, 开始动画. </li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">		speed, <span class="comment">// 速度</span></div><div class="line">		location, <span class="comment">// 起始位置</span></div><div class="line">		distance, <span class="comment">// 动画总距离</span></div><div class="line">		startTime,<span class="comment">// 动画开始时间</span></div><div class="line">		currentTime,<span class="comment">// 动画当前时间</span></div><div class="line">		time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">	location = elem.offsetLeft;</div><div class="line">	distance = target - location;</div><div class="line">	speed = distance / duration;</div><div class="line">	startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;  <span class="comment">// 转换毫秒值</span></div><div class="line">	<span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line">	<span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">		time = currentTime - startTime;</div><div class="line">		<span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line">		<span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line">		<span class="keyword">if</span>(time &gt;= duration)&#123;</div><div class="line">			<span class="comment">// console.log(time);</span></div><div class="line">			<span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">			elem.style.left = target + <span class="string">'px'</span>;</div><div class="line">			<span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line">			<span class="built_in">window</span>.clearInterval(timer);</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class="line">			<span class="comment">// 指定动画元素的位置</span></div><div class="line">			<span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">			elem.style.left = speed * time + location + <span class="string">'px'</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 启动定时器 开始动画</span></div><div class="line">	timer = <span class="built_in">window</span>.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">&#125;;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		animate(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>), <span class="number">1000</span>, <span class="number">2000</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="匀减速直线动画"><a href="#匀减速直线动画" class="headerlink" title="匀减速直线动画"></a>匀减速直线动画</h2><ol>
<li>物理公式<ul>
<li>a：    加速度</li>
<li>t：    时间间隔</li>
<li>v0：    初始速度</li>
<li>vt：    末速度</li>
<li>S：    位移</li>
<li>正方向：    S = v0 <em> t + a + t </em> t / 2;</li>
</ul>
</li>
<li>S ==&gt; target - location <br> t ==&gt; duration <br> v0 = 0</li>
<li>正方向 <br> a = 2 <em> ( S - v0 </em> t) / ( t <em> t) <br> ==&gt; = 2 </em> S / ( t <em> t) <br> ==&gt; = 2 </em> ( target - location ) / ( duration <em> duration ) <br> vt = 2 </em> ( target - location ) / duration </li>
<li>time 时间间隔内的 匀减速位移 <br> tween = v0 <em> t - a </em> t <em> t / 2 <br> ==&gt; tween = 2 </em> ( target - location ) <em> time / duration <br> - (target - location ) </em> time <em> time / ( duration </em> duration )</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">		tween, <span class="comment">// 单位时间间隔的位移</span></div><div class="line">		location, <span class="comment">// 起始位置</span></div><div class="line">		distance, <span class="comment">// 动画总距离</span></div><div class="line">		startTime, <span class="comment">// 动画开始时间</span></div><div class="line">		currentTime, <span class="comment">// 动画当前时间</span></div><div class="line">		time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">	location = elem.offsetLeft;</div><div class="line">	distance = target - location;</div><div class="line">	startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>; <span class="comment">// 转换毫秒值</span></div><div class="line">	<span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line">	<span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">		time = currentTime - startTime;</div><div class="line">		<span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line">		<span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line">		<span class="keyword">if</span> (time &gt;= duration) &#123;</div><div class="line">			<span class="comment">// console.log(time);</span></div><div class="line">			<span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">			tween = distance;</div><div class="line">			<span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line">			<span class="built_in">window</span>.clearInterval(timer);</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则，根据速度 和 时间间隔求出动画位移</span></div><div class="line">			<span class="comment">// 指定动画元素的位置</span></div><div class="line">			<span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">			tween = <span class="number">2</span> * distance * time / duration - distance * time * time / (duration * duration);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		elem.style.left = tween + location + <span class="string">'px'</span>;</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 启动定时器 开始动画</span></div><div class="line">	timer = <span class="built_in">window</span>.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">&#125;;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		animate(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>), <span class="number">1000</span>, <span class="number">1500</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="使用对象封装缓动函数"><a href="#使用对象封装缓动函数" class="headerlink" title="使用对象封装缓动函数"></a>使用对象封装缓动函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">	x: null,</div><div class="line">	t: 时间间隔</div><div class="line">	b: 起始位置</div><div class="line">	c: 终止位置</div><div class="line">	d: 总时间</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">var</span> easing = &#123;		</div><div class="line">	<span class="attr">linear</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> (c - b) * t / d;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">minusspeed</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">2</span> * (c - b) * t / d - (c - b) * t * t / (d * d);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * (t /= d) * t + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> -c * (t /= d) * (t - <span class="number">2</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t + b;</div><div class="line">		<span class="keyword">return</span> -c / <span class="number">2</span> * ((--t) * (t - <span class="number">2</span>) - <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * (t /= d) * t * t + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t + <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t + b;</div><div class="line">		<span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t + <span class="number">2</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * (t /= d) * t * t * t + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> -c * ((t = t / d - <span class="number">1</span>) * t * t * t - <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t * t + b;</div><div class="line">		<span class="keyword">return</span> -c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t * t - <span class="number">2</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * (t /= d) * t * t * t * t + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t * t * t + <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t * t * t + b;</div><div class="line">		<span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t * t * t + <span class="number">2</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> -c * <span class="built_in">Math</span>.cos(t / d * (<span class="built_in">Math</span>.PI / <span class="number">2</span>)) + c + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * <span class="built_in">Math</span>.sin(t / d * (<span class="built_in">Math</span>.PI / <span class="number">2</span>)) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> -c / <span class="number">2</span> * (<span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI * t / d) - <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> (t == <span class="number">0</span>) ? b : c * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t / d - <span class="number">1</span>)) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> (t == d) ? b + c : c * (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * t / d) + <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">		<span class="keyword">if</span> (t == d) <span class="keyword">return</span> b + c;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t - <span class="number">1</span>)) + b;</div><div class="line">		<span class="keyword">return</span> c / <span class="number">2</span> * (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * --t) + <span class="number">2</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> -c * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t /= d) * t) - <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> c * <span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t = t / d - <span class="number">1</span>) * t) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> -c / <span class="number">2</span> * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - t * t) - <span class="number">1</span>) + b;</div><div class="line">		<span class="keyword">return</span> c / <span class="number">2</span> * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t -= <span class="number">2</span>) * t) + <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line">		<span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line">		<span class="keyword">var</span> a = c;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">		<span class="keyword">if</span> ((t /= d) == <span class="number">1</span>) <span class="keyword">return</span> b + c;</div><div class="line">		<span class="keyword">if</span> (!p) p = d * <span class="number">.3</span>;</div><div class="line">		<span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">			a = c;</div><div class="line">			<span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">		<span class="keyword">return</span> -(a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p)) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line">		<span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line">		<span class="keyword">var</span> a = c;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">		<span class="keyword">if</span> ((t /= d) == <span class="number">1</span>) <span class="keyword">return</span> b + c;</div><div class="line">		<span class="keyword">if</span> (!p) p = d * <span class="number">.3</span>;</div><div class="line">		<span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">			a = c;</div><div class="line">			<span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">		<span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * t) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) + c + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line">		<span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line">		<span class="keyword">var</span> a = c;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) == <span class="number">2</span>) <span class="keyword">return</span> b + c;</div><div class="line">		<span class="keyword">if</span> (!p) p = d * (<span class="number">.3</span> * <span class="number">1.5</span>);</div><div class="line">		<span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">			a = c;</div><div class="line">			<span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">		<span class="keyword">if</span> (t &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-.5</span> * (a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p)) + b;</div><div class="line">		<span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) * <span class="number">.5</span> + c + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line">		<span class="keyword">return</span> c * (t /= d) * t * ((s + <span class="number">1</span>) * t - s) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line">		<span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * ((s + <span class="number">1</span>) * t + s) + <span class="number">1</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeInOutBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line">		<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * (t * t * (((s *= (<span class="number">1.525</span>)) + <span class="number">1</span>) * t - s)) + b;</div><div class="line">		<span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * (((s *= (<span class="number">1.525</span>)) + <span class="number">1</span>) * t + s) + <span class="number">2</span>) + b;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">easeOutBounce</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((t /= d) &lt; (<span class="number">1</span> / <span class="number">2.75</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> c * (<span class="number">7.5625</span> * t * t) + b;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2</span> / <span class="number">2.75</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">1.5</span> / <span class="number">2.75</span>)) * t + <span class="number">.75</span>) + b;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2.5</span> / <span class="number">2.75</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">2.25</span> / <span class="number">2.75</span>)) * t + <span class="number">.9375</span>) + b;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">2.625</span> / <span class="number">2.75</span>)) * t + <span class="number">.984375</span>) + b;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="抽取缓动函数"><a href="#抽取缓动函数" class="headerlink" title="抽取缓动函数"></a>抽取缓动函数</h2><p>将缓动函数的可变变量抽取出来,以便于封装</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration, easingName</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">			tween, <span class="comment">// 单位时间间隔的位移</span></div><div class="line">			location, <span class="comment">// 起始位置</span></div><div class="line">			distance, <span class="comment">// 动画总距离</span></div><div class="line">			startTime,<span class="comment">// 动画开始时间</span></div><div class="line">			currentTime,<span class="comment">// 动画当前时间</span></div><div class="line">			time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">		location = elem.offsetLeft;</div><div class="line">		distance = target - location;				</div><div class="line">		startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;  <span class="comment">// 转换毫秒值</span></div><div class="line">		<span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line">		<span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">			time = currentTime - startTime;</div><div class="line">			<span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line">			<span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line">			<span class="keyword">if</span>(time &gt;= duration)&#123;</div><div class="line">				<span class="comment">// console.log(time);</span></div><div class="line">				<span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">				tween = distance;</div><div class="line">				<span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line">				<span class="built_in">window</span>.clearInterval(timer);</div><div class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class="line">				<span class="comment">// 指定动画元素的位置</span></div><div class="line">				<span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">				tween = easing[easingName](<span class="literal">null</span>, time, location, target, duration);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			elem.style.left = tween + location + <span class="string">'px'</span>;</div><div class="line">		&#125;;</div><div class="line">		<span class="comment">// 启动定时器 开始动画</span></div><div class="line">		timer = <span class="built_in">window</span>.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">	&#125;;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		animate(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>), <span class="number">1000</span>, <span class="number">1500</span>, <span class="string">'easeInOutElastic'</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="多属性动画的实现"><a href="#多属性动画的实现" class="headerlink" title="多属性动画的实现"></a>多属性动画的实现</h2><p>到此我们就可以继续进行框架的封装了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取所有动画属性的起始值</span></div><div class="line"><span class="keyword">var</span> kv = &#123;</div><div class="line">	<span class="string">'left'</span>: <span class="string">'offsetLeft'</span>,</div><div class="line">	<span class="string">'top'</span>: <span class="string">'offsetTop'</span>,</div><div class="line">	<span class="string">'width'</span>: <span class="string">'offsetWidth'</span>,</div><div class="line">	<span class="string">'height'</span>: <span class="string">'offsetHeight'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocation</span>(<span class="params">elem, target</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> target) &#123;</div><div class="line">		obj[k] = elem[kv[k]];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDistance</span>(<span class="params">location, target</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> target) &#123;</div><div class="line">		obj[k] = <span class="built_in">parseFloat</span>(target[k]) - location[k];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTween</span>(<span class="params">time, location, target, duration, easingName</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> target) &#123;</div><div class="line">		obj[k] = easing[easingName](<span class="literal">null</span>, time, location[k], target[k], duration);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyles</span>(<span class="params">elem, location, tween</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> k;</div><div class="line">	<span class="keyword">for</span> (k <span class="keyword">in</span> location) &#123;</div><div class="line">		elem.style[k] = location[k] + tween[k] + <span class="string">'px'</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration, easingName</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">		tween, <span class="comment">// 单位时间间隔的位移&#123;left: 800, top:400&#125;</span></div><div class="line">		location, <span class="comment">// 起始位置&#123;left: 8,top: 8&#125;</span></div><div class="line">		distance, <span class="comment">// 动画总距离&#123;left: 992, top: 792&#125;</span></div><div class="line">		startTime, <span class="comment">// 动画开始时间</span></div><div class="line">		currentTime, <span class="comment">// 动画当前时间</span></div><div class="line">		time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">	location = getLocation(elem, target);</div><div class="line">	distance = getDistance(location, target);</div><div class="line">	startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>; <span class="comment">// 转换毫秒值</span></div><div class="line">	<span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line">	<span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">		time = currentTime - startTime;</div><div class="line">		<span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line">		<span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line">		<span class="keyword">if</span> (time &gt;= duration) &#123;</div><div class="line">			<span class="comment">// console.log(time);</span></div><div class="line">			<span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">			tween = distance;</div><div class="line">			<span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line">			global.clearInterval(timer);</div><div class="line">			<span class="comment">// 3 删除动画元素的timerId属性</span></div><div class="line">			<span class="keyword">delete</span> elem.timerId;</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class="line">			<span class="comment">// 指定动画元素的位置</span></div><div class="line">			<span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">			tween = getTween(time, location, target, duration, easingName);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 设置动画属性值</span></div><div class="line">		setStyles(elem, location, tween);</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 启动定时器 开始动画</span></div><div class="line">	timer = global.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">	<span class="comment">// 把定时器id存储在动画元素上（以自定义属性）</span></div><div class="line">	elem.timerId = timer;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="实现animate和stop方法"><a href="#实现animate和stop方法" class="headerlink" title="实现animate和stop方法"></a>实现animate和stop方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">itcast.fn.extend(&#123;</div><div class="line">	<span class="attr">animate</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target, duration, easingName</span>) </span>&#123;</div><div class="line">		easingName = easingName || <span class="string">'linear'</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span>(!(<span class="string">'timerId'</span> <span class="keyword">in</span> <span class="keyword">this</span>))&#123;</div><div class="line">				animate(<span class="keyword">this</span>, target, duration, easingName);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">stop</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span>(<span class="string">'timerId'</span> <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</div><div class="line">				global.clearInterval(<span class="keyword">this</span>.timerId);</div><div class="line">				<span class="keyword">delete</span> <span class="keyword">this</span>.timerId;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>动画模块的实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"itcast.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">		div &#123;</div><div class="line">			width: 100px;</div><div class="line">			height: 100px;</div><div class="line">			border: 5px solid yellowgreen;</div><div class="line">			position: relative;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			$(<span class="string">'#start'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				$(<span class="string">'#dv'</span>).animate(&#123;<span class="attr">left</span> : <span class="number">1000</span>&#125;, <span class="number">1500</span>);</div><div class="line">			&#125;);</div><div class="line">			$(<span class="string">'#stop'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				$(<span class="string">'#dv'</span>).stop();</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span>开始	动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"stop"</span>&gt;</span>停止	动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第六部分动画部分功能及实现,接第五部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="https://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="https://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="https://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part5之事件模块功能及实现</title>
    <link href="https://blog.ihoey.com/posts/javascript/2016-11-23-javascript-jquery-part5.html"/>
    <id>https://blog.ihoey.com/posts/javascript/2016-11-23-javascript-jquery-part5.html</id>
    <published>2016-11-23T02:27:16.000Z</published>
    <updated>2016-11-24T01:37:37.701Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第五部分事件部分功能及实现,接第四部分!</p>
<a id="more"></a>
<h2 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove 方法"></a>remove 方法</h2><ol>
<li>功能:将筛选出来的所有 <code>dom</code> 元素删除掉</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素;</li>
<li>获取当前 <code>dom</code> 元素的父节点,调用 <code>removeChild</code> 方法删除自己;</li>
<li>循环结束,返回 <code>this</code> .</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">remove: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="empty-方法"><a href="#empty-方法" class="headerlink" title="empty 方法"></a>empty 方法</h2><ol>
<li>功能:将筛选出来的所有 <code>dom</code> 元素,清空后代节点</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素;</li>
<li>直接给当前 <code>dom</code> 元素的 <code>innerHTML</code> 属性赋值为空字符串;</li>
<li>循环结束,返回 <code>this</code> ,实现链式编程.</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">empty: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.innerHTML = <span class="string">''</span>;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><b>以上接第四部分 <code>dom</code> 操作模块</b></p>
<hr>
<p><b>事件部分begin</b></p>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><ol>
<li><p>DOM 0方式</p>
<ul>
<li>通过 <code>dom</code> 元素的 <code>on + 事件名</code> 属性来绑定事件,并且赋值为 一个字符串;</li>
<li>上述字符串为 执行该事件的代码块(逻辑);</li>
<li>缺点:可读性以及可维护性不好.</li>
</ul>
</li>
<li><p>DOM 0方式的加强版</p>
<ul>
<li>通过 <code>dom</code> 元素的 <code>on + 事件名</code> 属性来绑定事件,并且赋值为 一个事件处理函数;</li>
<li>缺点:定义很多的全局函数,容易造成内存过大的损耗,依然没有解决 <code>js</code> 代码和 <code>html</code> 的耦合度关系;</li>
</ul>
</li>
<li><p>IE标准</p>
<ul>
<li>通过 <code>attachEvent</code> 来绑定事件;</li>
<li>语法: <code>dom.attachEvent(type, callback)</code>;</li>
<li>移除事件: <code>detachEvent(type, callback)</code>;<ul>
<li>注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>
</ul>
</li>
</ul>
</li>
<li><p>W3C标准</p>
<ul>
<li>通过 <code>addEventListener</code> 方法来给dom元素绑定事件;</li>
<li>语法: <code>dom.addEventListener(type, callback, useCapture默认值为false)</code>;</li>
<li>移除事件: <code>removEventListener(type, callback)</code>;<ul>
<li>注意:如果想要删除某个事件的处理函数,不能将该处理函数定义为匿名的</li>
</ul>
</li>
</ul>
</li>
<li><p>事件流</p>
<ul>
<li>概念: 用户在触发某一动作时,页面所做相关反映的过程</li>
<li>三个阶段:<ul>
<li>事件捕获阶段</li>
<li>处于事件源阶段</li>
<li>冒泡阶段</li>
</ul>
</li>
<li>事件流种类<ul>
<li>捕获型事件流: 事件处理函数是在事件的捕获阶段执行</li>
<li>冒泡型事件流: 事件处理函数是在事件的冒泡阶段执行</li>
</ul>
</li>
</ul>
</li>
<li><p>attachEvent 和 addEventListener 区别</p>
<ul>
<li>参数个数不同</li>
<li>事件类型传值不同<ul>
<li><code>IE</code> 标准需要加 <code>on</code> 前缀</li>
<li><code>W3C</code> 标准不加 <code>on</code> 前缀</li>
</ul>
</li>
<li>在绑定多个事件处理函数时，<code>IE</code> 在执行事件处理函数时,顺序不定(根据版本),而 <code>W3C</code>按照对垒结构来一次执行事件的处理函数</li>
<li>在事件处理函数内 <code>this</code> 指向不同<ul>
<li>IE: <code>window</code></li>
<li>W3C: 返回正在执行事件的处理函数的 <code>dom</code> 元素</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="addEvent-方法"><a href="#addEvent-方法" class="headerlink" title="addEvent 方法"></a>addEvent 方法</h2><ol>
<li>根据浏览器能力,提前返回事件绑定方法</li>
<li>如果浏览器符合 <code>W3C</code> 标准,使用 <code>addEventListener</code> 来绑定事件</li>
<li>否则就使用 <code>attachEvent</code> 来绑定事件</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//提前返回</span></div><div class="line"><span class="keyword">var</span> addEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 如果符合W3C标准，使用addEvnetListener绑定事件</span></div><div class="line">    <span class="keyword">if</span> (global.addEventListener) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, callback, useCapture</span>) </span>&#123;</div><div class="line">            elem.addEventListener(type, callback, useCapture || <span class="literal">false</span>);</div><div class="line">        &#125;;</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则就使用IE标准的 attachEvent绑定事件</span></div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, callback</span>) </span>&#123;</div><div class="line">            elem.attachEvent(<span class="string">'on'</span> + type, callback);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<h2 id="removeEvent-方法"><a href="#removeEvent-方法" class="headerlink" title="removeEvent 方法"></a>removeEvent 方法</h2><ol>
<li>根据浏览器能力,提前返回事件移除方法</li>
<li>如果浏览器符合 <code>W3C</code> 标准,使用 <code>removeEventListener</code> 来移除事件处理函数</li>
<li>否则就使用 <code>detachEvent</code> 来移除事件处理函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//提前返回</span></div><div class="line"><span class="keyword">var</span> removeEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (global.removeEventListener) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, callback</span>) </span>&#123;</div><div class="line">            elem.removeEventListener(type, callback);</div><div class="line">        &#125;;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, callback</span>) </span>&#123;</div><div class="line">            elem.detachEvent(<span class="string">'on'</span> + type, callback);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<h2 id="on-方法"><a href="#on-方法" class="headerlink" title="on 方法"></a>on 方法</h2><ol>
<li>功能:给 <code>itcast</code> 对象上的所有的 <code>dom</code> 元素绑定事件</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上所有 <code>dom</code> 元素</li>
<li>调用 <code>addEvent</code> 给当前遍历到的 <code>dom</code> 元素绑定事件</li>
<li>返回 <code>this</code> ，实现链式编程</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">on: <span class="function"><span class="keyword">function</span>(<span class="params">type, callback, capture</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        addEvent(<span class="keyword">this</span>, type, callback, capture);</div><div class="line">    &#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="off-方法"><a href="#off-方法" class="headerlink" title="off 方法"></a>off 方法</h2><ol>
<li>功能：移除 <code>itcast</code> 对象上所有 <code>dom</code> 元素的事件处理函数</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上所有 <code>dom</code> 元素</li>
<li>调用 <code>removeEvent</code> 给当前遍历到的 <code>dom</code> 元素移除相应事件的处理函数</li>
<li>返回 <code>this</code> ，实现链式编程</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">off: <span class="function"><span class="keyword">function</span>(<span class="params">type, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        removeEvent(<span class="keyword">this</span>, type, callback);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="click-方法"><a href="#click-方法" class="headerlink" title="click 方法"></a>click 方法</h2><ol>
<li>功能: 给 <code>itcast</code> 对象上的所有的 <code>dom</code> 元素绑定单击事件处理函数的</li>
<li>语法: <code>itcast对象.click(callback)</code>;</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>
<li>调用 <code>addEventListener</code> 分别传值即可</li>
<li><code>return this</code> 实现链式编程</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">click: <span class="function"><span class="keyword">function</span>(<span class="params">callback, capture</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        addEvent(<span class="keyword">this</span>, <span class="string">'click'</span>, callback, capture);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="快捷绑定事件方法"><a href="#快捷绑定事件方法" class="headerlink" title="快捷绑定事件方法"></a>快捷绑定事件方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">itcast.each([<span class="string">'click'</span>, <span class="string">'dblclick'</span>, <span class="string">'keypress'</span>, <span class="string">'keyup'</span>, <span class="string">'keydown'</span>, <span class="string">'mouseover'</span>, <span class="string">'mouseout'</span>,</div><div class="line"><span class="string">'mouseenter'</span>, <span class="string">'mouseleave'</span>, <span class="string">'mousemove'</span>, <span class="string">'mouseup'</span>, <span class="string">'mousedown'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">    itcast.fn[type] = <span class="function"><span class="keyword">function</span>(<span class="params">callback, capture</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.on(type, callback, capture);</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第五部分事件部分功能及实现,接第四部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="https://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="https://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="https://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part4之DOM操作模块功能及实现</title>
    <link href="https://blog.ihoey.com/posts/javascript/2016-11-21-javascript-jquery-part4.html"/>
    <id>https://blog.ihoey.com/posts/javascript/2016-11-21-javascript-jquery-part4.html</id>
    <published>2016-11-21T11:08:10.000Z</published>
    <updated>2016-11-24T01:37:29.096Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第四部分属性部分功能及实现,接第三部分!</p>
<a id="more"></a>
<h2 id="appendTo-方法"><a href="#appendTo-方法" class="headerlink" title="appendTo 方法"></a>appendTo 方法</h2><ol>
<li>功能:将结果集中的元素 追加到指定的 <code>dom</code> 元素上.</li>
<li>语法:<code>&lt;target对象&gt;.appendTo(target)</code></li>
<li>实现思路<ul>
<li>定义 <code>appendTo</code> 方法,声明一个形参 <code>target</code> .追加到目标 <code>dom</code> 元素<ul>
<li>选择器</li>
<li><code>dom</code> 元素</li>
<li><code>dom</code> 数组</li>
</ul>
</li>
<li>为了操作方便,将 <code>target</code> 类型统一为 <code>itcast</code> 对象,去 <code>itcast</code> 函数走一圈,出来就是 <code>itcast</code> 对象.</li>
<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素,再遍历 <code>target</code> 上的每一个 <code>dom</code> 元素</li>
<li>将 <code>this</code> 上的 <code>dom</code> 元素追加到 <code>target</code> 上</li>
<li>注意:<br>  在追加节点时,如果遍历的是第一个目标 <code>dom</code> 元素,不需要拷贝节点;否则要深拷贝节点,并将上述得到的节点储存到 <code>ret</code> 内</li>
<li>将 <code>ret</code> 数组转换成 <code>itcast</code> 对象,作为 <code>appendTo</code> 方法的返回值<ul>
<li>如果不这样做的话,就会在添加样式时,只有没拷贝的节点有样式</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">appendTo: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> node, </div><div class="line">		ret = [];</div><div class="line">	<span class="comment">// 统一target类型 为itcast对象（为了方便操作）</span></div><div class="line">	target = itcast(target);</div><div class="line">	<span class="comment">// 遍历this上的每一个dom元素</span></div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="comment">// 在遍历目标dom元素</span></div><div class="line">		target.each(<span class="function"><span class="keyword">function</span>(<span class="params">t, i</span>) </span>&#123;</div><div class="line">			<span class="comment">// 如果当前dom元素为 目标上的第一个.不拷贝节点</span></div><div class="line">			<span class="comment">// 否则拷贝节点</span></div><div class="line">			node = i === <span class="number">0</span> ? v : v.cloneNode(<span class="literal">true</span>);</div><div class="line">			<span class="comment">// 将被追加的节点,添加到ret内</span></div><div class="line">			ret.push(node);</div><div class="line">			<span class="comment">// 将节点追加到指定的目标dom元素上.</span></div><div class="line">			t.appendChild(node);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">// 将每一个添加的dom元素,转换成itcast对象返回,实现链式编程</span></div><div class="line">	<span class="comment">// 原因:在添加样式时,如果不这样做的话,只会给没克隆的节点添加样式.</span></div><div class="line">	<span class="keyword">return</span> itcast(ret);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="append-方法"><a href="#append-方法" class="headerlink" title="append 方法"></a>append 方法</h2><ol>
<li>语法: <code>&lt;itcast对象&gt;.append(source)</code> ;</li>
<li>功能: 将 <code>source</code> 上的所有 <code>dom</code> 元素,追加到 <code>itcast</code> 对象上</li>
<li>实现思路<ul>
<li>统一 <code>source</code> 类型,为 <code>itcast</code> 对象.</li>
<li><code>source.appendTo(this)</code></li>
<li><code>return this;</code></li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">append: <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">	<span class="comment">//统一source类型,为itcast对象</span></div><div class="line">	source = itcast(source);</div><div class="line">	source.appendTo(<span class="keyword">this</span>);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="prependTo-方法"><a href="#prependTo-方法" class="headerlink" title="prependTo 方法"></a>prependTo 方法</h2><ol>
<li>语法: <code>&lt;itcast对象&gt;.prependTo(target);</code></li>
<li>功能:将 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素,追加到 <code>target</code> 最前边 <code>insertBefore</code></li>
<li>实现思路<ul>
<li>统一 <code>target</code> 类型,为 <code>itcast</code> 对象</li>
<li>定义 <code>node</code> 变量,临时存储被追加的结点.定义 <code>ret</code> 数组,存储所有被追加的节点</li>
<li>先遍历 <code>target</code> 上的每一个 <code>dom</code> 元素</li>
<li>定义变量 <code>firstChild</code> ,临时存储当前目标 <code>dom</code> 元素的第一个子节点,再遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>
<li>判断当前遍历的 <code>dom</code> 是否为 <code>target</code> 上的第一个 <code>dom</code> 元素</li>
<li>如果为真,此时不需要克隆节点</li>
<li>否则,要深克隆节点</li>
<li>将上述的到的节点, <code>push</code> 到 <code>ret</code> 内</li>
<li>调用 <code>insertBefore</code> 方法追加节点,此时第一个参数为追加新的节点,第二个参数为 <code>firstChild</code> ,在 <code>firstChild</code> 之前追加新节点.</li>
<li>两层循环结束,操作完成</li>
<li>将 <code>ret</code> 转换成 <code>itcast</code> 对象,作为 <code>prependTo</code> 方法的返回值,实现链式编程.</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">prependTo: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">	<span class="comment">//定义变量node,临时存储被追加的节点</span></div><div class="line">	<span class="keyword">var</span> node,</div><div class="line">	<span class="comment">//定义变量firstChild,临时存储当前dom元素的第一个子节点</span></div><div class="line">		firstChild,</div><div class="line">		self = <span class="keyword">this</span>,</div><div class="line">		<span class="comment">//定义ret数组,存储所有被追加的节点</span></div><div class="line">		ret = [];</div><div class="line">   <span class="comment">//统一类型为itcast对象</span></div><div class="line">	target = itcast(target);</div><div class="line">	<span class="comment">//遍历target上的每一个dom元素</span></div><div class="line">	target.each(<span class="function"><span class="keyword">function</span>(<span class="params">elem, i</span>) </span>&#123;</div><div class="line">		<span class="comment">// 缓存当前目标dom元素的第一个子节点</span></div><div class="line">		firstChild = elem.firstChild;</div><div class="line">		<span class="comment">//遍历this上的每一个dom元素</span></div><div class="line">		self.each(<span class="function"><span class="keyword">function</span>(<span class="params">dom</span>) </span>&#123;</div><div class="line">			<span class="comment">//判断当前遍历的dom是否为target上的每一个dom元素</span></div><div class="line">			<span class="comment">//若为真,则不需要克隆节点,否则,要深克隆节点</span></div><div class="line">			<span class="comment">// 将得到的节点赋值给node</span></div><div class="line">			node = i === <span class="number">0</span> ? dom : dom.cloneNode(<span class="literal">true</span>);</div><div class="line">			<span class="comment">//将节点push到ret内</span></div><div class="line">			ret.push(node);</div><div class="line">			<span class="comment">//调用insertBefore方法,追加节点(追加的新节点,firstChild)</span></div><div class="line">			elem.insertBefore(node, firstChild);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">    <span class="comment">//将ret作为itcast对象,并且返回</span></div><div class="line">	<span class="keyword">return</span> itcast(ret);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="prepend-方法"><a href="#prepend-方法" class="headerlink" title="prepend 方法"></a>prepend 方法</h2><ol>
<li>语法: <code>&lt;itcast对象&gt;.prepend(source);</code></li>
<li>功能:把 <code>source</code> 上的所有的 <code>dom</code> 元素,添加到 <code>this</code> 上的最前边</li>
<li>实现思路: <ul>
<li>统一 <code>source</code> 类型,为 <code>itcast</code> 对象</li>
<li>通过 <code>source</code> 调用 <code>prependTo</code> 方法,将 <code>source</code> 上的所有 <code>dom</code> 添加到 <code>this</code> 上的最前边</li>
<li><code>return this</code> 实现链式编程</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">prepend: <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">	source = itcast(source);</div><div class="line">	source.prependTo(<span class="keyword">this</span>);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="next-方法"><a href="#next-方法" class="headerlink" title="next 方法"></a>next 方法</h2><ol>
<li>功能:获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的下一个兄弟元素 <code>(nextSiling)</code></li>
<li>语法: <code>&lt;itcast对象&gt;.next();</code> 返回值类型, <code>itcast</code> 对象</li>
<li>实现思路<ul>
<li>定义 <code>ret</code> 数组，存储所有 <code>dom</code> 的下一个兄弟元素</li>
<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>
<li>遍历当前 <code>dom</code> 元素下面的所有兄弟，如果类型为 元素，将此元素存储 <code>ret</code> 内，结束循环。</li>
<li>两层循环结束，将 <code>ret</code> 转换成 <code>itcast</code> 对象，作为 <code>next</code> 方法的返回值。</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 存储所用dom的下一个兄弟元素</span></div><div class="line">	<span class="keyword">var</span> ret = [];</div><div class="line">	<span class="comment">// 遍历this上的所有dom元素</span></div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// 在遍历当前dom元素下面所有的兄弟元素</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> node = <span class="keyword">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class="line">			<span class="comment">// 如果当前兄弟节点,为元素节点</span></div><div class="line">			<span class="comment">// 即为结果,将其添加ret内,并结束循环</span></div><div class="line">			<span class="keyword">if</span>(node.nodeType === <span class="number">1</span>)&#123;</div><div class="line">				ret.push(node);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">// 将ret转换成itcast对象,返回</span></div><div class="line">	<span class="keyword">return</span> itcast(ret);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="nextAll"><a href="#nextAll" class="headerlink" title="nextAll"></a>nextAll</h2><ol>
<li>功能:获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素下面的所有兄弟元素 <code>(nextSiling)</code></li>
<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code> 返回值类型, <code>itcast</code> 对象</li>
<li>实现思路<ul>
<li>定义 <code>ret</code> 数组，存储所有 <code>dom</code> 的下一个兄弟元素</li>
<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>
<li>遍历当前 <code>dom</code> 元素下面的所有兄弟，如果类型为 元素，将此元素存储 <code>ret</code> 内，结束循环。</li>
<li>两层循环结束，将 <code>ret</code> 转换成 <code>itcast</code> 对象，作为 <code>nextAll</code> 方法的返回值。</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">nextAll: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> ret = [],</div><div class="line">		node;</div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">for</span>(node = <span class="keyword">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class="line">			<span class="keyword">if</span>(node.nodeType === <span class="number">1</span>) ret.push(node);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> itcast(itcast.unique(ret));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="before-方法"><a href="#before-方法" class="headerlink" title="before 方法"></a>before 方法</h2><ol>
<li>功能:</li>
<li>语法: <code>&lt;itcast对象&gt;.before(source)</code></li>
<li>实现思路<ul>
<li>统一 <code>source</code> 类型为 <code>itcast</code> 对象</li>
<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>
<li>再遍历 <code>source</code> 上的每一个 <code>dom</code> 元素</li>
<li>判断当前遍历 <code>this</code>的 <code>dom</code> 元素的索引是否为0</li>
<li>如果是 <code>0</code> ,不需要拷贝节点</li>
<li>否则要深拷贝节点</li>
<li>先拿到当前遍历 <code>this</code> 的 <code>dom</code> 元素的父节点,调用 <code>insertBefore</code> 方法在其前面添加上面的到的新节点</li>
<li>两层循环完毕,操作完成</li>
<li><code>return this</code> 实现链式编程</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">before: <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> node;</div><div class="line">	source = itcast(source);</div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">dom, i</span>) </span>&#123;</div><div class="line">		source.each(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</div><div class="line">			node = i === <span class="number">0</span> ? elem : elem.cloneNode(<span class="literal">true</span>);</div><div class="line">			<span class="comment">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class="line">			dom.parentNode.insertBefore(node, dom);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="after-方法"><a href="#after-方法" class="headerlink" title="after 方法"></a>after 方法</h2><ol>
<li>功能:</li>
<li>语法: <code>&lt;itcast对象&gt;.after(source)</code></li>
<li>实现思路<ul>
<li>定义 <code>nextSiling</code> 变量,存储 <code>dom</code> 元素的下一个兄弟节点</li>
<li>统一 <code>source</code> 类型为 <code>itcast</code> 对象</li>
<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>
<li>再遍历<code>source</code> 上的每一个 <code>dom</code> 元素</li>
<li>判断当前遍历 <code>this</code> 的 <code>dom</code> 元素的索引是否为 <code>0</code></li>
<li>如果是 <code>0</code> ,不需要拷贝节点</li>
<li>否则要深拷贝节点</li>
<li>先拿到当前遍历 <code>this</code> 的 <code>dom</code> 元素的父节点,调用 <code>insertBefore</code> 方法在其前面添加上面的到的新节点</li>
<li>两层循环完毕,操作完成</li>
<li><code>return this</code> 实现链式编程</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">after: <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> node,</div><div class="line">		nextSibling;</div><div class="line">	source = itcast(source);</div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">dom, i</span>) </span>&#123;</div><div class="line">		nextSibling = dom.nextSibling;</div><div class="line">		source.each(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</div><div class="line">			node = i === <span class="number">0</span> ? elem : elem.cloneNode(<span class="literal">true</span>);</div><div class="line">			<span class="comment">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class="line">			dom.parentNode.insertBefore(node, nextSibling);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="unique-方法"><a href="#unique-方法" class="headerlink" title="unique 方法"></a>unique 方法</h2><ol>
<li>功能:实现数组元素去重</li>
<li>语法: <code>var newRet = itcast.unique(arr);</code></li>
<li>实现思路<ul>
<li>定义空数组对象 <code>ret</code> .存储去重后的元素</li>
<li>遍历原数组,如果当前遍历到的元素在 <code>ret</code> 中不存在,就添加 <code>ret</code> 内</li>
<li>循环结束, <code>ret</code> 存储的就是去重后的元素</li>
<li>返回 <code>ret</code></li>
</ul>
</li>
<li><a href="#code">兼容IE8 indexof 方法</a><ul>
<li>首先判断当前浏览器是否支持 <code>indexof</code> 方法</li>
<li>如果不支持就给数组对象的原型添加 <code>indexof</code> 方法</li>
<li>遍历 <code>this</code> 上的所有元素</li>
<li>如果遍历到的当前元素和指定参数值相同就直接返回其索引值.结束循环</li>
<li>如果在整个上述循环都没有返回值,那么表示不存在指定参数值就返回 <code>-1</code> .</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">unique: <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">	<span class="comment">// 存储去重后的结果</span></div><div class="line">	<span class="keyword">var</span> ret = [];</div><div class="line">	<span class="comment">// 遍历原数组arr</span></div><div class="line">	itcast.each(arr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// 判断ret是否存在当前遍历到的元素</span></div><div class="line">		<span class="comment">// 如果不存在将其添加到ret中</span></div><div class="line">		<span class="keyword">if</span>(ret.indexOf(<span class="keyword">this</span>) === <span class="number">-1</span>) ret.push(<span class="keyword">this</span>);</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">// 将ret返回</span></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p id="code">兼容 <code>IE8</code> <code>indexof</code> 方法</p>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 兼容数组对象的indexOf方法</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 如果浏览器不支持indexOf方法</span></div><div class="line">	<span class="comment">// 那么就给数组对象的原型添加indexOf方法</span></div><div class="line">	<span class="keyword">if</span>(!<span class="built_in">Array</span>.prototype.indexOf)&#123;</div><div class="line">		<span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">			<span class="comment">// 遍历this</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,l = <span class="keyword">this</span>.length; i &lt; l; i++)&#123;</div><div class="line">				<span class="comment">// 如果遍历到的当前元素和val相同，返回其索引值</span></div><div class="line">				<span class="keyword">if</span>(<span class="keyword">this</span>[i] == val) <span class="keyword">return</span> i;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 那么表示不存在指定参数值就返回 -1 </span></div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h2 id="prev-方法"><a href="#prev-方法" class="headerlink" title="prev 方法"></a>prev 方法</h2><ol>
<li>功能: 获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的前一个兄弟元素 <code>(previousSibling)</code></li>
<li>语法: <code>&lt;itcast对象&gt;.prev();</code> 返回值类型: <code>itcast对象</code></li>
<li>实现思路<ul>
<li>定义 <code>ret</code> 数组,存储所有 <code>dom</code> 的前一个兄弟元素</li>
<li>遍历 <code>this</code> 上的所有 <code>dom</code> 元素</li>
<li>遍历当前 <code>dom</code> 元素之前的所有兄弟,如果类型为元素,将此元素存储 <code>ret</code> 内,结束循环</li>
<li>两层循环结束,将 <code>ret</code> 转换成 <code>itcast</code> 对象,作为 <code>next</code> 方法的返回值</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">prev:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//存储所有dom的前一个兄弟元素</span></div><div class="line">	<span class="keyword">var</span> ret=[];</div><div class="line">	<span class="comment">//遍历this上的所有dom元素</span></div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">//在遍历当前dom元素之前所有的兄弟元素</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> node=<span class="keyword">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class="line">			<span class="comment">//如果当前兄弟节点为元素节点</span></div><div class="line">			<span class="comment">//即为结果,将其添加到ret内,并结束循环</span></div><div class="line">			<span class="keyword">if</span>(node.nodeType===<span class="number">1</span>)&#123;</div><div class="line">				ret.push(node);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">//将ret转换成itcast对象,返回</span></div><div class="line">	<span class="keyword">return</span> itcast(ret);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="prevAll-方法"><a href="#prevAll-方法" class="headerlink" title="prevAll 方法"></a>prevAll 方法</h2><ol>
<li>功能: 获取 <code>itcast</code> 对象上所有 <code>dom</code> 元素的之前的所有兄弟元素 <code>(nextSibling)</code></li>
<li>语法: <code>&lt;itcast对象&gt;.nextAll();</code> 返回值类型: <code>itcast对象</code></li>
<li>实现思路<ul>
<li>定义 <code>ret数组</code> ,存储所有 <code>dom</code> 之前的所有兄弟元素</li>
<li>遍历 <code>this</code> 上的所有 <code>dom元素</code></li>
<li>遍历当前 <code>dom</code> 元素之前的所有兄弟,如果类型为元素,将此元素存储 <code>ret</code> 内,结束循环</li>
<li>两层循环结束,将 <code>ret</code> 转换成 <code>itcast对象</code> ,作为 <code>nextAll</code> 方法的返回值</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">prevAll:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> ret=[];</div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> node=<span class="keyword">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class="line">			<span class="keyword">if</span>(node.nodeType===<span class="number">1</span>) ret.push(node);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> itcast(itcast.unique(ret));</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第四部分属性部分功能及实现,接第三部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="https://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="https://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="https://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part3之属性模块功能及实现</title>
    <link href="https://blog.ihoey.com/posts/javascript/2016-11-20-javascript-jquery-part3.html"/>
    <id>https://blog.ihoey.com/posts/javascript/2016-11-20-javascript-jquery-part3.html</id>
    <published>2016-11-20T03:51:28.000Z</published>
    <updated>2016-11-24T01:36:37.176Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第三部分属性模块功能及实现,接第二部分!</p>
<a id="more"></a>
<h2 id="知识点复习"><a href="#知识点复习" class="headerlink" title="知识点复习"></a>知识点复习</h2><ol>
<li><p><code>css</code> 方法</p>
<ul>
<li>如果只传入一个参数<ul>
<li>如果参数类型为对象,表示同时设置多个样式</li>
<li>如果参数类型为字符串,表示获取指定的样式值</li>
</ul>
</li>
<li>如果传入的两个参数,表示设置单个样式值</li>
</ul>
</li>
<li><p><code>itcast.each</code> 方法: 遍历数组或伪数组</p>
<ul>
<li>第一个参数,指定遍历的对象</li>
<li>第二个参数,指定的回调函数,对遍历到的每一个元素,进行相关处理</li>
</ul>
</li>
</ol>
<h2 id="attr方法-setAttribute-和-getAttribute"><a href="#attr方法-setAttribute-和-getAttribute" class="headerlink" title="attr方法( setAttribute 和 getAttribute )"></a>attr方法( setAttribute 和 getAttribute )</h2><ol>
<li>功能: 获取(设置)属性节点值</li>
<li>实现思路<ul>
<li>给原型添加 <code>attr</code> 方法,定义两个参数:属性节点名字 <code>name</code> 以及属性节点值</li>
<li>如果只传入一个参数<ul>
<li>如果参数类型为对象,表示设置多个节点值</li>
<li>否则获取指定的属性节点值(默认获取第一个 <code>dom</code> 元素的属性节点值)</li>
</ul>
</li>
<li>如果传入两个参数,表示设置单个属性节点值.</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">attr: <span class="function"><span class="keyword">function</span>(<span class="params">name,value</span>)</span>&#123;</div><div class="line">	<span class="comment">//只传入一个参数</span></div><div class="line">	<span class="keyword">if</span>(value == <span class="literal">undefined</span>)&#123;</div><div class="line">		<span class="comment">//如果类型为对象,表示设置多个属性</span></div><div class="line">		<span class="keyword">if</span>(<span class="keyword">typeof</span> name ===<span class="string">'object'</span>)&#123;</div><div class="line">			<span class="comment">//遍历itcast上的每一个dom元素,并设置属性节点值</span></div><div class="line">			<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">				<span class="comment">//枚举name对象上的每一个属性</span></div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> name)&#123;</div><div class="line">					v.setAttribute(k, name[k]);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">//如果类型为字符串,获取属性节点值</span></div><div class="line">			<span class="keyword">if</span>(!<span class="keyword">this</span>[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>].getAttribute(name);</div><div class="line">		&#125;</div><div class="line">	&#125;<span class="keyword">else</span> &#123; <span class="comment">//传入两个参数,表示设置单个属性节点值</span></div><div class="line">		<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">			v.setAttribute(name, value)</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="html方法"><a href="#html方法" class="headerlink" title="html方法"></a>html方法</h2><ol>
<li>功能: <ul>
<li>不传参数,表示获取指定 <code>dom</code> 元素的 <code>innerHTML</code> 属性值</li>
<li>否则,表示设置指定 <code>dom</code> 元素的 <code>innerHTML</code> 属性</li>
</ul>
</li>
<li>实行思路<ul>
<li>判断是否传入参数</li>
<li>如果没穿,获取 <code>itcast</code> 对象上的第一个 <code>dom</code> 元素的 <code>innerHTML</code> 属性值</li>
<li>否则,给 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素设置 <code>innerHTML</code> 属性</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">html: <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">	<span class="comment">//如果没有给html传值,表示获取</span></div><div class="line">	<span class="keyword">if</span>(html==<span class="literal">undefined</span>)&#123;</div><div class="line">		<span class="comment">//如果icast没有任何dom元素,就返回一个期望值,即空字符串</span></div><div class="line">		<span class="comment">//如果有的话,就返回一个dom元素的innerHTML属性值</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>] ? <span class="keyword">this</span>[<span class="number">0</span>].innerHTML : <span class="string">''</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;<span class="comment">//如果给html船只,给itcast对象上的每一个dom元素设置innerHTML属性</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">			v.innerHTML = html;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="text方法"><a href="#text方法" class="headerlink" title="text方法"></a>text方法</h2><ol>
<li>功能<ul>
<li>不传值,表示获取文本节点(返回的是后代中所有文本节点值)</li>
<li>传值,设置指定 <code>dom</code> 元素文本值</li>
</ul>
</li>
<li>实现思路<ul>
<li>如果不传值,优先考虑浏览器是否支持 <code>textContent</code> 属性<ul>
<li>如果支持,就使用 <code>textContent</code> 返回结果集中每一个 <code>dom</code> 元素的文本节点值</li>
<li>否则,就是用 <code>innerText</code> 返回结果集中每一个 <code>dom</code> 元素的文本节点值</li>
</ul>
</li>
<li>如果传值,给 <code>itcast</code> 对象上的每一个 <code>dom</code> 元素设置文本节点值.<ul>
<li>如果支持 <code>textContent</code> 属性,就是用该属性设置文本</li>
<li>否则,就是用 <code>innerText</code> 来设置文本.</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">text: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">	<span class="comment">// 如果没有传值，表示获取文本值</span></div><div class="line">	<span class="keyword">if</span>(text == <span class="literal">undefined</span>)&#123;</div><div class="line">		<span class="comment">// 定义结果变量，存储每个dom元素的文本</span></div><div class="line">		<span class="keyword">var</span> ret = <span class="string">''</span>;</div><div class="line">		<span class="comment">// 遍历每一个dom元素</span></div><div class="line">		<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">			<span class="comment">// 如果支持textContent，使用其获取文本，累加到ret上</span></div><div class="line">			ret += <span class="string">'textContent'</span> <span class="keyword">in</span> <span class="built_in">document</span> ?</div><div class="line">				v.textContent :</div><div class="line">				v.innerText.replace(<span class="regexp">/\r\n/g</span>, <span class="string">''</span>);</div><div class="line">		&#125;);</div><div class="line">		<span class="comment">// 返回所有文本</span></div><div class="line">		<span class="keyword">return</span> ret;</div><div class="line">	&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果传值了，表示为每个dom设置文本</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">			<span class="comment">// 如果支持textContent，就使用该属性为当前dom元素设置文本节点值</span></div><div class="line">			<span class="comment">// 否则，使用innerText设置文本节点值。</span></div><div class="line">			<span class="keyword">if</span>(<span class="string">'textContent'</span> <span class="keyword">in</span> <span class="built_in">document</span>)&#123;</div><div class="line">				v.textContent = text;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				v.innerText = text;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="val方法"><a href="#val方法" class="headerlink" title="val方法"></a>val方法</h2><ol>
<li>功能( <code>value</code> 属性)<ul>
<li>如果不传值,表示获取输入框的文本值</li>
<li>如果传值, 表示给输入框 设置文本</li>
</ul>
</li>
<li>实现思路<ul>
<li>如果不传值，表示获取输入框的文本值（获取第一个文本框值）</li>
<li>如果传值，表示给输入框 设置文本<ul>
<li>遍历每一个输入框，同时给其设置文本<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">val: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">	<span class="comment">// 如果没有传值，表示获取第一个dom元素的value属性值</span></div><div class="line">	<span class="comment">// 如果itcast对象上没有任何dom元素，返回空字符串</span></div><div class="line">	<span class="keyword">if</span>(value == <span class="literal">undefined</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>] ? <span class="keyword">this</span>[<span class="number">0</span>].value : <span class="string">''</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;<span class="comment">// 否则，为每一个dom元素设置value属性值</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">this</span>.value = value;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="prop方法"><a href="#prop方法" class="headerlink" title="prop方法"></a>prop方法</h2><ol>
<li>功能:和 <code>attr</code> 相似<ul>
<li>注意: 有些属性名称,比如 <code>for</code> , <code>class</code> 是保留字或关键字不能作为对象属性名称,所以要创建一个对象,需要转换这类的属性</li>
<li>定义 <code>propFix</code> 对象,存储上述属性到这属性名称的映射关系</li>
<li>如果只传入一个参数<ul>
<li>类型为对象,同时给  <code>dom</code> 对象添加属性</li>
<li>类型为字符串,获取 <code>itcast</code> 对象上的第一个 <code>dom</code> 对象的指定属性值</li>
</ul>
</li>
<li>如果传入的参数,给所有的 <code>dom</code> 对象添加单个属性</li>
<li>细节: 无论是设置还是获取属性,在操作之前,先要从 <code>propFix</code> 对象拿到映射后的属性名称<ul>
<li>如果拿到的心的属性名称不为 <code>undefined</code> ,就用映射后的属性名来操作 <code>dom</code> 对象</li>
<li>否则,那么久使用旧的属性名称来操作 <code>dom</code> 对象.</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 属性模块</span></div><div class="line">itcast.propFix = &#123;</div><div class="line">	<span class="string">'for'</span>: <span class="string">'htmlFor'</span>,</div><div class="line">	<span class="string">'class'</span>: <span class="string">'className'</span></div><div class="line">&#125;;</div><div class="line">itcast.each([</div><div class="line">	<span class="string">"tabIndex"</span>,</div><div class="line">	<span class="string">"readOnly"</span>,</div><div class="line">	<span class="string">"maxLength"</span>,</div><div class="line">	<span class="string">"cellSpacing"</span>,</div><div class="line">	<span class="string">"cellPadding"</span>,</div><div class="line">	<span class="string">"rowSpan"</span>,</div><div class="line">	<span class="string">"colSpan"</span>,</div><div class="line">	<span class="string">"useMap"</span>,</div><div class="line">	<span class="string">"frameBorder"</span>,</div><div class="line">	<span class="string">"contentEditable"</span></div><div class="line">], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	itcast.propFix[<span class="keyword">this</span>.toLowerCase()] = <span class="keyword">this</span>;</div><div class="line">&#125;);</div><div class="line">prop: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</div><div class="line">	<span class="comment">// 如果没有给value传值</span></div><div class="line">	<span class="keyword">var</span> prop;</div><div class="line">	<span class="keyword">if</span> (value == <span class="literal">undefined</span>) &#123;</div><div class="line">		<span class="comment">// 并且name的类型为 对象，表示给每一个dom对象添加多个属性</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'object'</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> name) &#123;</div><div class="line">					<span class="comment">// 首先从propFix对象上获取属性名字</span></div><div class="line">					<span class="comment">// 如果有，就使用新的属性名字</span></div><div class="line">					<span class="comment">// 如果没有，就使用原来的属性名字</span></div><div class="line">					prop = itcast.propFix[k] ? itcast.propFix[k] : k;</div><div class="line">					<span class="keyword">this</span>[prop] = name[k];</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果name的类型 为字符串，表示获取第一个dom对象的指定属性值</span></div><div class="line">			prop = itcast.propFix[name] ? itcast.propFix[name]: name;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.length &gt; <span class="number">0</span> ? <span class="keyword">this</span>[<span class="number">0</span>][prop] : <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果传入两个参数，表示给每一个dom对象添加单个属性</span></div><div class="line">		<span class="comment">// 遍历itcast上的每一个dom对象，添加属性</span></div><div class="line">		prop = itcast.propFix[name] ? itcast.propFix[name]: name;</div><div class="line">		<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">this</span>[prop] = value;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 实现链式编程</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第三部分属性模块功能及实现,接第二部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="https://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="https://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="https://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part2之css部分功能及实现</title>
    <link href="https://blog.ihoey.com/posts/javascript/2016-11-19-javascript-jquery-part2.html"/>
    <id>https://blog.ihoey.com/posts/javascript/2016-11-19-javascript-jquery-part2.html</id>
    <published>2016-11-19T11:02:01.000Z</published>
    <updated>2016-11-24T01:36:18.943Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第二部分css部分功能及实现,接第一部分!</p>
<a id="more"></a>
<h2 id="hasClass方法"><a href="#hasClass方法" class="headerlink" title="hasClass方法"></a>hasClass方法</h2><ol>
<li>功能:如果结果集里只要有一个 <code>dom</code> 元素,具有指定的样式类,就返回 <code>true</code> </li>
<li><p>实现思路</p>
<ul>
<li>定义结果变量 <code>ret</code> ,默认值为 <code>false</code></li>
<li>遍历结果集的每一个 <code>dom</code> 元素,如果当前 <code>dom</code> 元素具有指定的样式类,将 <code>ret=true</code> 结束循环</li>
<li><p>返回 <code>ret</code> .</p>
</li>
<li><p>如何判断 <code>dom</code> 元素具有指定的样式类?<br>在 <code>dom</code> 元素所有的样式类的 <code>首位 + 空格</code> ;在用户指定的样式类 <code>首位 + 空格</code> 调用indexOf方法,如果返回值 = -1,表示没有;否则就具有指定样式类</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">hasClass: <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</div><div class="line">	<span class="comment">// 默认结果false</span></div><div class="line">	<span class="keyword">var</span> ret = <span class="literal">false</span>;</div><div class="line">	<span class="comment">// 遍历this上的每一个dom元素					</span></div><div class="line">	<span class="comment">// for(var i = 0, l = this.length;i &lt; l;i++)&#123;</span></div><div class="line">	<span class="comment">// 	// 如果当前dom元素具有指定的样式类</span></div><div class="line">	<span class="comment">// 	// 返回值为true，结束循环</span></div><div class="line">	<span class="comment">// if((' ' + this[i].className + ' ')</span></div><div class="line">	<span class="comment">// 	.indexOf(' ' + className + ' ') !== -1) &#123;</span></div><div class="line">	<span class="comment">// 	ret = true;</span></div><div class="line">	<span class="comment">// 	break;</span></div><div class="line">	<span class="comment">// &#125;</span></div><div class="line">	<span class="comment">// &#125;</span></div><div class="line">	<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ((<span class="string">' '</span> + v.className + <span class="string">' '</span>)</div><div class="line">			.indexOf(<span class="string">' '</span> + className + <span class="string">' '</span>) !== <span class="number">-1</span>) &#123;</div><div class="line">			ret = <span class="literal">true</span>;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="each方法"><a href="#each方法" class="headerlink" title="$.each方法"></a>$.each方法</h2><ol>
<li>功能:实现遍历数组或者伪数组,通过第二个参数(回调函数)来处理遍历到的每一个元素<br> 在回调函数中, <code>this</code> 是指向当前遍历的元素.</li>
<li>语法: <code>$.each([数组/伪数组], callback)</code> ;</li>
<li>实现思路<ul>
<li>声明 <code>each</code> 函数,定义两个形参,第一个 遍历的(伪)数组;第二: 回调函数</li>
<li>使用 <code>for</code> 循环,遍历(伪)数组,再循环体内部执行回调函数. 在执行时,给回调函数传实参</li>
<li>实现回调函数内部 <code>this</code> 指向,当前遍历到的元素</li>
<li>通过回调函数的返回值,判断是否结束循环. 规定:当返回值为 <code>false</code> ,结束循环<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">each: <span class="function"><span class="keyword">function</span>(<span class="params">obj, callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">		l = obj.length;</div><div class="line">	<span class="comment">// 遍历数组元素</span></div><div class="line">	<span class="keyword">for</span> (; i &lt; l; i++) &#123;</div><div class="line">		<span class="comment">// 执行用户指定回调函数</span></div><div class="line">		<span class="comment">// 将当前遍历到的元素以及索引传入回调函数</span></div><div class="line">		<span class="keyword">if</span> (callback.call(obj[i], obj[i], i) === <span class="literal">false</span>) <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="itcast中链式编程的实现"><a href="#itcast中链式编程的实现" class="headerlink" title="itcast中链式编程的实现"></a>itcast中链式编程的实现</h2><ol>
<li>返回当前方法的调用者: <code>return this;</code></li>
</ol>
<h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><ol>
<li>功能:根据参数 <code>index</code> ,获取相应 <code>dom</code> 元素</li>
<li>实现思路<ul>
<li>将字符串类型转换成数字</li>
<li><code>index &lt; 0 ==&gt; index +length</code></li>
<li><code>return this[index]</code></li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">	index = index - <span class="number">0</span>;</div><div class="line">	index = index &lt; <span class="number">0</span> ? index + <span class="keyword">this</span>.length : index;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>[index];</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="eq方法"><a href="#eq方法" class="headerlink" title="eq方法"></a>eq方法</h2><ol>
<li>功能:根据参数 <code>index</code> ,获取相应 <code>dom</code> 元素,转换成 <code>itcast</code> 对象,并且返回</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eq: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> itcast(<span class="keyword">this</span>.get(index));</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="first方法"><a href="#first方法" class="headerlink" title="first方法"></a>first方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">first: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.eq(<span class="number">0</span>);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="last方法"><a href="#last方法" class="headerlink" title="last方法"></a>last方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">last: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.eq(<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="css方法"><a href="#css方法" class="headerlink" title="css方法"></a>css方法</h2><ol>
<li>功能:<ul>
<li>获取:如果只传一个参数并且类型不为对象,获取相应的样式属性值</li>
<li>设置:a,如果只传一个参数并且类型为对象,设置多个样式值; b,传入两个参数,设置单个样式.</li>
</ul>
</li>
<li>实现思路<ul>
<li>给 <code>itcast</code> 原型添加 <code>css</code> 方法,定义两个参数.</li>
<li>如果只传入一个参数<ul>
<li>类型为对象的话,同时设置多个样式属性</li>
<li>类型不为对象,获取指定的样式值</li>
</ul>
</li>
<li>如果只传入两个参数,设置单个样式值<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">css: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</div><div class="line">	<span class="comment">// 只传入一个参数</span></div><div class="line">	<span class="keyword">if</span> (value == <span class="literal">undefined</span>) &#123;</div><div class="line">		<span class="comment">// 如果name类型为对象，同时设置多个样式</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'object'</span>) &#123;</div><div class="line">			<span class="comment">// 遍历this上的每一个dom元素</span></div><div class="line">			<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">				<span class="comment">// 枚举name上的每个属性值</span></div><div class="line">				<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> name) &#123;</div><div class="line">					<span class="comment">// 给当前遍历到的dom元素设置样式</span></div><div class="line">					v.style[k] = name[k];</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果name不为对象</span></div><div class="line">			<span class="comment">// 默认获取this上的第一个dom元素的指定样式值</span></div><div class="line">			<span class="comment">// 如果浏览器支持getComputedStyle，使用该方法获取指定样式值</span></div><div class="line">			<span class="comment">// if(window.getComputedStyle)&#123;</span></div><div class="line">			<span class="comment">// 	return window.getComputedStyle(this[0])[name];</span></div><div class="line">			<span class="comment">// &#125; else &#123; //否则使用currentStyle获取</span></div><div class="line">			<span class="comment">// 	return this[0].currentStyle[name];</span></div><div class="line">			<span class="comment">// &#125;</span></div><div class="line">			<span class="comment">// 如果this上没有任何dom元素， 就返回null</span></div><div class="line">			<span class="keyword">if</span> (!<span class="keyword">this</span>[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">			<span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle ?</div><div class="line">				<span class="built_in">window</span>.getComputedStyle(<span class="keyword">this</span>[<span class="number">0</span>])[name] :</div><div class="line">				<span class="keyword">this</span>[<span class="number">0</span>].currentStyle[name];</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果传入两个参数</span></div><div class="line">		<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">			v.style[name] = value;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 实现链式编程</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="addClass方法"><a href="#addClass方法" class="headerlink" title="addClass方法"></a>addClass方法</h2><ol>
<li>功能:给结果集中的每一个 <code>dom</code> 元素添加指定样式类.</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>
<li>首先判断当前遍历到的 <code>dom</code> 元素是否含有样式类.</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">addClass: <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</div><div class="line">	<span class="comment">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="comment">// 判断当前dom元素v是否具有className</span></div><div class="line">		<span class="comment">// 如果不具有，给其添加指定的样式类</span></div><div class="line">		<span class="keyword">if</span>(!itcast(v).hasClass(className))&#123;</div><div class="line">			v.className += <span class="string">' '</span> + className;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="removeClass方法"><a href="#removeClass方法" class="headerlink" title="removeClass方法"></a>removeClass方法</h2><ol>
<li>功能:删除结果集中的每一个 <code>dom</code> 元素的指定样式类.</li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>
<li><code>(&#39; &#39; + v.className + &#39; &#39;).replace(&#39; &#39; + className + &#39; &#39;,&#39; &#39;);</code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">removeClass:<span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</div><div class="line">	<span class="comment">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="comment">// 删除当前dom元素的样式类className</span></div><div class="line">		v.className = (<span class="string">' '</span> + v.className + <span class="string">' '</span>).</div><div class="line">			replace(<span class="string">' '</span> + className + <span class="string">' '</span>, <span class="string">' '</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="toggleClass方法"><a href="#toggleClass方法" class="headerlink" title="toggleClass方法"></a>toggleClass方法</h2><ol>
<li>功能: 切换指定的样式类,如果有,就删除,没有就添加     </li>
<li>实现思路<ul>
<li>遍历 <code>this</code> 上的每一个 <code>dom</code> 元素</li>
<li>判断当前遍历到的 <code>dom</code> 元素是否含有指定的样式类</li>
<li>如果有,就删除</li>
<li>如果没有,就添加<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">toggleClass: <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</div><div class="line">	<span class="comment">// 遍历this上的每一个dom元素，并实现链式编程</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="comment">// 将当前遍历到的元素转换成itcast对象</span></div><div class="line">		<span class="keyword">var</span> $v = itcast(v);</div><div class="line">		<span class="comment">// 如果具有指定的样式类，就删除该样式类</span></div><div class="line">		<span class="keyword">if</span>($v.hasClass(className))&#123;					</div><div class="line">			$v.removeClass(className);</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果没有指定的样式类，就添加该样式类</span></div><div class="line">			$v.addClass(className);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第二部分css部分功能及实现,接第一部分!&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="https://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="https://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="https://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JQuery分析及实现part1框架结构</title>
    <link href="https://blog.ihoey.com/posts/javascript/2016-11-18-javascript-jquery-part1.html"/>
    <id>https://blog.ihoey.com/posts/javascript/2016-11-18-javascript-jquery-part1.html</id>
    <published>2016-11-18T10:40:35.000Z</published>
    <updated>2016-12-26T11:38:22.477Z</updated>
    
    <content type="html"><![CDATA[<p>JQuery模块分析及其实现第一部分!</p>
<p><img src="https://oisha19l0.qnssl.com/20161119.png" width="100%"></p>
<a id="more"></a>
<h2 id="案例：获取指定DOM下所有子元素"><a href="#案例：获取指定DOM下所有子元素" class="headerlink" title="案例：获取指定DOM下所有子元素"></a>案例：获取指定DOM下所有子元素</h2><ol>
<li>在框架内部，遍历子节点，应该使用 <code>firstChild</code> 和 <code>nextSibling</code> 两种方式实现,代码如下。<br>获取 <code>id</code> 为 <code>dv</code> 的元素下所有的子元素 <code>nodeType：1 - 12 (1 2 3 8 9 11 --documentFrament)</code> .</li>
</ol>
<ul>
<li>第一种方式: <code>childNodes</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实现思路：</span></div><div class="line"><span class="comment">// 通过childNodes获取到所有的子节点；</span></div><div class="line"><span class="comment">// 将上述所有的子节点中，元素节点获取出来。</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * [getChildren 获取子元素]</div><div class="line"> * @param  &#123;[type]&#125; parent [父节点]</div><div class="line"> * @return &#123;[type]&#125;        [返回parent的所有子元素]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">parent</span>) </span>&#123;</div><div class="line">	<span class="comment">// 存储结果集</span></div><div class="line">	<span class="keyword">var</span> ret = [],</div><div class="line">		nodes;</div><div class="line">	<span class="comment">// 获取parent所有子节点</span></div><div class="line">	nodes = parent.childNodes;</div><div class="line"></div><div class="line">	<span class="comment">// 遍历nodes</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,l = nodes.length; i &lt; l;i++)&#123;</div><div class="line">		<span class="comment">// 如果遍历到当前子节点类型为元素，即为所要结果。存储在ret内。</span></div><div class="line">		<span class="keyword">if</span>(nodes[i].nodeType === <span class="number">1</span>) &#123;</div><div class="line">			ret.push(nodes[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 返回结果</span></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(getChildren(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>)));</div></pre></td></tr></table></figure>
<ul>
<li>第二种方式：<code>firstChild nextSibling（推荐）</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用while方式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">parent</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> ret = [],</div><div class="line">		elem = parent.firstChild;</div><div class="line">	<span class="comment">// 遍历parent所有子节点</span></div><div class="line">	<span class="comment">// 如果有子节点</span></div><div class="line">	<span class="keyword">while</span>(elem)&#123;</div><div class="line">		<span class="comment">// 并且节点类型为元素。存储在ret内</span></div><div class="line">		<span class="keyword">if</span>(elem.nodeType === <span class="number">1</span>) ret.push(elem);</div><div class="line">		<span class="comment">// 更新循环标量</span></div><div class="line">		<span class="comment">// 赋值为下一个兄弟节点</span></div><div class="line">		elem = elem.nextSibling;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 返回结果</span></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//使用for循环</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">parent</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> ret = [],</div><div class="line">		elem = parent.firstChild;</div><div class="line">	<span class="keyword">for</span>(; elem ; elem = elem.nextSibling)&#123;</div><div class="line">		<span class="keyword">if</span>(elem.nodeType === <span class="number">1</span>) ret.push(elem);</div><div class="line">	&#125;			</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(getChildren(<span class="built_in">document</span>.getElementById(<span class="string">'dv'</span>)));</div></pre></td></tr></table></figure>
<h2 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h2><ol>
<li><p>在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架</p>
<ul>
<li>在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将它们当做实参传入沙箱内。</li>
</ul>
</li>
<li><p>核心函数为 <code>itcast</code> ，相当于 <code>jQuery</code> 。最终要暴露给用户使用的</p>
</li>
<li><p>实现 <code>itcast</code> 函数，使用的是 工厂模式 来 创建对象。好处：用户 <code>new</code> 或 不 <code>new</code> 都可以得到正确的对象</p>
</li>
<li><p><code>init</code> 构造函数 的 位置</p>
<ul>
<li>如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更改用户，尽量将构造函数暴露给用户</li>
<li>可以把构造函数放在 <code>itcast</code> 函数上，也可以放在 <code>itcast</code> 函数原型上。</li>
<li>处于 <code>jQuery</code> 之父，在写简单继承模式时，将构造函数放在其原型上。那么在编写框架时，即延续下来了</li>
</ul>
</li>
<li><p><code>init</code> 创建出来的对象，最终继承自 <code>itcast.prototype</code> 。所以可以将 <code>init</code> 对象称为 <code>itcast</code> 对象。</p>
</li>
<li><p>由于暴露给用户 的 是 <code>itcast</code> 和 其原型。所以在扩展成员时，只能在这两个对象上扩展。而在函数对象上扩展的成员 为 静态成员。可以直接通过函数名字来访问。但是，在原型上的成员，必须创建实例来访问。因此为了实现 <code>init</code> 对象可以访问 <code>itcast</code> 原型上的成员，就基于原型来实现继承。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> init;</div><div class="line">	<span class="comment">// 核心函数（工厂函数）</span></div><div class="line">	<span class="keyword">var</span> itcast = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> itcast.fn.init(selector);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 核心原型	</span></div><div class="line">	itcast.fn = itcast.prototype = &#123;</div><div class="line">		<span class="attr">constructor</span>: itcast</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 构造函数</span></div><div class="line">	init = itcast.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;&#125;;</div><div class="line">	<span class="comment">// 实现init对象继承自itcast原型</span></div><div class="line">	init.prototype = itcast.fn;</div><div class="line"></div><div class="line">	<span class="comment">// 可扩展方法</span></div><div class="line">	<span class="comment">// 如果target为undefined值，那么就是给this扩展成员</span></div><div class="line">	<span class="comment">// 否则就是给target对象扩展。</span></div><div class="line">	itcast.extend = itcast.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params">source, target</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> k;</div><div class="line">		<span class="comment">// 如果target为undefined值，就赋值为this</span></div><div class="line">		<span class="comment">// 给this扩展成员</span></div><div class="line">		<span class="keyword">if</span> (target == <span class="literal">undefined</span>) &#123;</div><div class="line">			target = <span class="keyword">this</span>;</div><div class="line">		&#125;	</div><div class="line"></div><div class="line">		<span class="comment">// target = target || this;</span></div><div class="line"></div><div class="line">		<span class="keyword">for</span>(k <span class="keyword">in</span> source)&#123;</div><div class="line">			target[k] = source[k];</div><div class="line">		&#125;		</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 暴露给用户</span></div><div class="line">	global.$ = global.itcast = itcast;</div><div class="line">&#125;(<span class="built_in">window</span>));</div><div class="line"></div><div class="line">itcast.fn.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;&#125;;</div><div class="line">itcast.fn.append = <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>
<ol>
<li><p>完善<code>init</code>构造函数</p>
<ul>
<li><code>selector</code> 类型：<ul>
<li>无效值： <code>null</code> <code>undefined</code> <code>&#39; &#39;</code> <code>false</code></li>
<li>字符串<ul>
<li>选择器：     <code>div</code> 根据选择器筛选dom元素，并以伪数组形式 存储在 <code>this</code> 上</li>
<li><code>html</code> 字符串 <code>&lt;p&gt;123&lt;/p&gt;&lt;p&gt;456&lt;/p&gt;</code> <code>&lt;p&gt;</code> 将html字符串 转换成 <code>html</code> 元素</li>
</ul>
</li>
<li><code>DOM</code> 节点 </li>
<li><code>DOM</code> 数组（伪数组） </li>
<li><code>function</code>：入口函数 <code>DOMContentLoaded</code><ul>
<li>使用静态属性 <code>isReady</code> 存储 <code>dom</code> 树是否加载完毕</li>
<li>判断 <code>isReady</code> 值， 如果为 <code>true</code> ，就直接执行传入的函数。</li>
<li>否则，就给 <code>document</code> 的 <code>DOMContentLoaded</code> 事件绑定处理程序，在处理程序中，先将 <code>isReady</code> 赋值为 <code>true</code> ，在执行传入的函数。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>如何判断字符串为 <code>html</code> 字符串，必须满足一下条件：</p>
<ul>
<li>以 <code>&lt;</code> 开头</li>
<li>以 <code>&gt;</code> 结尾</li>
<li>最小长度为 <code>3</code></li>
</ul>
</li>
<li><p>如何判断像数组（数组和伪数组）</p>
<ul>
<li>用 <code>length</code> 属性去判断，若具有 <code>length</code> 属性 表示为 像数组类型</li>
<li>除了 <code>window</code> 对象以及函数对象</li>
<li><p><code>{length: 1} {4: &quot;123&quot;, length: 5}</code> 稀疏数组</p>
</li>
<li><p>如果为真数组，返回 <code>true</code></p>
</li>
<li>如果 <code>length</code> 属性值为 <code>0</code> （除了 <code>window</code> 对象以及函数对象），返回 <code>true</code></li>
<li>如果 <code>length</code> 属性值 <code>&gt;0</code>, 如果对象 具有 <code>length - 1</code> 索引，返回 <code>true</code></li>
</ul>
</li>
<li><p>全局对象 <code>window</code> 特性：有一个 <code>window</code> 属性 引用 自身。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> init,</div><div class="line">		<span class="built_in">document</span> = global.document;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> itcast = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> itcast.fn.init(selector);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	itcast.fn = itcast.prototype = &#123;</div><div class="line">		<span class="attr">constructor</span>: itcast,</div><div class="line">		<span class="attr">length</span>: <span class="number">0</span></div><div class="line">	&#125;;</div><div class="line">	init = itcast.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">		<span class="comment">// handle: null undefined '' false</span></div><div class="line">		<span class="keyword">if</span>(!selector) <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		<span class="comment">// handle: string</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(itcast.isString(selector))&#123;</div><div class="line">			<span class="comment">// handle: html string '&lt;p&gt;123&lt;/p&gt;'</span></div><div class="line">			<span class="keyword">if</span>(itcast.isHTML(selector))&#123;						</div><div class="line">				<span class="comment">// 怎么存储 以伪数组对象形式存储 dom元素</span></div><div class="line">				<span class="built_in">Array</span>.prototype.push.apply(<span class="keyword">this</span>, itcast.parseHTML(selector));</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// handle: selector</span></div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// 根据选择器获取dom元素</span></div><div class="line">				<span class="keyword">var</span> nodelist = <span class="built_in">document</span>.querySelectorAll(selector);</div><div class="line">				<span class="comment">// 将结果伪数组对象 变成 真数组</span></div><div class="line">				<span class="keyword">var</span> ret = <span class="built_in">Array</span>.prototype.slice.call(nodelist);</div><div class="line">				<span class="comment">// 借调数组对象的slice方法将数组中的所有元素 以伪数组形式存储在this上</span></div><div class="line">				<span class="built_in">Array</span>.prototype.push.apply(<span class="keyword">this</span>, ret);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// handle: dom node</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(itcast.isDOM(selector))&#123;</div><div class="line">			<span class="keyword">this</span>[<span class="number">0</span>] = selector;</div><div class="line">			<span class="keyword">this</span>.length = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// handle: dom array(伪数组对象)</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(itcast.isArrayLike(selector))&#123;</div><div class="line">			<span class="comment">// 获取selector类型</span></div><div class="line">			<span class="keyword">var</span> _type = <span class="built_in">Object</span>.prototype.toString.call(selector).</div><div class="line">					slice(<span class="number">8</span>, <span class="number">-1</span>).toLowerCase();</div><div class="line">			<span class="comment">// 如果不是数组类型,就 将其转换 为 真数组类型</span></div><div class="line">			<span class="keyword">if</span>(_type !== <span class="string">'array'</span>) </div><div class="line">				selector = <span class="built_in">Array</span>.prototype.slice.call(selector);</div><div class="line">			<span class="built_in">Array</span>.prototype.push.apply(<span class="keyword">this</span>, selector);</div><div class="line">		&#125;	</div><div class="line">		<span class="comment">// handle: function</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(itcast.isFunction(selector))&#123;</div><div class="line">			<span class="keyword">if</span>(itcast.isReady)&#123;</div><div class="line">				selector();</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				doucment.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">					selector();</div><div class="line">					itcast.isReady = <span class="literal">true</span>;</div><div class="line">				&#125;);	</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	init.prototype = itcast.fn;</div><div class="line"></div><div class="line">	itcast.extend = itcast.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params">source, target</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> k;</div><div class="line"></div><div class="line">		target = target || <span class="keyword">this</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(k <span class="keyword">in</span> source)&#123;</div><div class="line">			target[k] = source[k];</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 添加工具类方法</span></div><div class="line">	itcast.extend(&#123;</div><div class="line">		<span class="attr">isReady</span>: <span class="literal">false</span>,</div><div class="line">		<span class="attr">paseHTML</span>: <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</div><div class="line">				ret = [];</div><div class="line">			div.innerHTML = html;</div><div class="line"></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> elem = div.firstChild; elem; elem = elem.nextSibling)&#123;</div><div class="line">				<span class="keyword">if</span>(elem.nodeType === <span class="number">1</span>) ret.push(elem);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> ret;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	<span class="comment">// 类型判断方法</span></div><div class="line">	itcast.extend(&#123;</div><div class="line">		<span class="comment">// 判断是否为字符串类型</span></div><div class="line">		isString: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">			<span class="comment">// 如果为null或undefined，返回false</span></div><div class="line">			<span class="comment">// 如果typeof值为string，返回true否则返回false。</span></div><div class="line">			<span class="keyword">return</span> !!obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'string'</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">isHTML</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> !!obj &amp;&amp; obj.charAt(<span class="number">0</span>) === <span class="string">'&lt;'</span> &amp;&amp; </div><div class="line">				obj.charAt(obj.length - <span class="number">1</span>) === <span class="string">'&gt;'</span> &amp;&amp;</div><div class="line">				obj.length &gt;= <span class="number">3</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">isDOM</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> !!obj &amp;&amp; !!obj.nodeType;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">isFunction</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> !!obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'function'</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">isGlobal</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> !!obj &amp;&amp; obj.window === obj;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">isArrayLike</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> _type = <span class="built_in">Object</span>.prototype.toString.call(obj).slice(<span class="number">8</span>, <span class="number">-1</span>).toLowerCase(),</div><div class="line">				length = !!obj &amp;&amp; <span class="string">'length'</span> <span class="keyword">in</span> obj &amp;&amp; obj.length;</div><div class="line">			<span class="comment">// 过滤 window对象和函数对象</span></div><div class="line">			<span class="keyword">if</span>(itcast.isFunction(obj) || itcast.isGlobal(obj)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">			<span class="keyword">return</span> _type === <span class="string">'array'</span> || length === <span class="number">0</span> || </div><div class="line">				<span class="keyword">typeof</span> length === <span class="string">'number'</span> &amp;&amp; length &gt; <span class="number">0</span> &amp;&amp; (length - <span class="number">1</span>) <span class="keyword">in</span> obj;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	global.$ = global.itcast = itcast;</div><div class="line">&#125;(<span class="built_in">window</span>));</div></pre></td></tr></table></figure>
<p>到此,一个完整的 <code>init</code> 框架结构就好了!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQuery模块分析及其实现第一部分!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://oisha19l0.qnssl.com/20161119.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="原生Js" scheme="https://blog.ihoey.com/tags/%E5%8E%9F%E7%94%9FJs/"/>
    
      <category term="Js框架" scheme="https://blog.ihoey.com/tags/Js%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JQuery" scheme="https://blog.ihoey.com/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>Canvas部分知识总结</title>
    <link href="https://blog.ihoey.com/posts/Canvas/2016-11-15-canvas-summary.html"/>
    <id>https://blog.ihoey.com/posts/Canvas/2016-11-15-canvas-summary.html</id>
    <published>2016-11-15T12:38:26.000Z</published>
    <updated>2016-11-24T01:35:09.908Z</updated>
    
    <content type="html"><![CDATA[<p>Canvas笔记总结！！<br>接前部分~</p>
<a id="more"></a>
<h2 id="canvas是什么"><a href="#canvas是什么" class="headerlink" title="canvas是什么?"></a>canvas是什么?</h2><p>是一个 <code>HTML5</code> 标签,该标签用来绘图</p>
<h2 id="canvas怎么用"><a href="#canvas怎么用" class="headerlink" title="canvas怎么用"></a>canvas怎么用</h2><p><code>canvas</code> 是一个画布,不能自己画图,画图需要绘图上下文</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cas = <span class="built_in">document</span>.querySelector(<span class="string">"#c"</span>);</div><div class="line"><span class="comment">//获取绘图上下文</span></div><div class="line">car ctx = cas.getContext(<span class="string">"2d"</span>);</div></pre></td></tr></table></figure>
<h2 id="画直线"><a href="#画直线" class="headerlink" title="画直线"></a>画直线</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置直线的起点</span></div><div class="line">ctx.moveTo(x,y);</div><div class="line"><span class="comment">//画路径到直线的终点</span></div><div class="line">ctx.lineTo(x,y);</div></pre></td></tr></table></figure>
<h2 id="开启新路径"><a href="#开启新路径" class="headerlink" title="开启新路径"></a>开启新路径</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.befinPath();</div></pre></td></tr></table></figure>
<h2 id="画曲线"><a href="#画曲线" class="headerlink" title="画曲线"></a>画曲线</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用for循环,用函数来帮一个y确定一个x</span></div><div class="line"><span class="comment">//然后讲x,y的每一个点用lingTo连起来就变成了一条曲线</span></div></pre></td></tr></table></figure>
<h2 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 手动,纯人工</span></div><div class="line"><span class="comment">//2. ctx.rect(x,y,w,h);</span></div><div class="line"><span class="comment">//3. ctx.strokeRect(x,y,w,h);</span></div><div class="line"><span class="comment">//4. ctx.fillRect(x,y,w,h);</span></div></pre></td></tr></table></figure>
<h2 id="画弧"><a href="#画弧" class="headerlink" title="画弧"></a>画弧</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.arc(x,y,r,startAngle.endAngle[,<span class="built_in">Boolean</span> optional anticlockwise])</div></pre></td></tr></table></figure>
<h2 id="扇形"><a href="#扇形" class="headerlink" title="扇形"></a>扇形</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先moveTo到原心</span></div><div class="line">moveTo(x,y);</div><div class="line">ctx.arc(x,y,r,startAngle.endAngle[,<span class="built_in">Boolean</span> optional anticlockwise])</div><div class="line">ctx.closePath();</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><p><code>3</code> 等分的饼</p>
<ol>
<li>开始的角度一般是 <code>-90</code></li>
<li>每画一个扇形,就让角度 <code>+120</code></li>
<li>再从加了 <code>120</code> 的角度画下一个扇形</li>
</ol>
<h2 id="动画饼图"><a href="#动画饼图" class="headerlink" title="动画饼图"></a>动画饼图</h2><p>定时器<br>每一段时间画一个小扇形,就和画饼一样</p>
<h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fillText(str, x, y)</div><div class="line">strokText(str, x, y)</div></pre></td></tr></table></figure>
<h3 id="对其方式"><a href="#对其方式" class="headerlink" title="对其方式"></a>对其方式</h3><h4 id="水平"><a href="#水平" class="headerlink" title="水平"></a>水平</h4><ul>
<li>left</li>
<li>center</li>
<li>right</li>
<li>start</li>
<li>end</li>
</ul>
<h4 id="垂直"><a href="#垂直" class="headerlink" title="垂直"></a>垂直</h4><ul>
<li>top</li>
<li>middle</li>
<li>bottom</li>
<li>hanging</li>
<li>alphabetic</li>
<li>ideographic</li>
</ul>
<h2 id="完整饼图"><a href="#完整饼图" class="headerlink" title="完整饼图"></a>完整饼图</h2><ol>
<li>先算所有数据的总和</li>
<li>算每个数据的比例,用比例算出角度</li>
<li>更具每个角度去画扇形</li>
<li>在去画扇形的中线</li>
<li>画文字下面的线</li>
<li>写文字</li>
</ol>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//3参</span></div><div class="line">ctx.drawImage(img, x, y)</div><div class="line"><span class="comment">//直接画不管宽高</span></div><div class="line"><span class="comment">//5参</span></div><div class="line">ctx.drawImage(img, x, y, w, h)</div><div class="line"><span class="comment">//要确定宽高</span></div><div class="line"><span class="comment">//9参</span></div><div class="line">ctx.drawImage(img, x, y, w, h, x1, y1, w1, h1)</div><div class="line"></div><div class="line"><span class="comment">//拿出图片中 x, y, w, h 这个矩形所在的位置的图像</span></div><div class="line"><span class="comment">//放到canvas中x1, y1, w1, h1这个矩形所在的位置</span></div></pre></td></tr></table></figure>
<h2 id="帧动画"><a href="#帧动画" class="headerlink" title="帧动画"></a>帧动画</h2><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><ul>
<li>平移变换   把画布的原点移动到指定的位置<br>  <code>ctx.translate(x, y)</code></li>
<li>缩放变换   对画布进行缩放</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx.scale(x, y)  <span class="comment">//x表示的是对画布x轴的缩放，如果大于1 是放大 如果小于1 是缩小</span></div><div class="line">ctx.scale(x, y)  <span class="comment">//y表示的是对画布y轴的缩放，如果大于1 是放大 如果小于1 是缩小</span></div></pre></td></tr></table></figure>
<ul>
<li>旋转变换<br>  <code>ctx.rotate(弧度)  //将画布，围绕原点旋转指定的弧度</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Canvas笔记总结！！&lt;br&gt;接前部分~&lt;/p&gt;
    
    </summary>
    
      <category term="Canvas" scheme="https://blog.ihoey.com/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="https://blog.ihoey.com/tags/Canvas/"/>
    
      <category term="HTML5" scheme="https://blog.ihoey.com/tags/HTML5/"/>
    
      <category term="画布" scheme="https://blog.ihoey.com/tags/%E7%94%BB%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>Canvas知识整理part2</title>
    <link href="https://blog.ihoey.com/posts/Canvas/2016-11-14-canvas-part2.html"/>
    <id>https://blog.ihoey.com/posts/Canvas/2016-11-14-canvas-part2.html</id>
    <published>2016-11-14T11:42:44.000Z</published>
    <updated>2016-11-24T01:34:33.712Z</updated>
    
    <content type="html"><![CDATA[<p>Html5Canvas笔记整理，接part1篇！！</p>
<p>绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法!</p>
<ol>
<li>绘制矩形</li>
<li>绘制圆弧</li>
<li>绘制文本</li>
<li>绘制图片</li>
<li>绘制动画</li>
</ol>
<a id="more"></a>
<h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h2><ol>
<li>strokeRect();</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strokeRect(x, y, w, h)</div></pre></td></tr></table></figure>
<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，并描边</p>
<ul>
<li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li>
<li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li>
<li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li>
<li>绘制的矩形支持 <code>strokeStyle</code> 设置颜色样式.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">ctx.strokeRect( <span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span> );</div></pre></td></tr></table></figure>
<ol>
<li>fillRect();</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fillRect(x, y, w, h)</div></pre></td></tr></table></figure>
<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，并填充</p>
<ul>
<li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li>
<li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li>
<li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li>
<li>绘制的矩形支持 <code>fillStyle</code> 设置颜色样式.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx.fillStyle = <span class="string">'green'</span>;</div><div class="line">ctx.fillRect( <span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span> );</div></pre></td></tr></table></figure>
<ol>
<li>rect();</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rect(x, y, w, h)</div></pre></td></tr></table></figure>
<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, y坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：绘制一个矩形路径，不描边</p>
<ol>
<li>clearRect();</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clearRect(x, y, w, h)</div></pre></td></tr></table></figure>
<p><code>x</code>, <code>x</code>坐标<br><code>y</code>, <code>y</code>坐标<br><code>w</code>, 矩形宽<br><code>h</code>, 矩形高<br>功能：清除指定的矩形区域</p>
<ul>
<li>用于清除画布中的矩形区域的内容.</li>
<li>参数 <code>x</code>, <code>y</code> 表示矩形区域左上角的坐标,<code>width</code> 与 <code>height</code> 表示矩形区域的宽高.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx.fillRect( <span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span> );</div><div class="line">ctx.clearRect( <span class="number">110</span>, <span class="number">110</span>, <span class="number">50</span>, <span class="number">50</span> );</div></pre></td></tr></table></figure>
<ul>
<li>save restore<br>  save 保存当前的路径状态<br>  restore 恢复上一次保存的路径状态( <code>restore</code> 是与之对应的,先 <code>save</code> 的,后被 <code>restore</code> )</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>, y = <span class="number">10</span>, oldx = <span class="number">10</span>, oldy = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> width = <span class="number">100</span>, height = <span class="number">50</span>;     </div><div class="line"><span class="keyword">var</span> intervalId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	ctx.clearRect( oldx - <span class="number">1</span>, oldy - <span class="number">1</span>, width + <span class="number">2</span>, height + <span class="number">2</span> );</div><div class="line"></div><div class="line">	ctx.strokeRect( x, y, width, height );</div><div class="line"></div><div class="line">	oldx = x;</div><div class="line">	oldy = y;</div><div class="line"></div><div class="line">	x += <span class="number">4</span>;</div><div class="line">	y += <span class="number">2</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( oldy &gt;= <span class="number">200</span> ) &#123;</div><div class="line">		<span class="comment">// clearInterval( intervalId );</span></div><div class="line">		x = <span class="number">10</span>, y = <span class="number">10</span>;</div><div class="line">	&#125;</div><div class="line">&#125;, <span class="number">20</span>);</div></pre></td></tr></table></figure>
<h2 id="绘制圆弧"><a href="#绘制圆弧" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arc(x, y, r, startAngle, endAngle, anticlockwise)</div></pre></td></tr></table></figure>
<ul>
<li><code>x,y</code> 圆心坐标</li>
<li><code>r</code>  圆的半径</li>
<li><code>startAngle</code> 起始角度（弧度表示）</li>
<li><code>endAngle</code> 结束角度（弧度表示）</li>
<li><code>anticlockwise</code> 是否逆时针绘制，注意找角的时候还是顺时针找</li>
</ul>
<p>注意事项，每次画完弧之后，都会保存点，下次绘图会从该点开始</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 200, 200 的地方绘制一段半径为 100 的圆弧, 圆心角为 - PI / 2 到 PI / 4</span></div><div class="line">...</div><div class="line">ctx.arc( <span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, -<span class="built_in">Math</span>.PI/<span class="number">2</span>, <span class="built_in">Math</span>.PI/<span class="number">4</span> );</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"><span class="comment">// 为了方便看清楚结构, 绘制坐标轴</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">ctx.moveTo( <span class="number">50</span>, <span class="number">200</span> );</div><div class="line">ctx.lineTo( <span class="number">350</span>, <span class="number">200</span> );</div><div class="line"></div><div class="line">ctx.moveTo( <span class="number">200</span>, <span class="number">50</span> );</div><div class="line">ctx.lineTo( <span class="number">200</span>, <span class="number">350</span> );</div><div class="line"></div><div class="line">ctx.moveTo( <span class="number">200</span>, <span class="number">200</span> );</div><div class="line">ctx.lineTo( <span class="number">300</span>, <span class="number">300</span> );</div><div class="line"></div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<h2 id="绘制扇形"><a href="#绘制扇形" class="headerlink" title="绘制扇形"></a>绘制扇形</h2><p>先 <code>moveTo</code> 圆心，然后画弧 ，然后 <code>closePath</code> 弧就有了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ctx.strokeStyle = <span class="string">'red'</span>;</div><div class="line">ctx.fillStyle = <span class="string">'pink'</span>;</div><div class="line"></div><div class="line">ctx.moveTo( <span class="number">100</span>, <span class="number">200</span> );</div><div class="line">ctx.arc( <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>, -<span class="built_in">Math</span>.PI/<span class="number">3</span>, <span class="built_in">Math</span>.PI/<span class="number">3</span> );</div><div class="line">ctx.closePath();</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo( <span class="number">300</span>, <span class="number">200</span> );</div><div class="line">ctx.arc( <span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, -<span class="built_in">Math</span>.PI/<span class="number">3</span>, <span class="built_in">Math</span>.PI/<span class="number">3</span> );</div><div class="line">ctx.closePath();</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<h2 id="绘制扇形动画"><a href="#绘制扇形动画" class="headerlink" title="绘制扇形动画"></a>绘制扇形动画</h2><p>绘制扇形动画, 就是每隔几毫秒( 20 毫秒)擦除以前绘制的内容, 然后在以前绘制的基础上比以前多绘制一点东西. 这里多绘制的内容就是由角度决定. 比如一开始角度从 <code>-Math.PI / 2</code> 开始绘制. 那么每次角度都 <code>+0.1</code> , 直到 绘制到 <code>Math.PI * 3 / 2</code>为止.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ctx.fillStyle = <span class="string">'green'</span>;</div><div class="line"><span class="keyword">var</span> startAngle = -<span class="built_in">Math</span>.PI / <span class="number">2</span>,</div><div class="line">	angle = startAngle,</div><div class="line">	x = <span class="number">200</span>, y = <span class="number">200</span>,</div><div class="line">	r = <span class="number">100</span>;</div><div class="line"><span class="keyword">var</span> intervalId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 清除之前绘制的内容</span></div><div class="line">	ctx.clearRect( <span class="number">0</span>, <span class="number">0</span>, cas.width, cas.height );</div><div class="line">	<span class="comment">// 角度增量</span></div><div class="line">	angle += <span class="number">0.1</span>;</div><div class="line">	<span class="comment">// 判断是否停止计时器</span></div><div class="line">	<span class="keyword">if</span> ( angle &gt;= <span class="built_in">Math</span>.PI * <span class="number">3</span> / <span class="number">2</span> ) &#123;</div><div class="line">		clearInterval( intervalId);</div><div class="line">		angle = <span class="built_in">Math</span>.PI * <span class="number">3</span> / <span class="number">2</span>; </div><div class="line">		<span class="built_in">console</span>.log( <span class="string">'绘制完成'</span> );</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 绘制</span></div><div class="line">	ctx.moveTo( x, y );</div><div class="line">	ctx.arc( x, y, r, startAngle, angle );</div><div class="line">	ctx.fill();</div><div class="line">&#125;, <span class="number">20</span>);</div></pre></td></tr></table></figure>
<h2 id="绘制饼形图"><a href="#绘制饼形图" class="headerlink" title="绘制饼形图"></a>绘制饼形图</h2><pre><code>等分的饼图,饼图的起始位置在    `-90°` .
</code></pre><p>绘制饼形图最大的特点是角度是叠加的. 开始从 <code>-Math.PI/2</code> 开始绘制, 达到执行角 <code>x</code> 后, 下一个区域从 <code>x</code> 开始绘制, 然后有到一个角 <code>y</code> 停下来. 如此反复到 <code>Math.PI * 3 / 2</code> 结束.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">200</span>, y = <span class="number">200</span>,</div><div class="line">	r = <span class="number">100</span>,</div><div class="line">	step = <span class="built_in">Math</span>.PI * <span class="number">2</span> / <span class="number">3</span>,     <span class="comment">// 120 度一个区域</span></div><div class="line">	start = -<span class="built_in">Math</span>.PI / <span class="number">2</span>,       <span class="comment">// 起始角度</span></div><div class="line">	colors = [ <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span> ];</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ ) &#123;</div><div class="line">	ctx.beginPath();</div><div class="line">	ctx.moveTo( x, y );</div><div class="line">	ctx.fillStyle = colors[ i ];</div><div class="line">	ctx.arc( x, y, r, start, start+=step );</div><div class="line">	ctx.fill();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Html5Canvas笔记整理，接part1篇！！&lt;/p&gt;
&lt;p&gt;绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;绘制矩形&lt;/li&gt;
&lt;li&gt;绘制圆弧&lt;/li&gt;
&lt;li&gt;绘制文本&lt;/li&gt;
&lt;li&gt;绘制图片&lt;/li&gt;
&lt;li&gt;绘制动画&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Canvas" scheme="https://blog.ihoey.com/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="https://blog.ihoey.com/tags/Canvas/"/>
    
      <category term="HTML5" scheme="https://blog.ihoey.com/tags/HTML5/"/>
    
      <category term="画布" scheme="https://blog.ihoey.com/tags/%E7%94%BB%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>Canvas知识整理part1</title>
    <link href="https://blog.ihoey.com/posts/Canvas/2016-11-13-canvas-part1.html"/>
    <id>https://blog.ihoey.com/posts/Canvas/2016-11-13-canvas-part1.html</id>
    <published>2016-11-13T11:39:33.000Z</published>
    <updated>2016-11-24T01:33:33.631Z</updated>
    
    <content type="html"><![CDATA[<p>canvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.</p>
<a id="more"></a>
<pre><code>canvas 英 [&apos;kænvəs]  美 [&apos;kænvəs]   帆布 画布
</code></pre><p>默认的宽高为：<code>300 * 150</code></p>
<h2 id="Canvas-使用注意："><a href="#Canvas-使用注意：" class="headerlink" title="Canvas 使用注意："></a>Canvas 使用注意：</h2><ul>
<li>设置 <code>canvas</code> 宽高 <code>canvas</code> 只是一个画布，不能直接自己绘图，绘图需要使用工具</li>
<li>设置 <code>canvas</code> 宽和高的时候不推荐使用 <code>css</code> 样式去设置，因为会有拉伸的效果</li>
<li>在不支持的浏览器中，<code>canvas</code> 中的内容会正常的现实出来</li>
<li>再 <code>canvas</code> 标签内部书写内容，在支持的浏览器中，该内容会被忽略</li>
<li>在不支持的浏览器中会将 <code>canvas</code> 标签会当作 <code>div</code> 标签来处理</li>
</ul>
<h2 id="canvas-的使用领域"><a href="#canvas-的使用领域" class="headerlink" title="canvas 的使用领域"></a>canvas 的使用领域</h2><p><code>canvas</code> 的使用领域很多:</p>
<ol>
<li>游戏</li>
<li>可视化数据(重点)</li>
<li><code>banner</code> 广告</li>
<li>多媒体</li>
<li>未来<ul>
<li>模拟仿真</li>
<li>远程操作</li>
<li>图形编辑</li>
</ul>
</li>
</ol>
<h2 id="Canvas-怎么用？"><a href="#Canvas-怎么用？" class="headerlink" title="Canvas 怎么用？"></a>Canvas 怎么用？</h2><ol>
<li>创建一个 <code>Canvas</code> 标签</li>
<li>获取到该 <code>DOM</code> 对象</li>
<li><code>Canvas</code> 只是一个画布，不能自己画画，需要画图工具</li>
<li>每个 <code>Canvas</code> 对应一个画图工具，通过 <code>canvas</code> 对象 <code>.getContext(&quot;2d&quot;)</code> 参数有 <code>2d</code> 和 <code>webgl</code> 两种 <code>2d</code> 获取到一个 <code>CanvasRenderingContext2D</code> 类型的对象,使用 <code>webgl</code> 返回 <code>WebGLRenderingContext</code> 类型的对象.</li>
</ol>
<h2 id="如何画直线"><a href="#如何画直线" class="headerlink" title="如何画直线"></a>如何画直线</h2><ol>
<li>先确定在何处下笔，画图工具 <code>.moveTo(x, y)</code></li>
<li>确定从开始的点画到哪里去，  画图工具 <code>.lineTo(x, y)</code></li>
<li>上面两步之后，线并没有画出来，而是描点，需要最后一步进行画线  画图工具 <code>.stroke();</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement( <span class="string">'canvas'</span> );</div><div class="line">canvas.width = <span class="number">500</span>;</div><div class="line">canvas.height = <span class="number">400</span>;</div><div class="line">canvas.style.border = <span class="string">'1px dashed red'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild( canvas );</div><div class="line"><span class="comment">// 获得 CanvasRenderingContext2D 对象</span></div><div class="line"><span class="keyword">var</span> context = canvas.getContext( <span class="string">'2d'</span> );</div><div class="line"><span class="comment">// 设置 起点</span></div><div class="line">context.moveTo( <span class="number">0</span>, <span class="number">0</span> );</div><div class="line"><span class="comment">// 绘制直线</span></div><div class="line">context.lineTo( <span class="number">500</span>, <span class="number">400</span> );</div><div class="line"><span class="comment">// 设置 起点</span></div><div class="line">context.moveTo( <span class="number">0</span>, <span class="number">400</span> );</div><div class="line"><span class="comment">// 绘制直线</span></div><div class="line">context.lineTo( <span class="number">500</span>, <span class="number">0</span> );</div><div class="line"><span class="comment">// 描边显示效果</span></div><div class="line">context.stroke();</div></pre></td></tr></table></figure>
<h2 id="lineTo的特性"><a href="#lineTo的特性" class="headerlink" title="lineTo的特性"></a>lineTo的特性</h2><p>每次 <code>lineTo</code> 之后都会记录最后的 <code>lineTo</code> 的点，下次 <code>lineTo</code> 的时候就接着这个 <code>canvas</code> 只是一个画布，不能直接自己绘图，绘图需要使用工具sssss点继续画</p>
<h2 id="closePath"><a href="#closePath" class="headerlink" title="closePath"></a>closePath</h2><p>将最后一次 <code>lineTo</code> 的点 和最后一次 <code>moveTo</code> 的点连起来的<br>两条线的交界处，如果使用的是 <code>closePath</code> 会补全缺口</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ctx.moveTo( <span class="number">100</span>, <span class="number">100</span> );</div><div class="line">ctx.lineTo( <span class="number">300</span>, <span class="number">100</span> );</div><div class="line">ctx.lineTo( <span class="number">300</span>, <span class="number">200</span> );</div><div class="line">ctx.closePath();</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h2><p>可以将闭合的图形进行填充</p>
<h2 id="非零填充原则"><a href="#非零填充原则" class="headerlink" title="非零填充原则"></a>非零填充原则</h2><p>从一个闭合空间引出一条直线，如果该直线两边的箭头数量不相等，则要填充，如果相等则不填充</p>
<p>一边有一个箭头就+1<br>另一边有一个箭头就-1</p>
<h2 id="如何绘制曲线？"><a href="#如何绘制曲线？" class="headerlink" title="如何绘制曲线？"></a>如何绘制曲线？</h2><p>使用 <code>for</code> 循环给每一个 <code>x</code> 对应一个 <code>y</code> 值，<code>x</code> 和 <code>y</code> 的关系需要是个多次幂的方程</p>
<h2 id="路径概念"><a href="#路径概念" class="headerlink" title="路径概念"></a>路径概念</h2><p>路径就是一次绘图，包含该次绘图中的所有的状态，线宽  颜色  是否虚线</p>
<p>如果想要改变状态，就需要开启新的路径</p>
<h2 id="beginPath"><a href="#beginPath" class="headerlink" title="beginPath"></a>beginPath</h2><p>可以用来开启新的路径</p>
<h2 id="线型相关属性"><a href="#线型相关属性" class="headerlink" title="线型相关属性"></a>线型相关属性</h2><table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">lineWidth</td>
<td style="text-align:center">画线的时候的线的宽度</td>
</tr>
<tr>
<td style="text-align:center">setLineDash()</td>
<td style="text-align:center">设置虚线各个线段的长度,参数是一个数组，会将数组中的数字循环使用</td>
</tr>
<tr>
<td style="text-align:center">getLineDash()</td>
<td style="text-align:center">获取虚线各个线段的长度，如果是实线，获取到的是空数组</td>
</tr>
<tr>
<td style="text-align:center">lineDashOffset</td>
<td style="text-align:center">设置虚线的偏移量，正值往左，负值往右</td>
</tr>
<tr>
<td style="text-align:center">strokeStyle</td>
<td style="text-align:center">设置描边的，画线的颜色，颜色值可以为css中任意一种</td>
</tr>
<tr>
<td style="text-align:center">fillStyle</td>
<td style="text-align:center">设置填充颜色，颜色值可以为css中任意一种</td>
</tr>
</tbody>
</table>
<h2 id="渐变色"><a href="#渐变色" class="headerlink" title="渐变色"></a>渐变色</h2><p>将线划分为 <code>256</code> 份，每一份为一个颜色，新画一条线，依次递增，就形成了一个颜色渐变的线段</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;canvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.&lt;/p&gt;
    
    </summary>
    
      <category term="Canvas" scheme="https://blog.ihoey.com/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="https://blog.ihoey.com/tags/Canvas/"/>
    
      <category term="HTML5" scheme="https://blog.ihoey.com/tags/HTML5/"/>
    
      <category term="画布" scheme="https://blog.ihoey.com/tags/%E7%94%BB%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级篇总结</title>
    <link href="https://blog.ihoey.com/posts/javascript/2016-11-12-javascript-summary.html"/>
    <id>https://blog.ihoey.com/posts/javascript/2016-11-12-javascript-summary.html</id>
    <published>2016-11-12T11:04:31.000Z</published>
    <updated>2016-11-24T01:32:28.396Z</updated>
    
    <content type="html"><![CDATA[<p>javascript高级与面向对象笔记总结！！</p>
<a id="more"></a>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归就是函数自己直接或者间接的调用自己</p>
<h3 id="递归的两个要素"><a href="#递归的两个要素" class="headerlink" title="递归的两个要素"></a>递归的两个要素</h3><ul>
<li>自己调用自己</li>
<li>递归结束条件</li>
</ul>
<h3 id="化归思想"><a href="#化归思想" class="headerlink" title="化归思想"></a>化归思想</h3><p>由难化易，由繁化简，的思想就是化归思想</p>
<h3 id="前n项和"><a href="#前n项和" class="headerlink" title="前n项和"></a>前n项和</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fn(n) = fn(n<span class="number">-1</span>) + n</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum(n - <span class="number">1</span>) + n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fn(n) = fn(n<span class="number">-1</span>) * n</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum(n - <span class="number">1</span>) * n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fn(n) = fn(n<span class="number">-1</span>) + fn(n<span class="number">-2</span>)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>( n &lt;= <span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="递归获取指定元素的后代元素"><a href="#递归获取指定元素的后代元素" class="headerlink" title="递归获取指定元素的后代元素"></a>递归获取指定元素的后代元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">ele</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    <span class="keyword">var</span> children = ele.children;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++)&#123;</div><div class="line">        result.push(children[i]);</div><div class="line">        <span class="keyword">var</span> temp = getChildren(children[i]);</div><div class="line">        result = result.concat(temp);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>一个封闭的包裹结构</p>
<p>一个可以访问独立数据的函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> data = <span class="string">""</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//可以操作data数据</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取和设置数据</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> data = <span class="string">""</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">getData</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> data;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">setDate</span>:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">            data = value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="for循环注册点击事件的问题"><a href="#for循环注册点击事件的问题" class="headerlink" title="for循环注册点击事件的问题"></a>for循环注册点击事件的问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.length; i++)&#123;</div><div class="line">    <span class="keyword">var</span> div = divs[i];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> j = i;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(j);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    div.onclick = outer();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="for循环中使用setTimeout"><a href="#for循环中使用setTimeout" class="headerlink" title="for循环中使用setTimeout"></a>for循环中使用setTimeout</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">    setTimeout((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> j = i;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(j);</div><div class="line">        &#125;</div><div class="line">    &#125;()),<span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul>
<li>硬件缓存</li>
<li>浏览器缓存</li>
<li><code>CDN</code>—<code>Content Delivery Network</code>  内容分发网络</li>
</ul>
<h3 id="使用缓存解决递归实现的斐波那契数列的性能问题"><a href="#使用缓存解决递归实现的斐波那契数列的性能问题" class="headerlink" title="使用缓存解决递归实现的斐波那契数列的性能问题"></a>使用缓存解决递归实现的斐波那契数列的性能问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFib</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> num = arr[n];</div><div class="line">        <span class="keyword">if</span>(!num)&#123;</div><div class="line">            <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</div><div class="line">                num = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                num = <span class="built_in">arguments</span>.callee(n - <span class="number">1</span>) + <span class="built_in">arguments</span>.callee(n - <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">            arr[n] = num;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="jQuery缓存实现分析"><a href="#jQuery缓存实现分析" class="headerlink" title="jQuery缓存实现分析"></a>jQuery缓存实现分析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCache</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(value)&#123;</div><div class="line">            cache[key] = value;</div><div class="line">            arr.push(key);</div><div class="line">            <span class="keyword">if</span>(arr.length &gt; <span class="number">50</span>)&#123;</div><div class="line">                <span class="keyword">delete</span> cache[arr.shift()];</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> cache[key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="函数的四种调用模式"><a href="#函数的四种调用模式" class="headerlink" title="函数的四种调用模式"></a>函数的四种调用模式</h2><h3 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h3><p>形式: 函数名();<br><code>this: window</code></p>
<h3 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h3><p>形式: 对象名.方法名();<br>this: 调用该方法的对象</p>
<h3 id="构造函数调用模式"><a href="#构造函数调用模式" class="headerlink" title="构造函数调用模式"></a>构造函数调用模式</h3><p>形式: <code>new</code> .构造函数名()<br><code>this: new</code>创建出来的对象</p>
<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObject</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.xxx = <span class="string">"xxx"</span>;</div><div class="line">    o.yyy = <span class="string">"yy"</span>;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p  = createObject();</div></pre></td></tr></table></figure>
<h4 id="寄生模式"><a href="#寄生模式" class="headerlink" title="寄生模式"></a>寄生模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CObject</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.xxx = <span class="string">"xxx"</span>;</div><div class="line">    o.yyy = <span class="string">"yy"</span>;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> CObject();</div></pre></td></tr></table></figure>
<h3 id="上下文调用模式"><a href="#上下文调用模式" class="headerlink" title="上下文调用模式"></a>上下文调用模式</h3><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">函数名.call(对象,参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3.</span>..)</div></pre></td></tr></table></figure>
<ol>
<li>调用该函数</li>
<li>将函数内部的<code>this</code>赋值为<code>call</code>的第一个参数</li>
<li>将第一个参数之后的所有参数，当做实参传递给函数</li>
</ol>
<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">函数名.apply(对象,数组)</div></pre></td></tr></table></figure>
<ol>
<li>调用该函数</li>
<li>将函数内部的<code>this</code>赋值为<code>apply</code>的第一个参数</li>
<li>将第二个参数的数组，依次拆解开，将每一个元素挨个传递给函数做为实参</li>
</ol>
<h5 id="伪数组转换成数组"><a href="#伪数组转换成数组" class="headerlink" title="伪数组转换成数组"></a>伪数组转换成数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrFake = &#123;</div><div class="line">    <span class="number">0</span>:<span class="number">1</span>,</div><div class="line">    <span class="number">1</span>:<span class="number">2</span>,</div><div class="line">    <span class="number">2</span>:<span class="number">3</span>,</div><div class="line">    <span class="attr">length</span>:<span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arrReal = [];</div><div class="line"></div><div class="line">arrReal.push.apply(arrReal, arrFake);</div><div class="line"><span class="comment">//arrReal.push(arrFake[0] , arrFake[1], arrFake[2])   相当于这句代码</span></div></pre></td></tr></table></figure>
<h5 id="求数组最大值"><a href="#求数组最大值" class="headerlink" title="求数组最大值"></a>求数组最大值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">3</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> maxNum = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr);</div></pre></td></tr></table></figure>
<h4 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">""</span>;</div><div class="line">    <span class="keyword">this</span>.money = <span class="number">99999999999999</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    Father.call(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Son();</div></pre></td></tr></table></figure>
<h2 id="沙箱模式"><a href="#沙箱模式" class="headerlink" title="沙箱模式"></a>沙箱模式</h2><p>一个隔离的安全的环境</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">w</span>)</span>&#123;</div><div class="line">    <span class="comment">//需要隔离的代码</span></div><div class="line">    <span class="comment">//最顶上写 变量函数之类的申明</span></div><div class="line">    <span class="comment">//逻辑代码</span></div><div class="line">    <span class="comment">//如果需要，使用window对象向外界暴露接口</span></div><div class="line">&#125;)(<span class="built_in">window</span>)</div></pre></td></tr></table></figure>
<p>为什么要将 <code>window</code> 作为参数传递</p>
<ol>
<li>外面无法访问里面，里面也不要去访问外面的东西</li>
<li>在代码压缩的时候，内置的对象名称无法被压缩，如果使用自己的变量，是可以压缩的</li>
</ol>
<h2 id="forEach-和-map"><a href="#forEach-和-map" class="headerlink" title="forEach 和　map"></a>forEach 和　map</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ,<span class="number">6</span>];</div><div class="line"><span class="comment">//currentEle 当前正在遍历的元素,</span></div><div class="line"><span class="comment">//currentIndex 当前遍历的元素的索引,</span></div><div class="line"><span class="comment">//currentArray 当前正在被遍历的数组</span></div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class="line">    currentArray[currentIndex] = currentEle * <span class="number">2</span>;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//currentEle 当前正在遍历的元素,</span></div><div class="line"><span class="comment">//currentIndex 当前遍历的元素的索引,</span></div><div class="line"><span class="comment">//currentArray 当前正在被遍历的数组</span></div><div class="line"><span class="comment">//map如果回调函数内有返回值，会将所有调用的返回值重新组合成一个数组，作为map方法的返回值</span></div><div class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">currentEle, currentIndex, currentArray</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> currentEle * <span class="number">2</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span></div></pre></td></tr></table></figure>
<ul>
<li>变量不使用<code>var</code>声明会报错</li>
<li>不能删除不允许删除的属性</li>
<li>对象的属性不可以重名</li>
<li>函数的形参不可以重名</li>
<li>不允许使用八进制数据</li>
</ul>
<h2 id="事件兼容性处理"><a href="#事件兼容性处理" class="headerlink" title="事件兼容性处理"></a>事件兼容性处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRegister</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, type, handler</span>)</span>&#123;</div><div class="line">            target.addEventListener(type, handler);</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, type, handler</span>)</span>&#123;</div><div class="line">            target.attachEvent(<span class="string">"on"</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                handler.call(target, <span class="built_in">window</span>.event);</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, type, handler</span>)</span>&#123;</div><div class="line">            target[<span class="string">"on"</span>+type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript高级与面向对象笔记总结！！&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://blog.ihoey.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级篇之part6</title>
    <link href="https://blog.ihoey.com/posts/javascript/2016-11-11-javascript-part6.html"/>
    <id>https://blog.ihoey.com/posts/javascript/2016-11-11-javascript-part6.html</id>
    <published>2016-11-11T11:35:55.000Z</published>
    <updated>2016-11-24T01:31:31.067Z</updated>
    
    <content type="html"><![CDATA[<p>javascript高级与面向对象笔记整理，接part5篇！！</p>
<a id="more"></a>
<h2 id="闭包的练习"><a href="#闭包的练习" class="headerlink" title="闭包的练习"></a>闭包的练习</h2><h3 id="for循环中注册点击事件"><a href="#for循环中注册点击事件" class="headerlink" title="for循环中注册点击事件"></a>for循环中注册点击事件</h3><h3 id="for循环中是用setTimeout"><a href="#for循环中是用setTimeout" class="headerlink" title="for循环中是用setTimeout"></a>for循环中是用setTimeout</h3><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>缓存就是将一些数据，剧院，进行临时的存储，以提高访问效率</p>
<ul>
<li>浏览器缓存</li>
<li>CDN</li>
<li>JS中的缓存</li>
</ul>
<h2 id="使用缓存解决斐波那契数列的性能问题"><a href="#使用缓存解决斐波那契数列的性能问题" class="headerlink" title="使用缓存解决斐波那契数列的性能问题"></a>使用缓存解决斐波那契数列的性能问题</h2><h3 id="有什么性能问题"><a href="#有什么性能问题" class="headerlink" title="有什么性能问题"></a>有什么性能问题</h3><p>使用递归去计算斐波那契数列存在大量的重复的计算，导致计算效率十分底下</p>
<h3 id="如何解决性能问题"><a href="#如何解决性能问题" class="headerlink" title="如何解决性能问题"></a>如何解决性能问题</h3><p>使用缓存</p>
<ol>
<li>创建一个数组充当缓存容器</li>
<li>每次需要计算斐波那契数列的时候，先去缓存中进行查找</li>
<li>如果有就直接返回</li>
<li>如果没有，就去计算，算出来结果之后</li>
<li>将结果存入缓存中</li>
<li>将结果返回</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.创建一个数组充当缓存容器</span></div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibnacci</span>(<span class="params">n</span>)</span>&#123;</div><div class="line"><span class="comment">//2.每次需要计算斐波那契数列的时候，先去缓存中进行查找</span></div><div class="line">	<span class="keyword">var</span> num = arr[n];</div><div class="line">	<span class="keyword">if</span>(num)&#123;</div><div class="line">		<span class="comment">//3.如果有就直接返回</span></div><div class="line">		<span class="keyword">return</span> num;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="comment">//4.如果没有，就去计算，算出来结果之后</span></div><div class="line">		<span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</div><div class="line">			num=<span class="number">1</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">		num = fibnacci(n<span class="number">-1</span>)+fibnacci(n<span class="number">-2</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//5.将结果存入缓存中</span></div><div class="line">		arr[n] = num;</div><div class="line">		<span class="comment">//6.将结果返回</span></div><div class="line">		<span class="keyword">return</span> num;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优化后的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFib</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//1.创建一个数组充当缓存容器</span></div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fibnacci</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="comment">//2.每次需要计算斐波那契数字的时候，先去缓存中进行查找</span></div><div class="line">        <span class="keyword">var</span> num = arr[n];</div><div class="line">        <span class="keyword">if</span>(!num)&#123;</div><div class="line">            <span class="comment">//4.如果没有，就去就算，算出来结果之后，</span></div><div class="line">            <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</div><div class="line">                num = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                num = fibnacci(n<span class="number">-1</span>)+fibnacci(n<span class="number">-2</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//5.将结果存入缓存中</span></div><div class="line">            arr[n] = num;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//6.将结果返回</span></div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fibnacci;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="jQuery缓存实现分析"><a href="#jQuery缓存实现分析" class="headerlink" title="jQuery缓存实现分析"></a>jQuery缓存实现分析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCache</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//需要一个能够存储数据的容器</span></div><div class="line">	<span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line">	<span class="comment">//用来存储 键，并且记录键存入的顺序</span></div><div class="line">	<span class="keyword">var</span> keys = [];</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(value)&#123;</div><div class="line">			cache[key] = value;</div><div class="line">			keys.push(key);</div><div class="line">			<span class="keyword">if</span>(keys.length &gt; <span class="number">50</span>)&#123;</div><div class="line">				<span class="keyword">delete</span> cache[keys.shift()];</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> cache[key];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Jquery缓存源码分析"><a href="#Jquery缓存源码分析" class="headerlink" title="Jquery缓存源码分析"></a>Jquery缓存源码分析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCache</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> keys = [];</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">cache</span>(<span class="params">key,value</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(keys.push(key + <span class="string">" "</span>) &gt; <span class="number">10</span>)&#123;</div><div class="line">		 	<span class="keyword">delete</span> cache[keys.shift()];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> (cache[key + <span class="string">" "</span>] = value);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cache;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> cache = createCache();</div><div class="line">cache(<span class="string">"name"</span>,<span class="string">"mengyan"</span>);</div><div class="line">cache[<span class="string">"name"</span> + <span class="string">" "</span>];</div></pre></td></tr></table></figure>
<h2 id="函数的四种调用形式"><a href="#函数的四种调用形式" class="headerlink" title="函数的四种调用形式"></a>函数的四种调用形式</h2><h3 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h3><p>形式：函数名（）；<br><code>this：window</code></p>
<h3 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h3><p>形式：对项目.方法名（）；<br>this：调用该方法的对象</p>
<h3 id="构造函数调用模式"><a href="#构造函数调用模式" class="headerlink" title="构造函数调用模式"></a>构造函数调用模式</h3><p>形式 <code>new</code> 函数名（）<br>this：new创建出来的对象</p>
<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name = <span class="string">"zs"</span>;</div><div class="line">    o.age = <span class="number">18</span>;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = createPerson();</div></pre></td></tr></table></figure>
<h4 id="寄生模式"><a href="#寄生模式" class="headerlink" title="寄生模式"></a>寄生模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name = <span class="string">"zs"</span>;</div><div class="line">    o.age = <span class="number">18</span>;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</div></pre></td></tr></table></figure>
<h3 id="上下文调用模式"><a href="#上下文调用模式" class="headerlink" title="上下文调用模式"></a>上下文调用模式</h3><p>在其他的调用模式中， <code>this</code> 不可以赋值，也就不可以改变<br>在上下文调用模式中，可以进行手动的设置 <code>this</code> 。</p>
<h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//函数名.call(对象, 参数1, 参数2, 参数3...)</span></div></pre></td></tr></table></figure>
<ol>
<li>调用函数</li>
<li>将函数内的 <code>this</code> 指向第一个参数中的对象</li>
<li>将除第一个参数外的所有参数依次传给函数，做为实参</li>
</ol>
<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//函数名.apply(对象, 数组)</span></div></pre></td></tr></table></figure>
<ol>
<li>调用函数</li>
<li>将函数内的 <code>this</code> 指向第一个参数中的对象</li>
<li>将第二个参数中的数组拆解开，将数组中的元素依次的传给函数当做实参</li>
</ol>
<h4 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.money = <span class="number">100000000000000</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    Parent.call(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.wife = <span class="string">"凤姐"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Son();</div></pre></td></tr></table></figure>
<ol>
<li>使用 <code>new</code> 关键字创建了一个对象</li>
<li>调用构造函数 <code>Son</code> ，将 <code>Son</code> 中的 <code>this</code> 指向刚才创建的对象</li>
<li>在 <code>Son</code> 构造函数中，是用上下文调用模式去调用 <code>Parent</code> 函数，</li>
<li>调用 <code>Person</code> 函数，将 <code>Parent</code> 中的 <code>this</code> 指向 <code>song</code> 中的 <code>this</code> ，也就是用 <code>new</code> 创建出来的那个对象</li>
<li><code>Parent</code> 中会使用 <code>this</code> 给对象添加成员</li>
<li><code>Parent</code> 调用结束， <code>Son</code> 中的 <code>this</code> 也就有了 <code>Parent</code> 中添加的那些个成员</li>
</ol>
<p>将伪数组转换成数组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fakeArr = &#123;</div><div class="line">    <span class="number">0</span>:<span class="string">"a"</span>,</div><div class="line">    <span class="number">1</span>:<span class="string">"b"</span>,</div><div class="line">    <span class="number">2</span>:<span class="string">"c"</span>,</div><div class="line">    <span class="attr">length</span>:<span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.push.apply(arr, fakeArr);</div><div class="line"><span class="built_in">Array</span>.prototype.concat.apply(arr, fakeArr);</div><div class="line"></div><div class="line"></div><div class="line">arr.concat.apply(arr, fakeArr);</div></pre></td></tr></table></figure>
<p>求数组的最大值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span> ,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">34</span>,<span class="number">3</span>,<span class="number">43</span>,<span class="number">43</span>,<span class="number">43</span>,<span class="number">4</span>,<span class="number">34</span>,<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr);</div><div class="line"><span class="comment">//Math.max(1,2,3,43,4,3,43,43,43)</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript高级与面向对象笔记整理，接part5篇！！&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.ihoey.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://blog.ihoey.com/tags/javascript/"/>
    
  </entry>
  
</feed>
